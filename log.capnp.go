// Code generated by capnpc-go. DO NOT EDIT.

package main

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

// Constants defined in log.capnp.
const (
	LogVersion = int32(1)
)

type Map capnp.Struct

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xf8b13ce2183eb696

func NewMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func NewRootMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map(st), err
}

func ReadRootMap(msg *capnp.Message) (Map, error) {
	root, err := msg.Root()
	return Map(root.Struct()), err
}

func (s Map) String() string {
	str, _ := text.Marshal(0xf8b13ce2183eb696, capnp.Struct(s))
	return str
}

func (s Map) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map) DecodeFromPtr(p capnp.Ptr) Map {
	return Map(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map) Entries() (Map_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Map_Entry_List(p.List()), err
}

func (s Map) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map) SetEntries(v Map_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Map_Entry_List, preferring placement in s's segment.
func (s Map) NewEntries(n int32) (Map_Entry_List, error) {
	l, err := NewMap_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Map_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Map_List is a list of Map.
type Map_List = capnp.StructList[Map]

// NewMap creates a new list of Map.
func NewMap_List(s *capnp.Segment, sz int32) (Map_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Map](l), err
}

// Map_Future is a wrapper for a Map promised by a client call.
type Map_Future struct{ *capnp.Future }

func (f Map_Future) Struct() (Map, error) {
	p, err := f.Future.Ptr()
	return Map(p.Struct()), err
}

type Map_Entry capnp.Struct

// Map_Entry_TypeID is the unique identifier for the type Map_Entry.
const Map_Entry_TypeID = 0xa5dfdd084a6eea0e

func NewMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func NewRootMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry(st), err
}

func ReadRootMap_Entry(msg *capnp.Message) (Map_Entry, error) {
	root, err := msg.Root()
	return Map_Entry(root.Struct()), err
}

func (s Map_Entry) String() string {
	str, _ := text.Marshal(0xa5dfdd084a6eea0e, capnp.Struct(s))
	return str
}

func (s Map_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Map_Entry) DecodeFromPtr(p capnp.Ptr) Map_Entry {
	return Map_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Map_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Map_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Map_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Map_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Map_Entry) Key() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Map_Entry) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Map_Entry) SetKey(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Map_Entry) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Map_Entry) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Map_Entry) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Map_Entry_List is a list of Map_Entry.
type Map_Entry_List = capnp.StructList[Map_Entry]

// NewMap_Entry creates a new list of Map_Entry.
func NewMap_Entry_List(s *capnp.Segment, sz int32) (Map_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Map_Entry](l), err
}

// Map_Entry_Future is a wrapper for a Map_Entry promised by a client call.
type Map_Entry_Future struct{ *capnp.Future }

func (f Map_Entry_Future) Struct() (Map_Entry, error) {
	p, err := f.Future.Ptr()
	return Map_Entry(p.Struct()), err
}
func (p Map_Entry_Future) Key() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Map_Entry_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LongitudinalPersonality uint16

// LongitudinalPersonality_TypeID is the unique identifier for the type LongitudinalPersonality.
const LongitudinalPersonality_TypeID = 0xd692e23d1a247d99

// Values of LongitudinalPersonality.
const (
	LongitudinalPersonality_aggressive LongitudinalPersonality = 0
	LongitudinalPersonality_standard   LongitudinalPersonality = 1
	LongitudinalPersonality_relaxed    LongitudinalPersonality = 2
)

// String returns the enum's constant name.
func (c LongitudinalPersonality) String() string {
	switch c {
	case LongitudinalPersonality_aggressive:
		return "aggressive"
	case LongitudinalPersonality_standard:
		return "standard"
	case LongitudinalPersonality_relaxed:
		return "relaxed"

	default:
		return ""
	}
}

// LongitudinalPersonalityFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LongitudinalPersonalityFromString(c string) LongitudinalPersonality {
	switch c {
	case "aggressive":
		return LongitudinalPersonality_aggressive
	case "standard":
		return LongitudinalPersonality_standard
	case "relaxed":
		return LongitudinalPersonality_relaxed

	default:
		return 0
	}
}

type LongitudinalPersonality_List = capnp.EnumList[LongitudinalPersonality]

func NewLongitudinalPersonality_List(s *capnp.Segment, sz int32) (LongitudinalPersonality_List, error) {
	return capnp.NewEnumList[LongitudinalPersonality](s, sz)
}

type InitData capnp.Struct

// InitData_TypeID is the unique identifier for the type InitData.
const InitData_TypeID = 0xe71008caeb3fb65c

func NewInitData(s *capnp.Segment) (InitData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17})
	return InitData(st), err
}

func NewRootInitData(s *capnp.Segment) (InitData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17})
	return InitData(st), err
}

func ReadRootInitData(msg *capnp.Message) (InitData, error) {
	root, err := msg.Root()
	return InitData(root.Struct()), err
}

func (s InitData) String() string {
	str, _ := text.Marshal(0xe71008caeb3fb65c, capnp.Struct(s))
	return str
}

func (s InitData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData) DecodeFromPtr(p capnp.Ptr) InitData {
	return InitData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData) KernelArgs() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s InitData) HasKernelArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData) SetKernelArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewKernelArgs sets the kernelArgs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s InitData) NewKernelArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s InitData) KernelVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.Text(), err
}

func (s InitData) HasKernelVersion() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s InitData) KernelVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.TextBytes(), err
}

func (s InitData) SetKernelVersion(v string) error {
	return capnp.Struct(s).SetText(12, v)
}

func (s InitData) OsVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return p.Text(), err
}

func (s InitData) HasOsVersion() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s InitData) OsVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return p.TextBytes(), err
}

func (s InitData) SetOsVersion(v string) error {
	return capnp.Struct(s).SetText(15, v)
}

func (s InitData) DongleId() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InitData) HasDongleId() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InitData) DongleIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InitData) SetDongleId(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s InitData) DeviceType() InitData_DeviceType {
	return InitData_DeviceType(capnp.Struct(s).Uint16(0))
}

func (s InitData) SetDeviceType(v InitData_DeviceType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s InitData) Version() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s InitData) HasVersion() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s InitData) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s InitData) SetVersion(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s InitData) GitCommit() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s InitData) HasGitCommit() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s InitData) GitCommitBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s InitData) SetGitCommit(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s InitData) GitBranch() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s InitData) HasGitBranch() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s InitData) GitBranchBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s InitData) SetGitBranch(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s InitData) GitRemote() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s InitData) HasGitRemote() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s InitData) GitRemoteBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s InitData) SetGitRemote(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s InitData) AndroidProperties() (Map, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return Map(p.Struct()), err
}

func (s InitData) HasAndroidProperties() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s InitData) SetAndroidProperties(v Map) error {
	return capnp.Struct(s).SetPtr(13, capnp.Struct(v).ToPtr())
}

// NewAndroidProperties sets the androidProperties field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s InitData) NewAndroidProperties() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(13, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) PandaInfo() (InitData_PandaInfo, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return InitData_PandaInfo(p.Struct()), err
}

func (s InitData) HasPandaInfo() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s InitData) SetPandaInfo(v InitData_PandaInfo) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewPandaInfo sets the pandaInfo field to a newly
// allocated InitData_PandaInfo struct, preferring placement in s's segment.
func (s InitData) NewPandaInfo() (InitData_PandaInfo, error) {
	ss, err := NewInitData_PandaInfo(capnp.Struct(s).Segment())
	if err != nil {
		return InitData_PandaInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) Dirty() bool {
	return capnp.Struct(s).Bit(16)
}

func (s InitData) SetDirty(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s InitData) Passive() bool {
	return capnp.Struct(s).Bit(17)
}

func (s InitData) SetPassive(v bool) {
	capnp.Struct(s).SetBit(17, v)
}

func (s InitData) Params() (Map, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return Map(p.Struct()), err
}

func (s InitData) HasParams() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s InitData) SetParams(v Map) error {
	return capnp.Struct(s).SetPtr(14, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s InitData) NewParams() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(14, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) Commands() (Map, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return Map(p.Struct()), err
}

func (s InitData) HasCommands() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s InitData) SetCommands(v Map) error {
	return capnp.Struct(s).SetPtr(16, capnp.Struct(v).ToPtr())
}

// NewCommands sets the commands field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s InitData) NewCommands() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(16, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) GctxDEPRECATED() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s InitData) HasGctxDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InitData) GctxDEPRECATEDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s InitData) SetGctxDEPRECATED(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s InitData) AndroidBuildInfo() (InitData_AndroidBuildInfo, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return InitData_AndroidBuildInfo(p.Struct()), err
}

func (s InitData) HasAndroidBuildInfo() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s InitData) SetAndroidBuildInfo(v InitData_AndroidBuildInfo) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewAndroidBuildInfo sets the androidBuildInfo field to a newly
// allocated InitData_AndroidBuildInfo struct, preferring placement in s's segment.
func (s InitData) NewAndroidBuildInfo() (InitData_AndroidBuildInfo, error) {
	ss, err := NewInitData_AndroidBuildInfo(capnp.Struct(s).Segment())
	if err != nil {
		return InitData_AndroidBuildInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) AndroidSensorsDEPRECATED() (InitData_AndroidSensor_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return InitData_AndroidSensor_List(p.List()), err
}

func (s InitData) HasAndroidSensorsDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s InitData) SetAndroidSensorsDEPRECATED(v InitData_AndroidSensor_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAndroidSensorsDEPRECATED sets the androidSensorsDEPRECATED field to a newly
// allocated InitData_AndroidSensor_List, preferring placement in s's segment.
func (s InitData) NewAndroidSensorsDEPRECATED(n int32) (InitData_AndroidSensor_List, error) {
	l, err := NewInitData_AndroidSensor_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return InitData_AndroidSensor_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s InitData) ChffrAndroidExtraDEPRECATED() (InitData_ChffrAndroidExtra, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return InitData_ChffrAndroidExtra(p.Struct()), err
}

func (s InitData) HasChffrAndroidExtraDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s InitData) SetChffrAndroidExtraDEPRECATED(v InitData_ChffrAndroidExtra) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewChffrAndroidExtraDEPRECATED sets the chffrAndroidExtraDEPRECATED field to a newly
// allocated InitData_ChffrAndroidExtra struct, preferring placement in s's segment.
func (s InitData) NewChffrAndroidExtraDEPRECATED() (InitData_ChffrAndroidExtra, error) {
	ss, err := NewInitData_ChffrAndroidExtra(capnp.Struct(s).Segment())
	if err != nil {
		return InitData_ChffrAndroidExtra{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s InitData) IosBuildInfoDEPRECATED() (InitData_IosBuildInfo, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return InitData_IosBuildInfo(p.Struct()), err
}

func (s InitData) HasIosBuildInfoDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s InitData) SetIosBuildInfoDEPRECATED(v InitData_IosBuildInfo) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewIosBuildInfoDEPRECATED sets the iosBuildInfoDEPRECATED field to a newly
// allocated InitData_IosBuildInfo struct, preferring placement in s's segment.
func (s InitData) NewIosBuildInfoDEPRECATED() (InitData_IosBuildInfo, error) {
	ss, err := NewInitData_IosBuildInfo(capnp.Struct(s).Segment())
	if err != nil {
		return InitData_IosBuildInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

// InitData_List is a list of InitData.
type InitData_List = capnp.StructList[InitData]

// NewInitData creates a new list of InitData.
func NewInitData_List(s *capnp.Segment, sz int32) (InitData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 17}, sz)
	return capnp.StructList[InitData](l), err
}

// InitData_Future is a wrapper for a InitData promised by a client call.
type InitData_Future struct{ *capnp.Future }

func (f InitData_Future) Struct() (InitData, error) {
	p, err := f.Future.Ptr()
	return InitData(p.Struct()), err
}
func (p InitData_Future) AndroidProperties() Map_Future {
	return Map_Future{Future: p.Future.Field(13, nil)}
}
func (p InitData_Future) PandaInfo() InitData_PandaInfo_Future {
	return InitData_PandaInfo_Future{Future: p.Future.Field(7, nil)}
}
func (p InitData_Future) Params() Map_Future {
	return Map_Future{Future: p.Future.Field(14, nil)}
}
func (p InitData_Future) Commands() Map_Future {
	return Map_Future{Future: p.Future.Field(16, nil)}
}
func (p InitData_Future) AndroidBuildInfo() InitData_AndroidBuildInfo_Future {
	return InitData_AndroidBuildInfo_Future{Future: p.Future.Field(4, nil)}
}
func (p InitData_Future) ChffrAndroidExtraDEPRECATED() InitData_ChffrAndroidExtra_Future {
	return InitData_ChffrAndroidExtra_Future{Future: p.Future.Field(6, nil)}
}
func (p InitData_Future) IosBuildInfoDEPRECATED() InitData_IosBuildInfo_Future {
	return InitData_IosBuildInfo_Future{Future: p.Future.Field(11, nil)}
}

type InitData_DeviceType uint16

// InitData_DeviceType_TypeID is the unique identifier for the type InitData_DeviceType.
const InitData_DeviceType_TypeID = 0x9d5d7238eba86608

// Values of InitData_DeviceType.
const (
	InitData_DeviceType_unknown      InitData_DeviceType = 0
	InitData_DeviceType_neo          InitData_DeviceType = 1
	InitData_DeviceType_chffrAndroid InitData_DeviceType = 2
	InitData_DeviceType_chffrIos     InitData_DeviceType = 3
	InitData_DeviceType_tici         InitData_DeviceType = 4
	InitData_DeviceType_pc           InitData_DeviceType = 5
	InitData_DeviceType_tizi         InitData_DeviceType = 6
)

// String returns the enum's constant name.
func (c InitData_DeviceType) String() string {
	switch c {
	case InitData_DeviceType_unknown:
		return "unknown"
	case InitData_DeviceType_neo:
		return "neo"
	case InitData_DeviceType_chffrAndroid:
		return "chffrAndroid"
	case InitData_DeviceType_chffrIos:
		return "chffrIos"
	case InitData_DeviceType_tici:
		return "tici"
	case InitData_DeviceType_pc:
		return "pc"
	case InitData_DeviceType_tizi:
		return "tizi"

	default:
		return ""
	}
}

// InitData_DeviceTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func InitData_DeviceTypeFromString(c string) InitData_DeviceType {
	switch c {
	case "unknown":
		return InitData_DeviceType_unknown
	case "neo":
		return InitData_DeviceType_neo
	case "chffrAndroid":
		return InitData_DeviceType_chffrAndroid
	case "chffrIos":
		return InitData_DeviceType_chffrIos
	case "tici":
		return InitData_DeviceType_tici
	case "pc":
		return InitData_DeviceType_pc
	case "tizi":
		return InitData_DeviceType_tizi

	default:
		return 0
	}
}

type InitData_DeviceType_List = capnp.EnumList[InitData_DeviceType]

func NewInitData_DeviceType_List(s *capnp.Segment, sz int32) (InitData_DeviceType_List, error) {
	return capnp.NewEnumList[InitData_DeviceType](s, sz)
}

type InitData_PandaInfo capnp.Struct

// InitData_PandaInfo_TypeID is the unique identifier for the type InitData_PandaInfo.
const InitData_PandaInfo_TypeID = 0xe673e8725cdff0ad

func NewInitData_PandaInfo(s *capnp.Segment) (InitData_PandaInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InitData_PandaInfo(st), err
}

func NewRootInitData_PandaInfo(s *capnp.Segment) (InitData_PandaInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InitData_PandaInfo(st), err
}

func ReadRootInitData_PandaInfo(msg *capnp.Message) (InitData_PandaInfo, error) {
	root, err := msg.Root()
	return InitData_PandaInfo(root.Struct()), err
}

func (s InitData_PandaInfo) String() string {
	str, _ := text.Marshal(0xe673e8725cdff0ad, capnp.Struct(s))
	return str
}

func (s InitData_PandaInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData_PandaInfo) DecodeFromPtr(p capnp.Ptr) InitData_PandaInfo {
	return InitData_PandaInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData_PandaInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData_PandaInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData_PandaInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData_PandaInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData_PandaInfo) HasPanda() bool {
	return capnp.Struct(s).Bit(0)
}

func (s InitData_PandaInfo) SetHasPanda(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s InitData_PandaInfo) DongleId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InitData_PandaInfo) HasDongleId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData_PandaInfo) DongleIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InitData_PandaInfo) SetDongleId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s InitData_PandaInfo) StVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s InitData_PandaInfo) HasStVersion() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InitData_PandaInfo) StVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s InitData_PandaInfo) SetStVersion(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s InitData_PandaInfo) EspVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InitData_PandaInfo) HasEspVersion() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InitData_PandaInfo) EspVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InitData_PandaInfo) SetEspVersion(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// InitData_PandaInfo_List is a list of InitData_PandaInfo.
type InitData_PandaInfo_List = capnp.StructList[InitData_PandaInfo]

// NewInitData_PandaInfo creates a new list of InitData_PandaInfo.
func NewInitData_PandaInfo_List(s *capnp.Segment, sz int32) (InitData_PandaInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[InitData_PandaInfo](l), err
}

// InitData_PandaInfo_Future is a wrapper for a InitData_PandaInfo promised by a client call.
type InitData_PandaInfo_Future struct{ *capnp.Future }

func (f InitData_PandaInfo_Future) Struct() (InitData_PandaInfo, error) {
	p, err := f.Future.Ptr()
	return InitData_PandaInfo(p.Struct()), err
}

type InitData_AndroidBuildInfo capnp.Struct

// InitData_AndroidBuildInfo_TypeID is the unique identifier for the type InitData_AndroidBuildInfo.
const InitData_AndroidBuildInfo_TypeID = 0xfe2919d5c21f426c

func NewInitData_AndroidBuildInfo(s *capnp.Segment) (InitData_AndroidBuildInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 21})
	return InitData_AndroidBuildInfo(st), err
}

func NewRootInitData_AndroidBuildInfo(s *capnp.Segment) (InitData_AndroidBuildInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 21})
	return InitData_AndroidBuildInfo(st), err
}

func ReadRootInitData_AndroidBuildInfo(msg *capnp.Message) (InitData_AndroidBuildInfo, error) {
	root, err := msg.Root()
	return InitData_AndroidBuildInfo(root.Struct()), err
}

func (s InitData_AndroidBuildInfo) String() string {
	str, _ := text.Marshal(0xfe2919d5c21f426c, capnp.Struct(s))
	return str
}

func (s InitData_AndroidBuildInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData_AndroidBuildInfo) DecodeFromPtr(p capnp.Ptr) InitData_AndroidBuildInfo {
	return InitData_AndroidBuildInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData_AndroidBuildInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData_AndroidBuildInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData_AndroidBuildInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData_AndroidBuildInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData_AndroidBuildInfo) Board() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasBoard() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData_AndroidBuildInfo) BoardBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetBoard(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s InitData_AndroidBuildInfo) Bootloader() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasBootloader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InitData_AndroidBuildInfo) BootloaderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetBootloader(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s InitData_AndroidBuildInfo) Brand() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasBrand() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InitData_AndroidBuildInfo) BrandBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetBrand(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s InitData_AndroidBuildInfo) Device() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasDevice() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s InitData_AndroidBuildInfo) DeviceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetDevice(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s InitData_AndroidBuildInfo) Display() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasDisplay() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s InitData_AndroidBuildInfo) DisplayBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetDisplay(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s InitData_AndroidBuildInfo) Fingerprint() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasFingerprint() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s InitData_AndroidBuildInfo) FingerprintBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetFingerprint(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s InitData_AndroidBuildInfo) Hardware() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasHardware() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s InitData_AndroidBuildInfo) HardwareBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetHardware(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

func (s InitData_AndroidBuildInfo) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasHost() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s InitData_AndroidBuildInfo) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetHost(v string) error {
	return capnp.Struct(s).SetText(7, v)
}

func (s InitData_AndroidBuildInfo) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasId() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s InitData_AndroidBuildInfo) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetId(v string) error {
	return capnp.Struct(s).SetText(8, v)
}

func (s InitData_AndroidBuildInfo) Manufacturer() (string, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasManufacturer() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s InitData_AndroidBuildInfo) ManufacturerBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetManufacturer(v string) error {
	return capnp.Struct(s).SetText(9, v)
}

func (s InitData_AndroidBuildInfo) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasModel() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s InitData_AndroidBuildInfo) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetModel(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s InitData_AndroidBuildInfo) Product() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasProduct() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s InitData_AndroidBuildInfo) ProductBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetProduct(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s InitData_AndroidBuildInfo) RadioVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasRadioVersion() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s InitData_AndroidBuildInfo) RadioVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetRadioVersion(v string) error {
	return capnp.Struct(s).SetText(12, v)
}

func (s InitData_AndroidBuildInfo) Serial() (string, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasSerial() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s InitData_AndroidBuildInfo) SerialBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetSerial(v string) error {
	return capnp.Struct(s).SetText(13, v)
}

func (s InitData_AndroidBuildInfo) SupportedAbis() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.TextList(p.List()), err
}

func (s InitData_AndroidBuildInfo) HasSupportedAbis() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s InitData_AndroidBuildInfo) SetSupportedAbis(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewSupportedAbis sets the supportedAbis field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s InitData_AndroidBuildInfo) NewSupportedAbis(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s InitData_AndroidBuildInfo) Tags() (string, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasTags() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s InitData_AndroidBuildInfo) TagsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetTags(v string) error {
	return capnp.Struct(s).SetText(15, v)
}

func (s InitData_AndroidBuildInfo) Time() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s InitData_AndroidBuildInfo) SetTime(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s InitData_AndroidBuildInfo) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasType() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s InitData_AndroidBuildInfo) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetType(v string) error {
	return capnp.Struct(s).SetText(16, v)
}

func (s InitData_AndroidBuildInfo) User() (string, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasUser() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s InitData_AndroidBuildInfo) UserBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetUser(v string) error {
	return capnp.Struct(s).SetText(17, v)
}

func (s InitData_AndroidBuildInfo) VersionCodename() (string, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasVersionCodename() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s InitData_AndroidBuildInfo) VersionCodenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetVersionCodename(v string) error {
	return capnp.Struct(s).SetText(18, v)
}

func (s InitData_AndroidBuildInfo) VersionRelease() (string, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasVersionRelease() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s InitData_AndroidBuildInfo) VersionReleaseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetVersionRelease(v string) error {
	return capnp.Struct(s).SetText(19, v)
}

func (s InitData_AndroidBuildInfo) VersionSdk() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InitData_AndroidBuildInfo) SetVersionSdk(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s InitData_AndroidBuildInfo) VersionSecurityPatch() (string, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return p.Text(), err
}

func (s InitData_AndroidBuildInfo) HasVersionSecurityPatch() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s InitData_AndroidBuildInfo) VersionSecurityPatchBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return p.TextBytes(), err
}

func (s InitData_AndroidBuildInfo) SetVersionSecurityPatch(v string) error {
	return capnp.Struct(s).SetText(20, v)
}

// InitData_AndroidBuildInfo_List is a list of InitData_AndroidBuildInfo.
type InitData_AndroidBuildInfo_List = capnp.StructList[InitData_AndroidBuildInfo]

// NewInitData_AndroidBuildInfo creates a new list of InitData_AndroidBuildInfo.
func NewInitData_AndroidBuildInfo_List(s *capnp.Segment, sz int32) (InitData_AndroidBuildInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 21}, sz)
	return capnp.StructList[InitData_AndroidBuildInfo](l), err
}

// InitData_AndroidBuildInfo_Future is a wrapper for a InitData_AndroidBuildInfo promised by a client call.
type InitData_AndroidBuildInfo_Future struct{ *capnp.Future }

func (f InitData_AndroidBuildInfo_Future) Struct() (InitData_AndroidBuildInfo, error) {
	p, err := f.Future.Ptr()
	return InitData_AndroidBuildInfo(p.Struct()), err
}

type InitData_AndroidSensor capnp.Struct

// InitData_AndroidSensor_TypeID is the unique identifier for the type InitData_AndroidSensor.
const InitData_AndroidSensor_TypeID = 0x9b513b93a887dbcd

func NewInitData_AndroidSensor(s *capnp.Segment) (InitData_AndroidSensor, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return InitData_AndroidSensor(st), err
}

func NewRootInitData_AndroidSensor(s *capnp.Segment) (InitData_AndroidSensor, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3})
	return InitData_AndroidSensor(st), err
}

func ReadRootInitData_AndroidSensor(msg *capnp.Message) (InitData_AndroidSensor, error) {
	root, err := msg.Root()
	return InitData_AndroidSensor(root.Struct()), err
}

func (s InitData_AndroidSensor) String() string {
	str, _ := text.Marshal(0x9b513b93a887dbcd, capnp.Struct(s))
	return str
}

func (s InitData_AndroidSensor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData_AndroidSensor) DecodeFromPtr(p capnp.Ptr) InitData_AndroidSensor {
	return InitData_AndroidSensor(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData_AndroidSensor) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData_AndroidSensor) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData_AndroidSensor) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData_AndroidSensor) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData_AndroidSensor) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s InitData_AndroidSensor) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s InitData_AndroidSensor) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InitData_AndroidSensor) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData_AndroidSensor) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InitData_AndroidSensor) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s InitData_AndroidSensor) Vendor() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s InitData_AndroidSensor) HasVendor() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InitData_AndroidSensor) VendorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s InitData_AndroidSensor) SetVendor(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s InitData_AndroidSensor) Version() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s InitData_AndroidSensor) SetVersion(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s InitData_AndroidSensor) Handle() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s InitData_AndroidSensor) SetHandle(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s InitData_AndroidSensor) Type() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s InitData_AndroidSensor) SetType(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s InitData_AndroidSensor) MaxRange() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s InitData_AndroidSensor) SetMaxRange(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s InitData_AndroidSensor) Resolution() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s InitData_AndroidSensor) SetResolution(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s InitData_AndroidSensor) Power() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s InitData_AndroidSensor) SetPower(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s InitData_AndroidSensor) MinDelay() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s InitData_AndroidSensor) SetMinDelay(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s InitData_AndroidSensor) FifoReservedEventCount() uint32 {
	return capnp.Struct(s).Uint32(32)
}

func (s InitData_AndroidSensor) SetFifoReservedEventCount(v uint32) {
	capnp.Struct(s).SetUint32(32, v)
}

func (s InitData_AndroidSensor) FifoMaxEventCount() uint32 {
	return capnp.Struct(s).Uint32(36)
}

func (s InitData_AndroidSensor) SetFifoMaxEventCount(v uint32) {
	capnp.Struct(s).SetUint32(36, v)
}

func (s InitData_AndroidSensor) StringType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InitData_AndroidSensor) HasStringType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InitData_AndroidSensor) StringTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InitData_AndroidSensor) SetStringType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s InitData_AndroidSensor) MaxDelay() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s InitData_AndroidSensor) SetMaxDelay(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

// InitData_AndroidSensor_List is a list of InitData_AndroidSensor.
type InitData_AndroidSensor_List = capnp.StructList[InitData_AndroidSensor]

// NewInitData_AndroidSensor creates a new list of InitData_AndroidSensor.
func NewInitData_AndroidSensor_List(s *capnp.Segment, sz int32) (InitData_AndroidSensor_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 3}, sz)
	return capnp.StructList[InitData_AndroidSensor](l), err
}

// InitData_AndroidSensor_Future is a wrapper for a InitData_AndroidSensor promised by a client call.
type InitData_AndroidSensor_Future struct{ *capnp.Future }

func (f InitData_AndroidSensor_Future) Struct() (InitData_AndroidSensor, error) {
	p, err := f.Future.Ptr()
	return InitData_AndroidSensor(p.Struct()), err
}

type InitData_ChffrAndroidExtra capnp.Struct

// InitData_ChffrAndroidExtra_TypeID is the unique identifier for the type InitData_ChffrAndroidExtra.
const InitData_ChffrAndroidExtra_TypeID = 0x9cfb5d53a4f615a5

func NewInitData_ChffrAndroidExtra(s *capnp.Segment) (InitData_ChffrAndroidExtra, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InitData_ChffrAndroidExtra(st), err
}

func NewRootInitData_ChffrAndroidExtra(s *capnp.Segment) (InitData_ChffrAndroidExtra, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InitData_ChffrAndroidExtra(st), err
}

func ReadRootInitData_ChffrAndroidExtra(msg *capnp.Message) (InitData_ChffrAndroidExtra, error) {
	root, err := msg.Root()
	return InitData_ChffrAndroidExtra(root.Struct()), err
}

func (s InitData_ChffrAndroidExtra) String() string {
	str, _ := text.Marshal(0x9cfb5d53a4f615a5, capnp.Struct(s))
	return str
}

func (s InitData_ChffrAndroidExtra) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData_ChffrAndroidExtra) DecodeFromPtr(p capnp.Ptr) InitData_ChffrAndroidExtra {
	return InitData_ChffrAndroidExtra(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData_ChffrAndroidExtra) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData_ChffrAndroidExtra) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData_ChffrAndroidExtra) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData_ChffrAndroidExtra) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData_ChffrAndroidExtra) AllCameraCharacteristics() (Map, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Map(p.Struct()), err
}

func (s InitData_ChffrAndroidExtra) HasAllCameraCharacteristics() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData_ChffrAndroidExtra) SetAllCameraCharacteristics(v Map) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAllCameraCharacteristics sets the allCameraCharacteristics field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s InitData_ChffrAndroidExtra) NewAllCameraCharacteristics() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// InitData_ChffrAndroidExtra_List is a list of InitData_ChffrAndroidExtra.
type InitData_ChffrAndroidExtra_List = capnp.StructList[InitData_ChffrAndroidExtra]

// NewInitData_ChffrAndroidExtra creates a new list of InitData_ChffrAndroidExtra.
func NewInitData_ChffrAndroidExtra_List(s *capnp.Segment, sz int32) (InitData_ChffrAndroidExtra_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[InitData_ChffrAndroidExtra](l), err
}

// InitData_ChffrAndroidExtra_Future is a wrapper for a InitData_ChffrAndroidExtra promised by a client call.
type InitData_ChffrAndroidExtra_Future struct{ *capnp.Future }

func (f InitData_ChffrAndroidExtra_Future) Struct() (InitData_ChffrAndroidExtra, error) {
	p, err := f.Future.Ptr()
	return InitData_ChffrAndroidExtra(p.Struct()), err
}
func (p InitData_ChffrAndroidExtra_Future) AllCameraCharacteristics() Map_Future {
	return Map_Future{Future: p.Future.Field(0, nil)}
}

type InitData_IosBuildInfo capnp.Struct

// InitData_IosBuildInfo_TypeID is the unique identifier for the type InitData_IosBuildInfo.
const InitData_IosBuildInfo_TypeID = 0xd97e3b28239f5580

func NewInitData_IosBuildInfo(s *capnp.Segment) (InitData_IosBuildInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InitData_IosBuildInfo(st), err
}

func NewRootInitData_IosBuildInfo(s *capnp.Segment) (InitData_IosBuildInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return InitData_IosBuildInfo(st), err
}

func ReadRootInitData_IosBuildInfo(msg *capnp.Message) (InitData_IosBuildInfo, error) {
	root, err := msg.Root()
	return InitData_IosBuildInfo(root.Struct()), err
}

func (s InitData_IosBuildInfo) String() string {
	str, _ := text.Marshal(0xd97e3b28239f5580, capnp.Struct(s))
	return str
}

func (s InitData_IosBuildInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InitData_IosBuildInfo) DecodeFromPtr(p capnp.Ptr) InitData_IosBuildInfo {
	return InitData_IosBuildInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InitData_IosBuildInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InitData_IosBuildInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InitData_IosBuildInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InitData_IosBuildInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InitData_IosBuildInfo) AppVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s InitData_IosBuildInfo) HasAppVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InitData_IosBuildInfo) AppVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s InitData_IosBuildInfo) SetAppVersion(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s InitData_IosBuildInfo) AppBuild() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s InitData_IosBuildInfo) SetAppBuild(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s InitData_IosBuildInfo) OsVersion() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s InitData_IosBuildInfo) HasOsVersion() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s InitData_IosBuildInfo) OsVersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s InitData_IosBuildInfo) SetOsVersion(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s InitData_IosBuildInfo) DeviceModel() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s InitData_IosBuildInfo) HasDeviceModel() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s InitData_IosBuildInfo) DeviceModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s InitData_IosBuildInfo) SetDeviceModel(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// InitData_IosBuildInfo_List is a list of InitData_IosBuildInfo.
type InitData_IosBuildInfo_List = capnp.StructList[InitData_IosBuildInfo]

// NewInitData_IosBuildInfo creates a new list of InitData_IosBuildInfo.
func NewInitData_IosBuildInfo_List(s *capnp.Segment, sz int32) (InitData_IosBuildInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[InitData_IosBuildInfo](l), err
}

// InitData_IosBuildInfo_Future is a wrapper for a InitData_IosBuildInfo promised by a client call.
type InitData_IosBuildInfo_Future struct{ *capnp.Future }

func (f InitData_IosBuildInfo_Future) Struct() (InitData_IosBuildInfo, error) {
	p, err := f.Future.Ptr()
	return InitData_IosBuildInfo(p.Struct()), err
}

type FrameData capnp.Struct

// FrameData_TypeID is the unique identifier for the type FrameData.
const FrameData_TypeID = 0xea0245f695ae0a33

func NewFrameData(s *capnp.Segment) (FrameData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 7})
	return FrameData(st), err
}

func NewRootFrameData(s *capnp.Segment) (FrameData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 7})
	return FrameData(st), err
}

func ReadRootFrameData(msg *capnp.Message) (FrameData, error) {
	root, err := msg.Root()
	return FrameData(root.Struct()), err
}

func (s FrameData) String() string {
	str, _ := text.Marshal(0xea0245f695ae0a33, capnp.Struct(s))
	return str
}

func (s FrameData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrameData) DecodeFromPtr(p capnp.Ptr) FrameData {
	return FrameData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrameData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrameData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrameData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrameData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrameData) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s FrameData) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s FrameData) EncodeId() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s FrameData) SetEncodeId(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s FrameData) FrameIdSensor() uint32 {
	return capnp.Struct(s).Uint32(76)
}

func (s FrameData) SetFrameIdSensor(v uint32) {
	capnp.Struct(s).SetUint32(76, v)
}

func (s FrameData) FrameType() FrameData_FrameType {
	return FrameData_FrameType(capnp.Struct(s).Uint16(28))
}

func (s FrameData) SetFrameType(v FrameData_FrameType) {
	capnp.Struct(s).SetUint16(28, uint16(v))
}

func (s FrameData) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s FrameData) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s FrameData) TimestampSof() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s FrameData) SetTimestampSof(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s FrameData) ProcessingTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72))
}

func (s FrameData) SetProcessingTime(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v))
}

func (s FrameData) IntegLines() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s FrameData) SetIntegLines(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s FrameData) HighConversionGain() bool {
	return capnp.Struct(s).Bit(240)
}

func (s FrameData) SetHighConversionGain(v bool) {
	capnp.Struct(s).SetBit(240, v)
}

func (s FrameData) Gain() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s FrameData) SetGain(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s FrameData) MeasuredGreyFraction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s FrameData) SetMeasuredGreyFraction(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s FrameData) TargetGreyFraction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s FrameData) SetTargetGreyFraction(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s FrameData) ExposureValPercent() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(84))
}

func (s FrameData) SetExposureValPercent(v float32) {
	capnp.Struct(s).SetUint32(84, math.Float32bits(v))
}

func (s FrameData) Transform() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s FrameData) HasTransform() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s FrameData) SetTransform(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTransform sets the transform field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s FrameData) NewTransform(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s FrameData) Image() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s FrameData) HasImage() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrameData) SetImage(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s FrameData) TemperaturesC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s FrameData) HasTemperaturesC() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s FrameData) SetTemperaturesC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewTemperaturesC sets the temperaturesC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s FrameData) NewTemperaturesC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s FrameData) Sensor() FrameData_ImageSensor {
	return FrameData_ImageSensor(capnp.Struct(s).Uint16(80))
}

func (s FrameData) SetSensor(v FrameData_ImageSensor) {
	capnp.Struct(s).SetUint16(80, uint16(v))
}

func (s FrameData) FrameLengthDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s FrameData) SetFrameLengthDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s FrameData) GlobalGainDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s FrameData) SetGlobalGainDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s FrameData) AndroidCaptureResultDEPRECATED() (FrameData_AndroidCaptureResult, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return FrameData_AndroidCaptureResult(p.Struct()), err
}

func (s FrameData) HasAndroidCaptureResultDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s FrameData) SetAndroidCaptureResultDEPRECATED(v FrameData_AndroidCaptureResult) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAndroidCaptureResultDEPRECATED sets the androidCaptureResultDEPRECATED field to a newly
// allocated FrameData_AndroidCaptureResult struct, preferring placement in s's segment.
func (s FrameData) NewAndroidCaptureResultDEPRECATED() (FrameData_AndroidCaptureResult, error) {
	ss, err := NewFrameData_AndroidCaptureResult(capnp.Struct(s).Segment())
	if err != nil {
		return FrameData_AndroidCaptureResult{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s FrameData) LensPosDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s FrameData) SetLensPosDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s FrameData) LensSagDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s FrameData) SetLensSagDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s FrameData) LensErrDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s FrameData) SetLensErrDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s FrameData) LensTruePosDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s FrameData) SetLensTruePosDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s FrameData) FocusValDEPRECATED() (capnp.Int16List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int16List(p.List()), err
}

func (s FrameData) HasFocusValDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s FrameData) SetFocusValDEPRECATED(v capnp.Int16List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewFocusValDEPRECATED sets the focusValDEPRECATED field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s FrameData) NewFocusValDEPRECATED(n int32) (capnp.Int16List, error) {
	l, err := capnp.NewInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s FrameData) FocusConfDEPRECATED() (capnp.UInt8List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.UInt8List(p.List()), err
}

func (s FrameData) HasFocusConfDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s FrameData) SetFocusConfDEPRECATED(v capnp.UInt8List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewFocusConfDEPRECATED sets the focusConfDEPRECATED field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s FrameData) NewFocusConfDEPRECATED(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s FrameData) SharpnessScoreDEPRECATED() (capnp.UInt16List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.UInt16List(p.List()), err
}

func (s FrameData) HasSharpnessScoreDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s FrameData) SetSharpnessScoreDEPRECATED(v capnp.UInt16List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewSharpnessScoreDEPRECATED sets the sharpnessScoreDEPRECATED field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s FrameData) NewSharpnessScoreDEPRECATED(n int32) (capnp.UInt16List, error) {
	l, err := capnp.NewUInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s FrameData) RecoverStateDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(60))
}

func (s FrameData) SetRecoverStateDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(60, uint32(v))
}

// FrameData_List is a list of FrameData.
type FrameData_List = capnp.StructList[FrameData]

// NewFrameData creates a new list of FrameData.
func NewFrameData_List(s *capnp.Segment, sz int32) (FrameData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 7}, sz)
	return capnp.StructList[FrameData](l), err
}

// FrameData_Future is a wrapper for a FrameData promised by a client call.
type FrameData_Future struct{ *capnp.Future }

func (f FrameData_Future) Struct() (FrameData, error) {
	p, err := f.Future.Ptr()
	return FrameData(p.Struct()), err
}
func (p FrameData_Future) AndroidCaptureResultDEPRECATED() FrameData_AndroidCaptureResult_Future {
	return FrameData_AndroidCaptureResult_Future{Future: p.Future.Field(1, nil)}
}

type FrameData_FrameType uint16

// FrameData_FrameType_TypeID is the unique identifier for the type FrameData_FrameType.
const FrameData_FrameType_TypeID = 0xddb169f01e102879

// Values of FrameData_FrameType.
const (
	FrameData_FrameType_unknown      FrameData_FrameType = 0
	FrameData_FrameType_neo          FrameData_FrameType = 1
	FrameData_FrameType_chffrAndroid FrameData_FrameType = 2
	FrameData_FrameType_front        FrameData_FrameType = 3
)

// String returns the enum's constant name.
func (c FrameData_FrameType) String() string {
	switch c {
	case FrameData_FrameType_unknown:
		return "unknown"
	case FrameData_FrameType_neo:
		return "neo"
	case FrameData_FrameType_chffrAndroid:
		return "chffrAndroid"
	case FrameData_FrameType_front:
		return "front"

	default:
		return ""
	}
}

// FrameData_FrameTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func FrameData_FrameTypeFromString(c string) FrameData_FrameType {
	switch c {
	case "unknown":
		return FrameData_FrameType_unknown
	case "neo":
		return FrameData_FrameType_neo
	case "chffrAndroid":
		return FrameData_FrameType_chffrAndroid
	case "front":
		return FrameData_FrameType_front

	default:
		return 0
	}
}

type FrameData_FrameType_List = capnp.EnumList[FrameData_FrameType]

func NewFrameData_FrameType_List(s *capnp.Segment, sz int32) (FrameData_FrameType_List, error) {
	return capnp.NewEnumList[FrameData_FrameType](s, sz)
}

type FrameData_ImageSensor uint16

// FrameData_ImageSensor_TypeID is the unique identifier for the type FrameData_ImageSensor.
const FrameData_ImageSensor_TypeID = 0xd810b1e7705dd69c

// Values of FrameData_ImageSensor.
const (
	FrameData_ImageSensor_unknown FrameData_ImageSensor = 0
	FrameData_ImageSensor_ar0231  FrameData_ImageSensor = 1
	FrameData_ImageSensor_ox03c10 FrameData_ImageSensor = 2
)

// String returns the enum's constant name.
func (c FrameData_ImageSensor) String() string {
	switch c {
	case FrameData_ImageSensor_unknown:
		return "unknown"
	case FrameData_ImageSensor_ar0231:
		return "ar0231"
	case FrameData_ImageSensor_ox03c10:
		return "ox03c10"

	default:
		return ""
	}
}

// FrameData_ImageSensorFromString returns the enum value with a name,
// or the zero value if there's no such value.
func FrameData_ImageSensorFromString(c string) FrameData_ImageSensor {
	switch c {
	case "unknown":
		return FrameData_ImageSensor_unknown
	case "ar0231":
		return FrameData_ImageSensor_ar0231
	case "ox03c10":
		return FrameData_ImageSensor_ox03c10

	default:
		return 0
	}
}

type FrameData_ImageSensor_List = capnp.EnumList[FrameData_ImageSensor]

func NewFrameData_ImageSensor_List(s *capnp.Segment, sz int32) (FrameData_ImageSensor_List, error) {
	return capnp.NewEnumList[FrameData_ImageSensor](s, sz)
}

type FrameData_AndroidCaptureResult capnp.Struct

// FrameData_AndroidCaptureResult_TypeID is the unique identifier for the type FrameData_AndroidCaptureResult.
const FrameData_AndroidCaptureResult_TypeID = 0xbcc3efbac41d2048

func NewFrameData_AndroidCaptureResult(s *capnp.Segment) (FrameData_AndroidCaptureResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return FrameData_AndroidCaptureResult(st), err
}

func NewRootFrameData_AndroidCaptureResult(s *capnp.Segment) (FrameData_AndroidCaptureResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return FrameData_AndroidCaptureResult(st), err
}

func ReadRootFrameData_AndroidCaptureResult(msg *capnp.Message) (FrameData_AndroidCaptureResult, error) {
	root, err := msg.Root()
	return FrameData_AndroidCaptureResult(root.Struct()), err
}

func (s FrameData_AndroidCaptureResult) String() string {
	str, _ := text.Marshal(0xbcc3efbac41d2048, capnp.Struct(s))
	return str
}

func (s FrameData_AndroidCaptureResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrameData_AndroidCaptureResult) DecodeFromPtr(p capnp.Ptr) FrameData_AndroidCaptureResult {
	return FrameData_AndroidCaptureResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrameData_AndroidCaptureResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrameData_AndroidCaptureResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrameData_AndroidCaptureResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrameData_AndroidCaptureResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrameData_AndroidCaptureResult) Sensitivity() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s FrameData_AndroidCaptureResult) SetSensitivity(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s FrameData_AndroidCaptureResult) FrameDuration() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s FrameData_AndroidCaptureResult) SetFrameDuration(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s FrameData_AndroidCaptureResult) ExposureTime() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s FrameData_AndroidCaptureResult) SetExposureTime(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

func (s FrameData_AndroidCaptureResult) RollingShutterSkew() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s FrameData_AndroidCaptureResult) SetRollingShutterSkew(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s FrameData_AndroidCaptureResult) ColorCorrectionTransform() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s FrameData_AndroidCaptureResult) HasColorCorrectionTransform() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrameData_AndroidCaptureResult) SetColorCorrectionTransform(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewColorCorrectionTransform sets the colorCorrectionTransform field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s FrameData_AndroidCaptureResult) NewColorCorrectionTransform(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s FrameData_AndroidCaptureResult) ColorCorrectionGains() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s FrameData_AndroidCaptureResult) HasColorCorrectionGains() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s FrameData_AndroidCaptureResult) SetColorCorrectionGains(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewColorCorrectionGains sets the colorCorrectionGains field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s FrameData_AndroidCaptureResult) NewColorCorrectionGains(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s FrameData_AndroidCaptureResult) DisplayRotation() int8 {
	return int8(capnp.Struct(s).Uint8(4))
}

func (s FrameData_AndroidCaptureResult) SetDisplayRotation(v int8) {
	capnp.Struct(s).SetUint8(4, uint8(v))
}

// FrameData_AndroidCaptureResult_List is a list of FrameData_AndroidCaptureResult.
type FrameData_AndroidCaptureResult_List = capnp.StructList[FrameData_AndroidCaptureResult]

// NewFrameData_AndroidCaptureResult creates a new list of FrameData_AndroidCaptureResult.
func NewFrameData_AndroidCaptureResult_List(s *capnp.Segment, sz int32) (FrameData_AndroidCaptureResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[FrameData_AndroidCaptureResult](l), err
}

// FrameData_AndroidCaptureResult_Future is a wrapper for a FrameData_AndroidCaptureResult promised by a client call.
type FrameData_AndroidCaptureResult_Future struct{ *capnp.Future }

func (f FrameData_AndroidCaptureResult_Future) Struct() (FrameData_AndroidCaptureResult, error) {
	p, err := f.Future.Ptr()
	return FrameData_AndroidCaptureResult(p.Struct()), err
}

type Thumbnail capnp.Struct

// Thumbnail_TypeID is the unique identifier for the type Thumbnail.
const Thumbnail_TypeID = 0xb65fce64120af7d3

func NewThumbnail(s *capnp.Segment) (Thumbnail, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Thumbnail(st), err
}

func NewRootThumbnail(s *capnp.Segment) (Thumbnail, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Thumbnail(st), err
}

func ReadRootThumbnail(msg *capnp.Message) (Thumbnail, error) {
	root, err := msg.Root()
	return Thumbnail(root.Struct()), err
}

func (s Thumbnail) String() string {
	str, _ := text.Marshal(0xb65fce64120af7d3, capnp.Struct(s))
	return str
}

func (s Thumbnail) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Thumbnail) DecodeFromPtr(p capnp.Ptr) Thumbnail {
	return Thumbnail(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Thumbnail) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Thumbnail) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Thumbnail) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Thumbnail) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Thumbnail) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Thumbnail) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Thumbnail) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Thumbnail) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Thumbnail) Thumbnail() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Thumbnail) HasThumbnail() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Thumbnail) SetThumbnail(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// Thumbnail_List is a list of Thumbnail.
type Thumbnail_List = capnp.StructList[Thumbnail]

// NewThumbnail creates a new list of Thumbnail.
func NewThumbnail_List(s *capnp.Segment, sz int32) (Thumbnail_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Thumbnail](l), err
}

// Thumbnail_Future is a wrapper for a Thumbnail promised by a client call.
type Thumbnail_Future struct{ *capnp.Future }

func (f Thumbnail_Future) Struct() (Thumbnail, error) {
	p, err := f.Future.Ptr()
	return Thumbnail(p.Struct()), err
}

type GPSNMEAData capnp.Struct

// GPSNMEAData_TypeID is the unique identifier for the type GPSNMEAData.
const GPSNMEAData_TypeID = 0x9d291d7813ba4a88

func NewGPSNMEAData(s *capnp.Segment) (GPSNMEAData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GPSNMEAData(st), err
}

func NewRootGPSNMEAData(s *capnp.Segment) (GPSNMEAData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return GPSNMEAData(st), err
}

func ReadRootGPSNMEAData(msg *capnp.Message) (GPSNMEAData, error) {
	root, err := msg.Root()
	return GPSNMEAData(root.Struct()), err
}

func (s GPSNMEAData) String() string {
	str, _ := text.Marshal(0x9d291d7813ba4a88, capnp.Struct(s))
	return str
}

func (s GPSNMEAData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GPSNMEAData) DecodeFromPtr(p capnp.Ptr) GPSNMEAData {
	return GPSNMEAData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GPSNMEAData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GPSNMEAData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GPSNMEAData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GPSNMEAData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GPSNMEAData) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s GPSNMEAData) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s GPSNMEAData) LocalWallTime() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s GPSNMEAData) SetLocalWallTime(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s GPSNMEAData) Nmea() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s GPSNMEAData) HasNmea() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GPSNMEAData) NmeaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s GPSNMEAData) SetNmea(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// GPSNMEAData_List is a list of GPSNMEAData.
type GPSNMEAData_List = capnp.StructList[GPSNMEAData]

// NewGPSNMEAData creates a new list of GPSNMEAData.
func NewGPSNMEAData_List(s *capnp.Segment, sz int32) (GPSNMEAData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[GPSNMEAData](l), err
}

// GPSNMEAData_Future is a wrapper for a GPSNMEAData promised by a client call.
type GPSNMEAData_Future struct{ *capnp.Future }

func (f GPSNMEAData_Future) Struct() (GPSNMEAData, error) {
	p, err := f.Future.Ptr()
	return GPSNMEAData(p.Struct()), err
}

type SensorEventData capnp.Struct
type SensorEventData_Which uint16

const (
	SensorEventData_Which_acceleration         SensorEventData_Which = 0
	SensorEventData_Which_magnetic             SensorEventData_Which = 1
	SensorEventData_Which_orientation          SensorEventData_Which = 2
	SensorEventData_Which_gyro                 SensorEventData_Which = 3
	SensorEventData_Which_pressure             SensorEventData_Which = 4
	SensorEventData_Which_magneticUncalibrated SensorEventData_Which = 5
	SensorEventData_Which_gyroUncalibrated     SensorEventData_Which = 6
	SensorEventData_Which_proximity            SensorEventData_Which = 7
	SensorEventData_Which_light                SensorEventData_Which = 8
	SensorEventData_Which_temperature          SensorEventData_Which = 9
)

func (w SensorEventData_Which) String() string {
	const s = "accelerationmagneticorientationgyropressuremagneticUncalibratedgyroUncalibratedproximitylighttemperature"
	switch w {
	case SensorEventData_Which_acceleration:
		return s[0:12]
	case SensorEventData_Which_magnetic:
		return s[12:20]
	case SensorEventData_Which_orientation:
		return s[20:31]
	case SensorEventData_Which_gyro:
		return s[31:35]
	case SensorEventData_Which_pressure:
		return s[35:43]
	case SensorEventData_Which_magneticUncalibrated:
		return s[43:63]
	case SensorEventData_Which_gyroUncalibrated:
		return s[63:79]
	case SensorEventData_Which_proximity:
		return s[79:88]
	case SensorEventData_Which_light:
		return s[88:93]
	case SensorEventData_Which_temperature:
		return s[93:104]

	}
	return "SensorEventData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SensorEventData_TypeID is the unique identifier for the type SensorEventData.
const SensorEventData_TypeID = 0xa2b29a69d44529a1

func NewSensorEventData(s *capnp.Segment) (SensorEventData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return SensorEventData(st), err
}

func NewRootSensorEventData(s *capnp.Segment) (SensorEventData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return SensorEventData(st), err
}

func ReadRootSensorEventData(msg *capnp.Message) (SensorEventData, error) {
	root, err := msg.Root()
	return SensorEventData(root.Struct()), err
}

func (s SensorEventData) String() string {
	str, _ := text.Marshal(0xa2b29a69d44529a1, capnp.Struct(s))
	return str
}

func (s SensorEventData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SensorEventData) DecodeFromPtr(p capnp.Ptr) SensorEventData {
	return SensorEventData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SensorEventData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s SensorEventData) Which() SensorEventData_Which {
	return SensorEventData_Which(capnp.Struct(s).Uint16(12))
}
func (s SensorEventData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SensorEventData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SensorEventData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SensorEventData) Version() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SensorEventData) SetVersion(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SensorEventData) Sensor() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s SensorEventData) SetSensor(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s SensorEventData) Type() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s SensorEventData) SetType(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s SensorEventData) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s SensorEventData) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

func (s SensorEventData) UncalibratedDEPRECATED() bool {
	return capnp.Struct(s).Bit(192)
}

func (s SensorEventData) SetUncalibratedDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(192, v)
}

func (s SensorEventData) Acceleration() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 0 {
		panic("Which() != acceleration")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasAcceleration() bool {
	if capnp.Struct(s).Uint16(12) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetAcceleration(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAcceleration sets the acceleration field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewAcceleration() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 0)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) Magnetic() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 1 {
		panic("Which() != magnetic")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasMagnetic() bool {
	if capnp.Struct(s).Uint16(12) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetMagnetic(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMagnetic sets the magnetic field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewMagnetic() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 1)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) Orientation() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 2 {
		panic("Which() != orientation")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasOrientation() bool {
	if capnp.Struct(s).Uint16(12) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetOrientation(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrientation sets the orientation field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewOrientation() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 2)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) Gyro() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 3 {
		panic("Which() != gyro")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasGyro() bool {
	if capnp.Struct(s).Uint16(12) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetGyro(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGyro sets the gyro field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewGyro() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 3)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) Pressure() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 4 {
		panic("Which() != pressure")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasPressure() bool {
	if capnp.Struct(s).Uint16(12) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetPressure(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPressure sets the pressure field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewPressure() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 4)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) MagneticUncalibrated() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 5 {
		panic("Which() != magneticUncalibrated")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasMagneticUncalibrated() bool {
	if capnp.Struct(s).Uint16(12) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetMagneticUncalibrated(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMagneticUncalibrated sets the magneticUncalibrated field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewMagneticUncalibrated() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 5)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) GyroUncalibrated() (SensorEventData_SensorVec, error) {
	if capnp.Struct(s).Uint16(12) != 6 {
		panic("Which() != gyroUncalibrated")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_SensorVec(p.Struct()), err
}

func (s SensorEventData) HasGyroUncalibrated() bool {
	if capnp.Struct(s).Uint16(12) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData) SetGyroUncalibrated(v SensorEventData_SensorVec) error {
	capnp.Struct(s).SetUint16(12, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGyroUncalibrated sets the gyroUncalibrated field to a newly
// allocated SensorEventData_SensorVec struct, preferring placement in s's segment.
func (s SensorEventData) NewGyroUncalibrated() (SensorEventData_SensorVec, error) {
	capnp.Struct(s).SetUint16(12, 6)
	ss, err := NewSensorEventData_SensorVec(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData_SensorVec{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SensorEventData) Proximity() float32 {
	if capnp.Struct(s).Uint16(12) != 7 {
		panic("Which() != proximity")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s SensorEventData) SetProximity(v float32) {
	capnp.Struct(s).SetUint16(12, 7)
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s SensorEventData) Light() float32 {
	if capnp.Struct(s).Uint16(12) != 8 {
		panic("Which() != light")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s SensorEventData) SetLight(v float32) {
	capnp.Struct(s).SetUint16(12, 8)
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s SensorEventData) Temperature() float32 {
	if capnp.Struct(s).Uint16(12) != 9 {
		panic("Which() != temperature")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s SensorEventData) SetTemperature(v float32) {
	capnp.Struct(s).SetUint16(12, 9)
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s SensorEventData) Source() SensorEventData_SensorSource {
	return SensorEventData_SensorSource(capnp.Struct(s).Uint16(14))
}

func (s SensorEventData) SetSource(v SensorEventData_SensorSource) {
	capnp.Struct(s).SetUint16(14, uint16(v))
}

// SensorEventData_List is a list of SensorEventData.
type SensorEventData_List = capnp.StructList[SensorEventData]

// NewSensorEventData creates a new list of SensorEventData.
func NewSensorEventData_List(s *capnp.Segment, sz int32) (SensorEventData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[SensorEventData](l), err
}

// SensorEventData_Future is a wrapper for a SensorEventData promised by a client call.
type SensorEventData_Future struct{ *capnp.Future }

func (f SensorEventData_Future) Struct() (SensorEventData, error) {
	p, err := f.Future.Ptr()
	return SensorEventData(p.Struct()), err
}
func (p SensorEventData_Future) Acceleration() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) Magnetic() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) Orientation() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) Gyro() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) Pressure() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) MagneticUncalibrated() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}
func (p SensorEventData_Future) GyroUncalibrated() SensorEventData_SensorVec_Future {
	return SensorEventData_SensorVec_Future{Future: p.Future.Field(0, nil)}
}

type SensorEventData_SensorVec capnp.Struct

// SensorEventData_SensorVec_TypeID is the unique identifier for the type SensorEventData_SensorVec.
const SensorEventData_SensorVec_TypeID = 0xa43429bd2bfc24fc

func NewSensorEventData_SensorVec(s *capnp.Segment) (SensorEventData_SensorVec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SensorEventData_SensorVec(st), err
}

func NewRootSensorEventData_SensorVec(s *capnp.Segment) (SensorEventData_SensorVec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SensorEventData_SensorVec(st), err
}

func ReadRootSensorEventData_SensorVec(msg *capnp.Message) (SensorEventData_SensorVec, error) {
	root, err := msg.Root()
	return SensorEventData_SensorVec(root.Struct()), err
}

func (s SensorEventData_SensorVec) String() string {
	str, _ := text.Marshal(0xa43429bd2bfc24fc, capnp.Struct(s))
	return str
}

func (s SensorEventData_SensorVec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SensorEventData_SensorVec) DecodeFromPtr(p capnp.Ptr) SensorEventData_SensorVec {
	return SensorEventData_SensorVec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SensorEventData_SensorVec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SensorEventData_SensorVec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SensorEventData_SensorVec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SensorEventData_SensorVec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SensorEventData_SensorVec) V() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s SensorEventData_SensorVec) HasV() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SensorEventData_SensorVec) SetV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s SensorEventData_SensorVec) NewV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SensorEventData_SensorVec) Status() int8 {
	return int8(capnp.Struct(s).Uint8(0))
}

func (s SensorEventData_SensorVec) SetStatus(v int8) {
	capnp.Struct(s).SetUint8(0, uint8(v))
}

// SensorEventData_SensorVec_List is a list of SensorEventData_SensorVec.
type SensorEventData_SensorVec_List = capnp.StructList[SensorEventData_SensorVec]

// NewSensorEventData_SensorVec creates a new list of SensorEventData_SensorVec.
func NewSensorEventData_SensorVec_List(s *capnp.Segment, sz int32) (SensorEventData_SensorVec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SensorEventData_SensorVec](l), err
}

// SensorEventData_SensorVec_Future is a wrapper for a SensorEventData_SensorVec promised by a client call.
type SensorEventData_SensorVec_Future struct{ *capnp.Future }

func (f SensorEventData_SensorVec_Future) Struct() (SensorEventData_SensorVec, error) {
	p, err := f.Future.Ptr()
	return SensorEventData_SensorVec(p.Struct()), err
}

type SensorEventData_SensorSource uint16

// SensorEventData_SensorSource_TypeID is the unique identifier for the type SensorEventData_SensorSource.
const SensorEventData_SensorSource_TypeID = 0xe49b3ce8f7f48d0d

// Values of SensorEventData_SensorSource.
const (
	SensorEventData_SensorSource_android    SensorEventData_SensorSource = 0
	SensorEventData_SensorSource_iOS        SensorEventData_SensorSource = 1
	SensorEventData_SensorSource_fiber      SensorEventData_SensorSource = 2
	SensorEventData_SensorSource_velodyne   SensorEventData_SensorSource = 3
	SensorEventData_SensorSource_bno055     SensorEventData_SensorSource = 4
	SensorEventData_SensorSource_lsm6ds3    SensorEventData_SensorSource = 5
	SensorEventData_SensorSource_bmp280     SensorEventData_SensorSource = 6
	SensorEventData_SensorSource_mmc3416x   SensorEventData_SensorSource = 7
	SensorEventData_SensorSource_bmx055     SensorEventData_SensorSource = 8
	SensorEventData_SensorSource_rpr0521    SensorEventData_SensorSource = 9
	SensorEventData_SensorSource_lsm6ds3trc SensorEventData_SensorSource = 10
	SensorEventData_SensorSource_mmc5603nj  SensorEventData_SensorSource = 11
)

// String returns the enum's constant name.
func (c SensorEventData_SensorSource) String() string {
	switch c {
	case SensorEventData_SensorSource_android:
		return "android"
	case SensorEventData_SensorSource_iOS:
		return "iOS"
	case SensorEventData_SensorSource_fiber:
		return "fiber"
	case SensorEventData_SensorSource_velodyne:
		return "velodyne"
	case SensorEventData_SensorSource_bno055:
		return "bno055"
	case SensorEventData_SensorSource_lsm6ds3:
		return "lsm6ds3"
	case SensorEventData_SensorSource_bmp280:
		return "bmp280"
	case SensorEventData_SensorSource_mmc3416x:
		return "mmc3416x"
	case SensorEventData_SensorSource_bmx055:
		return "bmx055"
	case SensorEventData_SensorSource_rpr0521:
		return "rpr0521"
	case SensorEventData_SensorSource_lsm6ds3trc:
		return "lsm6ds3trc"
	case SensorEventData_SensorSource_mmc5603nj:
		return "mmc5603nj"

	default:
		return ""
	}
}

// SensorEventData_SensorSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SensorEventData_SensorSourceFromString(c string) SensorEventData_SensorSource {
	switch c {
	case "android":
		return SensorEventData_SensorSource_android
	case "iOS":
		return SensorEventData_SensorSource_iOS
	case "fiber":
		return SensorEventData_SensorSource_fiber
	case "velodyne":
		return SensorEventData_SensorSource_velodyne
	case "bno055":
		return SensorEventData_SensorSource_bno055
	case "lsm6ds3":
		return SensorEventData_SensorSource_lsm6ds3
	case "bmp280":
		return SensorEventData_SensorSource_bmp280
	case "mmc3416x":
		return SensorEventData_SensorSource_mmc3416x
	case "bmx055":
		return SensorEventData_SensorSource_bmx055
	case "rpr0521":
		return SensorEventData_SensorSource_rpr0521
	case "lsm6ds3trc":
		return SensorEventData_SensorSource_lsm6ds3trc
	case "mmc5603nj":
		return SensorEventData_SensorSource_mmc5603nj

	default:
		return 0
	}
}

type SensorEventData_SensorSource_List = capnp.EnumList[SensorEventData_SensorSource]

func NewSensorEventData_SensorSource_List(s *capnp.Segment, sz int32) (SensorEventData_SensorSource_List, error) {
	return capnp.NewEnumList[SensorEventData_SensorSource](s, sz)
}

type GpsLocationData capnp.Struct

// GpsLocationData_TypeID is the unique identifier for the type GpsLocationData.
const GpsLocationData_TypeID = 0xe946524859add50e

func NewGpsLocationData(s *capnp.Segment) (GpsLocationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1})
	return GpsLocationData(st), err
}

func NewRootGpsLocationData(s *capnp.Segment) (GpsLocationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1})
	return GpsLocationData(st), err
}

func ReadRootGpsLocationData(msg *capnp.Message) (GpsLocationData, error) {
	root, err := msg.Root()
	return GpsLocationData(root.Struct()), err
}

func (s GpsLocationData) String() string {
	str, _ := text.Marshal(0xe946524859add50e, capnp.Struct(s))
	return str
}

func (s GpsLocationData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GpsLocationData) DecodeFromPtr(p capnp.Ptr) GpsLocationData {
	return GpsLocationData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GpsLocationData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GpsLocationData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GpsLocationData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GpsLocationData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GpsLocationData) Flags() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s GpsLocationData) SetFlags(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s GpsLocationData) Latitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s GpsLocationData) SetLatitude(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s GpsLocationData) Longitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s GpsLocationData) SetLongitude(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s GpsLocationData) Altitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s GpsLocationData) SetAltitude(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s GpsLocationData) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GpsLocationData) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GpsLocationData) BearingDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s GpsLocationData) SetBearingDeg(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s GpsLocationData) Accuracy() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s GpsLocationData) SetAccuracy(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s GpsLocationData) UnixTimestampMillis() int64 {
	return int64(capnp.Struct(s).Uint64(40))
}

func (s GpsLocationData) SetUnixTimestampMillis(v int64) {
	capnp.Struct(s).SetUint64(40, uint64(v))
}

func (s GpsLocationData) Source() GpsLocationData_SensorSource {
	return GpsLocationData_SensorSource(capnp.Struct(s).Uint16(2))
}

func (s GpsLocationData) SetSource(v GpsLocationData_SensorSource) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s GpsLocationData) VNED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s GpsLocationData) HasVNED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GpsLocationData) SetVNED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVNED sets the vNED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s GpsLocationData) NewVNED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s GpsLocationData) VerticalAccuracy() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s GpsLocationData) SetVerticalAccuracy(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s GpsLocationData) BearingAccuracyDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s GpsLocationData) SetBearingAccuracyDeg(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s GpsLocationData) SpeedAccuracy() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s GpsLocationData) SetSpeedAccuracy(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

// GpsLocationData_List is a list of GpsLocationData.
type GpsLocationData_List = capnp.StructList[GpsLocationData]

// NewGpsLocationData creates a new list of GpsLocationData.
func NewGpsLocationData_List(s *capnp.Segment, sz int32) (GpsLocationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1}, sz)
	return capnp.StructList[GpsLocationData](l), err
}

// GpsLocationData_Future is a wrapper for a GpsLocationData promised by a client call.
type GpsLocationData_Future struct{ *capnp.Future }

func (f GpsLocationData_Future) Struct() (GpsLocationData, error) {
	p, err := f.Future.Ptr()
	return GpsLocationData(p.Struct()), err
}

type GpsLocationData_SensorSource uint16

// GpsLocationData_SensorSource_TypeID is the unique identifier for the type GpsLocationData_SensorSource.
const GpsLocationData_SensorSource_TypeID = 0xd3ff79f25c734863

// Values of GpsLocationData_SensorSource.
const (
	GpsLocationData_SensorSource_android  GpsLocationData_SensorSource = 0
	GpsLocationData_SensorSource_iOS      GpsLocationData_SensorSource = 1
	GpsLocationData_SensorSource_car      GpsLocationData_SensorSource = 2
	GpsLocationData_SensorSource_velodyne GpsLocationData_SensorSource = 3
	GpsLocationData_SensorSource_fusion   GpsLocationData_SensorSource = 4
	GpsLocationData_SensorSource_external GpsLocationData_SensorSource = 5
	GpsLocationData_SensorSource_ublox    GpsLocationData_SensorSource = 6
	GpsLocationData_SensorSource_trimble  GpsLocationData_SensorSource = 7
	GpsLocationData_SensorSource_qcomdiag GpsLocationData_SensorSource = 8
)

// String returns the enum's constant name.
func (c GpsLocationData_SensorSource) String() string {
	switch c {
	case GpsLocationData_SensorSource_android:
		return "android"
	case GpsLocationData_SensorSource_iOS:
		return "iOS"
	case GpsLocationData_SensorSource_car:
		return "car"
	case GpsLocationData_SensorSource_velodyne:
		return "velodyne"
	case GpsLocationData_SensorSource_fusion:
		return "fusion"
	case GpsLocationData_SensorSource_external:
		return "external"
	case GpsLocationData_SensorSource_ublox:
		return "ublox"
	case GpsLocationData_SensorSource_trimble:
		return "trimble"
	case GpsLocationData_SensorSource_qcomdiag:
		return "qcomdiag"

	default:
		return ""
	}
}

// GpsLocationData_SensorSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GpsLocationData_SensorSourceFromString(c string) GpsLocationData_SensorSource {
	switch c {
	case "android":
		return GpsLocationData_SensorSource_android
	case "iOS":
		return GpsLocationData_SensorSource_iOS
	case "car":
		return GpsLocationData_SensorSource_car
	case "velodyne":
		return GpsLocationData_SensorSource_velodyne
	case "fusion":
		return GpsLocationData_SensorSource_fusion
	case "external":
		return GpsLocationData_SensorSource_external
	case "ublox":
		return GpsLocationData_SensorSource_ublox
	case "trimble":
		return GpsLocationData_SensorSource_trimble
	case "qcomdiag":
		return GpsLocationData_SensorSource_qcomdiag

	default:
		return 0
	}
}

type GpsLocationData_SensorSource_List = capnp.EnumList[GpsLocationData_SensorSource]

func NewGpsLocationData_SensorSource_List(s *capnp.Segment, sz int32) (GpsLocationData_SensorSource_List, error) {
	return capnp.NewEnumList[GpsLocationData_SensorSource](s, sz)
}

type CanData capnp.Struct

// CanData_TypeID is the unique identifier for the type CanData.
const CanData_TypeID = 0x8785009a964c7c59

func NewCanData(s *capnp.Segment) (CanData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CanData(st), err
}

func NewRootCanData(s *capnp.Segment) (CanData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CanData(st), err
}

func ReadRootCanData(msg *capnp.Message) (CanData, error) {
	root, err := msg.Root()
	return CanData(root.Struct()), err
}

func (s CanData) String() string {
	str, _ := text.Marshal(0x8785009a964c7c59, capnp.Struct(s))
	return str
}

func (s CanData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CanData) DecodeFromPtr(p capnp.Ptr) CanData {
	return CanData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CanData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CanData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CanData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CanData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CanData) Address() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CanData) SetAddress(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s CanData) BusTime() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s CanData) SetBusTime(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s CanData) Dat() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s CanData) HasDat() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CanData) SetDat(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s CanData) Src() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s CanData) SetSrc(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

// CanData_List is a list of CanData.
type CanData_List = capnp.StructList[CanData]

// NewCanData creates a new list of CanData.
func NewCanData_List(s *capnp.Segment, sz int32) (CanData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CanData](l), err
}

// CanData_Future is a wrapper for a CanData promised by a client call.
type CanData_Future struct{ *capnp.Future }

func (f CanData_Future) Struct() (CanData, error) {
	p, err := f.Future.Ptr()
	return CanData(p.Struct()), err
}

type DeviceState capnp.Struct

// DeviceState_TypeID is the unique identifier for the type DeviceState.
const DeviceState_TypeID = 0xa4d8b5af2aa492eb

func NewDeviceState(s *capnp.Segment) (DeviceState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 10})
	return DeviceState(st), err
}

func NewRootDeviceState(s *capnp.Segment) (DeviceState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 10})
	return DeviceState(st), err
}

func ReadRootDeviceState(msg *capnp.Message) (DeviceState, error) {
	root, err := msg.Root()
	return DeviceState(root.Struct()), err
}

func (s DeviceState) String() string {
	str, _ := text.Marshal(0xa4d8b5af2aa492eb, capnp.Struct(s))
	return str
}

func (s DeviceState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeviceState) DecodeFromPtr(p capnp.Ptr) DeviceState {
	return DeviceState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeviceState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeviceState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeviceState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeviceState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeviceState) NetworkType() DeviceState_NetworkType {
	return DeviceState_NetworkType(capnp.Struct(s).Uint16(48))
}

func (s DeviceState) SetNetworkType(v DeviceState_NetworkType) {
	capnp.Struct(s).SetUint16(48, uint16(v))
}

func (s DeviceState) NetworkInfo() (DeviceState_NetworkInfo, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return DeviceState_NetworkInfo(p.Struct()), err
}

func (s DeviceState) HasNetworkInfo() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s DeviceState) SetNetworkInfo(v DeviceState_NetworkInfo) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewNetworkInfo sets the networkInfo field to a newly
// allocated DeviceState_NetworkInfo struct, preferring placement in s's segment.
func (s DeviceState) NewNetworkInfo() (DeviceState_NetworkInfo, error) {
	ss, err := NewDeviceState_NetworkInfo(capnp.Struct(s).Segment())
	if err != nil {
		return DeviceState_NetworkInfo{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DeviceState) NetworkStrength() DeviceState_NetworkStrength {
	return DeviceState_NetworkStrength(capnp.Struct(s).Uint16(50))
}

func (s DeviceState) SetNetworkStrength(v DeviceState_NetworkStrength) {
	capnp.Struct(s).SetUint16(50, uint16(v))
}

func (s DeviceState) NetworkStats() (DeviceState_NetworkStats, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return DeviceState_NetworkStats(p.Struct()), err
}

func (s DeviceState) HasNetworkStats() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s DeviceState) SetNetworkStats(v DeviceState_NetworkStats) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewNetworkStats sets the networkStats field to a newly
// allocated DeviceState_NetworkStats struct, preferring placement in s's segment.
func (s DeviceState) NewNetworkStats() (DeviceState_NetworkStats, error) {
	ss, err := NewDeviceState_NetworkStats(capnp.Struct(s).Segment())
	if err != nil {
		return DeviceState_NetworkStats{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DeviceState) NetworkMetered() bool {
	return capnp.Struct(s).Bit(196)
}

func (s DeviceState) SetNetworkMetered(v bool) {
	capnp.Struct(s).SetBit(196, v)
}

func (s DeviceState) LastAthenaPingTime() uint64 {
	return capnp.Struct(s).Uint64(72)
}

func (s DeviceState) SetLastAthenaPingTime(v uint64) {
	capnp.Struct(s).SetUint64(72, v)
}

func (s DeviceState) Started() bool {
	return capnp.Struct(s).Bit(192)
}

func (s DeviceState) SetStarted(v bool) {
	capnp.Struct(s).SetBit(192, v)
}

func (s DeviceState) StartedMonoTime() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s DeviceState) SetStartedMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s DeviceState) FreeSpacePercent() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DeviceState) SetFreeSpacePercent(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DeviceState) MemoryUsagePercent() int8 {
	return int8(capnp.Struct(s).Uint8(25))
}

func (s DeviceState) SetMemoryUsagePercent(v int8) {
	capnp.Struct(s).SetUint8(25, uint8(v))
}

func (s DeviceState) GpuUsagePercent() int8 {
	return int8(capnp.Struct(s).Uint8(45))
}

func (s DeviceState) SetGpuUsagePercent(v int8) {
	capnp.Struct(s).SetUint8(45, uint8(v))
}

func (s DeviceState) CpuUsagePercent() (capnp.Int8List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Int8List(p.List()), err
}

func (s DeviceState) HasCpuUsagePercent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s DeviceState) SetCpuUsagePercent(v capnp.Int8List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCpuUsagePercent sets the cpuUsagePercent field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s DeviceState) NewCpuUsagePercent(n int32) (capnp.Int8List, error) {
	l, err := capnp.NewInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s DeviceState) OffroadPowerUsageUwh() uint32 {
	return capnp.Struct(s).Uint32(52)
}

func (s DeviceState) SetOffroadPowerUsageUwh(v uint32) {
	capnp.Struct(s).SetUint32(52, v)
}

func (s DeviceState) CarBatteryCapacityUwh() uint32 {
	return capnp.Struct(s).Uint32(56)
}

func (s DeviceState) SetCarBatteryCapacityUwh(v uint32) {
	capnp.Struct(s).SetUint32(56, v)
}

func (s DeviceState) PowerDrawW() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(84))
}

func (s DeviceState) SetPowerDrawW(v float32) {
	capnp.Struct(s).SetUint32(84, math.Float32bits(v))
}

func (s DeviceState) SomPowerDrawW() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(88))
}

func (s DeviceState) SetSomPowerDrawW(v float32) {
	capnp.Struct(s).SetUint32(88, math.Float32bits(v))
}

func (s DeviceState) CpuTempC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s DeviceState) HasCpuTempC() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DeviceState) SetCpuTempC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCpuTempC sets the cpuTempC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DeviceState) NewCpuTempC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s DeviceState) GpuTempC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s DeviceState) HasGpuTempC() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DeviceState) SetGpuTempC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewGpuTempC sets the gpuTempC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DeviceState) NewGpuTempC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s DeviceState) MemoryTempC() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s DeviceState) SetMemoryTempC(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s DeviceState) AmbientTempC() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s DeviceState) SetAmbientTempC(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s DeviceState) NvmeTempC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s DeviceState) HasNvmeTempC() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s DeviceState) SetNvmeTempC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewNvmeTempC sets the nvmeTempC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DeviceState) NewNvmeTempC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s DeviceState) ModemTempC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s DeviceState) HasModemTempC() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s DeviceState) SetModemTempC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewModemTempC sets the modemTempC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DeviceState) NewModemTempC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s DeviceState) PmicTempC() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float32List(p.List()), err
}

func (s DeviceState) HasPmicTempC() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s DeviceState) SetPmicTempC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPmicTempC sets the pmicTempC field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DeviceState) NewPmicTempC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s DeviceState) MaxTempC() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(92))
}

func (s DeviceState) SetMaxTempC(v float32) {
	capnp.Struct(s).SetUint32(92, math.Float32bits(v))
}

func (s DeviceState) ThermalZones() (DeviceState_ThermalZone_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return DeviceState_ThermalZone_List(p.List()), err
}

func (s DeviceState) HasThermalZones() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s DeviceState) SetThermalZones(v DeviceState_ThermalZone_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewThermalZones sets the thermalZones field to a newly
// allocated DeviceState_ThermalZone_List, preferring placement in s's segment.
func (s DeviceState) NewThermalZones(n int32) (DeviceState_ThermalZone_List, error) {
	l, err := NewDeviceState_ThermalZone_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return DeviceState_ThermalZone_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s DeviceState) ThermalStatus() DeviceState_ThermalStatus {
	return DeviceState_ThermalStatus(capnp.Struct(s).Uint16(26))
}

func (s DeviceState) SetThermalStatus(v DeviceState_ThermalStatus) {
	capnp.Struct(s).SetUint16(26, uint16(v))
}

func (s DeviceState) FanSpeedPercentDesired() uint16 {
	return capnp.Struct(s).Uint16(22)
}

func (s DeviceState) SetFanSpeedPercentDesired(v uint16) {
	capnp.Struct(s).SetUint16(22, v)
}

func (s DeviceState) ScreenBrightnessPercent() int8 {
	return int8(capnp.Struct(s).Uint8(80))
}

func (s DeviceState) SetScreenBrightnessPercent(v int8) {
	capnp.Struct(s).SetUint8(80, uint8(v))
}

func (s DeviceState) Cpu0DEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s DeviceState) SetCpu0DEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s DeviceState) Cpu1DEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s DeviceState) SetCpu1DEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s DeviceState) Cpu2DEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s DeviceState) SetCpu2DEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s DeviceState) Cpu3DEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s DeviceState) SetCpu3DEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s DeviceState) MemDEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s DeviceState) SetMemDEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s DeviceState) GpuDEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s DeviceState) SetGpuDEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s DeviceState) BatDEPRECATED() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s DeviceState) SetBatDEPRECATED(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s DeviceState) Pa0DEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(46)
}

func (s DeviceState) SetPa0DEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(46, v)
}

func (s DeviceState) CpuUsagePercentDEPRECATED() int8 {
	return int8(capnp.Struct(s).Uint8(44))
}

func (s DeviceState) SetCpuUsagePercentDEPRECATED(v int8) {
	capnp.Struct(s).SetUint8(44, uint8(v))
}

func (s DeviceState) BatteryStatusDEPRECATED() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DeviceState) HasBatteryStatusDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeviceState) BatteryStatusDEPRECATEDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceState) SetBatteryStatusDEPRECATED(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DeviceState) BatteryVoltageDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s DeviceState) SetBatteryVoltageDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s DeviceState) BatteryTempCDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s DeviceState) SetBatteryTempCDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s DeviceState) BatteryPercentDEPRECATED() int16 {
	return int16(capnp.Struct(s).Uint16(20))
}

func (s DeviceState) SetBatteryPercentDEPRECATED(v int16) {
	capnp.Struct(s).SetUint16(20, uint16(v))
}

func (s DeviceState) BatteryCurrentDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s DeviceState) SetBatteryCurrentDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s DeviceState) ChargingErrorDEPRECATED() bool {
	return capnp.Struct(s).Bit(194)
}

func (s DeviceState) SetChargingErrorDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(194, v)
}

func (s DeviceState) ChargingDisabledDEPRECATED() bool {
	return capnp.Struct(s).Bit(195)
}

func (s DeviceState) SetChargingDisabledDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(195, v)
}

func (s DeviceState) UsbOnlineDEPRECATED() bool {
	return capnp.Struct(s).Bit(193)
}

func (s DeviceState) SetUsbOnlineDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(193, v)
}

// DeviceState_List is a list of DeviceState.
type DeviceState_List = capnp.StructList[DeviceState]

// NewDeviceState creates a new list of DeviceState.
func NewDeviceState_List(s *capnp.Segment, sz int32) (DeviceState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 96, PointerCount: 10}, sz)
	return capnp.StructList[DeviceState](l), err
}

// DeviceState_Future is a wrapper for a DeviceState promised by a client call.
type DeviceState_Future struct{ *capnp.Future }

func (f DeviceState_Future) Struct() (DeviceState, error) {
	p, err := f.Future.Ptr()
	return DeviceState(p.Struct()), err
}
func (p DeviceState_Future) NetworkInfo() DeviceState_NetworkInfo_Future {
	return DeviceState_NetworkInfo_Future{Future: p.Future.Field(3, nil)}
}
func (p DeviceState_Future) NetworkStats() DeviceState_NetworkStats_Future {
	return DeviceState_NetworkStats_Future{Future: p.Future.Field(9, nil)}
}

type DeviceState_ThermalZone capnp.Struct

// DeviceState_ThermalZone_TypeID is the unique identifier for the type DeviceState_ThermalZone.
const DeviceState_ThermalZone_TypeID = 0xd0790029853df66f

func NewDeviceState_ThermalZone(s *capnp.Segment) (DeviceState_ThermalZone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DeviceState_ThermalZone(st), err
}

func NewRootDeviceState_ThermalZone(s *capnp.Segment) (DeviceState_ThermalZone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DeviceState_ThermalZone(st), err
}

func ReadRootDeviceState_ThermalZone(msg *capnp.Message) (DeviceState_ThermalZone, error) {
	root, err := msg.Root()
	return DeviceState_ThermalZone(root.Struct()), err
}

func (s DeviceState_ThermalZone) String() string {
	str, _ := text.Marshal(0xd0790029853df66f, capnp.Struct(s))
	return str
}

func (s DeviceState_ThermalZone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeviceState_ThermalZone) DecodeFromPtr(p capnp.Ptr) DeviceState_ThermalZone {
	return DeviceState_ThermalZone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeviceState_ThermalZone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeviceState_ThermalZone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeviceState_ThermalZone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeviceState_ThermalZone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeviceState_ThermalZone) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DeviceState_ThermalZone) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeviceState_ThermalZone) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceState_ThermalZone) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DeviceState_ThermalZone) Temp() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DeviceState_ThermalZone) SetTemp(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// DeviceState_ThermalZone_List is a list of DeviceState_ThermalZone.
type DeviceState_ThermalZone_List = capnp.StructList[DeviceState_ThermalZone]

// NewDeviceState_ThermalZone creates a new list of DeviceState_ThermalZone.
func NewDeviceState_ThermalZone_List(s *capnp.Segment, sz int32) (DeviceState_ThermalZone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[DeviceState_ThermalZone](l), err
}

// DeviceState_ThermalZone_Future is a wrapper for a DeviceState_ThermalZone promised by a client call.
type DeviceState_ThermalZone_Future struct{ *capnp.Future }

func (f DeviceState_ThermalZone_Future) Struct() (DeviceState_ThermalZone, error) {
	p, err := f.Future.Ptr()
	return DeviceState_ThermalZone(p.Struct()), err
}

type DeviceState_ThermalStatus uint16

// DeviceState_ThermalStatus_TypeID is the unique identifier for the type DeviceState_ThermalStatus.
const DeviceState_ThermalStatus_TypeID = 0xaf0f7110c254f77e

// Values of DeviceState_ThermalStatus.
const (
	DeviceState_ThermalStatus_green  DeviceState_ThermalStatus = 0
	DeviceState_ThermalStatus_yellow DeviceState_ThermalStatus = 1
	DeviceState_ThermalStatus_red    DeviceState_ThermalStatus = 2
	DeviceState_ThermalStatus_danger DeviceState_ThermalStatus = 3
)

// String returns the enum's constant name.
func (c DeviceState_ThermalStatus) String() string {
	switch c {
	case DeviceState_ThermalStatus_green:
		return "green"
	case DeviceState_ThermalStatus_yellow:
		return "yellow"
	case DeviceState_ThermalStatus_red:
		return "red"
	case DeviceState_ThermalStatus_danger:
		return "danger"

	default:
		return ""
	}
}

// DeviceState_ThermalStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func DeviceState_ThermalStatusFromString(c string) DeviceState_ThermalStatus {
	switch c {
	case "green":
		return DeviceState_ThermalStatus_green
	case "yellow":
		return DeviceState_ThermalStatus_yellow
	case "red":
		return DeviceState_ThermalStatus_red
	case "danger":
		return DeviceState_ThermalStatus_danger

	default:
		return 0
	}
}

type DeviceState_ThermalStatus_List = capnp.EnumList[DeviceState_ThermalStatus]

func NewDeviceState_ThermalStatus_List(s *capnp.Segment, sz int32) (DeviceState_ThermalStatus_List, error) {
	return capnp.NewEnumList[DeviceState_ThermalStatus](s, sz)
}

type DeviceState_NetworkType uint16

// DeviceState_NetworkType_TypeID is the unique identifier for the type DeviceState_NetworkType.
const DeviceState_NetworkType_TypeID = 0xbbc79cc958d1049d

// Values of DeviceState_NetworkType.
const (
	DeviceState_NetworkType_none     DeviceState_NetworkType = 0
	DeviceState_NetworkType_wifi     DeviceState_NetworkType = 1
	DeviceState_NetworkType_cell2G   DeviceState_NetworkType = 2
	DeviceState_NetworkType_cell3G   DeviceState_NetworkType = 3
	DeviceState_NetworkType_cell4G   DeviceState_NetworkType = 4
	DeviceState_NetworkType_cell5G   DeviceState_NetworkType = 5
	DeviceState_NetworkType_ethernet DeviceState_NetworkType = 6
)

// String returns the enum's constant name.
func (c DeviceState_NetworkType) String() string {
	switch c {
	case DeviceState_NetworkType_none:
		return "none"
	case DeviceState_NetworkType_wifi:
		return "wifi"
	case DeviceState_NetworkType_cell2G:
		return "cell2G"
	case DeviceState_NetworkType_cell3G:
		return "cell3G"
	case DeviceState_NetworkType_cell4G:
		return "cell4G"
	case DeviceState_NetworkType_cell5G:
		return "cell5G"
	case DeviceState_NetworkType_ethernet:
		return "ethernet"

	default:
		return ""
	}
}

// DeviceState_NetworkTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func DeviceState_NetworkTypeFromString(c string) DeviceState_NetworkType {
	switch c {
	case "none":
		return DeviceState_NetworkType_none
	case "wifi":
		return DeviceState_NetworkType_wifi
	case "cell2G":
		return DeviceState_NetworkType_cell2G
	case "cell3G":
		return DeviceState_NetworkType_cell3G
	case "cell4G":
		return DeviceState_NetworkType_cell4G
	case "cell5G":
		return DeviceState_NetworkType_cell5G
	case "ethernet":
		return DeviceState_NetworkType_ethernet

	default:
		return 0
	}
}

type DeviceState_NetworkType_List = capnp.EnumList[DeviceState_NetworkType]

func NewDeviceState_NetworkType_List(s *capnp.Segment, sz int32) (DeviceState_NetworkType_List, error) {
	return capnp.NewEnumList[DeviceState_NetworkType](s, sz)
}

type DeviceState_NetworkStrength uint16

// DeviceState_NetworkStrength_TypeID is the unique identifier for the type DeviceState_NetworkStrength.
const DeviceState_NetworkStrength_TypeID = 0xdd308c8a13203e13

// Values of DeviceState_NetworkStrength.
const (
	DeviceState_NetworkStrength_unknown  DeviceState_NetworkStrength = 0
	DeviceState_NetworkStrength_poor     DeviceState_NetworkStrength = 1
	DeviceState_NetworkStrength_moderate DeviceState_NetworkStrength = 2
	DeviceState_NetworkStrength_good     DeviceState_NetworkStrength = 3
	DeviceState_NetworkStrength_great    DeviceState_NetworkStrength = 4
)

// String returns the enum's constant name.
func (c DeviceState_NetworkStrength) String() string {
	switch c {
	case DeviceState_NetworkStrength_unknown:
		return "unknown"
	case DeviceState_NetworkStrength_poor:
		return "poor"
	case DeviceState_NetworkStrength_moderate:
		return "moderate"
	case DeviceState_NetworkStrength_good:
		return "good"
	case DeviceState_NetworkStrength_great:
		return "great"

	default:
		return ""
	}
}

// DeviceState_NetworkStrengthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func DeviceState_NetworkStrengthFromString(c string) DeviceState_NetworkStrength {
	switch c {
	case "unknown":
		return DeviceState_NetworkStrength_unknown
	case "poor":
		return DeviceState_NetworkStrength_poor
	case "moderate":
		return DeviceState_NetworkStrength_moderate
	case "good":
		return DeviceState_NetworkStrength_good
	case "great":
		return DeviceState_NetworkStrength_great

	default:
		return 0
	}
}

type DeviceState_NetworkStrength_List = capnp.EnumList[DeviceState_NetworkStrength]

func NewDeviceState_NetworkStrength_List(s *capnp.Segment, sz int32) (DeviceState_NetworkStrength_List, error) {
	return capnp.NewEnumList[DeviceState_NetworkStrength](s, sz)
}

type DeviceState_NetworkInfo capnp.Struct

// DeviceState_NetworkInfo_TypeID is the unique identifier for the type DeviceState_NetworkInfo.
const DeviceState_NetworkInfo_TypeID = 0x9d57532d82c04afc

func NewDeviceState_NetworkInfo(s *capnp.Segment) (DeviceState_NetworkInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return DeviceState_NetworkInfo(st), err
}

func NewRootDeviceState_NetworkInfo(s *capnp.Segment) (DeviceState_NetworkInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return DeviceState_NetworkInfo(st), err
}

func ReadRootDeviceState_NetworkInfo(msg *capnp.Message) (DeviceState_NetworkInfo, error) {
	root, err := msg.Root()
	return DeviceState_NetworkInfo(root.Struct()), err
}

func (s DeviceState_NetworkInfo) String() string {
	str, _ := text.Marshal(0x9d57532d82c04afc, capnp.Struct(s))
	return str
}

func (s DeviceState_NetworkInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeviceState_NetworkInfo) DecodeFromPtr(p capnp.Ptr) DeviceState_NetworkInfo {
	return DeviceState_NetworkInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeviceState_NetworkInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeviceState_NetworkInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeviceState_NetworkInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeviceState_NetworkInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeviceState_NetworkInfo) Technology() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s DeviceState_NetworkInfo) HasTechnology() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DeviceState_NetworkInfo) TechnologyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s DeviceState_NetworkInfo) SetTechnology(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s DeviceState_NetworkInfo) Operator() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s DeviceState_NetworkInfo) HasOperator() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DeviceState_NetworkInfo) OperatorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s DeviceState_NetworkInfo) SetOperator(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s DeviceState_NetworkInfo) Band() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s DeviceState_NetworkInfo) HasBand() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DeviceState_NetworkInfo) BandBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s DeviceState_NetworkInfo) SetBand(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s DeviceState_NetworkInfo) Channel() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s DeviceState_NetworkInfo) SetChannel(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s DeviceState_NetworkInfo) Extra() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s DeviceState_NetworkInfo) HasExtra() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s DeviceState_NetworkInfo) ExtraBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s DeviceState_NetworkInfo) SetExtra(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s DeviceState_NetworkInfo) State() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s DeviceState_NetworkInfo) HasState() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s DeviceState_NetworkInfo) StateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s DeviceState_NetworkInfo) SetState(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// DeviceState_NetworkInfo_List is a list of DeviceState_NetworkInfo.
type DeviceState_NetworkInfo_List = capnp.StructList[DeviceState_NetworkInfo]

// NewDeviceState_NetworkInfo creates a new list of DeviceState_NetworkInfo.
func NewDeviceState_NetworkInfo_List(s *capnp.Segment, sz int32) (DeviceState_NetworkInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[DeviceState_NetworkInfo](l), err
}

// DeviceState_NetworkInfo_Future is a wrapper for a DeviceState_NetworkInfo promised by a client call.
type DeviceState_NetworkInfo_Future struct{ *capnp.Future }

func (f DeviceState_NetworkInfo_Future) Struct() (DeviceState_NetworkInfo, error) {
	p, err := f.Future.Ptr()
	return DeviceState_NetworkInfo(p.Struct()), err
}

type DeviceState_NetworkStats capnp.Struct

// DeviceState_NetworkStats_TypeID is the unique identifier for the type DeviceState_NetworkStats.
const DeviceState_NetworkStats_TypeID = 0xb98c64ea27898ea0

func NewDeviceState_NetworkStats(s *capnp.Segment) (DeviceState_NetworkStats, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeviceState_NetworkStats(st), err
}

func NewRootDeviceState_NetworkStats(s *capnp.Segment) (DeviceState_NetworkStats, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return DeviceState_NetworkStats(st), err
}

func ReadRootDeviceState_NetworkStats(msg *capnp.Message) (DeviceState_NetworkStats, error) {
	root, err := msg.Root()
	return DeviceState_NetworkStats(root.Struct()), err
}

func (s DeviceState_NetworkStats) String() string {
	str, _ := text.Marshal(0xb98c64ea27898ea0, capnp.Struct(s))
	return str
}

func (s DeviceState_NetworkStats) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DeviceState_NetworkStats) DecodeFromPtr(p capnp.Ptr) DeviceState_NetworkStats {
	return DeviceState_NetworkStats(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DeviceState_NetworkStats) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DeviceState_NetworkStats) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DeviceState_NetworkStats) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DeviceState_NetworkStats) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DeviceState_NetworkStats) WwanTx() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s DeviceState_NetworkStats) SetWwanTx(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s DeviceState_NetworkStats) WwanRx() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s DeviceState_NetworkStats) SetWwanRx(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

// DeviceState_NetworkStats_List is a list of DeviceState_NetworkStats.
type DeviceState_NetworkStats_List = capnp.StructList[DeviceState_NetworkStats]

// NewDeviceState_NetworkStats creates a new list of DeviceState_NetworkStats.
func NewDeviceState_NetworkStats_List(s *capnp.Segment, sz int32) (DeviceState_NetworkStats_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[DeviceState_NetworkStats](l), err
}

// DeviceState_NetworkStats_Future is a wrapper for a DeviceState_NetworkStats promised by a client call.
type DeviceState_NetworkStats_Future struct{ *capnp.Future }

func (f DeviceState_NetworkStats_Future) Struct() (DeviceState_NetworkStats, error) {
	p, err := f.Future.Ptr()
	return DeviceState_NetworkStats(p.Struct()), err
}

type PandaState capnp.Struct

// PandaState_TypeID is the unique identifier for the type PandaState.
const PandaState_TypeID = 0xa7649e2575e4591e

func NewPandaState(s *capnp.Segment) (PandaState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 4})
	return PandaState(st), err
}

func NewRootPandaState(s *capnp.Segment) (PandaState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 4})
	return PandaState(st), err
}

func ReadRootPandaState(msg *capnp.Message) (PandaState, error) {
	root, err := msg.Root()
	return PandaState(root.Struct()), err
}

func (s PandaState) String() string {
	str, _ := text.Marshal(0xa7649e2575e4591e, capnp.Struct(s))
	return str
}

func (s PandaState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PandaState) DecodeFromPtr(p capnp.Ptr) PandaState {
	return PandaState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PandaState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PandaState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PandaState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PandaState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PandaState) IgnitionLine() bool {
	return capnp.Struct(s).Bit(64)
}

func (s PandaState) SetIgnitionLine(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s PandaState) GasInterceptorDetected() bool {
	return capnp.Struct(s).Bit(66)
}

func (s PandaState) SetGasInterceptorDetected(v bool) {
	capnp.Struct(s).SetBit(66, v)
}

func (s PandaState) RxBufferOverflow() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s PandaState) SetRxBufferOverflow(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s PandaState) TxBufferOverflow() uint32 {
	return capnp.Struct(s).Uint32(16)
}

func (s PandaState) SetTxBufferOverflow(v uint32) {
	capnp.Struct(s).SetUint32(16, v)
}

func (s PandaState) GmlanSendErrs() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s PandaState) SetGmlanSendErrs(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

func (s PandaState) PandaType() PandaState_PandaType {
	return PandaState_PandaType(capnp.Struct(s).Uint16(10))
}

func (s PandaState) SetPandaType(v PandaState_PandaType) {
	capnp.Struct(s).SetUint16(10, uint16(v))
}

func (s PandaState) IgnitionCan() bool {
	return capnp.Struct(s).Bit(69)
}

func (s PandaState) SetIgnitionCan(v bool) {
	capnp.Struct(s).SetBit(69, v)
}

func (s PandaState) FaultStatus() PandaState_FaultStatus {
	return PandaState_FaultStatus(capnp.Struct(s).Uint16(30))
}

func (s PandaState) SetFaultStatus(v PandaState_FaultStatus) {
	capnp.Struct(s).SetUint16(30, uint16(v))
}

func (s PandaState) PowerSaveEnabled() bool {
	return capnp.Struct(s).Bit(70)
}

func (s PandaState) SetPowerSaveEnabled(v bool) {
	capnp.Struct(s).SetBit(70, v)
}

func (s PandaState) Uptime() uint32 {
	return capnp.Struct(s).Uint32(32)
}

func (s PandaState) SetUptime(v uint32) {
	capnp.Struct(s).SetUint32(32, v)
}

func (s PandaState) Faults() (PandaState_FaultType_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PandaState_FaultType_List(p.List()), err
}

func (s PandaState) HasFaults() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PandaState) SetFaults(v PandaState_FaultType_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFaults sets the faults field to a newly
// allocated PandaState_FaultType_List, preferring placement in s's segment.
func (s PandaState) NewFaults(n int32) (PandaState_FaultType_List, error) {
	l, err := NewPandaState_FaultType_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PandaState_FaultType_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s PandaState) HeartbeatLost() bool {
	return capnp.Struct(s).Bit(71)
}

func (s PandaState) SetHeartbeatLost(v bool) {
	capnp.Struct(s).SetBit(71, v)
}

func (s PandaState) InterruptLoad() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s PandaState) SetInterruptLoad(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s PandaState) FanPower() uint8 {
	return capnp.Struct(s).Uint8(9)
}

func (s PandaState) SetFanPower(v uint8) {
	capnp.Struct(s).SetUint8(9, v)
}

func (s PandaState) FanStallCount() uint8 {
	return capnp.Struct(s).Uint8(61)
}

func (s PandaState) SetFanStallCount(v uint8) {
	capnp.Struct(s).SetUint8(61, v)
}

func (s PandaState) SpiChecksumErrorCount() uint16 {
	return capnp.Struct(s).Uint16(62)
}

func (s PandaState) SetSpiChecksumErrorCount(v uint16) {
	capnp.Struct(s).SetUint16(62, v)
}

func (s PandaState) HarnessStatus() PandaState_HarnessStatus {
	return PandaState_HarnessStatus(capnp.Struct(s).Uint16(42))
}

func (s PandaState) SetHarnessStatus(v PandaState_HarnessStatus) {
	capnp.Struct(s).SetUint16(42, uint16(v))
}

func (s PandaState) Sbu1Voltage() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s PandaState) SetSbu1Voltage(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s PandaState) Sbu2Voltage() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s PandaState) SetSbu2Voltage(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s PandaState) CanState0() (PandaState_PandaCanState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PandaState_PandaCanState(p.Struct()), err
}

func (s PandaState) HasCanState0() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s PandaState) SetCanState0(v PandaState_PandaCanState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCanState0 sets the canState0 field to a newly
// allocated PandaState_PandaCanState struct, preferring placement in s's segment.
func (s PandaState) NewCanState0() (PandaState_PandaCanState, error) {
	ss, err := NewPandaState_PandaCanState(capnp.Struct(s).Segment())
	if err != nil {
		return PandaState_PandaCanState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PandaState) CanState1() (PandaState_PandaCanState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return PandaState_PandaCanState(p.Struct()), err
}

func (s PandaState) HasCanState1() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s PandaState) SetCanState1(v PandaState_PandaCanState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCanState1 sets the canState1 field to a newly
// allocated PandaState_PandaCanState struct, preferring placement in s's segment.
func (s PandaState) NewCanState1() (PandaState_PandaCanState, error) {
	ss, err := NewPandaState_PandaCanState(capnp.Struct(s).Segment())
	if err != nil {
		return PandaState_PandaCanState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PandaState) CanState2() (PandaState_PandaCanState, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return PandaState_PandaCanState(p.Struct()), err
}

func (s PandaState) HasCanState2() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s PandaState) SetCanState2(v PandaState_PandaCanState) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewCanState2 sets the canState2 field to a newly
// allocated PandaState_PandaCanState struct, preferring placement in s's segment.
func (s PandaState) NewCanState2() (PandaState_PandaCanState, error) {
	ss, err := NewPandaState_PandaCanState(capnp.Struct(s).Segment())
	if err != nil {
		return PandaState_PandaCanState{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s PandaState) ControlsAllowed() bool {
	return capnp.Struct(s).Bit(65)
}

func (s PandaState) SetControlsAllowed(v bool) {
	capnp.Struct(s).SetBit(65, v)
}

func (s PandaState) SafetyRxInvalid() uint32 {
	return capnp.Struct(s).Uint32(36)
}

func (s PandaState) SetSafetyRxInvalid(v uint32) {
	capnp.Struct(s).SetUint32(36, v)
}

func (s PandaState) SafetyTxBlocked() uint32 {
	return capnp.Struct(s).Uint32(48)
}

func (s PandaState) SetSafetyTxBlocked(v uint32) {
	capnp.Struct(s).SetUint32(48, v)
}

func (s PandaState) SafetyModel() CarParams_SafetyModel {
	return CarParams_SafetyModel(capnp.Struct(s).Uint16(28))
}

func (s PandaState) SetSafetyModel(v CarParams_SafetyModel) {
	capnp.Struct(s).SetUint16(28, uint16(v))
}

func (s PandaState) SafetyParam() uint16 {
	return capnp.Struct(s).Uint16(46)
}

func (s PandaState) SetSafetyParam(v uint16) {
	capnp.Struct(s).SetUint16(46, v)
}

func (s PandaState) AlternativeExperience() int16 {
	return int16(capnp.Struct(s).Uint16(44))
}

func (s PandaState) SetAlternativeExperience(v int16) {
	capnp.Struct(s).SetUint16(44, uint16(v))
}

func (s PandaState) SafetyRxChecksInvalid() bool {
	return capnp.Struct(s).Bit(480)
}

func (s PandaState) SetSafetyRxChecksInvalid(v bool) {
	capnp.Struct(s).SetBit(480, v)
}

func (s PandaState) Voltage() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s PandaState) SetVoltage(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s PandaState) Current() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s PandaState) SetCurrent(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s PandaState) StartedSignalDetectedDEPRECATED() bool {
	return capnp.Struct(s).Bit(67)
}

func (s PandaState) SetStartedSignalDetectedDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(67, v)
}

func (s PandaState) HasGpsDEPRECATED() bool {
	return capnp.Struct(s).Bit(68)
}

func (s PandaState) SetHasGpsDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(68, v)
}

func (s PandaState) FanSpeedRpmDEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s PandaState) SetFanSpeedRpmDEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s PandaState) UsbPowerModeDEPRECATED() PeripheralState_UsbPowerModeDEPRECATED {
	return PeripheralState_UsbPowerModeDEPRECATED(capnp.Struct(s).Uint16(26))
}

func (s PandaState) SetUsbPowerModeDEPRECATED(v PeripheralState_UsbPowerModeDEPRECATED) {
	capnp.Struct(s).SetUint16(26, uint16(v))
}

func (s PandaState) SafetyParamDEPRECATED() int16 {
	return int16(capnp.Struct(s).Uint16(40))
}

func (s PandaState) SetSafetyParamDEPRECATED(v int16) {
	capnp.Struct(s).SetUint16(40, uint16(v))
}

func (s PandaState) SafetyParam2DEPRECATED() uint32 {
	return capnp.Struct(s).Uint32(56)
}

func (s PandaState) SetSafetyParam2DEPRECATED(v uint32) {
	capnp.Struct(s).SetUint32(56, v)
}

// PandaState_List is a list of PandaState.
type PandaState_List = capnp.StructList[PandaState]

// NewPandaState creates a new list of PandaState.
func NewPandaState_List(s *capnp.Segment, sz int32) (PandaState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 4}, sz)
	return capnp.StructList[PandaState](l), err
}

// PandaState_Future is a wrapper for a PandaState promised by a client call.
type PandaState_Future struct{ *capnp.Future }

func (f PandaState_Future) Struct() (PandaState, error) {
	p, err := f.Future.Ptr()
	return PandaState(p.Struct()), err
}
func (p PandaState_Future) CanState0() PandaState_PandaCanState_Future {
	return PandaState_PandaCanState_Future{Future: p.Future.Field(1, nil)}
}
func (p PandaState_Future) CanState1() PandaState_PandaCanState_Future {
	return PandaState_PandaCanState_Future{Future: p.Future.Field(2, nil)}
}
func (p PandaState_Future) CanState2() PandaState_PandaCanState_Future {
	return PandaState_PandaCanState_Future{Future: p.Future.Field(3, nil)}
}

type PandaState_FaultStatus uint16

// PandaState_FaultStatus_TypeID is the unique identifier for the type PandaState_FaultStatus.
const PandaState_FaultStatus_TypeID = 0xf2fd0b8b0ac9adbb

// Values of PandaState_FaultStatus.
const (
	PandaState_FaultStatus_none      PandaState_FaultStatus = 0
	PandaState_FaultStatus_faultTemp PandaState_FaultStatus = 1
	PandaState_FaultStatus_faultPerm PandaState_FaultStatus = 2
)

// String returns the enum's constant name.
func (c PandaState_FaultStatus) String() string {
	switch c {
	case PandaState_FaultStatus_none:
		return "none"
	case PandaState_FaultStatus_faultTemp:
		return "faultTemp"
	case PandaState_FaultStatus_faultPerm:
		return "faultPerm"

	default:
		return ""
	}
}

// PandaState_FaultStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PandaState_FaultStatusFromString(c string) PandaState_FaultStatus {
	switch c {
	case "none":
		return PandaState_FaultStatus_none
	case "faultTemp":
		return PandaState_FaultStatus_faultTemp
	case "faultPerm":
		return PandaState_FaultStatus_faultPerm

	default:
		return 0
	}
}

type PandaState_FaultStatus_List = capnp.EnumList[PandaState_FaultStatus]

func NewPandaState_FaultStatus_List(s *capnp.Segment, sz int32) (PandaState_FaultStatus_List, error) {
	return capnp.NewEnumList[PandaState_FaultStatus](s, sz)
}

type PandaState_FaultType uint16

// PandaState_FaultType_TypeID is the unique identifier for the type PandaState_FaultType.
const PandaState_FaultType_TypeID = 0xcd55c07f69249798

// Values of PandaState_FaultType.
const (
	PandaState_FaultType_relayMalfunction         PandaState_FaultType = 0
	PandaState_FaultType_unusedInterruptHandled   PandaState_FaultType = 1
	PandaState_FaultType_interruptRateCan1        PandaState_FaultType = 2
	PandaState_FaultType_interruptRateCan2        PandaState_FaultType = 3
	PandaState_FaultType_interruptRateCan3        PandaState_FaultType = 4
	PandaState_FaultType_interruptRateTach        PandaState_FaultType = 5
	PandaState_FaultType_interruptRateGmlan       PandaState_FaultType = 6
	PandaState_FaultType_interruptRateInterrupts  PandaState_FaultType = 7
	PandaState_FaultType_interruptRateSpiDma      PandaState_FaultType = 8
	PandaState_FaultType_interruptRateSpiCs       PandaState_FaultType = 9
	PandaState_FaultType_interruptRateUart1       PandaState_FaultType = 10
	PandaState_FaultType_interruptRateUart2       PandaState_FaultType = 11
	PandaState_FaultType_interruptRateUart3       PandaState_FaultType = 12
	PandaState_FaultType_interruptRateUart5       PandaState_FaultType = 13
	PandaState_FaultType_interruptRateUartDma     PandaState_FaultType = 14
	PandaState_FaultType_interruptRateUsb         PandaState_FaultType = 15
	PandaState_FaultType_interruptRateTim1        PandaState_FaultType = 16
	PandaState_FaultType_interruptRateTim3        PandaState_FaultType = 17
	PandaState_FaultType_registerDivergent        PandaState_FaultType = 18
	PandaState_FaultType_interruptRateKlineInit   PandaState_FaultType = 19
	PandaState_FaultType_interruptRateClockSource PandaState_FaultType = 20
	PandaState_FaultType_interruptRateTick        PandaState_FaultType = 21
	PandaState_FaultType_interruptRateExti        PandaState_FaultType = 22
	PandaState_FaultType_interruptRateSpi         PandaState_FaultType = 23
	PandaState_FaultType_interruptRateUart7       PandaState_FaultType = 24
	PandaState_FaultType_sirenMalfunction         PandaState_FaultType = 25
	PandaState_FaultType_heartbeatLoopWatchdog    PandaState_FaultType = 26
)

// String returns the enum's constant name.
func (c PandaState_FaultType) String() string {
	switch c {
	case PandaState_FaultType_relayMalfunction:
		return "relayMalfunction"
	case PandaState_FaultType_unusedInterruptHandled:
		return "unusedInterruptHandled"
	case PandaState_FaultType_interruptRateCan1:
		return "interruptRateCan1"
	case PandaState_FaultType_interruptRateCan2:
		return "interruptRateCan2"
	case PandaState_FaultType_interruptRateCan3:
		return "interruptRateCan3"
	case PandaState_FaultType_interruptRateTach:
		return "interruptRateTach"
	case PandaState_FaultType_interruptRateGmlan:
		return "interruptRateGmlan"
	case PandaState_FaultType_interruptRateInterrupts:
		return "interruptRateInterrupts"
	case PandaState_FaultType_interruptRateSpiDma:
		return "interruptRateSpiDma"
	case PandaState_FaultType_interruptRateSpiCs:
		return "interruptRateSpiCs"
	case PandaState_FaultType_interruptRateUart1:
		return "interruptRateUart1"
	case PandaState_FaultType_interruptRateUart2:
		return "interruptRateUart2"
	case PandaState_FaultType_interruptRateUart3:
		return "interruptRateUart3"
	case PandaState_FaultType_interruptRateUart5:
		return "interruptRateUart5"
	case PandaState_FaultType_interruptRateUartDma:
		return "interruptRateUartDma"
	case PandaState_FaultType_interruptRateUsb:
		return "interruptRateUsb"
	case PandaState_FaultType_interruptRateTim1:
		return "interruptRateTim1"
	case PandaState_FaultType_interruptRateTim3:
		return "interruptRateTim3"
	case PandaState_FaultType_registerDivergent:
		return "registerDivergent"
	case PandaState_FaultType_interruptRateKlineInit:
		return "interruptRateKlineInit"
	case PandaState_FaultType_interruptRateClockSource:
		return "interruptRateClockSource"
	case PandaState_FaultType_interruptRateTick:
		return "interruptRateTick"
	case PandaState_FaultType_interruptRateExti:
		return "interruptRateExti"
	case PandaState_FaultType_interruptRateSpi:
		return "interruptRateSpi"
	case PandaState_FaultType_interruptRateUart7:
		return "interruptRateUart7"
	case PandaState_FaultType_sirenMalfunction:
		return "sirenMalfunction"
	case PandaState_FaultType_heartbeatLoopWatchdog:
		return "heartbeatLoopWatchdog"

	default:
		return ""
	}
}

// PandaState_FaultTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PandaState_FaultTypeFromString(c string) PandaState_FaultType {
	switch c {
	case "relayMalfunction":
		return PandaState_FaultType_relayMalfunction
	case "unusedInterruptHandled":
		return PandaState_FaultType_unusedInterruptHandled
	case "interruptRateCan1":
		return PandaState_FaultType_interruptRateCan1
	case "interruptRateCan2":
		return PandaState_FaultType_interruptRateCan2
	case "interruptRateCan3":
		return PandaState_FaultType_interruptRateCan3
	case "interruptRateTach":
		return PandaState_FaultType_interruptRateTach
	case "interruptRateGmlan":
		return PandaState_FaultType_interruptRateGmlan
	case "interruptRateInterrupts":
		return PandaState_FaultType_interruptRateInterrupts
	case "interruptRateSpiDma":
		return PandaState_FaultType_interruptRateSpiDma
	case "interruptRateSpiCs":
		return PandaState_FaultType_interruptRateSpiCs
	case "interruptRateUart1":
		return PandaState_FaultType_interruptRateUart1
	case "interruptRateUart2":
		return PandaState_FaultType_interruptRateUart2
	case "interruptRateUart3":
		return PandaState_FaultType_interruptRateUart3
	case "interruptRateUart5":
		return PandaState_FaultType_interruptRateUart5
	case "interruptRateUartDma":
		return PandaState_FaultType_interruptRateUartDma
	case "interruptRateUsb":
		return PandaState_FaultType_interruptRateUsb
	case "interruptRateTim1":
		return PandaState_FaultType_interruptRateTim1
	case "interruptRateTim3":
		return PandaState_FaultType_interruptRateTim3
	case "registerDivergent":
		return PandaState_FaultType_registerDivergent
	case "interruptRateKlineInit":
		return PandaState_FaultType_interruptRateKlineInit
	case "interruptRateClockSource":
		return PandaState_FaultType_interruptRateClockSource
	case "interruptRateTick":
		return PandaState_FaultType_interruptRateTick
	case "interruptRateExti":
		return PandaState_FaultType_interruptRateExti
	case "interruptRateSpi":
		return PandaState_FaultType_interruptRateSpi
	case "interruptRateUart7":
		return PandaState_FaultType_interruptRateUart7
	case "sirenMalfunction":
		return PandaState_FaultType_sirenMalfunction
	case "heartbeatLoopWatchdog":
		return PandaState_FaultType_heartbeatLoopWatchdog

	default:
		return 0
	}
}

type PandaState_FaultType_List = capnp.EnumList[PandaState_FaultType]

func NewPandaState_FaultType_List(s *capnp.Segment, sz int32) (PandaState_FaultType_List, error) {
	return capnp.NewEnumList[PandaState_FaultType](s, sz)
}

type PandaState_PandaType uint16

// PandaState_PandaType_TypeID is the unique identifier for the type PandaState_PandaType.
const PandaState_PandaType_TypeID = 0x8a58adf93e5b3751

// Values of PandaState_PandaType.
const (
	PandaState_PandaType_unknown    PandaState_PandaType = 0
	PandaState_PandaType_whitePanda PandaState_PandaType = 1
	PandaState_PandaType_greyPanda  PandaState_PandaType = 2
	PandaState_PandaType_blackPanda PandaState_PandaType = 3
	PandaState_PandaType_pedal      PandaState_PandaType = 4
	PandaState_PandaType_uno        PandaState_PandaType = 5
	PandaState_PandaType_dos        PandaState_PandaType = 6
	PandaState_PandaType_redPanda   PandaState_PandaType = 7
	PandaState_PandaType_redPandaV2 PandaState_PandaType = 8
	PandaState_PandaType_tres       PandaState_PandaType = 9
)

// String returns the enum's constant name.
func (c PandaState_PandaType) String() string {
	switch c {
	case PandaState_PandaType_unknown:
		return "unknown"
	case PandaState_PandaType_whitePanda:
		return "whitePanda"
	case PandaState_PandaType_greyPanda:
		return "greyPanda"
	case PandaState_PandaType_blackPanda:
		return "blackPanda"
	case PandaState_PandaType_pedal:
		return "pedal"
	case PandaState_PandaType_uno:
		return "uno"
	case PandaState_PandaType_dos:
		return "dos"
	case PandaState_PandaType_redPanda:
		return "redPanda"
	case PandaState_PandaType_redPandaV2:
		return "redPandaV2"
	case PandaState_PandaType_tres:
		return "tres"

	default:
		return ""
	}
}

// PandaState_PandaTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PandaState_PandaTypeFromString(c string) PandaState_PandaType {
	switch c {
	case "unknown":
		return PandaState_PandaType_unknown
	case "whitePanda":
		return PandaState_PandaType_whitePanda
	case "greyPanda":
		return PandaState_PandaType_greyPanda
	case "blackPanda":
		return PandaState_PandaType_blackPanda
	case "pedal":
		return PandaState_PandaType_pedal
	case "uno":
		return PandaState_PandaType_uno
	case "dos":
		return PandaState_PandaType_dos
	case "redPanda":
		return PandaState_PandaType_redPanda
	case "redPandaV2":
		return PandaState_PandaType_redPandaV2
	case "tres":
		return PandaState_PandaType_tres

	default:
		return 0
	}
}

type PandaState_PandaType_List = capnp.EnumList[PandaState_PandaType]

func NewPandaState_PandaType_List(s *capnp.Segment, sz int32) (PandaState_PandaType_List, error) {
	return capnp.NewEnumList[PandaState_PandaType](s, sz)
}

type PandaState_HarnessStatus uint16

// PandaState_HarnessStatus_TypeID is the unique identifier for the type PandaState_HarnessStatus.
const PandaState_HarnessStatus_TypeID = 0xf69a3ed1e8c081bf

// Values of PandaState_HarnessStatus.
const (
	PandaState_HarnessStatus_notConnected PandaState_HarnessStatus = 0
	PandaState_HarnessStatus_normal       PandaState_HarnessStatus = 1
	PandaState_HarnessStatus_flipped      PandaState_HarnessStatus = 2
)

// String returns the enum's constant name.
func (c PandaState_HarnessStatus) String() string {
	switch c {
	case PandaState_HarnessStatus_notConnected:
		return "notConnected"
	case PandaState_HarnessStatus_normal:
		return "normal"
	case PandaState_HarnessStatus_flipped:
		return "flipped"

	default:
		return ""
	}
}

// PandaState_HarnessStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PandaState_HarnessStatusFromString(c string) PandaState_HarnessStatus {
	switch c {
	case "notConnected":
		return PandaState_HarnessStatus_notConnected
	case "normal":
		return PandaState_HarnessStatus_normal
	case "flipped":
		return PandaState_HarnessStatus_flipped

	default:
		return 0
	}
}

type PandaState_HarnessStatus_List = capnp.EnumList[PandaState_HarnessStatus]

func NewPandaState_HarnessStatus_List(s *capnp.Segment, sz int32) (PandaState_HarnessStatus_List, error) {
	return capnp.NewEnumList[PandaState_HarnessStatus](s, sz)
}

type PandaState_PandaCanState capnp.Struct

// PandaState_PandaCanState_TypeID is the unique identifier for the type PandaState_PandaCanState.
const PandaState_PandaCanState_TypeID = 0xf8d2972deb0cd45c

func NewPandaState_PandaCanState(s *capnp.Segment) (PandaState_PandaCanState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return PandaState_PandaCanState(st), err
}

func NewRootPandaState_PandaCanState(s *capnp.Segment) (PandaState_PandaCanState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return PandaState_PandaCanState(st), err
}

func ReadRootPandaState_PandaCanState(msg *capnp.Message) (PandaState_PandaCanState, error) {
	root, err := msg.Root()
	return PandaState_PandaCanState(root.Struct()), err
}

func (s PandaState_PandaCanState) String() string {
	str, _ := text.Marshal(0xf8d2972deb0cd45c, capnp.Struct(s))
	return str
}

func (s PandaState_PandaCanState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PandaState_PandaCanState) DecodeFromPtr(p capnp.Ptr) PandaState_PandaCanState {
	return PandaState_PandaCanState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PandaState_PandaCanState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PandaState_PandaCanState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PandaState_PandaCanState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PandaState_PandaCanState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PandaState_PandaCanState) BusOff() bool {
	return capnp.Struct(s).Bit(0)
}

func (s PandaState_PandaCanState) SetBusOff(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s PandaState_PandaCanState) BusOffCnt() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s PandaState_PandaCanState) SetBusOffCnt(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s PandaState_PandaCanState) ErrorWarning() bool {
	return capnp.Struct(s).Bit(1)
}

func (s PandaState_PandaCanState) SetErrorWarning(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s PandaState_PandaCanState) ErrorPassive() bool {
	return capnp.Struct(s).Bit(2)
}

func (s PandaState_PandaCanState) SetErrorPassive(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s PandaState_PandaCanState) LastError() PandaState_PandaCanState_LecErrorCode {
	return PandaState_PandaCanState_LecErrorCode(capnp.Struct(s).Uint16(2))
}

func (s PandaState_PandaCanState) SetLastError(v PandaState_PandaCanState_LecErrorCode) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s PandaState_PandaCanState) LastStoredError() PandaState_PandaCanState_LecErrorCode {
	return PandaState_PandaCanState_LecErrorCode(capnp.Struct(s).Uint16(8))
}

func (s PandaState_PandaCanState) SetLastStoredError(v PandaState_PandaCanState_LecErrorCode) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s PandaState_PandaCanState) LastDataError() PandaState_PandaCanState_LecErrorCode {
	return PandaState_PandaCanState_LecErrorCode(capnp.Struct(s).Uint16(10))
}

func (s PandaState_PandaCanState) SetLastDataError(v PandaState_PandaCanState_LecErrorCode) {
	capnp.Struct(s).SetUint16(10, uint16(v))
}

func (s PandaState_PandaCanState) LastDataStoredError() PandaState_PandaCanState_LecErrorCode {
	return PandaState_PandaCanState_LecErrorCode(capnp.Struct(s).Uint16(12))
}

func (s PandaState_PandaCanState) SetLastDataStoredError(v PandaState_PandaCanState_LecErrorCode) {
	capnp.Struct(s).SetUint16(12, uint16(v))
}

func (s PandaState_PandaCanState) ReceiveErrorCnt() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s PandaState_PandaCanState) SetReceiveErrorCnt(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s PandaState_PandaCanState) TransmitErrorCnt() uint8 {
	return capnp.Struct(s).Uint8(14)
}

func (s PandaState_PandaCanState) SetTransmitErrorCnt(v uint8) {
	capnp.Struct(s).SetUint8(14, v)
}

func (s PandaState_PandaCanState) TotalErrorCnt() uint32 {
	return capnp.Struct(s).Uint32(16)
}

func (s PandaState_PandaCanState) SetTotalErrorCnt(v uint32) {
	capnp.Struct(s).SetUint32(16, v)
}

func (s PandaState_PandaCanState) TotalTxLostCnt() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s PandaState_PandaCanState) SetTotalTxLostCnt(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

func (s PandaState_PandaCanState) TotalRxLostCnt() uint32 {
	return capnp.Struct(s).Uint32(24)
}

func (s PandaState_PandaCanState) SetTotalRxLostCnt(v uint32) {
	capnp.Struct(s).SetUint32(24, v)
}

func (s PandaState_PandaCanState) TotalTxCnt() uint32 {
	return capnp.Struct(s).Uint32(28)
}

func (s PandaState_PandaCanState) SetTotalTxCnt(v uint32) {
	capnp.Struct(s).SetUint32(28, v)
}

func (s PandaState_PandaCanState) TotalRxCnt() uint32 {
	return capnp.Struct(s).Uint32(32)
}

func (s PandaState_PandaCanState) SetTotalRxCnt(v uint32) {
	capnp.Struct(s).SetUint32(32, v)
}

func (s PandaState_PandaCanState) TotalFwdCnt() uint32 {
	return capnp.Struct(s).Uint32(36)
}

func (s PandaState_PandaCanState) SetTotalFwdCnt(v uint32) {
	capnp.Struct(s).SetUint32(36, v)
}

func (s PandaState_PandaCanState) CanSpeed() uint16 {
	return capnp.Struct(s).Uint16(40)
}

func (s PandaState_PandaCanState) SetCanSpeed(v uint16) {
	capnp.Struct(s).SetUint16(40, v)
}

func (s PandaState_PandaCanState) CanDataSpeed() uint16 {
	return capnp.Struct(s).Uint16(42)
}

func (s PandaState_PandaCanState) SetCanDataSpeed(v uint16) {
	capnp.Struct(s).SetUint16(42, v)
}

func (s PandaState_PandaCanState) CanfdEnabled() bool {
	return capnp.Struct(s).Bit(3)
}

func (s PandaState_PandaCanState) SetCanfdEnabled(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s PandaState_PandaCanState) BrsEnabled() bool {
	return capnp.Struct(s).Bit(4)
}

func (s PandaState_PandaCanState) SetBrsEnabled(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s PandaState_PandaCanState) CanfdNonIso() bool {
	return capnp.Struct(s).Bit(5)
}

func (s PandaState_PandaCanState) SetCanfdNonIso(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s PandaState_PandaCanState) Irq0CallRate() uint32 {
	return capnp.Struct(s).Uint32(44)
}

func (s PandaState_PandaCanState) SetIrq0CallRate(v uint32) {
	capnp.Struct(s).SetUint32(44, v)
}

func (s PandaState_PandaCanState) Irq1CallRate() uint32 {
	return capnp.Struct(s).Uint32(48)
}

func (s PandaState_PandaCanState) SetIrq1CallRate(v uint32) {
	capnp.Struct(s).SetUint32(48, v)
}

func (s PandaState_PandaCanState) Irq2CallRate() uint32 {
	return capnp.Struct(s).Uint32(52)
}

func (s PandaState_PandaCanState) SetIrq2CallRate(v uint32) {
	capnp.Struct(s).SetUint32(52, v)
}

func (s PandaState_PandaCanState) CanCoreResetCnt() uint32 {
	return capnp.Struct(s).Uint32(56)
}

func (s PandaState_PandaCanState) SetCanCoreResetCnt(v uint32) {
	capnp.Struct(s).SetUint32(56, v)
}

// PandaState_PandaCanState_List is a list of PandaState_PandaCanState.
type PandaState_PandaCanState_List = capnp.StructList[PandaState_PandaCanState]

// NewPandaState_PandaCanState creates a new list of PandaState_PandaCanState.
func NewPandaState_PandaCanState_List(s *capnp.Segment, sz int32) (PandaState_PandaCanState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[PandaState_PandaCanState](l), err
}

// PandaState_PandaCanState_Future is a wrapper for a PandaState_PandaCanState promised by a client call.
type PandaState_PandaCanState_Future struct{ *capnp.Future }

func (f PandaState_PandaCanState_Future) Struct() (PandaState_PandaCanState, error) {
	p, err := f.Future.Ptr()
	return PandaState_PandaCanState(p.Struct()), err
}

type PandaState_PandaCanState_LecErrorCode uint16

// PandaState_PandaCanState_LecErrorCode_TypeID is the unique identifier for the type PandaState_PandaCanState_LecErrorCode.
const PandaState_PandaCanState_LecErrorCode_TypeID = 0xc0db50b4d13283ff

// Values of PandaState_PandaCanState_LecErrorCode.
const (
	PandaState_PandaCanState_LecErrorCode_noError    PandaState_PandaCanState_LecErrorCode = 0
	PandaState_PandaCanState_LecErrorCode_stuffError PandaState_PandaCanState_LecErrorCode = 1
	PandaState_PandaCanState_LecErrorCode_formError  PandaState_PandaCanState_LecErrorCode = 2
	PandaState_PandaCanState_LecErrorCode_ackError   PandaState_PandaCanState_LecErrorCode = 3
	PandaState_PandaCanState_LecErrorCode_bit1Error  PandaState_PandaCanState_LecErrorCode = 4
	PandaState_PandaCanState_LecErrorCode_bit0Error  PandaState_PandaCanState_LecErrorCode = 5
	PandaState_PandaCanState_LecErrorCode_crcError   PandaState_PandaCanState_LecErrorCode = 6
	PandaState_PandaCanState_LecErrorCode_noChange   PandaState_PandaCanState_LecErrorCode = 7
)

// String returns the enum's constant name.
func (c PandaState_PandaCanState_LecErrorCode) String() string {
	switch c {
	case PandaState_PandaCanState_LecErrorCode_noError:
		return "noError"
	case PandaState_PandaCanState_LecErrorCode_stuffError:
		return "stuffError"
	case PandaState_PandaCanState_LecErrorCode_formError:
		return "formError"
	case PandaState_PandaCanState_LecErrorCode_ackError:
		return "ackError"
	case PandaState_PandaCanState_LecErrorCode_bit1Error:
		return "bit1Error"
	case PandaState_PandaCanState_LecErrorCode_bit0Error:
		return "bit0Error"
	case PandaState_PandaCanState_LecErrorCode_crcError:
		return "crcError"
	case PandaState_PandaCanState_LecErrorCode_noChange:
		return "noChange"

	default:
		return ""
	}
}

// PandaState_PandaCanState_LecErrorCodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PandaState_PandaCanState_LecErrorCodeFromString(c string) PandaState_PandaCanState_LecErrorCode {
	switch c {
	case "noError":
		return PandaState_PandaCanState_LecErrorCode_noError
	case "stuffError":
		return PandaState_PandaCanState_LecErrorCode_stuffError
	case "formError":
		return PandaState_PandaCanState_LecErrorCode_formError
	case "ackError":
		return PandaState_PandaCanState_LecErrorCode_ackError
	case "bit1Error":
		return PandaState_PandaCanState_LecErrorCode_bit1Error
	case "bit0Error":
		return PandaState_PandaCanState_LecErrorCode_bit0Error
	case "crcError":
		return PandaState_PandaCanState_LecErrorCode_crcError
	case "noChange":
		return PandaState_PandaCanState_LecErrorCode_noChange

	default:
		return 0
	}
}

type PandaState_PandaCanState_LecErrorCode_List = capnp.EnumList[PandaState_PandaCanState_LecErrorCode]

func NewPandaState_PandaCanState_LecErrorCode_List(s *capnp.Segment, sz int32) (PandaState_PandaCanState_LecErrorCode_List, error) {
	return capnp.NewEnumList[PandaState_PandaCanState_LecErrorCode](s, sz)
}

type PeripheralState capnp.Struct

// PeripheralState_TypeID is the unique identifier for the type PeripheralState.
const PeripheralState_TypeID = 0xceb8f49734857a88

func NewPeripheralState(s *capnp.Segment) (PeripheralState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PeripheralState(st), err
}

func NewRootPeripheralState(s *capnp.Segment) (PeripheralState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PeripheralState(st), err
}

func ReadRootPeripheralState(msg *capnp.Message) (PeripheralState, error) {
	root, err := msg.Root()
	return PeripheralState(root.Struct()), err
}

func (s PeripheralState) String() string {
	str, _ := text.Marshal(0xceb8f49734857a88, capnp.Struct(s))
	return str
}

func (s PeripheralState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeripheralState) DecodeFromPtr(p capnp.Ptr) PeripheralState {
	return PeripheralState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeripheralState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeripheralState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeripheralState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeripheralState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PeripheralState) PandaType() PandaState_PandaType {
	return PandaState_PandaType(capnp.Struct(s).Uint16(0))
}

func (s PeripheralState) SetPandaType(v PandaState_PandaType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s PeripheralState) Voltage() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s PeripheralState) SetVoltage(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s PeripheralState) Current() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s PeripheralState) SetCurrent(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s PeripheralState) FanSpeedRpm() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s PeripheralState) SetFanSpeedRpm(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s PeripheralState) UsbPowerModeDEPRECATED() PeripheralState_UsbPowerModeDEPRECATED {
	return PeripheralState_UsbPowerModeDEPRECATED(capnp.Struct(s).Uint16(12))
}

func (s PeripheralState) SetUsbPowerModeDEPRECATED(v PeripheralState_UsbPowerModeDEPRECATED) {
	capnp.Struct(s).SetUint16(12, uint16(v))
}

// PeripheralState_List is a list of PeripheralState.
type PeripheralState_List = capnp.StructList[PeripheralState]

// NewPeripheralState creates a new list of PeripheralState.
func NewPeripheralState_List(s *capnp.Segment, sz int32) (PeripheralState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[PeripheralState](l), err
}

// PeripheralState_Future is a wrapper for a PeripheralState promised by a client call.
type PeripheralState_Future struct{ *capnp.Future }

func (f PeripheralState_Future) Struct() (PeripheralState, error) {
	p, err := f.Future.Ptr()
	return PeripheralState(p.Struct()), err
}

type PeripheralState_UsbPowerModeDEPRECATED uint16

// PeripheralState_UsbPowerModeDEPRECATED_TypeID is the unique identifier for the type PeripheralState_UsbPowerModeDEPRECATED.
const PeripheralState_UsbPowerModeDEPRECATED_TypeID = 0xa8883583b32c9877

// Values of PeripheralState_UsbPowerModeDEPRECATED.
const (
	PeripheralState_UsbPowerModeDEPRECATED_none   PeripheralState_UsbPowerModeDEPRECATED = 0
	PeripheralState_UsbPowerModeDEPRECATED_client PeripheralState_UsbPowerModeDEPRECATED = 1
	PeripheralState_UsbPowerModeDEPRECATED_cdp    PeripheralState_UsbPowerModeDEPRECATED = 2
	PeripheralState_UsbPowerModeDEPRECATED_dcp    PeripheralState_UsbPowerModeDEPRECATED = 3
)

// String returns the enum's constant name.
func (c PeripheralState_UsbPowerModeDEPRECATED) String() string {
	switch c {
	case PeripheralState_UsbPowerModeDEPRECATED_none:
		return "none"
	case PeripheralState_UsbPowerModeDEPRECATED_client:
		return "client"
	case PeripheralState_UsbPowerModeDEPRECATED_cdp:
		return "cdp"
	case PeripheralState_UsbPowerModeDEPRECATED_dcp:
		return "dcp"

	default:
		return ""
	}
}

// PeripheralState_UsbPowerModeDEPRECATEDFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PeripheralState_UsbPowerModeDEPRECATEDFromString(c string) PeripheralState_UsbPowerModeDEPRECATED {
	switch c {
	case "none":
		return PeripheralState_UsbPowerModeDEPRECATED_none
	case "client":
		return PeripheralState_UsbPowerModeDEPRECATED_client
	case "cdp":
		return PeripheralState_UsbPowerModeDEPRECATED_cdp
	case "dcp":
		return PeripheralState_UsbPowerModeDEPRECATED_dcp

	default:
		return 0
	}
}

type PeripheralState_UsbPowerModeDEPRECATED_List = capnp.EnumList[PeripheralState_UsbPowerModeDEPRECATED]

func NewPeripheralState_UsbPowerModeDEPRECATED_List(s *capnp.Segment, sz int32) (PeripheralState_UsbPowerModeDEPRECATED_List, error) {
	return capnp.NewEnumList[PeripheralState_UsbPowerModeDEPRECATED](s, sz)
}

type RadarState capnp.Struct

// RadarState_TypeID is the unique identifier for the type RadarState.
const RadarState_TypeID = 0x9a185389d6fdd05f

func NewRadarState(s *capnp.Segment) (RadarState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return RadarState(st), err
}

func NewRootRadarState(s *capnp.Segment) (RadarState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return RadarState(st), err
}

func ReadRootRadarState(msg *capnp.Message) (RadarState, error) {
	root, err := msg.Root()
	return RadarState(root.Struct()), err
}

func (s RadarState) String() string {
	str, _ := text.Marshal(0x9a185389d6fdd05f, capnp.Struct(s))
	return str
}

func (s RadarState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadarState) DecodeFromPtr(p capnp.Ptr) RadarState {
	return RadarState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadarState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadarState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadarState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadarState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadarState) MdMonoTime() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RadarState) SetMdMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RadarState) CarStateMonoTime() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s RadarState) SetCarStateMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s RadarState) RadarErrors() (RadarData_Error_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return RadarData_Error_List(p.List()), err
}

func (s RadarState) HasRadarErrors() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s RadarState) SetRadarErrors(v RadarData_Error_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewRadarErrors sets the radarErrors field to a newly
// allocated RadarData_Error_List, preferring placement in s's segment.
func (s RadarState) NewRadarErrors(n int32) (RadarData_Error_List, error) {
	l, err := NewRadarData_Error_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RadarData_Error_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s RadarState) LeadOne() (RadarState_LeadData, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RadarState_LeadData(p.Struct()), err
}

func (s RadarState) HasLeadOne() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RadarState) SetLeadOne(v RadarState_LeadData) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLeadOne sets the leadOne field to a newly
// allocated RadarState_LeadData struct, preferring placement in s's segment.
func (s RadarState) NewLeadOne() (RadarState_LeadData, error) {
	ss, err := NewRadarState_LeadData(capnp.Struct(s).Segment())
	if err != nil {
		return RadarState_LeadData{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadarState) LeadTwo() (RadarState_LeadData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return RadarState_LeadData(p.Struct()), err
}

func (s RadarState) HasLeadTwo() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RadarState) SetLeadTwo(v RadarState_LeadData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLeadTwo sets the leadTwo field to a newly
// allocated RadarState_LeadData struct, preferring placement in s's segment.
func (s RadarState) NewLeadTwo() (RadarState_LeadData, error) {
	ss, err := NewRadarState_LeadData(capnp.Struct(s).Segment())
	if err != nil {
		return RadarState_LeadData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RadarState) CumLagMs() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s RadarState) SetCumLagMs(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s RadarState) FtMonoTimeDEPRECATED() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s RadarState) SetFtMonoTimeDEPRECATED(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s RadarState) WarpMatrixDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s RadarState) HasWarpMatrixDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadarState) SetWarpMatrixDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewWarpMatrixDEPRECATED sets the warpMatrixDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s RadarState) NewWarpMatrixDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s RadarState) AngleOffsetDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s RadarState) SetAngleOffsetDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s RadarState) CalStatusDEPRECATED() int8 {
	return int8(capnp.Struct(s).Uint8(4))
}

func (s RadarState) SetCalStatusDEPRECATED(v int8) {
	capnp.Struct(s).SetUint8(4, uint8(v))
}

func (s RadarState) CalCycleDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s RadarState) SetCalCycleDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s RadarState) CalPercDEPRECATED() int8 {
	return int8(capnp.Struct(s).Uint8(5))
}

func (s RadarState) SetCalPercDEPRECATED(v int8) {
	capnp.Struct(s).SetUint8(5, uint8(v))
}

func (s RadarState) CanMonoTimesDEPRECATED() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.UInt64List(p.List()), err
}

func (s RadarState) HasCanMonoTimesDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s RadarState) SetCanMonoTimesDEPRECATED(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCanMonoTimesDEPRECATED sets the canMonoTimesDEPRECATED field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s RadarState) NewCanMonoTimesDEPRECATED(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// RadarState_List is a list of RadarState.
type RadarState_List = capnp.StructList[RadarState]

// NewRadarState creates a new list of RadarState.
func NewRadarState_List(s *capnp.Segment, sz int32) (RadarState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[RadarState](l), err
}

// RadarState_Future is a wrapper for a RadarState promised by a client call.
type RadarState_Future struct{ *capnp.Future }

func (f RadarState_Future) Struct() (RadarState, error) {
	p, err := f.Future.Ptr()
	return RadarState(p.Struct()), err
}
func (p RadarState_Future) LeadOne() RadarState_LeadData_Future {
	return RadarState_LeadData_Future{Future: p.Future.Field(1, nil)}
}
func (p RadarState_Future) LeadTwo() RadarState_LeadData_Future {
	return RadarState_LeadData_Future{Future: p.Future.Field(2, nil)}
}

type RadarState_LeadData capnp.Struct

// RadarState_LeadData_TypeID is the unique identifier for the type RadarState_LeadData.
const RadarState_LeadData_TypeID = 0xb96f3ad9170cf085

func NewRadarState_LeadData(s *capnp.Segment) (RadarState_LeadData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return RadarState_LeadData(st), err
}

func NewRootRadarState_LeadData(s *capnp.Segment) (RadarState_LeadData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0})
	return RadarState_LeadData(st), err
}

func ReadRootRadarState_LeadData(msg *capnp.Message) (RadarState_LeadData, error) {
	root, err := msg.Root()
	return RadarState_LeadData(root.Struct()), err
}

func (s RadarState_LeadData) String() string {
	str, _ := text.Marshal(0xb96f3ad9170cf085, capnp.Struct(s))
	return str
}

func (s RadarState_LeadData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadarState_LeadData) DecodeFromPtr(p capnp.Ptr) RadarState_LeadData {
	return RadarState_LeadData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadarState_LeadData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadarState_LeadData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadarState_LeadData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadarState_LeadData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadarState_LeadData) DRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s RadarState_LeadData) SetDRel(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s RadarState_LeadData) YRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s RadarState_LeadData) SetYRel(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s RadarState_LeadData) VRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s RadarState_LeadData) SetVRel(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s RadarState_LeadData) ARel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s RadarState_LeadData) SetARel(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s RadarState_LeadData) VLead() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s RadarState_LeadData) SetVLead(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s RadarState_LeadData) DPath() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s RadarState_LeadData) SetDPath(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s RadarState_LeadData) VLat() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s RadarState_LeadData) SetVLat(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s RadarState_LeadData) VLeadK() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s RadarState_LeadData) SetVLeadK(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s RadarState_LeadData) ALeadK() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s RadarState_LeadData) SetALeadK(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s RadarState_LeadData) Fcw() bool {
	return capnp.Struct(s).Bit(320)
}

func (s RadarState_LeadData) SetFcw(v bool) {
	capnp.Struct(s).SetBit(320, v)
}

func (s RadarState_LeadData) Status() bool {
	return capnp.Struct(s).Bit(321)
}

func (s RadarState_LeadData) SetStatus(v bool) {
	capnp.Struct(s).SetBit(321, v)
}

func (s RadarState_LeadData) ALeadTau() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s RadarState_LeadData) SetALeadTau(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s RadarState_LeadData) ModelProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s RadarState_LeadData) SetModelProb(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s RadarState_LeadData) Radar() bool {
	return capnp.Struct(s).Bit(322)
}

func (s RadarState_LeadData) SetRadar(v bool) {
	capnp.Struct(s).SetBit(322, v)
}

func (s RadarState_LeadData) RadarTrackId() int32 {
	return int32(capnp.Struct(s).Uint32(52) ^ 4294967295)
}

func (s RadarState_LeadData) SetRadarTrackId(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v)^4294967295)
}

func (s RadarState_LeadData) ALeadDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s RadarState_LeadData) SetALeadDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

// RadarState_LeadData_List is a list of RadarState_LeadData.
type RadarState_LeadData_List = capnp.StructList[RadarState_LeadData]

// NewRadarState_LeadData creates a new list of RadarState_LeadData.
func NewRadarState_LeadData_List(s *capnp.Segment, sz int32) (RadarState_LeadData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 0}, sz)
	return capnp.StructList[RadarState_LeadData](l), err
}

// RadarState_LeadData_Future is a wrapper for a RadarState_LeadData promised by a client call.
type RadarState_LeadData_Future struct{ *capnp.Future }

func (f RadarState_LeadData_Future) Struct() (RadarState_LeadData, error) {
	p, err := f.Future.Ptr()
	return RadarState_LeadData(p.Struct()), err
}

type LiveCalibrationData capnp.Struct

// LiveCalibrationData_TypeID is the unique identifier for the type LiveCalibrationData.
const LiveCalibrationData_TypeID = 0x96df70754d8390bc

func NewLiveCalibrationData(s *capnp.Segment) (LiveCalibrationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return LiveCalibrationData(st), err
}

func NewRootLiveCalibrationData(s *capnp.Segment) (LiveCalibrationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return LiveCalibrationData(st), err
}

func ReadRootLiveCalibrationData(msg *capnp.Message) (LiveCalibrationData, error) {
	root, err := msg.Root()
	return LiveCalibrationData(root.Struct()), err
}

func (s LiveCalibrationData) String() string {
	str, _ := text.Marshal(0x96df70754d8390bc, capnp.Struct(s))
	return str
}

func (s LiveCalibrationData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveCalibrationData) DecodeFromPtr(p capnp.Ptr) LiveCalibrationData {
	return LiveCalibrationData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveCalibrationData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveCalibrationData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveCalibrationData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveCalibrationData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveCalibrationData) CalStatus() LiveCalibrationData_Status {
	return LiveCalibrationData_Status(capnp.Struct(s).Uint16(2))
}

func (s LiveCalibrationData) SetCalStatus(v LiveCalibrationData_Status) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s LiveCalibrationData) CalCycle() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s LiveCalibrationData) SetCalCycle(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s LiveCalibrationData) CalPerc() int8 {
	return int8(capnp.Struct(s).Uint8(1))
}

func (s LiveCalibrationData) SetCalPerc(v int8) {
	capnp.Struct(s).SetUint8(1, uint8(v))
}

func (s LiveCalibrationData) ValidBlocks() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s LiveCalibrationData) SetValidBlocks(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s LiveCalibrationData) ExtrinsicMatrix() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasExtrinsicMatrix() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveCalibrationData) SetExtrinsicMatrix(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewExtrinsicMatrix sets the extrinsicMatrix field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewExtrinsicMatrix(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) RpyCalib() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasRpyCalib() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LiveCalibrationData) SetRpyCalib(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewRpyCalib sets the rpyCalib field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewRpyCalib(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) RpyCalibSpread() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasRpyCalibSpread() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LiveCalibrationData) SetRpyCalibSpread(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewRpyCalibSpread sets the rpyCalibSpread field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewRpyCalibSpread(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) WideFromDeviceEuler() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasWideFromDeviceEuler() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s LiveCalibrationData) SetWideFromDeviceEuler(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewWideFromDeviceEuler sets the wideFromDeviceEuler field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewWideFromDeviceEuler(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) Height() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasHeight() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s LiveCalibrationData) SetHeight(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewHeight sets the height field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewHeight(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) WarpMatrixDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasWarpMatrixDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveCalibrationData) SetWarpMatrixDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewWarpMatrixDEPRECATED sets the warpMatrixDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewWarpMatrixDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) CalStatusDEPRECATED() int8 {
	return int8(capnp.Struct(s).Uint8(0))
}

func (s LiveCalibrationData) SetCalStatusDEPRECATED(v int8) {
	capnp.Struct(s).SetUint8(0, uint8(v))
}

func (s LiveCalibrationData) WarpMatrix2DEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasWarpMatrix2DEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveCalibrationData) SetWarpMatrix2DEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewWarpMatrix2DEPRECATED sets the warpMatrix2DEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewWarpMatrix2DEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LiveCalibrationData) WarpMatrixBigDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LiveCalibrationData) HasWarpMatrixBigDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveCalibrationData) SetWarpMatrixBigDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewWarpMatrixBigDEPRECATED sets the warpMatrixBigDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveCalibrationData) NewWarpMatrixBigDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// LiveCalibrationData_List is a list of LiveCalibrationData.
type LiveCalibrationData_List = capnp.StructList[LiveCalibrationData]

// NewLiveCalibrationData creates a new list of LiveCalibrationData.
func NewLiveCalibrationData_List(s *capnp.Segment, sz int32) (LiveCalibrationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8}, sz)
	return capnp.StructList[LiveCalibrationData](l), err
}

// LiveCalibrationData_Future is a wrapper for a LiveCalibrationData promised by a client call.
type LiveCalibrationData_Future struct{ *capnp.Future }

func (f LiveCalibrationData_Future) Struct() (LiveCalibrationData, error) {
	p, err := f.Future.Ptr()
	return LiveCalibrationData(p.Struct()), err
}

type LiveCalibrationData_Status uint16

// LiveCalibrationData_Status_TypeID is the unique identifier for the type LiveCalibrationData_Status.
const LiveCalibrationData_Status_TypeID = 0xcaaa029466ad394d

// Values of LiveCalibrationData_Status.
const (
	LiveCalibrationData_Status_uncalibrated  LiveCalibrationData_Status = 0
	LiveCalibrationData_Status_calibrated    LiveCalibrationData_Status = 1
	LiveCalibrationData_Status_invalid       LiveCalibrationData_Status = 2
	LiveCalibrationData_Status_recalibrating LiveCalibrationData_Status = 3
)

// String returns the enum's constant name.
func (c LiveCalibrationData_Status) String() string {
	switch c {
	case LiveCalibrationData_Status_uncalibrated:
		return "uncalibrated"
	case LiveCalibrationData_Status_calibrated:
		return "calibrated"
	case LiveCalibrationData_Status_invalid:
		return "invalid"
	case LiveCalibrationData_Status_recalibrating:
		return "recalibrating"

	default:
		return ""
	}
}

// LiveCalibrationData_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LiveCalibrationData_StatusFromString(c string) LiveCalibrationData_Status {
	switch c {
	case "uncalibrated":
		return LiveCalibrationData_Status_uncalibrated
	case "calibrated":
		return LiveCalibrationData_Status_calibrated
	case "invalid":
		return LiveCalibrationData_Status_invalid
	case "recalibrating":
		return LiveCalibrationData_Status_recalibrating

	default:
		return 0
	}
}

type LiveCalibrationData_Status_List = capnp.EnumList[LiveCalibrationData_Status]

func NewLiveCalibrationData_Status_List(s *capnp.Segment, sz int32) (LiveCalibrationData_Status_List, error) {
	return capnp.NewEnumList[LiveCalibrationData_Status](s, sz)
}

type LiveTracks capnp.Struct

// LiveTracks_TypeID is the unique identifier for the type LiveTracks.
const LiveTracks_TypeID = 0x8faa644732dec251

func NewLiveTracks(s *capnp.Segment) (LiveTracks, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return LiveTracks(st), err
}

func NewRootLiveTracks(s *capnp.Segment) (LiveTracks, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return LiveTracks(st), err
}

func ReadRootLiveTracks(msg *capnp.Message) (LiveTracks, error) {
	root, err := msg.Root()
	return LiveTracks(root.Struct()), err
}

func (s LiveTracks) String() string {
	str, _ := text.Marshal(0x8faa644732dec251, capnp.Struct(s))
	return str
}

func (s LiveTracks) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveTracks) DecodeFromPtr(p capnp.Ptr) LiveTracks {
	return LiveTracks(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveTracks) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveTracks) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveTracks) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveTracks) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveTracks) TrackId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LiveTracks) SetTrackId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LiveTracks) DRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveTracks) SetDRel(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveTracks) YRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LiveTracks) SetYRel(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LiveTracks) VRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LiveTracks) SetVRel(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LiveTracks) ARel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LiveTracks) SetARel(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LiveTracks) TimeStamp() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s LiveTracks) SetTimeStamp(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s LiveTracks) Status() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LiveTracks) SetStatus(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s LiveTracks) CurrentTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LiveTracks) SetCurrentTime(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LiveTracks) Stationary() bool {
	return capnp.Struct(s).Bit(256)
}

func (s LiveTracks) SetStationary(v bool) {
	capnp.Struct(s).SetBit(256, v)
}

func (s LiveTracks) Oncoming() bool {
	return capnp.Struct(s).Bit(257)
}

func (s LiveTracks) SetOncoming(v bool) {
	capnp.Struct(s).SetBit(257, v)
}

// LiveTracks_List is a list of LiveTracks.
type LiveTracks_List = capnp.StructList[LiveTracks]

// NewLiveTracks creates a new list of LiveTracks.
func NewLiveTracks_List(s *capnp.Segment, sz int32) (LiveTracks_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[LiveTracks](l), err
}

// LiveTracks_Future is a wrapper for a LiveTracks promised by a client call.
type LiveTracks_Future struct{ *capnp.Future }

func (f LiveTracks_Future) Struct() (LiveTracks, error) {
	p, err := f.Future.Ptr()
	return LiveTracks(p.Struct()), err
}

type ControlsState capnp.Struct
type ControlsState_lateralControlState ControlsState
type ControlsState_lateralControlState_Which uint16

const (
	ControlsState_lateralControlState_Which_indiState          ControlsState_lateralControlState_Which = 0
	ControlsState_lateralControlState_Which_pidState           ControlsState_lateralControlState_Which = 1
	ControlsState_lateralControlState_Which_angleState         ControlsState_lateralControlState_Which = 3
	ControlsState_lateralControlState_Which_debugState         ControlsState_lateralControlState_Which = 4
	ControlsState_lateralControlState_Which_torqueState        ControlsState_lateralControlState_Which = 5
	ControlsState_lateralControlState_Which_curvatureState     ControlsState_lateralControlState_Which = 6
	ControlsState_lateralControlState_Which_lqrStateDEPRECATED ControlsState_lateralControlState_Which = 2
)

func (w ControlsState_lateralControlState_Which) String() string {
	const s = "indiStatepidStateangleStatedebugStatetorqueStatecurvatureStatelqrStateDEPRECATED"
	switch w {
	case ControlsState_lateralControlState_Which_indiState:
		return s[0:9]
	case ControlsState_lateralControlState_Which_pidState:
		return s[9:17]
	case ControlsState_lateralControlState_Which_angleState:
		return s[17:27]
	case ControlsState_lateralControlState_Which_debugState:
		return s[27:37]
	case ControlsState_lateralControlState_Which_torqueState:
		return s[37:48]
	case ControlsState_lateralControlState_Which_curvatureState:
		return s[48:62]
	case ControlsState_lateralControlState_Which_lqrStateDEPRECATED:
		return s[62:80]

	}
	return "ControlsState_lateralControlState_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ControlsState_TypeID is the unique identifier for the type ControlsState.
const ControlsState_TypeID = 0x97ff69c53601abf1

func NewControlsState(s *capnp.Segment) (ControlsState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 6})
	return ControlsState(st), err
}

func NewRootControlsState(s *capnp.Segment) (ControlsState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 6})
	return ControlsState(st), err
}

func ReadRootControlsState(msg *capnp.Message) (ControlsState, error) {
	root, err := msg.Root()
	return ControlsState(root.Struct()), err
}

func (s ControlsState) String() string {
	str, _ := text.Marshal(0x97ff69c53601abf1, capnp.Struct(s))
	return str
}

func (s ControlsState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState) DecodeFromPtr(p capnp.Ptr) ControlsState {
	return ControlsState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState) StartMonoTime() uint64 {
	return capnp.Struct(s).Uint64(152)
}

func (s ControlsState) SetStartMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(152, v)
}

func (s ControlsState) LongitudinalPlanMonoTime() uint64 {
	return capnp.Struct(s).Uint64(104)
}

func (s ControlsState) SetLongitudinalPlanMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(104, v)
}

func (s ControlsState) LateralPlanMonoTime() uint64 {
	return capnp.Struct(s).Uint64(160)
}

func (s ControlsState) SetLateralPlanMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(160, v)
}

func (s ControlsState) State() ControlsState_OpenpilotState {
	return ControlsState_OpenpilotState(capnp.Struct(s).Uint16(116))
}

func (s ControlsState) SetState(v ControlsState_OpenpilotState) {
	capnp.Struct(s).SetUint16(116, uint16(v))
}

func (s ControlsState) Enabled() bool {
	return capnp.Struct(s).Bit(704)
}

func (s ControlsState) SetEnabled(v bool) {
	capnp.Struct(s).SetBit(704, v)
}

func (s ControlsState) Active() bool {
	return capnp.Struct(s).Bit(707)
}

func (s ControlsState) SetActive(v bool) {
	capnp.Struct(s).SetBit(707, v)
}

func (s ControlsState) ExperimentalMode() bool {
	return capnp.Struct(s).Bit(715)
}

func (s ControlsState) SetExperimentalMode(v bool) {
	capnp.Struct(s).SetBit(715, v)
}

func (s ControlsState) LongControlState() CarControl_Actuators_LongControlState {
	return CarControl_Actuators_LongControlState(capnp.Struct(s).Uint16(90))
}

func (s ControlsState) SetLongControlState(v CarControl_Actuators_LongControlState) {
	capnp.Struct(s).SetUint16(90, uint16(v))
}

func (s ControlsState) VPid() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState) SetVPid(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState) VTargetLead() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState) SetVTargetLead(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState) VCruise() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(92))
}

func (s ControlsState) SetVCruise(v float32) {
	capnp.Struct(s).SetUint32(92, math.Float32bits(v))
}

func (s ControlsState) VCruiseCluster() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(184))
}

func (s ControlsState) SetVCruiseCluster(v float32) {
	capnp.Struct(s).SetUint32(184, math.Float32bits(v))
}

func (s ControlsState) UpAccelCmd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState) SetUpAccelCmd(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState) UiAccelCmd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState) SetUiAccelCmd(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ControlsState) UfAccelCmd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(124))
}

func (s ControlsState) SetUfAccelCmd(v float32) {
	capnp.Struct(s).SetUint32(124, math.Float32bits(v))
}

func (s ControlsState) ATarget() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(132))
}

func (s ControlsState) SetATarget(v float32) {
	capnp.Struct(s).SetUint32(132, math.Float32bits(v))
}

func (s ControlsState) Curvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(136))
}

func (s ControlsState) SetCurvature(v float32) {
	capnp.Struct(s).SetUint32(136, math.Float32bits(v))
}

func (s ControlsState) DesiredCurvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(176))
}

func (s ControlsState) SetDesiredCurvature(v float32) {
	capnp.Struct(s).SetUint32(176, math.Float32bits(v))
}

func (s ControlsState) DesiredCurvatureRate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(180))
}

func (s ControlsState) SetDesiredCurvatureRate(v float32) {
	capnp.Struct(s).SetUint32(180, math.Float32bits(v))
}

func (s ControlsState) ForceDecel() bool {
	return capnp.Struct(s).Bit(713)
}

func (s ControlsState) SetForceDecel(v bool) {
	capnp.Struct(s).SetBit(713, v)
}

func (s ControlsState) AlertText1() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ControlsState) HasAlertText1() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ControlsState) AlertText1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ControlsState) SetAlertText1(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ControlsState) AlertText2() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ControlsState) HasAlertText2() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ControlsState) AlertText2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ControlsState) SetAlertText2(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ControlsState) AlertStatus() ControlsState_AlertStatus {
	return ControlsState_AlertStatus(capnp.Struct(s).Uint16(118))
}

func (s ControlsState) SetAlertStatus(v ControlsState_AlertStatus) {
	capnp.Struct(s).SetUint16(118, uint16(v))
}

func (s ControlsState) AlertSize() ControlsState_AlertSize {
	return ControlsState_AlertSize(capnp.Struct(s).Uint16(140))
}

func (s ControlsState) SetAlertSize(v ControlsState_AlertSize) {
	capnp.Struct(s).SetUint16(140, uint16(v))
}

func (s ControlsState) AlertBlinkingRate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(144))
}

func (s ControlsState) SetAlertBlinkingRate(v float32) {
	capnp.Struct(s).SetUint32(144, math.Float32bits(v))
}

func (s ControlsState) AlertType() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ControlsState) HasAlertType() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ControlsState) AlertTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ControlsState) SetAlertType(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s ControlsState) AlertSound() CarControl_HUDControl_AudibleAlert {
	return CarControl_HUDControl_AudibleAlert(capnp.Struct(s).Uint16(168))
}

func (s ControlsState) SetAlertSound(v CarControl_HUDControl_AudibleAlert) {
	capnp.Struct(s).SetUint16(168, uint16(v))
}

func (s ControlsState) Engageable() bool {
	return capnp.Struct(s).Bit(709)
}

func (s ControlsState) SetEngageable(v bool) {
	capnp.Struct(s).SetBit(709, v)
}

func (s ControlsState) CumLagMs() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s ControlsState) SetCumLagMs(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s ControlsState) CanErrorCounter() uint32 {
	return capnp.Struct(s).Uint32(172)
}

func (s ControlsState) SetCanErrorCounter(v uint32) {
	capnp.Struct(s).SetUint32(172, v)
}

func (s ControlsState) LateralControlState() ControlsState_lateralControlState {
	return ControlsState_lateralControlState(s)
}

func (s ControlsState_lateralControlState) Which() ControlsState_lateralControlState_Which {
	return ControlsState_lateralControlState_Which(capnp.Struct(s).Uint16(142))
}
func (s ControlsState_lateralControlState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_lateralControlState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_lateralControlState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_lateralControlState) IndiState() (ControlsState_LateralINDIState, error) {
	if capnp.Struct(s).Uint16(142) != 0 {
		panic("Which() != indiState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralINDIState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasIndiState() bool {
	if capnp.Struct(s).Uint16(142) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetIndiState(v ControlsState_LateralINDIState) error {
	capnp.Struct(s).SetUint16(142, 0)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewIndiState sets the indiState field to a newly
// allocated ControlsState_LateralINDIState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewIndiState() (ControlsState_LateralINDIState, error) {
	capnp.Struct(s).SetUint16(142, 0)
	ss, err := NewControlsState_LateralINDIState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralINDIState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) PidState() (ControlsState_LateralPIDState, error) {
	if capnp.Struct(s).Uint16(142) != 1 {
		panic("Which() != pidState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralPIDState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasPidState() bool {
	if capnp.Struct(s).Uint16(142) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetPidState(v ControlsState_LateralPIDState) error {
	capnp.Struct(s).SetUint16(142, 1)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewPidState sets the pidState field to a newly
// allocated ControlsState_LateralPIDState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewPidState() (ControlsState_LateralPIDState, error) {
	capnp.Struct(s).SetUint16(142, 1)
	ss, err := NewControlsState_LateralPIDState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralPIDState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) AngleState() (ControlsState_LateralAngleState, error) {
	if capnp.Struct(s).Uint16(142) != 3 {
		panic("Which() != angleState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralAngleState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasAngleState() bool {
	if capnp.Struct(s).Uint16(142) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetAngleState(v ControlsState_LateralAngleState) error {
	capnp.Struct(s).SetUint16(142, 3)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewAngleState sets the angleState field to a newly
// allocated ControlsState_LateralAngleState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewAngleState() (ControlsState_LateralAngleState, error) {
	capnp.Struct(s).SetUint16(142, 3)
	ss, err := NewControlsState_LateralAngleState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralAngleState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) DebugState() (ControlsState_LateralDebugState, error) {
	if capnp.Struct(s).Uint16(142) != 4 {
		panic("Which() != debugState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralDebugState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasDebugState() bool {
	if capnp.Struct(s).Uint16(142) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetDebugState(v ControlsState_LateralDebugState) error {
	capnp.Struct(s).SetUint16(142, 4)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewDebugState sets the debugState field to a newly
// allocated ControlsState_LateralDebugState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewDebugState() (ControlsState_LateralDebugState, error) {
	capnp.Struct(s).SetUint16(142, 4)
	ss, err := NewControlsState_LateralDebugState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralDebugState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) TorqueState() (ControlsState_LateralTorqueState, error) {
	if capnp.Struct(s).Uint16(142) != 5 {
		panic("Which() != torqueState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralTorqueState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasTorqueState() bool {
	if capnp.Struct(s).Uint16(142) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetTorqueState(v ControlsState_LateralTorqueState) error {
	capnp.Struct(s).SetUint16(142, 5)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewTorqueState sets the torqueState field to a newly
// allocated ControlsState_LateralTorqueState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewTorqueState() (ControlsState_LateralTorqueState, error) {
	capnp.Struct(s).SetUint16(142, 5)
	ss, err := NewControlsState_LateralTorqueState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralTorqueState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) CurvatureState() (ControlsState_LateralCurvatureState, error) {
	if capnp.Struct(s).Uint16(142) != 6 {
		panic("Which() != curvatureState")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralCurvatureState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasCurvatureState() bool {
	if capnp.Struct(s).Uint16(142) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetCurvatureState(v ControlsState_LateralCurvatureState) error {
	capnp.Struct(s).SetUint16(142, 6)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewCurvatureState sets the curvatureState field to a newly
// allocated ControlsState_LateralCurvatureState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewCurvatureState() (ControlsState_LateralCurvatureState, error) {
	capnp.Struct(s).SetUint16(142, 6)
	ss, err := NewControlsState_LateralCurvatureState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralCurvatureState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState_lateralControlState) LqrStateDEPRECATED() (ControlsState_LateralLQRState, error) {
	if capnp.Struct(s).Uint16(142) != 2 {
		panic("Which() != lqrStateDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(5)
	return ControlsState_LateralLQRState(p.Struct()), err
}

func (s ControlsState_lateralControlState) HasLqrStateDEPRECATED() bool {
	if capnp.Struct(s).Uint16(142) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(5)
}

func (s ControlsState_lateralControlState) SetLqrStateDEPRECATED(v ControlsState_LateralLQRState) error {
	capnp.Struct(s).SetUint16(142, 2)
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewLqrStateDEPRECATED sets the lqrStateDEPRECATED field to a newly
// allocated ControlsState_LateralLQRState struct, preferring placement in s's segment.
func (s ControlsState_lateralControlState) NewLqrStateDEPRECATED() (ControlsState_LateralLQRState, error) {
	capnp.Struct(s).SetUint16(142, 2)
	ss, err := NewControlsState_LateralLQRState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState_LateralLQRState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ControlsState) VEgoDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ControlsState) SetVEgoDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ControlsState) VEgoRawDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(120))
}

func (s ControlsState) SetVEgoRawDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(120, math.Float32bits(v))
}

func (s ControlsState) AEgoDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState) SetAEgoDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState) CanMonoTimeDEPRECATED() uint64 {
	return capnp.Struct(s).Uint64(64)
}

func (s ControlsState) SetCanMonoTimeDEPRECATED(v uint64) {
	capnp.Struct(s).SetUint64(64, v)
}

func (s ControlsState) RadarStateMonoTimeDEPRECATED() uint64 {
	return capnp.Struct(s).Uint64(72)
}

func (s ControlsState) SetRadarStateMonoTimeDEPRECATED(v uint64) {
	capnp.Struct(s).SetUint64(72, v)
}

func (s ControlsState) MdMonoTimeDEPRECATED() uint64 {
	return capnp.Struct(s).Uint64(80)
}

func (s ControlsState) SetMdMonoTimeDEPRECATED(v uint64) {
	capnp.Struct(s).SetUint64(80, v)
}

func (s ControlsState) YActualDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ControlsState) SetYActualDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ControlsState) YDesDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ControlsState) SetYDesDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ControlsState) UpSteerDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ControlsState) SetUpSteerDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s ControlsState) UiSteerDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s ControlsState) SetUiSteerDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s ControlsState) UfSteerDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(128))
}

func (s ControlsState) SetUfSteerDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(128, math.Float32bits(v))
}

func (s ControlsState) ATargetMinDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s ControlsState) SetATargetMinDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s ControlsState) ATargetMaxDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s ControlsState) SetATargetMaxDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s ControlsState) RearViewCamDEPRECATED() bool {
	return capnp.Struct(s).Bit(706)
}

func (s ControlsState) SetRearViewCamDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(706, v)
}

func (s ControlsState) DriverMonitoringOnDEPRECATED() bool {
	return capnp.Struct(s).Bit(710)
}

func (s ControlsState) SetDriverMonitoringOnDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(710, v)
}

func (s ControlsState) HudLeadDEPRECATED() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s ControlsState) SetHudLeadDEPRECATED(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s ControlsState) AlertSoundDEPRECATED() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s ControlsState) HasAlertSoundDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ControlsState) AlertSoundDEPRECATEDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s ControlsState) SetAlertSoundDEPRECATED(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s ControlsState) AngleModelBiasDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(100))
}

func (s ControlsState) SetAngleModelBiasDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(100, math.Float32bits(v))
}

func (s ControlsState) GpsPlannerActiveDEPRECATED() bool {
	return capnp.Struct(s).Bit(708)
}

func (s ControlsState) SetGpsPlannerActiveDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(708, v)
}

func (s ControlsState) DecelForTurnDEPRECATED() bool {
	return capnp.Struct(s).Bit(711)
}

func (s ControlsState) SetDecelForTurnDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(711, v)
}

func (s ControlsState) DecelForModelDEPRECATED() bool {
	return capnp.Struct(s).Bit(714)
}

func (s ControlsState) SetDecelForModelDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(714, v)
}

func (s ControlsState) AwarenessStatusDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(96))
}

func (s ControlsState) SetAwarenessStatusDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(96, math.Float32bits(v))
}

func (s ControlsState) AngleSteersDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s ControlsState) SetAngleSteersDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s ControlsState) VCurvatureDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(148))
}

func (s ControlsState) SetVCurvatureDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(148, math.Float32bits(v))
}

func (s ControlsState) MapValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(712)
}

func (s ControlsState) SetMapValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(712, v)
}

func (s ControlsState) JerkFactorDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s ControlsState) SetJerkFactorDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s ControlsState) SteerOverrideDEPRECATED() bool {
	return capnp.Struct(s).Bit(705)
}

func (s ControlsState) SetSteerOverrideDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(705, v)
}

func (s ControlsState) SteeringAngleDesiredDegDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(112))
}

func (s ControlsState) SetSteeringAngleDesiredDegDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(112, math.Float32bits(v))
}

func (s ControlsState) CanMonoTimesDEPRECATED() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt64List(p.List()), err
}

func (s ControlsState) HasCanMonoTimesDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ControlsState) SetCanMonoTimesDEPRECATED(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCanMonoTimesDEPRECATED sets the canMonoTimesDEPRECATED field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s ControlsState) NewCanMonoTimesDEPRECATED(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ControlsState_List is a list of ControlsState.
type ControlsState_List = capnp.StructList[ControlsState]

// NewControlsState creates a new list of ControlsState.
func NewControlsState_List(s *capnp.Segment, sz int32) (ControlsState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 192, PointerCount: 6}, sz)
	return capnp.StructList[ControlsState](l), err
}

// ControlsState_Future is a wrapper for a ControlsState promised by a client call.
type ControlsState_Future struct{ *capnp.Future }

func (f ControlsState_Future) Struct() (ControlsState, error) {
	p, err := f.Future.Ptr()
	return ControlsState(p.Struct()), err
}
func (p ControlsState_Future) LateralControlState() ControlsState_lateralControlState_Future {
	return ControlsState_lateralControlState_Future{p.Future}
}

// ControlsState_lateralControlState_Future is a wrapper for a ControlsState_lateralControlState promised by a client call.
type ControlsState_lateralControlState_Future struct{ *capnp.Future }

func (f ControlsState_lateralControlState_Future) Struct() (ControlsState_lateralControlState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_lateralControlState(p.Struct()), err
}
func (p ControlsState_lateralControlState_Future) IndiState() ControlsState_LateralINDIState_Future {
	return ControlsState_LateralINDIState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) PidState() ControlsState_LateralPIDState_Future {
	return ControlsState_LateralPIDState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) AngleState() ControlsState_LateralAngleState_Future {
	return ControlsState_LateralAngleState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) DebugState() ControlsState_LateralDebugState_Future {
	return ControlsState_LateralDebugState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) TorqueState() ControlsState_LateralTorqueState_Future {
	return ControlsState_LateralTorqueState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) CurvatureState() ControlsState_LateralCurvatureState_Future {
	return ControlsState_LateralCurvatureState_Future{Future: p.Future.Field(5, nil)}
}
func (p ControlsState_lateralControlState_Future) LqrStateDEPRECATED() ControlsState_LateralLQRState_Future {
	return ControlsState_LateralLQRState_Future{Future: p.Future.Field(5, nil)}
}

type ControlsState_OpenpilotState uint16

// ControlsState_OpenpilotState_TypeID is the unique identifier for the type ControlsState_OpenpilotState.
const ControlsState_OpenpilotState_TypeID = 0xdbe58b96d2d1ac61

// Values of ControlsState_OpenpilotState.
const (
	ControlsState_OpenpilotState_disabled      ControlsState_OpenpilotState = 0
	ControlsState_OpenpilotState_preEnabled    ControlsState_OpenpilotState = 1
	ControlsState_OpenpilotState_enabled       ControlsState_OpenpilotState = 2
	ControlsState_OpenpilotState_softDisabling ControlsState_OpenpilotState = 3
	ControlsState_OpenpilotState_overriding    ControlsState_OpenpilotState = 4
)

// String returns the enum's constant name.
func (c ControlsState_OpenpilotState) String() string {
	switch c {
	case ControlsState_OpenpilotState_disabled:
		return "disabled"
	case ControlsState_OpenpilotState_preEnabled:
		return "preEnabled"
	case ControlsState_OpenpilotState_enabled:
		return "enabled"
	case ControlsState_OpenpilotState_softDisabling:
		return "softDisabling"
	case ControlsState_OpenpilotState_overriding:
		return "overriding"

	default:
		return ""
	}
}

// ControlsState_OpenpilotStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ControlsState_OpenpilotStateFromString(c string) ControlsState_OpenpilotState {
	switch c {
	case "disabled":
		return ControlsState_OpenpilotState_disabled
	case "preEnabled":
		return ControlsState_OpenpilotState_preEnabled
	case "enabled":
		return ControlsState_OpenpilotState_enabled
	case "softDisabling":
		return ControlsState_OpenpilotState_softDisabling
	case "overriding":
		return ControlsState_OpenpilotState_overriding

	default:
		return 0
	}
}

type ControlsState_OpenpilotState_List = capnp.EnumList[ControlsState_OpenpilotState]

func NewControlsState_OpenpilotState_List(s *capnp.Segment, sz int32) (ControlsState_OpenpilotState_List, error) {
	return capnp.NewEnumList[ControlsState_OpenpilotState](s, sz)
}

type ControlsState_AlertStatus uint16

// ControlsState_AlertStatus_TypeID is the unique identifier for the type ControlsState_AlertStatus.
const ControlsState_AlertStatus_TypeID = 0xa0d0dcd113193c62

// Values of ControlsState_AlertStatus.
const (
	ControlsState_AlertStatus_normal     ControlsState_AlertStatus = 0
	ControlsState_AlertStatus_userPrompt ControlsState_AlertStatus = 1
	ControlsState_AlertStatus_critical   ControlsState_AlertStatus = 2
)

// String returns the enum's constant name.
func (c ControlsState_AlertStatus) String() string {
	switch c {
	case ControlsState_AlertStatus_normal:
		return "normal"
	case ControlsState_AlertStatus_userPrompt:
		return "userPrompt"
	case ControlsState_AlertStatus_critical:
		return "critical"

	default:
		return ""
	}
}

// ControlsState_AlertStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ControlsState_AlertStatusFromString(c string) ControlsState_AlertStatus {
	switch c {
	case "normal":
		return ControlsState_AlertStatus_normal
	case "userPrompt":
		return ControlsState_AlertStatus_userPrompt
	case "critical":
		return ControlsState_AlertStatus_critical

	default:
		return 0
	}
}

type ControlsState_AlertStatus_List = capnp.EnumList[ControlsState_AlertStatus]

func NewControlsState_AlertStatus_List(s *capnp.Segment, sz int32) (ControlsState_AlertStatus_List, error) {
	return capnp.NewEnumList[ControlsState_AlertStatus](s, sz)
}

type ControlsState_AlertSize uint16

// ControlsState_AlertSize_TypeID is the unique identifier for the type ControlsState_AlertSize.
const ControlsState_AlertSize_TypeID = 0xe98bb99d6e985f64

// Values of ControlsState_AlertSize.
const (
	ControlsState_AlertSize_none  ControlsState_AlertSize = 0
	ControlsState_AlertSize_small ControlsState_AlertSize = 1
	ControlsState_AlertSize_mid   ControlsState_AlertSize = 2
	ControlsState_AlertSize_full  ControlsState_AlertSize = 3
)

// String returns the enum's constant name.
func (c ControlsState_AlertSize) String() string {
	switch c {
	case ControlsState_AlertSize_none:
		return "none"
	case ControlsState_AlertSize_small:
		return "small"
	case ControlsState_AlertSize_mid:
		return "mid"
	case ControlsState_AlertSize_full:
		return "full"

	default:
		return ""
	}
}

// ControlsState_AlertSizeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ControlsState_AlertSizeFromString(c string) ControlsState_AlertSize {
	switch c {
	case "none":
		return ControlsState_AlertSize_none
	case "small":
		return ControlsState_AlertSize_small
	case "mid":
		return ControlsState_AlertSize_mid
	case "full":
		return ControlsState_AlertSize_full

	default:
		return 0
	}
}

type ControlsState_AlertSize_List = capnp.EnumList[ControlsState_AlertSize]

func NewControlsState_AlertSize_List(s *capnp.Segment, sz int32) (ControlsState_AlertSize_List, error) {
	return capnp.NewEnumList[ControlsState_AlertSize](s, sz)
}

type ControlsState_LateralINDIState capnp.Struct

// ControlsState_LateralINDIState_TypeID is the unique identifier for the type ControlsState_LateralINDIState.
const ControlsState_LateralINDIState_TypeID = 0x939463348632375e

func NewControlsState_LateralINDIState(s *capnp.Segment) (ControlsState_LateralINDIState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return ControlsState_LateralINDIState(st), err
}

func NewRootControlsState_LateralINDIState(s *capnp.Segment) (ControlsState_LateralINDIState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return ControlsState_LateralINDIState(st), err
}

func ReadRootControlsState_LateralINDIState(msg *capnp.Message) (ControlsState_LateralINDIState, error) {
	root, err := msg.Root()
	return ControlsState_LateralINDIState(root.Struct()), err
}

func (s ControlsState_LateralINDIState) String() string {
	str, _ := text.Marshal(0x939463348632375e, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralINDIState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralINDIState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralINDIState {
	return ControlsState_LateralINDIState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralINDIState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralINDIState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralINDIState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralINDIState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralINDIState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralINDIState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralINDIState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralINDIState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) SteeringRateDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralINDIState) SetSteeringRateDeg(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) SteeringAccelDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralINDIState) SetSteeringAccelDeg(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) RateSetPoint() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState_LateralINDIState) SetRateSetPoint(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) AccelSetPoint() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState_LateralINDIState) SetAccelSetPoint(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) AccelError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ControlsState_LateralINDIState) SetAccelError(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) DelayedOutput() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ControlsState_LateralINDIState) SetDelayedOutput(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) Delta() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ControlsState_LateralINDIState) SetDelta(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s ControlsState_LateralINDIState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralINDIState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s ControlsState_LateralINDIState) SteeringAngleDesiredDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s ControlsState_LateralINDIState) SetSteeringAngleDesiredDeg(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s ControlsState_LateralINDIState) SteeringRateDesiredDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s ControlsState_LateralINDIState) SetSteeringRateDesiredDeg(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

// ControlsState_LateralINDIState_List is a list of ControlsState_LateralINDIState.
type ControlsState_LateralINDIState_List = capnp.StructList[ControlsState_LateralINDIState]

// NewControlsState_LateralINDIState creates a new list of ControlsState_LateralINDIState.
func NewControlsState_LateralINDIState_List(s *capnp.Segment, sz int32) (ControlsState_LateralINDIState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralINDIState](l), err
}

// ControlsState_LateralINDIState_Future is a wrapper for a ControlsState_LateralINDIState promised by a client call.
type ControlsState_LateralINDIState_Future struct{ *capnp.Future }

func (f ControlsState_LateralINDIState_Future) Struct() (ControlsState_LateralINDIState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralINDIState(p.Struct()), err
}

type ControlsState_LateralPIDState capnp.Struct

// ControlsState_LateralPIDState_TypeID is the unique identifier for the type ControlsState_LateralPIDState.
const ControlsState_LateralPIDState_TypeID = 0xf28c5dc9e09375e3

func NewControlsState_LateralPIDState(s *capnp.Segment) (ControlsState_LateralPIDState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ControlsState_LateralPIDState(st), err
}

func NewRootControlsState_LateralPIDState(s *capnp.Segment) (ControlsState_LateralPIDState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ControlsState_LateralPIDState(st), err
}

func ReadRootControlsState_LateralPIDState(msg *capnp.Message) (ControlsState_LateralPIDState, error) {
	root, err := msg.Root()
	return ControlsState_LateralPIDState(root.Struct()), err
}

func (s ControlsState_LateralPIDState) String() string {
	str, _ := text.Marshal(0xf28c5dc9e09375e3, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralPIDState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralPIDState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralPIDState {
	return ControlsState_LateralPIDState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralPIDState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralPIDState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralPIDState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralPIDState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralPIDState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralPIDState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralPIDState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralPIDState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) SteeringRateDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralPIDState) SetSteeringRateDeg(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) AngleError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralPIDState) SetAngleError(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) P() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState_LateralPIDState) SetP(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) I() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState_LateralPIDState) SetI(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) F() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ControlsState_LateralPIDState) SetF(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ControlsState_LateralPIDState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ControlsState_LateralPIDState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralPIDState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s ControlsState_LateralPIDState) SteeringAngleDesiredDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ControlsState_LateralPIDState) SetSteeringAngleDesiredDeg(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

// ControlsState_LateralPIDState_List is a list of ControlsState_LateralPIDState.
type ControlsState_LateralPIDState_List = capnp.StructList[ControlsState_LateralPIDState]

// NewControlsState_LateralPIDState creates a new list of ControlsState_LateralPIDState.
func NewControlsState_LateralPIDState_List(s *capnp.Segment, sz int32) (ControlsState_LateralPIDState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralPIDState](l), err
}

// ControlsState_LateralPIDState_Future is a wrapper for a ControlsState_LateralPIDState promised by a client call.
type ControlsState_LateralPIDState_Future struct{ *capnp.Future }

func (f ControlsState_LateralPIDState_Future) Struct() (ControlsState_LateralPIDState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralPIDState(p.Struct()), err
}

type ControlsState_LateralTorqueState capnp.Struct

// ControlsState_LateralTorqueState_TypeID is the unique identifier for the type ControlsState_LateralTorqueState.
const ControlsState_LateralTorqueState_TypeID = 0xe774a050cbf689a4

func NewControlsState_LateralTorqueState(s *capnp.Segment) (ControlsState_LateralTorqueState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ControlsState_LateralTorqueState(st), err
}

func NewRootControlsState_LateralTorqueState(s *capnp.Segment) (ControlsState_LateralTorqueState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ControlsState_LateralTorqueState(st), err
}

func ReadRootControlsState_LateralTorqueState(msg *capnp.Message) (ControlsState_LateralTorqueState, error) {
	root, err := msg.Root()
	return ControlsState_LateralTorqueState(root.Struct()), err
}

func (s ControlsState_LateralTorqueState) String() string {
	str, _ := text.Marshal(0xe774a050cbf689a4, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralTorqueState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralTorqueState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralTorqueState {
	return ControlsState_LateralTorqueState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralTorqueState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralTorqueState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralTorqueState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralTorqueState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralTorqueState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralTorqueState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralTorqueState) Error() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralTorqueState) SetError(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) ErrorRate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ControlsState_LateralTorqueState) SetErrorRate(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) P() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralTorqueState) SetP(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) I() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralTorqueState) SetI(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) D() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState_LateralTorqueState) SetD(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) F() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState_LateralTorqueState) SetF(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ControlsState_LateralTorqueState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralTorqueState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s ControlsState_LateralTorqueState) ActualLateralAccel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ControlsState_LateralTorqueState) SetActualLateralAccel(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s ControlsState_LateralTorqueState) DesiredLateralAccel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s ControlsState_LateralTorqueState) SetDesiredLateralAccel(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

// ControlsState_LateralTorqueState_List is a list of ControlsState_LateralTorqueState.
type ControlsState_LateralTorqueState_List = capnp.StructList[ControlsState_LateralTorqueState]

// NewControlsState_LateralTorqueState creates a new list of ControlsState_LateralTorqueState.
func NewControlsState_LateralTorqueState_List(s *capnp.Segment, sz int32) (ControlsState_LateralTorqueState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralTorqueState](l), err
}

// ControlsState_LateralTorqueState_Future is a wrapper for a ControlsState_LateralTorqueState promised by a client call.
type ControlsState_LateralTorqueState_Future struct{ *capnp.Future }

func (f ControlsState_LateralTorqueState_Future) Struct() (ControlsState_LateralTorqueState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralTorqueState(p.Struct()), err
}

type ControlsState_LateralLQRState capnp.Struct

// ControlsState_LateralLQRState_TypeID is the unique identifier for the type ControlsState_LateralLQRState.
const ControlsState_LateralLQRState_TypeID = 0x9024e2d790c82ade

func NewControlsState_LateralLQRState(s *capnp.Segment) (ControlsState_LateralLQRState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return ControlsState_LateralLQRState(st), err
}

func NewRootControlsState_LateralLQRState(s *capnp.Segment) (ControlsState_LateralLQRState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return ControlsState_LateralLQRState(st), err
}

func ReadRootControlsState_LateralLQRState(msg *capnp.Message) (ControlsState_LateralLQRState, error) {
	root, err := msg.Root()
	return ControlsState_LateralLQRState(root.Struct()), err
}

func (s ControlsState_LateralLQRState) String() string {
	str, _ := text.Marshal(0x9024e2d790c82ade, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralLQRState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralLQRState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralLQRState {
	return ControlsState_LateralLQRState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralLQRState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralLQRState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralLQRState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralLQRState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralLQRState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralLQRState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralLQRState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralLQRState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralLQRState) I() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralLQRState) SetI(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralLQRState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralLQRState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState_LateralLQRState) LqrOutput() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState_LateralLQRState) SetLqrOutput(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState_LateralLQRState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralLQRState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s ControlsState_LateralLQRState) SteeringAngleDesiredDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState_LateralLQRState) SetSteeringAngleDesiredDeg(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

// ControlsState_LateralLQRState_List is a list of ControlsState_LateralLQRState.
type ControlsState_LateralLQRState_List = capnp.StructList[ControlsState_LateralLQRState]

// NewControlsState_LateralLQRState creates a new list of ControlsState_LateralLQRState.
func NewControlsState_LateralLQRState_List(s *capnp.Segment, sz int32) (ControlsState_LateralLQRState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralLQRState](l), err
}

// ControlsState_LateralLQRState_Future is a wrapper for a ControlsState_LateralLQRState promised by a client call.
type ControlsState_LateralLQRState_Future struct{ *capnp.Future }

func (f ControlsState_LateralLQRState_Future) Struct() (ControlsState_LateralLQRState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralLQRState(p.Struct()), err
}

type ControlsState_LateralAngleState capnp.Struct

// ControlsState_LateralAngleState_TypeID is the unique identifier for the type ControlsState_LateralAngleState.
const ControlsState_LateralAngleState_TypeID = 0xa2e4ea88ac9980f1

func NewControlsState_LateralAngleState(s *capnp.Segment) (ControlsState_LateralAngleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ControlsState_LateralAngleState(st), err
}

func NewRootControlsState_LateralAngleState(s *capnp.Segment) (ControlsState_LateralAngleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ControlsState_LateralAngleState(st), err
}

func ReadRootControlsState_LateralAngleState(msg *capnp.Message) (ControlsState_LateralAngleState, error) {
	root, err := msg.Root()
	return ControlsState_LateralAngleState(root.Struct()), err
}

func (s ControlsState_LateralAngleState) String() string {
	str, _ := text.Marshal(0xa2e4ea88ac9980f1, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralAngleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralAngleState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralAngleState {
	return ControlsState_LateralAngleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralAngleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralAngleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralAngleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralAngleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralAngleState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralAngleState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralAngleState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralAngleState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralAngleState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralAngleState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralAngleState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralAngleState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s ControlsState_LateralAngleState) SteeringAngleDesiredDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralAngleState) SetSteeringAngleDesiredDeg(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// ControlsState_LateralAngleState_List is a list of ControlsState_LateralAngleState.
type ControlsState_LateralAngleState_List = capnp.StructList[ControlsState_LateralAngleState]

// NewControlsState_LateralAngleState creates a new list of ControlsState_LateralAngleState.
func NewControlsState_LateralAngleState_List(s *capnp.Segment, sz int32) (ControlsState_LateralAngleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralAngleState](l), err
}

// ControlsState_LateralAngleState_Future is a wrapper for a ControlsState_LateralAngleState promised by a client call.
type ControlsState_LateralAngleState_Future struct{ *capnp.Future }

func (f ControlsState_LateralAngleState_Future) Struct() (ControlsState_LateralAngleState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralAngleState(p.Struct()), err
}

type ControlsState_LateralCurvatureState capnp.Struct

// ControlsState_LateralCurvatureState_TypeID is the unique identifier for the type ControlsState_LateralCurvatureState.
const ControlsState_LateralCurvatureState_TypeID = 0xad9d8095c06f7c61

func NewControlsState_LateralCurvatureState(s *capnp.Segment) (ControlsState_LateralCurvatureState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ControlsState_LateralCurvatureState(st), err
}

func NewRootControlsState_LateralCurvatureState(s *capnp.Segment) (ControlsState_LateralCurvatureState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return ControlsState_LateralCurvatureState(st), err
}

func ReadRootControlsState_LateralCurvatureState(msg *capnp.Message) (ControlsState_LateralCurvatureState, error) {
	root, err := msg.Root()
	return ControlsState_LateralCurvatureState(root.Struct()), err
}

func (s ControlsState_LateralCurvatureState) String() string {
	str, _ := text.Marshal(0xad9d8095c06f7c61, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralCurvatureState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralCurvatureState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralCurvatureState {
	return ControlsState_LateralCurvatureState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralCurvatureState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralCurvatureState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralCurvatureState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralCurvatureState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralCurvatureState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralCurvatureState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralCurvatureState) ActualCurvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralCurvatureState) SetActualCurvature(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) DesiredCurvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralCurvatureState) SetDesiredCurvature(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) Error() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ControlsState_LateralCurvatureState) SetError(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) P() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ControlsState_LateralCurvatureState) SetP(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) I() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ControlsState_LateralCurvatureState) SetI(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) F() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ControlsState_LateralCurvatureState) SetF(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ControlsState_LateralCurvatureState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ControlsState_LateralCurvatureState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralCurvatureState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// ControlsState_LateralCurvatureState_List is a list of ControlsState_LateralCurvatureState.
type ControlsState_LateralCurvatureState_List = capnp.StructList[ControlsState_LateralCurvatureState]

// NewControlsState_LateralCurvatureState creates a new list of ControlsState_LateralCurvatureState.
func NewControlsState_LateralCurvatureState_List(s *capnp.Segment, sz int32) (ControlsState_LateralCurvatureState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralCurvatureState](l), err
}

// ControlsState_LateralCurvatureState_Future is a wrapper for a ControlsState_LateralCurvatureState promised by a client call.
type ControlsState_LateralCurvatureState_Future struct{ *capnp.Future }

func (f ControlsState_LateralCurvatureState_Future) Struct() (ControlsState_LateralCurvatureState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralCurvatureState(p.Struct()), err
}

type ControlsState_LateralDebugState capnp.Struct

// ControlsState_LateralDebugState_TypeID is the unique identifier for the type ControlsState_LateralDebugState.
const ControlsState_LateralDebugState_TypeID = 0xa63a46f0f2889b2d

func NewControlsState_LateralDebugState(s *capnp.Segment) (ControlsState_LateralDebugState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ControlsState_LateralDebugState(st), err
}

func NewRootControlsState_LateralDebugState(s *capnp.Segment) (ControlsState_LateralDebugState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ControlsState_LateralDebugState(st), err
}

func ReadRootControlsState_LateralDebugState(msg *capnp.Message) (ControlsState_LateralDebugState, error) {
	root, err := msg.Root()
	return ControlsState_LateralDebugState(root.Struct()), err
}

func (s ControlsState_LateralDebugState) String() string {
	str, _ := text.Marshal(0xa63a46f0f2889b2d, capnp.Struct(s))
	return str
}

func (s ControlsState_LateralDebugState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ControlsState_LateralDebugState) DecodeFromPtr(p capnp.Ptr) ControlsState_LateralDebugState {
	return ControlsState_LateralDebugState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ControlsState_LateralDebugState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ControlsState_LateralDebugState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ControlsState_LateralDebugState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ControlsState_LateralDebugState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ControlsState_LateralDebugState) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ControlsState_LateralDebugState) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s ControlsState_LateralDebugState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ControlsState_LateralDebugState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ControlsState_LateralDebugState) Output() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ControlsState_LateralDebugState) SetOutput(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ControlsState_LateralDebugState) Saturated() bool {
	return capnp.Struct(s).Bit(1)
}

func (s ControlsState_LateralDebugState) SetSaturated(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// ControlsState_LateralDebugState_List is a list of ControlsState_LateralDebugState.
type ControlsState_LateralDebugState_List = capnp.StructList[ControlsState_LateralDebugState]

// NewControlsState_LateralDebugState creates a new list of ControlsState_LateralDebugState.
func NewControlsState_LateralDebugState_List(s *capnp.Segment, sz int32) (ControlsState_LateralDebugState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ControlsState_LateralDebugState](l), err
}

// ControlsState_LateralDebugState_Future is a wrapper for a ControlsState_LateralDebugState promised by a client call.
type ControlsState_LateralDebugState_Future struct{ *capnp.Future }

func (f ControlsState_LateralDebugState_Future) Struct() (ControlsState_LateralDebugState, error) {
	p, err := f.Future.Ptr()
	return ControlsState_LateralDebugState(p.Struct()), err
}

type XYZTData capnp.Struct

// XYZTData_TypeID is the unique identifier for the type XYZTData.
const XYZTData_TypeID = 0xc3cbae1fd505ae80

func NewXYZTData(s *capnp.Segment) (XYZTData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return XYZTData(st), err
}

func NewRootXYZTData(s *capnp.Segment) (XYZTData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return XYZTData(st), err
}

func ReadRootXYZTData(msg *capnp.Message) (XYZTData, error) {
	root, err := msg.Root()
	return XYZTData(root.Struct()), err
}

func (s XYZTData) String() string {
	str, _ := text.Marshal(0xc3cbae1fd505ae80, capnp.Struct(s))
	return str
}

func (s XYZTData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (XYZTData) DecodeFromPtr(p capnp.Ptr) XYZTData {
	return XYZTData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s XYZTData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s XYZTData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s XYZTData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s XYZTData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s XYZTData) X() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s XYZTData) SetX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s XYZTData) Y() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasY() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s XYZTData) SetY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewY sets the y field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s XYZTData) Z() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasZ() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s XYZTData) SetZ(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewZ sets the z field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewZ(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s XYZTData) T() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasT() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s XYZTData) SetT(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewT sets the t field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewT(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s XYZTData) XStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasXStd() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s XYZTData) SetXStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewXStd sets the xStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewXStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s XYZTData) YStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasYStd() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s XYZTData) SetYStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewYStd sets the yStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewYStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s XYZTData) ZStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s XYZTData) HasZStd() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s XYZTData) SetZStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewZStd sets the zStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s XYZTData) NewZStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// XYZTData_List is a list of XYZTData.
type XYZTData_List = capnp.StructList[XYZTData]

// NewXYZTData creates a new list of XYZTData.
func NewXYZTData_List(s *capnp.Segment, sz int32) (XYZTData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[XYZTData](l), err
}

// XYZTData_Future is a wrapper for a XYZTData promised by a client call.
type XYZTData_Future struct{ *capnp.Future }

func (f XYZTData_Future) Struct() (XYZTData, error) {
	p, err := f.Future.Ptr()
	return XYZTData(p.Struct()), err
}

type ModelDataV2 capnp.Struct

// ModelDataV2_TypeID is the unique identifier for the type ModelDataV2.
const ModelDataV2_TypeID = 0xc4713f6b0d36abe9

func NewModelDataV2(s *capnp.Segment) (ModelDataV2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 15})
	return ModelDataV2(st), err
}

func NewRootModelDataV2(s *capnp.Segment) (ModelDataV2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 15})
	return ModelDataV2(st), err
}

func ReadRootModelDataV2(msg *capnp.Message) (ModelDataV2, error) {
	root, err := msg.Root()
	return ModelDataV2(root.Struct()), err
}

func (s ModelDataV2) String() string {
	str, _ := text.Marshal(0xc4713f6b0d36abe9, capnp.Struct(s))
	return str
}

func (s ModelDataV2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2) DecodeFromPtr(p capnp.Ptr) ModelDataV2 {
	return ModelDataV2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ModelDataV2) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s ModelDataV2) FrameIdExtra() uint32 {
	return capnp.Struct(s).Uint32(28)
}

func (s ModelDataV2) SetFrameIdExtra(v uint32) {
	capnp.Struct(s).SetUint32(28, v)
}

func (s ModelDataV2) FrameAge() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s ModelDataV2) SetFrameAge(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s ModelDataV2) FrameDropPerc() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ModelDataV2) SetFrameDropPerc(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ModelDataV2) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s ModelDataV2) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s ModelDataV2) ModelExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ModelDataV2) SetModelExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ModelDataV2) GpuExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ModelDataV2) SetGpuExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ModelDataV2) RawPredictions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return []byte(p.Data()), err
}

func (s ModelDataV2) HasRawPredictions() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s ModelDataV2) SetRawPredictions(v []byte) error {
	return capnp.Struct(s).SetData(11, v)
}

func (s ModelDataV2) Position() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return XYZTData(p.Struct()), err
}

func (s ModelDataV2) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2) SetPosition(v XYZTData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s ModelDataV2) NewPosition() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) Orientation() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return XYZTData(p.Struct()), err
}

func (s ModelDataV2) HasOrientation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2) SetOrientation(v XYZTData) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewOrientation sets the orientation field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s ModelDataV2) NewOrientation() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) Velocity() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return XYZTData(p.Struct()), err
}

func (s ModelDataV2) HasVelocity() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelDataV2) SetVelocity(v XYZTData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewVelocity sets the velocity field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s ModelDataV2) NewVelocity() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) OrientationRate() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return XYZTData(p.Struct()), err
}

func (s ModelDataV2) HasOrientationRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ModelDataV2) SetOrientationRate(v XYZTData) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewOrientationRate sets the orientationRate field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s ModelDataV2) NewOrientationRate() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) Acceleration() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return XYZTData(p.Struct()), err
}

func (s ModelDataV2) HasAcceleration() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s ModelDataV2) SetAcceleration(v XYZTData) error {
	return capnp.Struct(s).SetPtr(13, capnp.Struct(v).ToPtr())
}

// NewAcceleration sets the acceleration field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s ModelDataV2) NewAcceleration() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(13, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) LaneLines() (XYZTData_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return XYZTData_List(p.List()), err
}

func (s ModelDataV2) HasLaneLines() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ModelDataV2) SetLaneLines(v XYZTData_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewLaneLines sets the laneLines field to a newly
// allocated XYZTData_List, preferring placement in s's segment.
func (s ModelDataV2) NewLaneLines(n int32) (XYZTData_List, error) {
	l, err := NewXYZTData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return XYZTData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s ModelDataV2) LaneLineProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2) HasLaneLineProbs() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ModelDataV2) SetLaneLineProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewLaneLineProbs sets the laneLineProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2) NewLaneLineProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s ModelDataV2) LaneLineStds() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2) HasLaneLineStds() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s ModelDataV2) SetLaneLineStds(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewLaneLineStds sets the laneLineStds field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2) NewLaneLineStds(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s ModelDataV2) RoadEdges() (XYZTData_List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return XYZTData_List(p.List()), err
}

func (s ModelDataV2) HasRoadEdges() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s ModelDataV2) SetRoadEdges(v XYZTData_List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewRoadEdges sets the roadEdges field to a newly
// allocated XYZTData_List, preferring placement in s's segment.
func (s ModelDataV2) NewRoadEdges(n int32) (XYZTData_List, error) {
	l, err := NewXYZTData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return XYZTData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s ModelDataV2) RoadEdgeStds() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2) HasRoadEdgeStds() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s ModelDataV2) SetRoadEdgeStds(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewRoadEdgeStds sets the roadEdgeStds field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2) NewRoadEdgeStds(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s ModelDataV2) Leads() (ModelDataV2_LeadDataV2_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return ModelDataV2_LeadDataV2_List(p.List()), err
}

func (s ModelDataV2) HasLeads() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s ModelDataV2) SetLeads(v ModelDataV2_LeadDataV2_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewLeads sets the leads field to a newly
// allocated ModelDataV2_LeadDataV2_List, preferring placement in s's segment.
func (s ModelDataV2) NewLeads(n int32) (ModelDataV2_LeadDataV2_List, error) {
	l, err := NewModelDataV2_LeadDataV2_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ModelDataV2_LeadDataV2_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s ModelDataV2) LeadsV3() (ModelDataV2_LeadDataV3_List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return ModelDataV2_LeadDataV3_List(p.List()), err
}

func (s ModelDataV2) HasLeadsV3() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s ModelDataV2) SetLeadsV3(v ModelDataV2_LeadDataV3_List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewLeadsV3 sets the leadsV3 field to a newly
// allocated ModelDataV2_LeadDataV3_List, preferring placement in s's segment.
func (s ModelDataV2) NewLeadsV3(n int32) (ModelDataV2_LeadDataV3_List, error) {
	l, err := NewModelDataV2_LeadDataV3_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ModelDataV2_LeadDataV3_List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s ModelDataV2) Meta() (ModelDataV2_MetaData, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return ModelDataV2_MetaData(p.Struct()), err
}

func (s ModelDataV2) HasMeta() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s ModelDataV2) SetMeta(v ModelDataV2_MetaData) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated ModelDataV2_MetaData struct, preferring placement in s's segment.
func (s ModelDataV2) NewMeta() (ModelDataV2_MetaData, error) {
	ss, err := NewModelDataV2_MetaData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelDataV2_MetaData{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) Confidence() ModelDataV2_ConfidenceClass {
	return ModelDataV2_ConfidenceClass(capnp.Struct(s).Uint16(34))
}

func (s ModelDataV2) SetConfidence(v ModelDataV2_ConfidenceClass) {
	capnp.Struct(s).SetUint16(34, uint16(v))
}

func (s ModelDataV2) TemporalPose() (ModelDataV2_Pose, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return ModelDataV2_Pose(p.Struct()), err
}

func (s ModelDataV2) HasTemporalPose() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s ModelDataV2) SetTemporalPose(v ModelDataV2_Pose) error {
	return capnp.Struct(s).SetPtr(14, capnp.Struct(v).ToPtr())
}

// NewTemporalPose sets the temporalPose field to a newly
// allocated ModelDataV2_Pose struct, preferring placement in s's segment.
func (s ModelDataV2) NewTemporalPose() (ModelDataV2_Pose, error) {
	ss, err := NewModelDataV2_Pose(capnp.Struct(s).Segment())
	if err != nil {
		return ModelDataV2_Pose{}, err
	}
	err = capnp.Struct(s).SetPtr(14, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2) NavEnabled() bool {
	return capnp.Struct(s).Bit(256)
}

func (s ModelDataV2) SetNavEnabled(v bool) {
	capnp.Struct(s).SetBit(256, v)
}

func (s ModelDataV2) LocationMonoTime() uint64 {
	return capnp.Struct(s).Uint64(40)
}

func (s ModelDataV2) SetLocationMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(40, v)
}

// ModelDataV2_List is a list of ModelDataV2.
type ModelDataV2_List = capnp.StructList[ModelDataV2]

// NewModelDataV2 creates a new list of ModelDataV2.
func NewModelDataV2_List(s *capnp.Segment, sz int32) (ModelDataV2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 15}, sz)
	return capnp.StructList[ModelDataV2](l), err
}

// ModelDataV2_Future is a wrapper for a ModelDataV2 promised by a client call.
type ModelDataV2_Future struct{ *capnp.Future }

func (f ModelDataV2_Future) Struct() (ModelDataV2, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2(p.Struct()), err
}
func (p ModelDataV2_Future) Position() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(0, nil)}
}
func (p ModelDataV2_Future) Orientation() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(1, nil)}
}
func (p ModelDataV2_Future) Velocity() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(2, nil)}
}
func (p ModelDataV2_Future) OrientationRate() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(3, nil)}
}
func (p ModelDataV2_Future) Acceleration() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(13, nil)}
}
func (p ModelDataV2_Future) Meta() ModelDataV2_MetaData_Future {
	return ModelDataV2_MetaData_Future{Future: p.Future.Field(8, nil)}
}
func (p ModelDataV2_Future) TemporalPose() ModelDataV2_Pose_Future {
	return ModelDataV2_Pose_Future{Future: p.Future.Field(14, nil)}
}

type ModelDataV2_LeadDataV2 capnp.Struct

// ModelDataV2_LeadDataV2_TypeID is the unique identifier for the type ModelDataV2_LeadDataV2.
const ModelDataV2_LeadDataV2_TypeID = 0xa444ed2b2187af28

func NewModelDataV2_LeadDataV2(s *capnp.Segment) (ModelDataV2_LeadDataV2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ModelDataV2_LeadDataV2(st), err
}

func NewRootModelDataV2_LeadDataV2(s *capnp.Segment) (ModelDataV2_LeadDataV2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ModelDataV2_LeadDataV2(st), err
}

func ReadRootModelDataV2_LeadDataV2(msg *capnp.Message) (ModelDataV2_LeadDataV2, error) {
	root, err := msg.Root()
	return ModelDataV2_LeadDataV2(root.Struct()), err
}

func (s ModelDataV2_LeadDataV2) String() string {
	str, _ := text.Marshal(0xa444ed2b2187af28, capnp.Struct(s))
	return str
}

func (s ModelDataV2_LeadDataV2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2_LeadDataV2) DecodeFromPtr(p capnp.Ptr) ModelDataV2_LeadDataV2 {
	return ModelDataV2_LeadDataV2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2_LeadDataV2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2_LeadDataV2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2_LeadDataV2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2_LeadDataV2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2_LeadDataV2) Prob() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelDataV2_LeadDataV2) SetProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelDataV2_LeadDataV2) T() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelDataV2_LeadDataV2) SetT(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelDataV2_LeadDataV2) Xyva() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV2) HasXyva() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2_LeadDataV2) SetXyva(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewXyva sets the xyva field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV2) NewXyva(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV2) XyvaStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV2) HasXyvaStd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2_LeadDataV2) SetXyvaStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewXyvaStd sets the xyvaStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV2) NewXyvaStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ModelDataV2_LeadDataV2_List is a list of ModelDataV2_LeadDataV2.
type ModelDataV2_LeadDataV2_List = capnp.StructList[ModelDataV2_LeadDataV2]

// NewModelDataV2_LeadDataV2 creates a new list of ModelDataV2_LeadDataV2.
func NewModelDataV2_LeadDataV2_List(s *capnp.Segment, sz int32) (ModelDataV2_LeadDataV2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[ModelDataV2_LeadDataV2](l), err
}

// ModelDataV2_LeadDataV2_Future is a wrapper for a ModelDataV2_LeadDataV2 promised by a client call.
type ModelDataV2_LeadDataV2_Future struct{ *capnp.Future }

func (f ModelDataV2_LeadDataV2_Future) Struct() (ModelDataV2_LeadDataV2, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2_LeadDataV2(p.Struct()), err
}

type ModelDataV2_LeadDataV3 capnp.Struct

// ModelDataV2_LeadDataV3_TypeID is the unique identifier for the type ModelDataV2_LeadDataV3.
const ModelDataV2_LeadDataV3_TypeID = 0xd698881ad0ce7feb

func NewModelDataV2_LeadDataV3(s *capnp.Segment) (ModelDataV2_LeadDataV3, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return ModelDataV2_LeadDataV3(st), err
}

func NewRootModelDataV2_LeadDataV3(s *capnp.Segment) (ModelDataV2_LeadDataV3, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9})
	return ModelDataV2_LeadDataV3(st), err
}

func ReadRootModelDataV2_LeadDataV3(msg *capnp.Message) (ModelDataV2_LeadDataV3, error) {
	root, err := msg.Root()
	return ModelDataV2_LeadDataV3(root.Struct()), err
}

func (s ModelDataV2_LeadDataV3) String() string {
	str, _ := text.Marshal(0xd698881ad0ce7feb, capnp.Struct(s))
	return str
}

func (s ModelDataV2_LeadDataV3) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2_LeadDataV3) DecodeFromPtr(p capnp.Ptr) ModelDataV2_LeadDataV3 {
	return ModelDataV2_LeadDataV3(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2_LeadDataV3) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2_LeadDataV3) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2_LeadDataV3) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2_LeadDataV3) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2_LeadDataV3) Prob() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelDataV2_LeadDataV3) SetProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelDataV2_LeadDataV3) ProbTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelDataV2_LeadDataV3) SetProbTime(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelDataV2_LeadDataV3) T() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasT() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2_LeadDataV3) SetT(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewT sets the t field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewT(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) X() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasX() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2_LeadDataV3) SetX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) XStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasXStd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelDataV2_LeadDataV3) SetXStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewXStd sets the xStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewXStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) Y() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasY() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ModelDataV2_LeadDataV3) SetY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewY sets the y field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) YStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasYStd() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ModelDataV2_LeadDataV3) SetYStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewYStd sets the yStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewYStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) V() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ModelDataV2_LeadDataV3) SetV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) VStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasVStd() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s ModelDataV2_LeadDataV3) SetVStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVStd sets the vStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewVStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) A() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasA() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s ModelDataV2_LeadDataV3) SetA(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewA sets the a field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewA(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s ModelDataV2_LeadDataV3) AStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_LeadDataV3) HasAStd() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s ModelDataV2_LeadDataV3) SetAStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAStd sets the aStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_LeadDataV3) NewAStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}

// ModelDataV2_LeadDataV3_List is a list of ModelDataV2_LeadDataV3.
type ModelDataV2_LeadDataV3_List = capnp.StructList[ModelDataV2_LeadDataV3]

// NewModelDataV2_LeadDataV3 creates a new list of ModelDataV2_LeadDataV3.
func NewModelDataV2_LeadDataV3_List(s *capnp.Segment, sz int32) (ModelDataV2_LeadDataV3_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 9}, sz)
	return capnp.StructList[ModelDataV2_LeadDataV3](l), err
}

// ModelDataV2_LeadDataV3_Future is a wrapper for a ModelDataV2_LeadDataV3 promised by a client call.
type ModelDataV2_LeadDataV3_Future struct{ *capnp.Future }

func (f ModelDataV2_LeadDataV3_Future) Struct() (ModelDataV2_LeadDataV3, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2_LeadDataV3(p.Struct()), err
}

type ModelDataV2_MetaData capnp.Struct

// ModelDataV2_MetaData_TypeID is the unique identifier for the type ModelDataV2_MetaData.
const ModelDataV2_MetaData_TypeID = 0xd1646ab3b45cfabd

func NewModelDataV2_MetaData(s *capnp.Segment) (ModelDataV2_MetaData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ModelDataV2_MetaData(st), err
}

func NewRootModelDataV2_MetaData(s *capnp.Segment) (ModelDataV2_MetaData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return ModelDataV2_MetaData(st), err
}

func ReadRootModelDataV2_MetaData(msg *capnp.Message) (ModelDataV2_MetaData, error) {
	root, err := msg.Root()
	return ModelDataV2_MetaData(root.Struct()), err
}

func (s ModelDataV2_MetaData) String() string {
	str, _ := text.Marshal(0xd1646ab3b45cfabd, capnp.Struct(s))
	return str
}

func (s ModelDataV2_MetaData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2_MetaData) DecodeFromPtr(p capnp.Ptr) ModelDataV2_MetaData {
	return ModelDataV2_MetaData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2_MetaData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2_MetaData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2_MetaData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2_MetaData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2_MetaData) EngagedProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelDataV2_MetaData) SetEngagedProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelDataV2_MetaData) DesirePrediction() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_MetaData) HasDesirePrediction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2_MetaData) SetDesirePrediction(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDesirePrediction sets the desirePrediction field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_MetaData) NewDesirePrediction(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelDataV2_MetaData) DesireState() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_MetaData) HasDesireState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2_MetaData) SetDesireState(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewDesireState sets the desireState field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_MetaData) NewDesireState(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelDataV2_MetaData) DisengagePredictions() (ModelDataV2_DisengagePredictions, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ModelDataV2_DisengagePredictions(p.Struct()), err
}

func (s ModelDataV2_MetaData) HasDisengagePredictions() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelDataV2_MetaData) SetDisengagePredictions(v ModelDataV2_DisengagePredictions) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewDisengagePredictions sets the disengagePredictions field to a newly
// allocated ModelDataV2_DisengagePredictions struct, preferring placement in s's segment.
func (s ModelDataV2_MetaData) NewDisengagePredictions() (ModelDataV2_DisengagePredictions, error) {
	ss, err := NewModelDataV2_DisengagePredictions(capnp.Struct(s).Segment())
	if err != nil {
		return ModelDataV2_DisengagePredictions{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelDataV2_MetaData) HardBrakePredicted() bool {
	return capnp.Struct(s).Bit(128)
}

func (s ModelDataV2_MetaData) SetHardBrakePredicted(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s ModelDataV2_MetaData) BrakeDisengageProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelDataV2_MetaData) SetBrakeDisengageProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelDataV2_MetaData) GasDisengageProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ModelDataV2_MetaData) SetGasDisengageProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ModelDataV2_MetaData) SteerOverrideProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ModelDataV2_MetaData) SetSteerOverrideProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// ModelDataV2_MetaData_List is a list of ModelDataV2_MetaData.
type ModelDataV2_MetaData_List = capnp.StructList[ModelDataV2_MetaData]

// NewModelDataV2_MetaData creates a new list of ModelDataV2_MetaData.
func NewModelDataV2_MetaData_List(s *capnp.Segment, sz int32) (ModelDataV2_MetaData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[ModelDataV2_MetaData](l), err
}

// ModelDataV2_MetaData_Future is a wrapper for a ModelDataV2_MetaData promised by a client call.
type ModelDataV2_MetaData_Future struct{ *capnp.Future }

func (f ModelDataV2_MetaData_Future) Struct() (ModelDataV2_MetaData, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2_MetaData(p.Struct()), err
}
func (p ModelDataV2_MetaData_Future) DisengagePredictions() ModelDataV2_DisengagePredictions_Future {
	return ModelDataV2_DisengagePredictions_Future{Future: p.Future.Field(2, nil)}
}

type ModelDataV2_ConfidenceClass uint16

// ModelDataV2_ConfidenceClass_TypeID is the unique identifier for the type ModelDataV2_ConfidenceClass.
const ModelDataV2_ConfidenceClass_TypeID = 0xaa3247d9d2a61cd4

// Values of ModelDataV2_ConfidenceClass.
const (
	ModelDataV2_ConfidenceClass_red    ModelDataV2_ConfidenceClass = 0
	ModelDataV2_ConfidenceClass_yellow ModelDataV2_ConfidenceClass = 1
	ModelDataV2_ConfidenceClass_green  ModelDataV2_ConfidenceClass = 2
)

// String returns the enum's constant name.
func (c ModelDataV2_ConfidenceClass) String() string {
	switch c {
	case ModelDataV2_ConfidenceClass_red:
		return "red"
	case ModelDataV2_ConfidenceClass_yellow:
		return "yellow"
	case ModelDataV2_ConfidenceClass_green:
		return "green"

	default:
		return ""
	}
}

// ModelDataV2_ConfidenceClassFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ModelDataV2_ConfidenceClassFromString(c string) ModelDataV2_ConfidenceClass {
	switch c {
	case "red":
		return ModelDataV2_ConfidenceClass_red
	case "yellow":
		return ModelDataV2_ConfidenceClass_yellow
	case "green":
		return ModelDataV2_ConfidenceClass_green

	default:
		return 0
	}
}

type ModelDataV2_ConfidenceClass_List = capnp.EnumList[ModelDataV2_ConfidenceClass]

func NewModelDataV2_ConfidenceClass_List(s *capnp.Segment, sz int32) (ModelDataV2_ConfidenceClass_List, error) {
	return capnp.NewEnumList[ModelDataV2_ConfidenceClass](s, sz)
}

type ModelDataV2_DisengagePredictions capnp.Struct

// ModelDataV2_DisengagePredictions_TypeID is the unique identifier for the type ModelDataV2_DisengagePredictions.
const ModelDataV2_DisengagePredictions_TypeID = 0x860aa5ddbcdc8d25

func NewModelDataV2_DisengagePredictions(s *capnp.Segment) (ModelDataV2_DisengagePredictions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return ModelDataV2_DisengagePredictions(st), err
}

func NewRootModelDataV2_DisengagePredictions(s *capnp.Segment) (ModelDataV2_DisengagePredictions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7})
	return ModelDataV2_DisengagePredictions(st), err
}

func ReadRootModelDataV2_DisengagePredictions(msg *capnp.Message) (ModelDataV2_DisengagePredictions, error) {
	root, err := msg.Root()
	return ModelDataV2_DisengagePredictions(root.Struct()), err
}

func (s ModelDataV2_DisengagePredictions) String() string {
	str, _ := text.Marshal(0x860aa5ddbcdc8d25, capnp.Struct(s))
	return str
}

func (s ModelDataV2_DisengagePredictions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2_DisengagePredictions) DecodeFromPtr(p capnp.Ptr) ModelDataV2_DisengagePredictions {
	return ModelDataV2_DisengagePredictions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2_DisengagePredictions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2_DisengagePredictions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2_DisengagePredictions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2_DisengagePredictions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2_DisengagePredictions) T() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasT() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2_DisengagePredictions) SetT(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewT sets the t field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewT(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) BrakeDisengageProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasBrakeDisengageProbs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2_DisengagePredictions) SetBrakeDisengageProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewBrakeDisengageProbs sets the brakeDisengageProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewBrakeDisengageProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) GasDisengageProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasGasDisengageProbs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelDataV2_DisengagePredictions) SetGasDisengageProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewGasDisengageProbs sets the gasDisengageProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewGasDisengageProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) SteerOverrideProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasSteerOverrideProbs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ModelDataV2_DisengagePredictions) SetSteerOverrideProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewSteerOverrideProbs sets the steerOverrideProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewSteerOverrideProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) Brake3MetersPerSecondSquaredProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasBrake3MetersPerSecondSquaredProbs() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ModelDataV2_DisengagePredictions) SetBrake3MetersPerSecondSquaredProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBrake3MetersPerSecondSquaredProbs sets the brake3MetersPerSecondSquaredProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewBrake3MetersPerSecondSquaredProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) Brake4MetersPerSecondSquaredProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasBrake4MetersPerSecondSquaredProbs() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ModelDataV2_DisengagePredictions) SetBrake4MetersPerSecondSquaredProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewBrake4MetersPerSecondSquaredProbs sets the brake4MetersPerSecondSquaredProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewBrake4MetersPerSecondSquaredProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s ModelDataV2_DisengagePredictions) Brake5MetersPerSecondSquaredProbs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_DisengagePredictions) HasBrake5MetersPerSecondSquaredProbs() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s ModelDataV2_DisengagePredictions) SetBrake5MetersPerSecondSquaredProbs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewBrake5MetersPerSecondSquaredProbs sets the brake5MetersPerSecondSquaredProbs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_DisengagePredictions) NewBrake5MetersPerSecondSquaredProbs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// ModelDataV2_DisengagePredictions_List is a list of ModelDataV2_DisengagePredictions.
type ModelDataV2_DisengagePredictions_List = capnp.StructList[ModelDataV2_DisengagePredictions]

// NewModelDataV2_DisengagePredictions creates a new list of ModelDataV2_DisengagePredictions.
func NewModelDataV2_DisengagePredictions_List(s *capnp.Segment, sz int32) (ModelDataV2_DisengagePredictions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 7}, sz)
	return capnp.StructList[ModelDataV2_DisengagePredictions](l), err
}

// ModelDataV2_DisengagePredictions_Future is a wrapper for a ModelDataV2_DisengagePredictions promised by a client call.
type ModelDataV2_DisengagePredictions_Future struct{ *capnp.Future }

func (f ModelDataV2_DisengagePredictions_Future) Struct() (ModelDataV2_DisengagePredictions, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2_DisengagePredictions(p.Struct()), err
}

type ModelDataV2_Pose capnp.Struct

// ModelDataV2_Pose_TypeID is the unique identifier for the type ModelDataV2_Pose.
const ModelDataV2_Pose_TypeID = 0xfb3ec0702e67884f

func NewModelDataV2_Pose(s *capnp.Segment) (ModelDataV2_Pose, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ModelDataV2_Pose(st), err
}

func NewRootModelDataV2_Pose(s *capnp.Segment) (ModelDataV2_Pose, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ModelDataV2_Pose(st), err
}

func ReadRootModelDataV2_Pose(msg *capnp.Message) (ModelDataV2_Pose, error) {
	root, err := msg.Root()
	return ModelDataV2_Pose(root.Struct()), err
}

func (s ModelDataV2_Pose) String() string {
	str, _ := text.Marshal(0xfb3ec0702e67884f, capnp.Struct(s))
	return str
}

func (s ModelDataV2_Pose) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelDataV2_Pose) DecodeFromPtr(p capnp.Ptr) ModelDataV2_Pose {
	return ModelDataV2_Pose(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelDataV2_Pose) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelDataV2_Pose) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelDataV2_Pose) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelDataV2_Pose) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelDataV2_Pose) Trans() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_Pose) HasTrans() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelDataV2_Pose) SetTrans(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTrans sets the trans field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_Pose) NewTrans(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelDataV2_Pose) Rot() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_Pose) HasRot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelDataV2_Pose) SetRot(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRot sets the rot field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_Pose) NewRot(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelDataV2_Pose) TransStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_Pose) HasTransStd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelDataV2_Pose) SetTransStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTransStd sets the transStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_Pose) NewTransStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ModelDataV2_Pose) RotStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s ModelDataV2_Pose) HasRotStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ModelDataV2_Pose) SetRotStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRotStd sets the rotStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelDataV2_Pose) NewRotStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// ModelDataV2_Pose_List is a list of ModelDataV2_Pose.
type ModelDataV2_Pose_List = capnp.StructList[ModelDataV2_Pose]

// NewModelDataV2_Pose creates a new list of ModelDataV2_Pose.
func NewModelDataV2_Pose_List(s *capnp.Segment, sz int32) (ModelDataV2_Pose_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[ModelDataV2_Pose](l), err
}

// ModelDataV2_Pose_Future is a wrapper for a ModelDataV2_Pose promised by a client call.
type ModelDataV2_Pose_Future struct{ *capnp.Future }

func (f ModelDataV2_Pose_Future) Struct() (ModelDataV2_Pose, error) {
	p, err := f.Future.Ptr()
	return ModelDataV2_Pose(p.Struct()), err
}

type EncodeIndex capnp.Struct

// EncodeIndex_TypeID is the unique identifier for the type EncodeIndex.
const EncodeIndex_TypeID = 0x89d394e3541735fc

func NewEncodeIndex(s *capnp.Segment) (EncodeIndex, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return EncodeIndex(st), err
}

func NewRootEncodeIndex(s *capnp.Segment) (EncodeIndex, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0})
	return EncodeIndex(st), err
}

func ReadRootEncodeIndex(msg *capnp.Message) (EncodeIndex, error) {
	root, err := msg.Root()
	return EncodeIndex(root.Struct()), err
}

func (s EncodeIndex) String() string {
	str, _ := text.Marshal(0x89d394e3541735fc, capnp.Struct(s))
	return str
}

func (s EncodeIndex) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EncodeIndex) DecodeFromPtr(p capnp.Ptr) EncodeIndex {
	return EncodeIndex(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EncodeIndex) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EncodeIndex) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EncodeIndex) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EncodeIndex) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EncodeIndex) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s EncodeIndex) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s EncodeIndex) Type() EncodeIndex_Type {
	return EncodeIndex_Type(capnp.Struct(s).Uint16(4))
}

func (s EncodeIndex) SetType(v EncodeIndex_Type) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s EncodeIndex) EncodeId() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s EncodeIndex) SetEncodeId(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s EncodeIndex) SegmentNum() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s EncodeIndex) SetSegmentNum(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s EncodeIndex) SegmentId() uint32 {
	return capnp.Struct(s).Uint32(16)
}

func (s EncodeIndex) SetSegmentId(v uint32) {
	capnp.Struct(s).SetUint32(16, v)
}

func (s EncodeIndex) SegmentIdEncode() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s EncodeIndex) SetSegmentIdEncode(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

func (s EncodeIndex) TimestampSof() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s EncodeIndex) SetTimestampSof(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s EncodeIndex) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s EncodeIndex) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s EncodeIndex) Flags() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s EncodeIndex) SetFlags(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s EncodeIndex) Len() uint32 {
	return capnp.Struct(s).Uint32(44)
}

func (s EncodeIndex) SetLen(v uint32) {
	capnp.Struct(s).SetUint32(44, v)
}

// EncodeIndex_List is a list of EncodeIndex.
type EncodeIndex_List = capnp.StructList[EncodeIndex]

// NewEncodeIndex creates a new list of EncodeIndex.
func NewEncodeIndex_List(s *capnp.Segment, sz int32) (EncodeIndex_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 0}, sz)
	return capnp.StructList[EncodeIndex](l), err
}

// EncodeIndex_Future is a wrapper for a EncodeIndex promised by a client call.
type EncodeIndex_Future struct{ *capnp.Future }

func (f EncodeIndex_Future) Struct() (EncodeIndex, error) {
	p, err := f.Future.Ptr()
	return EncodeIndex(p.Struct()), err
}

type EncodeIndex_Type uint16

// EncodeIndex_Type_TypeID is the unique identifier for the type EncodeIndex_Type.
const EncodeIndex_Type_TypeID = 0xc0ad259ec157ccd3

// Values of EncodeIndex_Type.
const (
	EncodeIndex_Type_bigBoxLossless             EncodeIndex_Type = 0
	EncodeIndex_Type_fullHEVC                   EncodeIndex_Type = 1
	EncodeIndex_Type_qcameraH264                EncodeIndex_Type = 6
	EncodeIndex_Type_livestreamH264             EncodeIndex_Type = 7
	EncodeIndex_Type_bigBoxHEVCDEPRECATED       EncodeIndex_Type = 2
	EncodeIndex_Type_chffrAndroidH264DEPRECATED EncodeIndex_Type = 3
	EncodeIndex_Type_fullLosslessClipDEPRECATED EncodeIndex_Type = 4
	EncodeIndex_Type_frontDEPRECATED            EncodeIndex_Type = 5
)

// String returns the enum's constant name.
func (c EncodeIndex_Type) String() string {
	switch c {
	case EncodeIndex_Type_bigBoxLossless:
		return "bigBoxLossless"
	case EncodeIndex_Type_fullHEVC:
		return "fullHEVC"
	case EncodeIndex_Type_qcameraH264:
		return "qcameraH264"
	case EncodeIndex_Type_livestreamH264:
		return "livestreamH264"
	case EncodeIndex_Type_bigBoxHEVCDEPRECATED:
		return "bigBoxHEVCDEPRECATED"
	case EncodeIndex_Type_chffrAndroidH264DEPRECATED:
		return "chffrAndroidH264DEPRECATED"
	case EncodeIndex_Type_fullLosslessClipDEPRECATED:
		return "fullLosslessClipDEPRECATED"
	case EncodeIndex_Type_frontDEPRECATED:
		return "frontDEPRECATED"

	default:
		return ""
	}
}

// EncodeIndex_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EncodeIndex_TypeFromString(c string) EncodeIndex_Type {
	switch c {
	case "bigBoxLossless":
		return EncodeIndex_Type_bigBoxLossless
	case "fullHEVC":
		return EncodeIndex_Type_fullHEVC
	case "qcameraH264":
		return EncodeIndex_Type_qcameraH264
	case "livestreamH264":
		return EncodeIndex_Type_livestreamH264
	case "bigBoxHEVCDEPRECATED":
		return EncodeIndex_Type_bigBoxHEVCDEPRECATED
	case "chffrAndroidH264DEPRECATED":
		return EncodeIndex_Type_chffrAndroidH264DEPRECATED
	case "fullLosslessClipDEPRECATED":
		return EncodeIndex_Type_fullLosslessClipDEPRECATED
	case "frontDEPRECATED":
		return EncodeIndex_Type_frontDEPRECATED

	default:
		return 0
	}
}

type EncodeIndex_Type_List = capnp.EnumList[EncodeIndex_Type]

func NewEncodeIndex_Type_List(s *capnp.Segment, sz int32) (EncodeIndex_Type_List, error) {
	return capnp.NewEnumList[EncodeIndex_Type](s, sz)
}

type AndroidLogEntry capnp.Struct

// AndroidLogEntry_TypeID is the unique identifier for the type AndroidLogEntry.
const AndroidLogEntry_TypeID = 0xea095da1894f7d85

func NewAndroidLogEntry(s *capnp.Segment) (AndroidLogEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return AndroidLogEntry(st), err
}

func NewRootAndroidLogEntry(s *capnp.Segment) (AndroidLogEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return AndroidLogEntry(st), err
}

func ReadRootAndroidLogEntry(msg *capnp.Message) (AndroidLogEntry, error) {
	root, err := msg.Root()
	return AndroidLogEntry(root.Struct()), err
}

func (s AndroidLogEntry) String() string {
	str, _ := text.Marshal(0xea095da1894f7d85, capnp.Struct(s))
	return str
}

func (s AndroidLogEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidLogEntry) DecodeFromPtr(p capnp.Ptr) AndroidLogEntry {
	return AndroidLogEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidLogEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AndroidLogEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidLogEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidLogEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidLogEntry) Id() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s AndroidLogEntry) SetId(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s AndroidLogEntry) Ts() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s AndroidLogEntry) SetTs(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s AndroidLogEntry) Priority() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s AndroidLogEntry) SetPriority(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s AndroidLogEntry) Pid() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AndroidLogEntry) SetPid(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AndroidLogEntry) Tid() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AndroidLogEntry) SetTid(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AndroidLogEntry) Tag() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s AndroidLogEntry) HasTag() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AndroidLogEntry) TagBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s AndroidLogEntry) SetTag(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s AndroidLogEntry) MessagePtr() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AndroidLogEntry) HasMessage() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AndroidLogEntry) MessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AndroidLogEntry) SetMessage(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// AndroidLogEntry_List is a list of AndroidLogEntry.
type AndroidLogEntry_List = capnp.StructList[AndroidLogEntry]

// NewAndroidLogEntry creates a new list of AndroidLogEntry.
func NewAndroidLogEntry_List(s *capnp.Segment, sz int32) (AndroidLogEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[AndroidLogEntry](l), err
}

// AndroidLogEntry_Future is a wrapper for a AndroidLogEntry promised by a client call.
type AndroidLogEntry_Future struct{ *capnp.Future }

func (f AndroidLogEntry_Future) Struct() (AndroidLogEntry, error) {
	p, err := f.Future.Ptr()
	return AndroidLogEntry(p.Struct()), err
}

type LongitudinalPlan capnp.Struct

// LongitudinalPlan_TypeID is the unique identifier for the type LongitudinalPlan.
const LongitudinalPlan_TypeID = 0xe00b5b3eba12876c

func NewLongitudinalPlan(s *capnp.Segment) (LongitudinalPlan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 6})
	return LongitudinalPlan(st), err
}

func NewRootLongitudinalPlan(s *capnp.Segment) (LongitudinalPlan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 6})
	return LongitudinalPlan(st), err
}

func ReadRootLongitudinalPlan(msg *capnp.Message) (LongitudinalPlan, error) {
	root, err := msg.Root()
	return LongitudinalPlan(root.Struct()), err
}

func (s LongitudinalPlan) String() string {
	str, _ := text.Marshal(0xe00b5b3eba12876c, capnp.Struct(s))
	return str
}

func (s LongitudinalPlan) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LongitudinalPlan) DecodeFromPtr(p capnp.Ptr) LongitudinalPlan {
	return LongitudinalPlan(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LongitudinalPlan) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LongitudinalPlan) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LongitudinalPlan) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LongitudinalPlan) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LongitudinalPlan) ModelMonoTime() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s LongitudinalPlan) SetModelMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s LongitudinalPlan) HasLead() bool {
	return capnp.Struct(s).Bit(2)
}

func (s LongitudinalPlan) SetHasLead(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s LongitudinalPlan) Fcw() bool {
	return capnp.Struct(s).Bit(3)
}

func (s LongitudinalPlan) SetFcw(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s LongitudinalPlan) LongitudinalPlanSource() LongitudinalPlan_LongitudinalPlanSource {
	return LongitudinalPlan_LongitudinalPlanSource(capnp.Struct(s).Uint16(2))
}

func (s LongitudinalPlan) SetLongitudinalPlanSource(v LongitudinalPlan_LongitudinalPlanSource) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s LongitudinalPlan) ProcessingDelay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72))
}

func (s LongitudinalPlan) SetProcessingDelay(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v))
}

func (s LongitudinalPlan) Accels() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan) HasAccels() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LongitudinalPlan) SetAccels(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAccels sets the accels field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan) NewAccels(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan) Speeds() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan) HasSpeeds() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LongitudinalPlan) SetSpeeds(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSpeeds sets the speeds field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan) NewSpeeds(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan) Jerks() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan) HasJerks() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LongitudinalPlan) SetJerks(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewJerks sets the jerks field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan) NewJerks(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan) SolverExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(76))
}

func (s LongitudinalPlan) SetSolverExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(76, math.Float32bits(v))
}

func (s LongitudinalPlan) Personality() LongitudinalPersonality {
	return LongitudinalPersonality(capnp.Struct(s).Uint16(80))
}

func (s LongitudinalPlan) SetPersonality(v LongitudinalPersonality) {
	capnp.Struct(s).SetUint16(80, uint16(v))
}

func (s LongitudinalPlan) VCruiseDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s LongitudinalPlan) SetVCruiseDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s LongitudinalPlan) ACruiseDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s LongitudinalPlan) SetACruiseDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s LongitudinalPlan) VTargetDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LongitudinalPlan) SetVTargetDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LongitudinalPlan) VTargetFutureDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s LongitudinalPlan) SetVTargetFutureDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s LongitudinalPlan) ATargetDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s LongitudinalPlan) SetATargetDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s LongitudinalPlan) VStartDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s LongitudinalPlan) SetVStartDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s LongitudinalPlan) AStartDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s LongitudinalPlan) SetAStartDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s LongitudinalPlan) VMaxDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s LongitudinalPlan) SetVMaxDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s LongitudinalPlan) RadarStateMonoTimeDEPRECATED() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s LongitudinalPlan) SetRadarStateMonoTimeDEPRECATED(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s LongitudinalPlan) JerkFactorDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LongitudinalPlan) SetJerkFactorDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LongitudinalPlan) HasLeftLaneDEPRECATED() bool {
	return capnp.Struct(s).Bit(6)
}

func (s LongitudinalPlan) SetHasLeftLaneDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s LongitudinalPlan) HasRightLaneDEPRECATED() bool {
	return capnp.Struct(s).Bit(7)
}

func (s LongitudinalPlan) SetHasRightLaneDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s LongitudinalPlan) ATargetMinDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LongitudinalPlan) SetATargetMinDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LongitudinalPlan) ATargetMaxDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LongitudinalPlan) SetATargetMaxDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LongitudinalPlan) LateralValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LongitudinalPlan) SetLateralValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s LongitudinalPlan) LongitudinalValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(1)
}

func (s LongitudinalPlan) SetLongitudinalValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s LongitudinalPlan) DPolyDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan) HasDPolyDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LongitudinalPlan) SetDPolyDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDPolyDEPRECATED sets the dPolyDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan) NewDPolyDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan) LaneWidthDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s LongitudinalPlan) SetLaneWidthDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s LongitudinalPlan) VCurvatureDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s LongitudinalPlan) SetVCurvatureDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s LongitudinalPlan) DecelForTurnDEPRECATED() bool {
	return capnp.Struct(s).Bit(5)
}

func (s LongitudinalPlan) SetDecelForTurnDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s LongitudinalPlan) MapValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(8)
}

func (s LongitudinalPlan) SetMapValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s LongitudinalPlan) RadarValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(9)
}

func (s LongitudinalPlan) SetRadarValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(9, v)
}

func (s LongitudinalPlan) RadarCanErrorDEPRECATED() bool {
	return capnp.Struct(s).Bit(10)
}

func (s LongitudinalPlan) SetRadarCanErrorDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(10, v)
}

func (s LongitudinalPlan) CommIssueDEPRECATED() bool {
	return capnp.Struct(s).Bit(11)
}

func (s LongitudinalPlan) SetCommIssueDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(11, v)
}

func (s LongitudinalPlan) EventsDEPRECATED() (CarEvent_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CarEvent_List(p.List()), err
}

func (s LongitudinalPlan) HasEventsDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LongitudinalPlan) SetEventsDEPRECATED(v CarEvent_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEventsDEPRECATED sets the eventsDEPRECATED field to a newly
// allocated CarEvent_List, preferring placement in s's segment.
func (s LongitudinalPlan) NewEventsDEPRECATED(n int32) (CarEvent_List, error) {
	l, err := NewCarEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan) GpsTrajectoryDEPRECATED() (LongitudinalPlan_GpsTrajectory, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LongitudinalPlan_GpsTrajectory(p.Struct()), err
}

func (s LongitudinalPlan) HasGpsTrajectoryDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LongitudinalPlan) SetGpsTrajectoryDEPRECATED(v LongitudinalPlan_GpsTrajectory) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewGpsTrajectoryDEPRECATED sets the gpsTrajectoryDEPRECATED field to a newly
// allocated LongitudinalPlan_GpsTrajectory struct, preferring placement in s's segment.
func (s LongitudinalPlan) NewGpsTrajectoryDEPRECATED() (LongitudinalPlan_GpsTrajectory, error) {
	ss, err := NewLongitudinalPlan_GpsTrajectory(capnp.Struct(s).Segment())
	if err != nil {
		return LongitudinalPlan_GpsTrajectory{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LongitudinalPlan) GpsPlannerActiveDEPRECATED() bool {
	return capnp.Struct(s).Bit(4)
}

func (s LongitudinalPlan) SetGpsPlannerActiveDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

// LongitudinalPlan_List is a list of LongitudinalPlan.
type LongitudinalPlan_List = capnp.StructList[LongitudinalPlan]

// NewLongitudinalPlan creates a new list of LongitudinalPlan.
func NewLongitudinalPlan_List(s *capnp.Segment, sz int32) (LongitudinalPlan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 6}, sz)
	return capnp.StructList[LongitudinalPlan](l), err
}

// LongitudinalPlan_Future is a wrapper for a LongitudinalPlan promised by a client call.
type LongitudinalPlan_Future struct{ *capnp.Future }

func (f LongitudinalPlan_Future) Struct() (LongitudinalPlan, error) {
	p, err := f.Future.Ptr()
	return LongitudinalPlan(p.Struct()), err
}
func (p LongitudinalPlan_Future) GpsTrajectoryDEPRECATED() LongitudinalPlan_GpsTrajectory_Future {
	return LongitudinalPlan_GpsTrajectory_Future{Future: p.Future.Field(1, nil)}
}

type LongitudinalPlan_LongitudinalPlanSource uint16

// LongitudinalPlan_LongitudinalPlanSource_TypeID is the unique identifier for the type LongitudinalPlan_LongitudinalPlanSource.
const LongitudinalPlan_LongitudinalPlanSource_TypeID = 0xb231a753cc079120

// Values of LongitudinalPlan_LongitudinalPlanSource.
const (
	LongitudinalPlan_LongitudinalPlanSource_cruise LongitudinalPlan_LongitudinalPlanSource = 0
	LongitudinalPlan_LongitudinalPlanSource_lead0  LongitudinalPlan_LongitudinalPlanSource = 1
	LongitudinalPlan_LongitudinalPlanSource_lead1  LongitudinalPlan_LongitudinalPlanSource = 2
	LongitudinalPlan_LongitudinalPlanSource_lead2  LongitudinalPlan_LongitudinalPlanSource = 3
	LongitudinalPlan_LongitudinalPlanSource_e2e    LongitudinalPlan_LongitudinalPlanSource = 4
)

// String returns the enum's constant name.
func (c LongitudinalPlan_LongitudinalPlanSource) String() string {
	switch c {
	case LongitudinalPlan_LongitudinalPlanSource_cruise:
		return "cruise"
	case LongitudinalPlan_LongitudinalPlanSource_lead0:
		return "lead0"
	case LongitudinalPlan_LongitudinalPlanSource_lead1:
		return "lead1"
	case LongitudinalPlan_LongitudinalPlanSource_lead2:
		return "lead2"
	case LongitudinalPlan_LongitudinalPlanSource_e2e:
		return "e2e"

	default:
		return ""
	}
}

// LongitudinalPlan_LongitudinalPlanSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LongitudinalPlan_LongitudinalPlanSourceFromString(c string) LongitudinalPlan_LongitudinalPlanSource {
	switch c {
	case "cruise":
		return LongitudinalPlan_LongitudinalPlanSource_cruise
	case "lead0":
		return LongitudinalPlan_LongitudinalPlanSource_lead0
	case "lead1":
		return LongitudinalPlan_LongitudinalPlanSource_lead1
	case "lead2":
		return LongitudinalPlan_LongitudinalPlanSource_lead2
	case "e2e":
		return LongitudinalPlan_LongitudinalPlanSource_e2e

	default:
		return 0
	}
}

type LongitudinalPlan_LongitudinalPlanSource_List = capnp.EnumList[LongitudinalPlan_LongitudinalPlanSource]

func NewLongitudinalPlan_LongitudinalPlanSource_List(s *capnp.Segment, sz int32) (LongitudinalPlan_LongitudinalPlanSource_List, error) {
	return capnp.NewEnumList[LongitudinalPlan_LongitudinalPlanSource](s, sz)
}

type LongitudinalPlan_GpsTrajectory capnp.Struct

// LongitudinalPlan_GpsTrajectory_TypeID is the unique identifier for the type LongitudinalPlan_GpsTrajectory.
const LongitudinalPlan_GpsTrajectory_TypeID = 0x8cfeb072f5301000

func NewLongitudinalPlan_GpsTrajectory(s *capnp.Segment) (LongitudinalPlan_GpsTrajectory, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LongitudinalPlan_GpsTrajectory(st), err
}

func NewRootLongitudinalPlan_GpsTrajectory(s *capnp.Segment) (LongitudinalPlan_GpsTrajectory, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LongitudinalPlan_GpsTrajectory(st), err
}

func ReadRootLongitudinalPlan_GpsTrajectory(msg *capnp.Message) (LongitudinalPlan_GpsTrajectory, error) {
	root, err := msg.Root()
	return LongitudinalPlan_GpsTrajectory(root.Struct()), err
}

func (s LongitudinalPlan_GpsTrajectory) String() string {
	str, _ := text.Marshal(0x8cfeb072f5301000, capnp.Struct(s))
	return str
}

func (s LongitudinalPlan_GpsTrajectory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LongitudinalPlan_GpsTrajectory) DecodeFromPtr(p capnp.Ptr) LongitudinalPlan_GpsTrajectory {
	return LongitudinalPlan_GpsTrajectory(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LongitudinalPlan_GpsTrajectory) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LongitudinalPlan_GpsTrajectory) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LongitudinalPlan_GpsTrajectory) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LongitudinalPlan_GpsTrajectory) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LongitudinalPlan_GpsTrajectory) X() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan_GpsTrajectory) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LongitudinalPlan_GpsTrajectory) SetX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan_GpsTrajectory) NewX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LongitudinalPlan_GpsTrajectory) Y() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LongitudinalPlan_GpsTrajectory) HasY() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LongitudinalPlan_GpsTrajectory) SetY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewY sets the y field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LongitudinalPlan_GpsTrajectory) NewY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// LongitudinalPlan_GpsTrajectory_List is a list of LongitudinalPlan_GpsTrajectory.
type LongitudinalPlan_GpsTrajectory_List = capnp.StructList[LongitudinalPlan_GpsTrajectory]

// NewLongitudinalPlan_GpsTrajectory creates a new list of LongitudinalPlan_GpsTrajectory.
func NewLongitudinalPlan_GpsTrajectory_List(s *capnp.Segment, sz int32) (LongitudinalPlan_GpsTrajectory_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LongitudinalPlan_GpsTrajectory](l), err
}

// LongitudinalPlan_GpsTrajectory_Future is a wrapper for a LongitudinalPlan_GpsTrajectory promised by a client call.
type LongitudinalPlan_GpsTrajectory_Future struct{ *capnp.Future }

func (f LongitudinalPlan_GpsTrajectory_Future) Struct() (LongitudinalPlan_GpsTrajectory, error) {
	p, err := f.Future.Ptr()
	return LongitudinalPlan_GpsTrajectory(p.Struct()), err
}

type UiPlan capnp.Struct

// UiPlan_TypeID is the unique identifier for the type UiPlan.
const UiPlan_TypeID = 0xfc0c9bb05e3927c1

func NewUiPlan(s *capnp.Segment) (UiPlan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UiPlan(st), err
}

func NewRootUiPlan(s *capnp.Segment) (UiPlan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UiPlan(st), err
}

func ReadRootUiPlan(msg *capnp.Message) (UiPlan, error) {
	root, err := msg.Root()
	return UiPlan(root.Struct()), err
}

func (s UiPlan) String() string {
	str, _ := text.Marshal(0xfc0c9bb05e3927c1, capnp.Struct(s))
	return str
}

func (s UiPlan) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiPlan) DecodeFromPtr(p capnp.Ptr) UiPlan {
	return UiPlan(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiPlan) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiPlan) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiPlan) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiPlan) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiPlan) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s UiPlan) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s UiPlan) Position() (XYZTData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return XYZTData(p.Struct()), err
}

func (s UiPlan) HasPosition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiPlan) SetPosition(v XYZTData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated XYZTData struct, preferring placement in s's segment.
func (s UiPlan) NewPosition() (XYZTData, error) {
	ss, err := NewXYZTData(capnp.Struct(s).Segment())
	if err != nil {
		return XYZTData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiPlan) Accel() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s UiPlan) HasAccel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiPlan) SetAccel(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAccel sets the accel field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s UiPlan) NewAccel(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// UiPlan_List is a list of UiPlan.
type UiPlan_List = capnp.StructList[UiPlan]

// NewUiPlan creates a new list of UiPlan.
func NewUiPlan_List(s *capnp.Segment, sz int32) (UiPlan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[UiPlan](l), err
}

// UiPlan_Future is a wrapper for a UiPlan promised by a client call.
type UiPlan_Future struct{ *capnp.Future }

func (f UiPlan_Future) Struct() (UiPlan, error) {
	p, err := f.Future.Ptr()
	return UiPlan(p.Struct()), err
}
func (p UiPlan_Future) Position() XYZTData_Future {
	return XYZTData_Future{Future: p.Future.Field(0, nil)}
}

type LateralPlan capnp.Struct

// LateralPlan_TypeID is the unique identifier for the type LateralPlan.
const LateralPlan_TypeID = 0xe1e9318e2ae8b51e

func NewLateralPlan(s *capnp.Segment) (LateralPlan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 9})
	return LateralPlan(st), err
}

func NewRootLateralPlan(s *capnp.Segment) (LateralPlan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 9})
	return LateralPlan(st), err
}

func ReadRootLateralPlan(msg *capnp.Message) (LateralPlan, error) {
	root, err := msg.Root()
	return LateralPlan(root.Struct()), err
}

func (s LateralPlan) String() string {
	str, _ := text.Marshal(0xe1e9318e2ae8b51e, capnp.Struct(s))
	return str
}

func (s LateralPlan) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LateralPlan) DecodeFromPtr(p capnp.Ptr) LateralPlan {
	return LateralPlan(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LateralPlan) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LateralPlan) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LateralPlan) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LateralPlan) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LateralPlan) ModelMonoTime() uint64 {
	return capnp.Struct(s).Uint64(64)
}

func (s LateralPlan) SetModelMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(64, v)
}

func (s LateralPlan) LaneWidthDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s LateralPlan) SetLaneWidthDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s LateralPlan) LProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LateralPlan) SetLProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LateralPlan) RProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LateralPlan) SetRProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LateralPlan) DPathPoints() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasDPathPoints() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LateralPlan) SetDPathPoints(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDPathPoints sets the dPathPoints field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewDPathPoints(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LateralPlan) DProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s LateralPlan) SetDProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s LateralPlan) MpcSolutionValid() bool {
	return capnp.Struct(s).Bit(160)
}

func (s LateralPlan) SetMpcSolutionValid(v bool) {
	capnp.Struct(s).SetBit(160, v)
}

func (s LateralPlan) Desire() LateralPlan_Desire {
	return LateralPlan_Desire(capnp.Struct(s).Uint16(22))
}

func (s LateralPlan) SetDesire(v LateralPlan_Desire) {
	capnp.Struct(s).SetUint16(22, uint16(v))
}

func (s LateralPlan) LaneChangeState() LateralPlan_LaneChangeState {
	return LateralPlan_LaneChangeState(capnp.Struct(s).Uint16(32))
}

func (s LateralPlan) SetLaneChangeState(v LateralPlan_LaneChangeState) {
	capnp.Struct(s).SetUint16(32, uint16(v))
}

func (s LateralPlan) LaneChangeDirection() LateralPlan_LaneChangeDirection {
	return LateralPlan_LaneChangeDirection(capnp.Struct(s).Uint16(34))
}

func (s LateralPlan) SetLaneChangeDirection(v LateralPlan_LaneChangeDirection) {
	capnp.Struct(s).SetUint16(34, uint16(v))
}

func (s LateralPlan) UseLaneLines() bool {
	return capnp.Struct(s).Bit(166)
}

func (s LateralPlan) SetUseLaneLines(v bool) {
	capnp.Struct(s).SetBit(166, v)
}

func (s LateralPlan) Psis() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasPsis() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LateralPlan) SetPsis(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewPsis sets the psis field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewPsis(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s LateralPlan) Curvatures() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasCurvatures() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s LateralPlan) SetCurvatures(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCurvatures sets the curvatures field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewCurvatures(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s LateralPlan) CurvatureRates() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasCurvatureRates() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s LateralPlan) SetCurvatureRates(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCurvatureRates sets the curvatureRates field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewCurvatureRates(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s LateralPlan) SolverExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s LateralPlan) SetSolverExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s LateralPlan) SolverCost() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s LateralPlan) SetSolverCost(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s LateralPlan) SolverState() (LateralPlan_SolverState, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return LateralPlan_SolverState(p.Struct()), err
}

func (s LateralPlan) HasSolverState() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s LateralPlan) SetSolverState(v LateralPlan_SolverState) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewSolverState sets the solverState field to a newly
// allocated LateralPlan_SolverState struct, preferring placement in s's segment.
func (s LateralPlan) NewSolverState() (LateralPlan_SolverState, error) {
	ss, err := NewLateralPlan_SolverState(capnp.Struct(s).Segment())
	if err != nil {
		return LateralPlan_SolverState{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LateralPlan) CurvatureDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s LateralPlan) SetCurvatureDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s LateralPlan) CurvatureRateDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s LateralPlan) SetCurvatureRateDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s LateralPlan) RawCurvatureDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s LateralPlan) SetRawCurvatureDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s LateralPlan) RawCurvatureRateDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s LateralPlan) SetRawCurvatureRateDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s LateralPlan) CProbDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LateralPlan) SetCProbDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LateralPlan) DPolyDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasDPolyDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LateralPlan) SetDPolyDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDPolyDEPRECATED sets the dPolyDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewDPolyDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LateralPlan) CPolyDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasCPolyDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LateralPlan) SetCPolyDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCPolyDEPRECATED sets the cPolyDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewCPolyDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LateralPlan) LPolyDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasLPolyDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LateralPlan) SetLPolyDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewLPolyDEPRECATED sets the lPolyDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewLPolyDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LateralPlan) RPolyDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan) HasRPolyDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LateralPlan) SetRPolyDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRPolyDEPRECATED sets the rPolyDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan) NewRPolyDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s LateralPlan) ModelValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(162)
}

func (s LateralPlan) SetModelValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(162, v)
}

func (s LateralPlan) CommIssueDEPRECATED() bool {
	return capnp.Struct(s).Bit(164)
}

func (s LateralPlan) SetCommIssueDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(164, v)
}

func (s LateralPlan) PosenetValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(165)
}

func (s LateralPlan) SetPosenetValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(165, v)
}

func (s LateralPlan) SensorValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(163)
}

func (s LateralPlan) SetSensorValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(163, v)
}

func (s LateralPlan) ParamsValidDEPRECATED() bool {
	return capnp.Struct(s).Bit(161)
}

func (s LateralPlan) SetParamsValidDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(161, v)
}

func (s LateralPlan) SteeringAngleDegDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LateralPlan) SetSteeringAngleDegDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LateralPlan) SteeringRateDegDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LateralPlan) SetSteeringRateDegDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LateralPlan) AngleOffsetDegDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LateralPlan) SetAngleOffsetDegDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

// LateralPlan_List is a list of LateralPlan.
type LateralPlan_List = capnp.StructList[LateralPlan]

// NewLateralPlan creates a new list of LateralPlan.
func NewLateralPlan_List(s *capnp.Segment, sz int32) (LateralPlan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 9}, sz)
	return capnp.StructList[LateralPlan](l), err
}

// LateralPlan_Future is a wrapper for a LateralPlan promised by a client call.
type LateralPlan_Future struct{ *capnp.Future }

func (f LateralPlan_Future) Struct() (LateralPlan, error) {
	p, err := f.Future.Ptr()
	return LateralPlan(p.Struct()), err
}
func (p LateralPlan_Future) SolverState() LateralPlan_SolverState_Future {
	return LateralPlan_SolverState_Future{Future: p.Future.Field(8, nil)}
}

type LateralPlan_SolverState capnp.Struct

// LateralPlan_SolverState_TypeID is the unique identifier for the type LateralPlan_SolverState.
const LateralPlan_SolverState_TypeID = 0xfdca7c675b7021c6

func NewLateralPlan_SolverState(s *capnp.Segment) (LateralPlan_SolverState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LateralPlan_SolverState(st), err
}

func NewRootLateralPlan_SolverState(s *capnp.Segment) (LateralPlan_SolverState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LateralPlan_SolverState(st), err
}

func ReadRootLateralPlan_SolverState(msg *capnp.Message) (LateralPlan_SolverState, error) {
	root, err := msg.Root()
	return LateralPlan_SolverState(root.Struct()), err
}

func (s LateralPlan_SolverState) String() string {
	str, _ := text.Marshal(0xfdca7c675b7021c6, capnp.Struct(s))
	return str
}

func (s LateralPlan_SolverState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LateralPlan_SolverState) DecodeFromPtr(p capnp.Ptr) LateralPlan_SolverState {
	return LateralPlan_SolverState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LateralPlan_SolverState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LateralPlan_SolverState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LateralPlan_SolverState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LateralPlan_SolverState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LateralPlan_SolverState) X() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s LateralPlan_SolverState) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LateralPlan_SolverState) SetX(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s LateralPlan_SolverState) NewX(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LateralPlan_SolverState) U() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LateralPlan_SolverState) HasU() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LateralPlan_SolverState) SetU(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewU sets the u field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LateralPlan_SolverState) NewU(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// LateralPlan_SolverState_List is a list of LateralPlan_SolverState.
type LateralPlan_SolverState_List = capnp.StructList[LateralPlan_SolverState]

// NewLateralPlan_SolverState creates a new list of LateralPlan_SolverState.
func NewLateralPlan_SolverState_List(s *capnp.Segment, sz int32) (LateralPlan_SolverState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[LateralPlan_SolverState](l), err
}

// LateralPlan_SolverState_Future is a wrapper for a LateralPlan_SolverState promised by a client call.
type LateralPlan_SolverState_Future struct{ *capnp.Future }

func (f LateralPlan_SolverState_Future) Struct() (LateralPlan_SolverState, error) {
	p, err := f.Future.Ptr()
	return LateralPlan_SolverState(p.Struct()), err
}

type LateralPlan_Desire uint16

// LateralPlan_Desire_TypeID is the unique identifier for the type LateralPlan_Desire.
const LateralPlan_Desire_TypeID = 0xbb53ef3fcf2a7f0d

// Values of LateralPlan_Desire.
const (
	LateralPlan_Desire_none            LateralPlan_Desire = 0
	LateralPlan_Desire_turnLeft        LateralPlan_Desire = 1
	LateralPlan_Desire_turnRight       LateralPlan_Desire = 2
	LateralPlan_Desire_laneChangeLeft  LateralPlan_Desire = 3
	LateralPlan_Desire_laneChangeRight LateralPlan_Desire = 4
	LateralPlan_Desire_keepLeft        LateralPlan_Desire = 5
	LateralPlan_Desire_keepRight       LateralPlan_Desire = 6
)

// String returns the enum's constant name.
func (c LateralPlan_Desire) String() string {
	switch c {
	case LateralPlan_Desire_none:
		return "none"
	case LateralPlan_Desire_turnLeft:
		return "turnLeft"
	case LateralPlan_Desire_turnRight:
		return "turnRight"
	case LateralPlan_Desire_laneChangeLeft:
		return "laneChangeLeft"
	case LateralPlan_Desire_laneChangeRight:
		return "laneChangeRight"
	case LateralPlan_Desire_keepLeft:
		return "keepLeft"
	case LateralPlan_Desire_keepRight:
		return "keepRight"

	default:
		return ""
	}
}

// LateralPlan_DesireFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LateralPlan_DesireFromString(c string) LateralPlan_Desire {
	switch c {
	case "none":
		return LateralPlan_Desire_none
	case "turnLeft":
		return LateralPlan_Desire_turnLeft
	case "turnRight":
		return LateralPlan_Desire_turnRight
	case "laneChangeLeft":
		return LateralPlan_Desire_laneChangeLeft
	case "laneChangeRight":
		return LateralPlan_Desire_laneChangeRight
	case "keepLeft":
		return LateralPlan_Desire_keepLeft
	case "keepRight":
		return LateralPlan_Desire_keepRight

	default:
		return 0
	}
}

type LateralPlan_Desire_List = capnp.EnumList[LateralPlan_Desire]

func NewLateralPlan_Desire_List(s *capnp.Segment, sz int32) (LateralPlan_Desire_List, error) {
	return capnp.NewEnumList[LateralPlan_Desire](s, sz)
}

type LateralPlan_LaneChangeState uint16

// LateralPlan_LaneChangeState_TypeID is the unique identifier for the type LateralPlan_LaneChangeState.
const LateralPlan_LaneChangeState_TypeID = 0xfac297f195ce56d2

// Values of LateralPlan_LaneChangeState.
const (
	LateralPlan_LaneChangeState_off                 LateralPlan_LaneChangeState = 0
	LateralPlan_LaneChangeState_preLaneChange       LateralPlan_LaneChangeState = 1
	LateralPlan_LaneChangeState_laneChangeStarting  LateralPlan_LaneChangeState = 2
	LateralPlan_LaneChangeState_laneChangeFinishing LateralPlan_LaneChangeState = 3
)

// String returns the enum's constant name.
func (c LateralPlan_LaneChangeState) String() string {
	switch c {
	case LateralPlan_LaneChangeState_off:
		return "off"
	case LateralPlan_LaneChangeState_preLaneChange:
		return "preLaneChange"
	case LateralPlan_LaneChangeState_laneChangeStarting:
		return "laneChangeStarting"
	case LateralPlan_LaneChangeState_laneChangeFinishing:
		return "laneChangeFinishing"

	default:
		return ""
	}
}

// LateralPlan_LaneChangeStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LateralPlan_LaneChangeStateFromString(c string) LateralPlan_LaneChangeState {
	switch c {
	case "off":
		return LateralPlan_LaneChangeState_off
	case "preLaneChange":
		return LateralPlan_LaneChangeState_preLaneChange
	case "laneChangeStarting":
		return LateralPlan_LaneChangeState_laneChangeStarting
	case "laneChangeFinishing":
		return LateralPlan_LaneChangeState_laneChangeFinishing

	default:
		return 0
	}
}

type LateralPlan_LaneChangeState_List = capnp.EnumList[LateralPlan_LaneChangeState]

func NewLateralPlan_LaneChangeState_List(s *capnp.Segment, sz int32) (LateralPlan_LaneChangeState_List, error) {
	return capnp.NewEnumList[LateralPlan_LaneChangeState](s, sz)
}

type LateralPlan_LaneChangeDirection uint16

// LateralPlan_LaneChangeDirection_TypeID is the unique identifier for the type LateralPlan_LaneChangeDirection.
const LateralPlan_LaneChangeDirection_TypeID = 0xf7396311bcbad303

// Values of LateralPlan_LaneChangeDirection.
const (
	LateralPlan_LaneChangeDirection_none  LateralPlan_LaneChangeDirection = 0
	LateralPlan_LaneChangeDirection_left  LateralPlan_LaneChangeDirection = 1
	LateralPlan_LaneChangeDirection_right LateralPlan_LaneChangeDirection = 2
)

// String returns the enum's constant name.
func (c LateralPlan_LaneChangeDirection) String() string {
	switch c {
	case LateralPlan_LaneChangeDirection_none:
		return "none"
	case LateralPlan_LaneChangeDirection_left:
		return "left"
	case LateralPlan_LaneChangeDirection_right:
		return "right"

	default:
		return ""
	}
}

// LateralPlan_LaneChangeDirectionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LateralPlan_LaneChangeDirectionFromString(c string) LateralPlan_LaneChangeDirection {
	switch c {
	case "none":
		return LateralPlan_LaneChangeDirection_none
	case "left":
		return LateralPlan_LaneChangeDirection_left
	case "right":
		return LateralPlan_LaneChangeDirection_right

	default:
		return 0
	}
}

type LateralPlan_LaneChangeDirection_List = capnp.EnumList[LateralPlan_LaneChangeDirection]

func NewLateralPlan_LaneChangeDirection_List(s *capnp.Segment, sz int32) (LateralPlan_LaneChangeDirection_List, error) {
	return capnp.NewEnumList[LateralPlan_LaneChangeDirection](s, sz)
}

type LiveLocationKalman capnp.Struct

// LiveLocationKalman_TypeID is the unique identifier for the type LiveLocationKalman.
const LiveLocationKalman_TypeID = 0xebc5703d1ee7c129

func NewLiveLocationKalman(s *capnp.Segment) (LiveLocationKalman, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 15})
	return LiveLocationKalman(st), err
}

func NewRootLiveLocationKalman(s *capnp.Segment) (LiveLocationKalman, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 15})
	return LiveLocationKalman(st), err
}

func ReadRootLiveLocationKalman(msg *capnp.Message) (LiveLocationKalman, error) {
	root, err := msg.Root()
	return LiveLocationKalman(root.Struct()), err
}

func (s LiveLocationKalman) String() string {
	str, _ := text.Marshal(0xebc5703d1ee7c129, capnp.Struct(s))
	return str
}

func (s LiveLocationKalman) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveLocationKalman) DecodeFromPtr(p capnp.Ptr) LiveLocationKalman {
	return LiveLocationKalman(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveLocationKalman) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveLocationKalman) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveLocationKalman) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveLocationKalman) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveLocationKalman) PositionECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasPositionECEF() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveLocationKalman) SetPositionECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPositionECEF sets the positionECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewPositionECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) PositionGeodetic() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasPositionGeodetic() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveLocationKalman) SetPositionGeodetic(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPositionGeodetic sets the positionGeodetic field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewPositionGeodetic() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) VelocityECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasVelocityECEF() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveLocationKalman) SetVelocityECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewVelocityECEF sets the velocityECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewVelocityECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) VelocityNED() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasVelocityNED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveLocationKalman) SetVelocityNED(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewVelocityNED sets the velocityNED field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewVelocityNED() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) VelocityDevice() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasVelocityDevice() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LiveLocationKalman) SetVelocityDevice(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewVelocityDevice sets the velocityDevice field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewVelocityDevice() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) AccelerationDevice() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasAccelerationDevice() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LiveLocationKalman) SetAccelerationDevice(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewAccelerationDevice sets the accelerationDevice field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewAccelerationDevice() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) OrientationECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasOrientationECEF() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s LiveLocationKalman) SetOrientationECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewOrientationECEF sets the orientationECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewOrientationECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) CalibratedOrientationECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasCalibratedOrientationECEF() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s LiveLocationKalman) SetCalibratedOrientationECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(13, capnp.Struct(v).ToPtr())
}

// NewCalibratedOrientationECEF sets the calibratedOrientationECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewCalibratedOrientationECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(13, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) OrientationNED() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasOrientationNED() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s LiveLocationKalman) SetOrientationNED(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewOrientationNED sets the orientationNED field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewOrientationNED() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) AngularVelocityDevice() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasAngularVelocityDevice() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s LiveLocationKalman) SetAngularVelocityDevice(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewAngularVelocityDevice sets the angularVelocityDevice field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewAngularVelocityDevice() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) CalibratedOrientationNED() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasCalibratedOrientationNED() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s LiveLocationKalman) SetCalibratedOrientationNED(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewCalibratedOrientationNED sets the calibratedOrientationNED field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewCalibratedOrientationNED() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) VelocityCalibrated() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasVelocityCalibrated() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s LiveLocationKalman) SetVelocityCalibrated(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewVelocityCalibrated sets the velocityCalibrated field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewVelocityCalibrated() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) AccelerationCalibrated() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasAccelerationCalibrated() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s LiveLocationKalman) SetAccelerationCalibrated(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewAccelerationCalibrated sets the accelerationCalibrated field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewAccelerationCalibrated() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) AngularVelocityCalibrated() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasAngularVelocityCalibrated() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s LiveLocationKalman) SetAngularVelocityCalibrated(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(12, capnp.Struct(v).ToPtr())
}

// NewAngularVelocityCalibrated sets the angularVelocityCalibrated field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewAngularVelocityCalibrated() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(12, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationKalman) GpsWeek() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LiveLocationKalman) SetGpsWeek(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LiveLocationKalman) GpsTimeOfWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s LiveLocationKalman) SetGpsTimeOfWeek(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s LiveLocationKalman) Status() LiveLocationKalman_Status {
	return LiveLocationKalman_Status(capnp.Struct(s).Uint16(4))
}

func (s LiveLocationKalman) SetStatus(v LiveLocationKalman_Status) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s LiveLocationKalman) UnixTimestampMillis() int64 {
	return int64(capnp.Struct(s).Uint64(16))
}

func (s LiveLocationKalman) SetUnixTimestampMillis(v int64) {
	capnp.Struct(s).SetUint64(16, uint64(v))
}

func (s LiveLocationKalman) InputsOK() bool {
	return !capnp.Struct(s).Bit(48)
}

func (s LiveLocationKalman) SetInputsOK(v bool) {
	capnp.Struct(s).SetBit(48, !v)
}

func (s LiveLocationKalman) PosenetOK() bool {
	return !capnp.Struct(s).Bit(49)
}

func (s LiveLocationKalman) SetPosenetOK(v bool) {
	capnp.Struct(s).SetBit(49, !v)
}

func (s LiveLocationKalman) GpsOK() bool {
	return !capnp.Struct(s).Bit(50)
}

func (s LiveLocationKalman) SetGpsOK(v bool) {
	capnp.Struct(s).SetBit(50, !v)
}

func (s LiveLocationKalman) SensorsOK() bool {
	return !capnp.Struct(s).Bit(51)
}

func (s LiveLocationKalman) SetSensorsOK(v bool) {
	capnp.Struct(s).SetBit(51, !v)
}

func (s LiveLocationKalman) DeviceStable() bool {
	return !capnp.Struct(s).Bit(52)
}

func (s LiveLocationKalman) SetDeviceStable(v bool) {
	capnp.Struct(s).SetBit(52, !v)
}

func (s LiveLocationKalman) TimeSinceReset() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s LiveLocationKalman) SetTimeSinceReset(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s LiveLocationKalman) ExcessiveResets() bool {
	return capnp.Struct(s).Bit(53)
}

func (s LiveLocationKalman) SetExcessiveResets(v bool) {
	capnp.Struct(s).SetBit(53, v)
}

func (s LiveLocationKalman) TimeToFirstFix() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s LiveLocationKalman) SetTimeToFirstFix(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s LiveLocationKalman) FilterState() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveLocationKalman) HasFilterState() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s LiveLocationKalman) SetFilterState(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(14, capnp.Struct(v).ToPtr())
}

// NewFilterState sets the filterState field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveLocationKalman) NewFilterState() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(14, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LiveLocationKalman_List is a list of LiveLocationKalman.
type LiveLocationKalman_List = capnp.StructList[LiveLocationKalman]

// NewLiveLocationKalman creates a new list of LiveLocationKalman.
func NewLiveLocationKalman_List(s *capnp.Segment, sz int32) (LiveLocationKalman_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 15}, sz)
	return capnp.StructList[LiveLocationKalman](l), err
}

// LiveLocationKalman_Future is a wrapper for a LiveLocationKalman promised by a client call.
type LiveLocationKalman_Future struct{ *capnp.Future }

func (f LiveLocationKalman_Future) Struct() (LiveLocationKalman, error) {
	p, err := f.Future.Ptr()
	return LiveLocationKalman(p.Struct()), err
}
func (p LiveLocationKalman_Future) PositionECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(0, nil)}
}
func (p LiveLocationKalman_Future) PositionGeodetic() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(1, nil)}
}
func (p LiveLocationKalman_Future) VelocityECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(2, nil)}
}
func (p LiveLocationKalman_Future) VelocityNED() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(3, nil)}
}
func (p LiveLocationKalman_Future) VelocityDevice() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(4, nil)}
}
func (p LiveLocationKalman_Future) AccelerationDevice() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(5, nil)}
}
func (p LiveLocationKalman_Future) OrientationECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(6, nil)}
}
func (p LiveLocationKalman_Future) CalibratedOrientationECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(13, nil)}
}
func (p LiveLocationKalman_Future) OrientationNED() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(7, nil)}
}
func (p LiveLocationKalman_Future) AngularVelocityDevice() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(8, nil)}
}
func (p LiveLocationKalman_Future) CalibratedOrientationNED() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(9, nil)}
}
func (p LiveLocationKalman_Future) VelocityCalibrated() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(10, nil)}
}
func (p LiveLocationKalman_Future) AccelerationCalibrated() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(11, nil)}
}
func (p LiveLocationKalman_Future) AngularVelocityCalibrated() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(12, nil)}
}
func (p LiveLocationKalman_Future) FilterState() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(14, nil)}
}

type LiveLocationKalman_Status uint16

// LiveLocationKalman_Status_TypeID is the unique identifier for the type LiveLocationKalman_Status.
const LiveLocationKalman_Status_TypeID = 0x8e4dc8cc4b51fc01

// Values of LiveLocationKalman_Status.
const (
	LiveLocationKalman_Status_uninitialized LiveLocationKalman_Status = 0
	LiveLocationKalman_Status_uncalibrated  LiveLocationKalman_Status = 1
	LiveLocationKalman_Status_valid         LiveLocationKalman_Status = 2
)

// String returns the enum's constant name.
func (c LiveLocationKalman_Status) String() string {
	switch c {
	case LiveLocationKalman_Status_uninitialized:
		return "uninitialized"
	case LiveLocationKalman_Status_uncalibrated:
		return "uncalibrated"
	case LiveLocationKalman_Status_valid:
		return "valid"

	default:
		return ""
	}
}

// LiveLocationKalman_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LiveLocationKalman_StatusFromString(c string) LiveLocationKalman_Status {
	switch c {
	case "uninitialized":
		return LiveLocationKalman_Status_uninitialized
	case "uncalibrated":
		return LiveLocationKalman_Status_uncalibrated
	case "valid":
		return LiveLocationKalman_Status_valid

	default:
		return 0
	}
}

type LiveLocationKalman_Status_List = capnp.EnumList[LiveLocationKalman_Status]

func NewLiveLocationKalman_Status_List(s *capnp.Segment, sz int32) (LiveLocationKalman_Status_List, error) {
	return capnp.NewEnumList[LiveLocationKalman_Status](s, sz)
}

type LiveLocationKalman_Measurement capnp.Struct

// LiveLocationKalman_Measurement_TypeID is the unique identifier for the type LiveLocationKalman_Measurement.
const LiveLocationKalman_Measurement_TypeID = 0xbf23f9ed66dace1c

func NewLiveLocationKalman_Measurement(s *capnp.Segment) (LiveLocationKalman_Measurement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LiveLocationKalman_Measurement(st), err
}

func NewRootLiveLocationKalman_Measurement(s *capnp.Segment) (LiveLocationKalman_Measurement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LiveLocationKalman_Measurement(st), err
}

func ReadRootLiveLocationKalman_Measurement(msg *capnp.Message) (LiveLocationKalman_Measurement, error) {
	root, err := msg.Root()
	return LiveLocationKalman_Measurement(root.Struct()), err
}

func (s LiveLocationKalman_Measurement) String() string {
	str, _ := text.Marshal(0xbf23f9ed66dace1c, capnp.Struct(s))
	return str
}

func (s LiveLocationKalman_Measurement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveLocationKalman_Measurement) DecodeFromPtr(p capnp.Ptr) LiveLocationKalman_Measurement {
	return LiveLocationKalman_Measurement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveLocationKalman_Measurement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveLocationKalman_Measurement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveLocationKalman_Measurement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveLocationKalman_Measurement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveLocationKalman_Measurement) Value() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s LiveLocationKalman_Measurement) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveLocationKalman_Measurement) SetValue(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValue sets the value field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s LiveLocationKalman_Measurement) NewValue(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveLocationKalman_Measurement) Std() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s LiveLocationKalman_Measurement) HasStd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveLocationKalman_Measurement) SetStd(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewStd sets the std field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s LiveLocationKalman_Measurement) NewStd(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveLocationKalman_Measurement) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LiveLocationKalman_Measurement) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// LiveLocationKalman_Measurement_List is a list of LiveLocationKalman_Measurement.
type LiveLocationKalman_Measurement_List = capnp.StructList[LiveLocationKalman_Measurement]

// NewLiveLocationKalman_Measurement creates a new list of LiveLocationKalman_Measurement.
func NewLiveLocationKalman_Measurement_List(s *capnp.Segment, sz int32) (LiveLocationKalman_Measurement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[LiveLocationKalman_Measurement](l), err
}

// LiveLocationKalman_Measurement_Future is a wrapper for a LiveLocationKalman_Measurement promised by a client call.
type LiveLocationKalman_Measurement_Future struct{ *capnp.Future }

func (f LiveLocationKalman_Measurement_Future) Struct() (LiveLocationKalman_Measurement, error) {
	p, err := f.Future.Ptr()
	return LiveLocationKalman_Measurement(p.Struct()), err
}

type ProcLog capnp.Struct

// ProcLog_TypeID is the unique identifier for the type ProcLog.
const ProcLog_TypeID = 0xaf85387b3f681406

func NewProcLog(s *capnp.Segment) (ProcLog, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ProcLog(st), err
}

func NewRootProcLog(s *capnp.Segment) (ProcLog, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ProcLog(st), err
}

func ReadRootProcLog(msg *capnp.Message) (ProcLog, error) {
	root, err := msg.Root()
	return ProcLog(root.Struct()), err
}

func (s ProcLog) String() string {
	str, _ := text.Marshal(0xaf85387b3f681406, capnp.Struct(s))
	return str
}

func (s ProcLog) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcLog) DecodeFromPtr(p capnp.Ptr) ProcLog {
	return ProcLog(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcLog) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcLog) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcLog) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcLog) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcLog) CpuTimes() (ProcLog_CPUTimes_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProcLog_CPUTimes_List(p.List()), err
}

func (s ProcLog) HasCpuTimes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcLog) SetCpuTimes(v ProcLog_CPUTimes_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCpuTimes sets the cpuTimes field to a newly
// allocated ProcLog_CPUTimes_List, preferring placement in s's segment.
func (s ProcLog) NewCpuTimes(n int32) (ProcLog_CPUTimes_List, error) {
	l, err := NewProcLog_CPUTimes_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ProcLog_CPUTimes_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ProcLog) Mem() (ProcLog_Mem, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ProcLog_Mem(p.Struct()), err
}

func (s ProcLog) HasMem() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProcLog) SetMem(v ProcLog_Mem) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewMem sets the mem field to a newly
// allocated ProcLog_Mem struct, preferring placement in s's segment.
func (s ProcLog) NewMem() (ProcLog_Mem, error) {
	ss, err := NewProcLog_Mem(capnp.Struct(s).Segment())
	if err != nil {
		return ProcLog_Mem{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ProcLog) Procs() (ProcLog_Process_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ProcLog_Process_List(p.List()), err
}

func (s ProcLog) HasProcs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProcLog) SetProcs(v ProcLog_Process_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewProcs sets the procs field to a newly
// allocated ProcLog_Process_List, preferring placement in s's segment.
func (s ProcLog) NewProcs(n int32) (ProcLog_Process_List, error) {
	l, err := NewProcLog_Process_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ProcLog_Process_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// ProcLog_List is a list of ProcLog.
type ProcLog_List = capnp.StructList[ProcLog]

// NewProcLog creates a new list of ProcLog.
func NewProcLog_List(s *capnp.Segment, sz int32) (ProcLog_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ProcLog](l), err
}

// ProcLog_Future is a wrapper for a ProcLog promised by a client call.
type ProcLog_Future struct{ *capnp.Future }

func (f ProcLog_Future) Struct() (ProcLog, error) {
	p, err := f.Future.Ptr()
	return ProcLog(p.Struct()), err
}
func (p ProcLog_Future) Mem() ProcLog_Mem_Future {
	return ProcLog_Mem_Future{Future: p.Future.Field(1, nil)}
}

type ProcLog_Process capnp.Struct

// ProcLog_Process_TypeID is the unique identifier for the type ProcLog_Process.
const ProcLog_Process_TypeID = 0xb0b85613f19e6d28

func NewProcLog_Process(s *capnp.Segment) (ProcLog_Process, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 3})
	return ProcLog_Process(st), err
}

func NewRootProcLog_Process(s *capnp.Segment) (ProcLog_Process, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 3})
	return ProcLog_Process(st), err
}

func ReadRootProcLog_Process(msg *capnp.Message) (ProcLog_Process, error) {
	root, err := msg.Root()
	return ProcLog_Process(root.Struct()), err
}

func (s ProcLog_Process) String() string {
	str, _ := text.Marshal(0xb0b85613f19e6d28, capnp.Struct(s))
	return str
}

func (s ProcLog_Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcLog_Process) DecodeFromPtr(p capnp.Ptr) ProcLog_Process {
	return ProcLog_Process(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcLog_Process) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcLog_Process) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcLog_Process) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcLog_Process) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcLog_Process) Pid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ProcLog_Process) SetPid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ProcLog_Process) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProcLog_Process) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProcLog_Process) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProcLog_Process) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ProcLog_Process) State() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s ProcLog_Process) SetState(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s ProcLog_Process) Ppid() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ProcLog_Process) SetPpid(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s ProcLog_Process) CpuUser() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ProcLog_Process) SetCpuUser(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ProcLog_Process) CpuSystem() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ProcLog_Process) SetCpuSystem(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ProcLog_Process) CpuChildrenUser() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ProcLog_Process) SetCpuChildrenUser(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ProcLog_Process) CpuChildrenSystem() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ProcLog_Process) SetCpuChildrenSystem(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ProcLog_Process) Priority() int64 {
	return int64(capnp.Struct(s).Uint64(32))
}

func (s ProcLog_Process) SetPriority(v int64) {
	capnp.Struct(s).SetUint64(32, uint64(v))
}

func (s ProcLog_Process) Nice() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s ProcLog_Process) SetNice(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s ProcLog_Process) NumThreads() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s ProcLog_Process) SetNumThreads(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s ProcLog_Process) StartTime() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s ProcLog_Process) SetStartTime(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s ProcLog_Process) MemVms() uint64 {
	return capnp.Struct(s).Uint64(56)
}

func (s ProcLog_Process) SetMemVms(v uint64) {
	capnp.Struct(s).SetUint64(56, v)
}

func (s ProcLog_Process) MemRss() uint64 {
	return capnp.Struct(s).Uint64(64)
}

func (s ProcLog_Process) SetMemRss(v uint64) {
	capnp.Struct(s).SetUint64(64, v)
}

func (s ProcLog_Process) Processor() int32 {
	return int32(capnp.Struct(s).Uint32(44))
}

func (s ProcLog_Process) SetProcessor(v int32) {
	capnp.Struct(s).SetUint32(44, uint32(v))
}

func (s ProcLog_Process) Cmdline() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s ProcLog_Process) HasCmdline() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProcLog_Process) SetCmdline(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCmdline sets the cmdline field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s ProcLog_Process) NewCmdline(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ProcLog_Process) Exe() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ProcLog_Process) HasExe() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProcLog_Process) ExeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ProcLog_Process) SetExe(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ProcLog_Process_List is a list of ProcLog_Process.
type ProcLog_Process_List = capnp.StructList[ProcLog_Process]

// NewProcLog_Process creates a new list of ProcLog_Process.
func NewProcLog_Process_List(s *capnp.Segment, sz int32) (ProcLog_Process_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 3}, sz)
	return capnp.StructList[ProcLog_Process](l), err
}

// ProcLog_Process_Future is a wrapper for a ProcLog_Process promised by a client call.
type ProcLog_Process_Future struct{ *capnp.Future }

func (f ProcLog_Process_Future) Struct() (ProcLog_Process, error) {
	p, err := f.Future.Ptr()
	return ProcLog_Process(p.Struct()), err
}

type ProcLog_CPUTimes capnp.Struct

// ProcLog_CPUTimes_TypeID is the unique identifier for the type ProcLog_CPUTimes.
const ProcLog_CPUTimes_TypeID = 0xf189c8c5bf2ce087

func NewProcLog_CPUTimes(s *capnp.Segment) (ProcLog_CPUTimes, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ProcLog_CPUTimes(st), err
}

func NewRootProcLog_CPUTimes(s *capnp.Segment) (ProcLog_CPUTimes, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ProcLog_CPUTimes(st), err
}

func ReadRootProcLog_CPUTimes(msg *capnp.Message) (ProcLog_CPUTimes, error) {
	root, err := msg.Root()
	return ProcLog_CPUTimes(root.Struct()), err
}

func (s ProcLog_CPUTimes) String() string {
	str, _ := text.Marshal(0xf189c8c5bf2ce087, capnp.Struct(s))
	return str
}

func (s ProcLog_CPUTimes) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcLog_CPUTimes) DecodeFromPtr(p capnp.Ptr) ProcLog_CPUTimes {
	return ProcLog_CPUTimes(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcLog_CPUTimes) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcLog_CPUTimes) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcLog_CPUTimes) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcLog_CPUTimes) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcLog_CPUTimes) CpuNum() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s ProcLog_CPUTimes) SetCpuNum(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s ProcLog_CPUTimes) User() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ProcLog_CPUTimes) SetUser(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) Nice() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ProcLog_CPUTimes) SetNice(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) System() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ProcLog_CPUTimes) SetSystem(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) Idle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ProcLog_CPUTimes) SetIdle(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) Iowait() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ProcLog_CPUTimes) SetIowait(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) Irq() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ProcLog_CPUTimes) SetIrq(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ProcLog_CPUTimes) Softirq() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ProcLog_CPUTimes) SetSoftirq(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

// ProcLog_CPUTimes_List is a list of ProcLog_CPUTimes.
type ProcLog_CPUTimes_List = capnp.StructList[ProcLog_CPUTimes]

// NewProcLog_CPUTimes creates a new list of ProcLog_CPUTimes.
func NewProcLog_CPUTimes_List(s *capnp.Segment, sz int32) (ProcLog_CPUTimes_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[ProcLog_CPUTimes](l), err
}

// ProcLog_CPUTimes_Future is a wrapper for a ProcLog_CPUTimes promised by a client call.
type ProcLog_CPUTimes_Future struct{ *capnp.Future }

func (f ProcLog_CPUTimes_Future) Struct() (ProcLog_CPUTimes, error) {
	p, err := f.Future.Ptr()
	return ProcLog_CPUTimes(p.Struct()), err
}

type ProcLog_Mem capnp.Struct

// ProcLog_Mem_TypeID is the unique identifier for the type ProcLog_Mem.
const ProcLog_Mem_TypeID = 0xfd095f94f08b3fd4

func NewProcLog_Mem(s *capnp.Segment) (ProcLog_Mem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return ProcLog_Mem(st), err
}

func NewRootProcLog_Mem(s *capnp.Segment) (ProcLog_Mem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0})
	return ProcLog_Mem(st), err
}

func ReadRootProcLog_Mem(msg *capnp.Message) (ProcLog_Mem, error) {
	root, err := msg.Root()
	return ProcLog_Mem(root.Struct()), err
}

func (s ProcLog_Mem) String() string {
	str, _ := text.Marshal(0xfd095f94f08b3fd4, capnp.Struct(s))
	return str
}

func (s ProcLog_Mem) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProcLog_Mem) DecodeFromPtr(p capnp.Ptr) ProcLog_Mem {
	return ProcLog_Mem(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProcLog_Mem) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProcLog_Mem) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProcLog_Mem) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProcLog_Mem) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProcLog_Mem) Total() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ProcLog_Mem) SetTotal(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ProcLog_Mem) Free() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s ProcLog_Mem) SetFree(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s ProcLog_Mem) Available() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s ProcLog_Mem) SetAvailable(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s ProcLog_Mem) Buffers() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s ProcLog_Mem) SetBuffers(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s ProcLog_Mem) Cached() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s ProcLog_Mem) SetCached(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

func (s ProcLog_Mem) Active() uint64 {
	return capnp.Struct(s).Uint64(40)
}

func (s ProcLog_Mem) SetActive(v uint64) {
	capnp.Struct(s).SetUint64(40, v)
}

func (s ProcLog_Mem) Inactive() uint64 {
	return capnp.Struct(s).Uint64(48)
}

func (s ProcLog_Mem) SetInactive(v uint64) {
	capnp.Struct(s).SetUint64(48, v)
}

func (s ProcLog_Mem) Shared() uint64 {
	return capnp.Struct(s).Uint64(56)
}

func (s ProcLog_Mem) SetShared(v uint64) {
	capnp.Struct(s).SetUint64(56, v)
}

// ProcLog_Mem_List is a list of ProcLog_Mem.
type ProcLog_Mem_List = capnp.StructList[ProcLog_Mem]

// NewProcLog_Mem creates a new list of ProcLog_Mem.
func NewProcLog_Mem_List(s *capnp.Segment, sz int32) (ProcLog_Mem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 0}, sz)
	return capnp.StructList[ProcLog_Mem](l), err
}

// ProcLog_Mem_Future is a wrapper for a ProcLog_Mem promised by a client call.
type ProcLog_Mem_Future struct{ *capnp.Future }

func (f ProcLog_Mem_Future) Struct() (ProcLog_Mem, error) {
	p, err := f.Future.Ptr()
	return ProcLog_Mem(p.Struct()), err
}

type GnssMeasurements capnp.Struct

// GnssMeasurements_TypeID is the unique identifier for the type GnssMeasurements.
const GnssMeasurements_TypeID = 0xafd47016570e9d09

func NewGnssMeasurements(s *capnp.Segment) (GnssMeasurements, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return GnssMeasurements(st), err
}

func NewRootGnssMeasurements(s *capnp.Segment) (GnssMeasurements, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return GnssMeasurements(st), err
}

func ReadRootGnssMeasurements(msg *capnp.Message) (GnssMeasurements, error) {
	root, err := msg.Root()
	return GnssMeasurements(root.Struct()), err
}

func (s GnssMeasurements) String() string {
	str, _ := text.Marshal(0xafd47016570e9d09, capnp.Struct(s))
	return str
}

func (s GnssMeasurements) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GnssMeasurements) DecodeFromPtr(p capnp.Ptr) GnssMeasurements {
	return GnssMeasurements(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GnssMeasurements) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GnssMeasurements) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GnssMeasurements) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GnssMeasurements) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GnssMeasurements) MeasTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s GnssMeasurements) SetMeasTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s GnssMeasurements) GpsWeek() int16 {
	return int16(capnp.Struct(s).Uint16(8))
}

func (s GnssMeasurements) SetGpsWeek(v int16) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s GnssMeasurements) GpsTimeOfWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s GnssMeasurements) SetGpsTimeOfWeek(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s GnssMeasurements) CorrectedMeasurements() (GnssMeasurements_CorrectedMeasurement_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return GnssMeasurements_CorrectedMeasurement_List(p.List()), err
}

func (s GnssMeasurements) HasCorrectedMeasurements() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GnssMeasurements) SetCorrectedMeasurements(v GnssMeasurements_CorrectedMeasurement_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCorrectedMeasurements sets the correctedMeasurements field to a newly
// allocated GnssMeasurements_CorrectedMeasurement_List, preferring placement in s's segment.
func (s GnssMeasurements) NewCorrectedMeasurements(n int32) (GnssMeasurements_CorrectedMeasurement_List, error) {
	l, err := NewGnssMeasurements_CorrectedMeasurement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GnssMeasurements_CorrectedMeasurement_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s GnssMeasurements) EphemerisStatuses() (GnssMeasurements_EphemerisStatus_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return GnssMeasurements_EphemerisStatus_List(p.List()), err
}

func (s GnssMeasurements) HasEphemerisStatuses() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s GnssMeasurements) SetEphemerisStatuses(v GnssMeasurements_EphemerisStatus_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewEphemerisStatuses sets the ephemerisStatuses field to a newly
// allocated GnssMeasurements_EphemerisStatus_List, preferring placement in s's segment.
func (s GnssMeasurements) NewEphemerisStatuses(n int32) (GnssMeasurements_EphemerisStatus_List, error) {
	l, err := NewGnssMeasurements_EphemerisStatus_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return GnssMeasurements_EphemerisStatus_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s GnssMeasurements) KalmanPositionECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s GnssMeasurements) HasKalmanPositionECEF() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GnssMeasurements) SetKalmanPositionECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewKalmanPositionECEF sets the kalmanPositionECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s GnssMeasurements) NewKalmanPositionECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GnssMeasurements) KalmanVelocityECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s GnssMeasurements) HasKalmanVelocityECEF() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GnssMeasurements) SetKalmanVelocityECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewKalmanVelocityECEF sets the kalmanVelocityECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s GnssMeasurements) NewKalmanVelocityECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GnssMeasurements) PositionECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s GnssMeasurements) HasPositionECEF() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GnssMeasurements) SetPositionECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewPositionECEF sets the positionECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s GnssMeasurements) NewPositionECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GnssMeasurements) VelocityECEF() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s GnssMeasurements) HasVelocityECEF() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s GnssMeasurements) SetVelocityECEF(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewVelocityECEF sets the velocityECEF field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s GnssMeasurements) NewVelocityECEF() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GnssMeasurements) TimeToFirstFix() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GnssMeasurements) SetTimeToFirstFix(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// GnssMeasurements_List is a list of GnssMeasurements.
type GnssMeasurements_List = capnp.StructList[GnssMeasurements]

// NewGnssMeasurements creates a new list of GnssMeasurements.
func NewGnssMeasurements_List(s *capnp.Segment, sz int32) (GnssMeasurements_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return capnp.StructList[GnssMeasurements](l), err
}

// GnssMeasurements_Future is a wrapper for a GnssMeasurements promised by a client call.
type GnssMeasurements_Future struct{ *capnp.Future }

func (f GnssMeasurements_Future) Struct() (GnssMeasurements, error) {
	p, err := f.Future.Ptr()
	return GnssMeasurements(p.Struct()), err
}
func (p GnssMeasurements_Future) KalmanPositionECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(1, nil)}
}
func (p GnssMeasurements_Future) KalmanVelocityECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(2, nil)}
}
func (p GnssMeasurements_Future) PositionECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(3, nil)}
}
func (p GnssMeasurements_Future) VelocityECEF() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(4, nil)}
}

type GnssMeasurements_EphemerisStatus capnp.Struct

// GnssMeasurements_EphemerisStatus_TypeID is the unique identifier for the type GnssMeasurements_EphemerisStatus.
const GnssMeasurements_EphemerisStatus_TypeID = 0xf3286be6a8bfb860

func NewGnssMeasurements_EphemerisStatus(s *capnp.Segment) (GnssMeasurements_EphemerisStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GnssMeasurements_EphemerisStatus(st), err
}

func NewRootGnssMeasurements_EphemerisStatus(s *capnp.Segment) (GnssMeasurements_EphemerisStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GnssMeasurements_EphemerisStatus(st), err
}

func ReadRootGnssMeasurements_EphemerisStatus(msg *capnp.Message) (GnssMeasurements_EphemerisStatus, error) {
	root, err := msg.Root()
	return GnssMeasurements_EphemerisStatus(root.Struct()), err
}

func (s GnssMeasurements_EphemerisStatus) String() string {
	str, _ := text.Marshal(0xf3286be6a8bfb860, capnp.Struct(s))
	return str
}

func (s GnssMeasurements_EphemerisStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GnssMeasurements_EphemerisStatus) DecodeFromPtr(p capnp.Ptr) GnssMeasurements_EphemerisStatus {
	return GnssMeasurements_EphemerisStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GnssMeasurements_EphemerisStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GnssMeasurements_EphemerisStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GnssMeasurements_EphemerisStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GnssMeasurements_EphemerisStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GnssMeasurements_EphemerisStatus) ConstellationId() GnssMeasurements_ConstellationId {
	return GnssMeasurements_ConstellationId(capnp.Struct(s).Uint16(0))
}

func (s GnssMeasurements_EphemerisStatus) SetConstellationId(v GnssMeasurements_ConstellationId) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s GnssMeasurements_EphemerisStatus) SvId() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s GnssMeasurements_EphemerisStatus) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s GnssMeasurements_EphemerisStatus) Type() GnssMeasurements_EphemerisType {
	return GnssMeasurements_EphemerisType(capnp.Struct(s).Uint16(4))
}

func (s GnssMeasurements_EphemerisStatus) SetType(v GnssMeasurements_EphemerisType) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s GnssMeasurements_EphemerisStatus) Source() GnssMeasurements_EphemerisSource {
	return GnssMeasurements_EphemerisSource(capnp.Struct(s).Uint16(6))
}

func (s GnssMeasurements_EphemerisStatus) SetSource(v GnssMeasurements_EphemerisSource) {
	capnp.Struct(s).SetUint16(6, uint16(v))
}

func (s GnssMeasurements_EphemerisStatus) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s GnssMeasurements_EphemerisStatus) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s GnssMeasurements_EphemerisStatus) Tow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s GnssMeasurements_EphemerisStatus) SetTow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// GnssMeasurements_EphemerisStatus_List is a list of GnssMeasurements_EphemerisStatus.
type GnssMeasurements_EphemerisStatus_List = capnp.StructList[GnssMeasurements_EphemerisStatus]

// NewGnssMeasurements_EphemerisStatus creates a new list of GnssMeasurements_EphemerisStatus.
func NewGnssMeasurements_EphemerisStatus_List(s *capnp.Segment, sz int32) (GnssMeasurements_EphemerisStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[GnssMeasurements_EphemerisStatus](l), err
}

// GnssMeasurements_EphemerisStatus_Future is a wrapper for a GnssMeasurements_EphemerisStatus promised by a client call.
type GnssMeasurements_EphemerisStatus_Future struct{ *capnp.Future }

func (f GnssMeasurements_EphemerisStatus_Future) Struct() (GnssMeasurements_EphemerisStatus, error) {
	p, err := f.Future.Ptr()
	return GnssMeasurements_EphemerisStatus(p.Struct()), err
}

type GnssMeasurements_CorrectedMeasurement capnp.Struct

// GnssMeasurements_CorrectedMeasurement_TypeID is the unique identifier for the type GnssMeasurements_CorrectedMeasurement.
const GnssMeasurements_CorrectedMeasurement_TypeID = 0xeaa4a17d86ac76b0

func NewGnssMeasurements_CorrectedMeasurement(s *capnp.Segment) (GnssMeasurements_CorrectedMeasurement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3})
	return GnssMeasurements_CorrectedMeasurement(st), err
}

func NewRootGnssMeasurements_CorrectedMeasurement(s *capnp.Segment) (GnssMeasurements_CorrectedMeasurement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3})
	return GnssMeasurements_CorrectedMeasurement(st), err
}

func ReadRootGnssMeasurements_CorrectedMeasurement(msg *capnp.Message) (GnssMeasurements_CorrectedMeasurement, error) {
	root, err := msg.Root()
	return GnssMeasurements_CorrectedMeasurement(root.Struct()), err
}

func (s GnssMeasurements_CorrectedMeasurement) String() string {
	str, _ := text.Marshal(0xeaa4a17d86ac76b0, capnp.Struct(s))
	return str
}

func (s GnssMeasurements_CorrectedMeasurement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GnssMeasurements_CorrectedMeasurement) DecodeFromPtr(p capnp.Ptr) GnssMeasurements_CorrectedMeasurement {
	return GnssMeasurements_CorrectedMeasurement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GnssMeasurements_CorrectedMeasurement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GnssMeasurements_CorrectedMeasurement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GnssMeasurements_CorrectedMeasurement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GnssMeasurements_CorrectedMeasurement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GnssMeasurements_CorrectedMeasurement) ConstellationId() GnssMeasurements_ConstellationId {
	return GnssMeasurements_ConstellationId(capnp.Struct(s).Uint16(0))
}

func (s GnssMeasurements_CorrectedMeasurement) SetConstellationId(v GnssMeasurements_ConstellationId) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s GnssMeasurements_CorrectedMeasurement) SvId() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s GnssMeasurements_CorrectedMeasurement) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s GnssMeasurements_CorrectedMeasurement) GlonassFrequency() int8 {
	return int8(capnp.Struct(s).Uint8(3))
}

func (s GnssMeasurements_CorrectedMeasurement) SetGlonassFrequency(v int8) {
	capnp.Struct(s).SetUint8(3, uint8(v))
}

func (s GnssMeasurements_CorrectedMeasurement) Pseudorange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s GnssMeasurements_CorrectedMeasurement) SetPseudorange(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s GnssMeasurements_CorrectedMeasurement) PseudorangeStd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s GnssMeasurements_CorrectedMeasurement) SetPseudorangeStd(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s GnssMeasurements_CorrectedMeasurement) PseudorangeRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s GnssMeasurements_CorrectedMeasurement) SetPseudorangeRate(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s GnssMeasurements_CorrectedMeasurement) PseudorangeRateStd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s GnssMeasurements_CorrectedMeasurement) SetPseudorangeRateStd(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s GnssMeasurements_CorrectedMeasurement) SatPos() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s GnssMeasurements_CorrectedMeasurement) HasSatPos() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GnssMeasurements_CorrectedMeasurement) SetSatPos(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSatPos sets the satPos field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s GnssMeasurements_CorrectedMeasurement) NewSatPos(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s GnssMeasurements_CorrectedMeasurement) SatVel() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s GnssMeasurements_CorrectedMeasurement) HasSatVel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GnssMeasurements_CorrectedMeasurement) SetSatVel(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSatVel sets the satVel field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s GnssMeasurements_CorrectedMeasurement) NewSatVel(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GnssMeasurements_CorrectedMeasurement) EphemerisSourceDEPRECATED() (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GnssMeasurements_EphemerisSourceDEPRECATED(p.Struct()), err
}

func (s GnssMeasurements_CorrectedMeasurement) HasEphemerisSourceDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GnssMeasurements_CorrectedMeasurement) SetEphemerisSourceDEPRECATED(v GnssMeasurements_EphemerisSourceDEPRECATED) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEphemerisSourceDEPRECATED sets the ephemerisSourceDEPRECATED field to a newly
// allocated GnssMeasurements_EphemerisSourceDEPRECATED struct, preferring placement in s's segment.
func (s GnssMeasurements_CorrectedMeasurement) NewEphemerisSourceDEPRECATED() (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	ss, err := NewGnssMeasurements_EphemerisSourceDEPRECATED(capnp.Struct(s).Segment())
	if err != nil {
		return GnssMeasurements_EphemerisSourceDEPRECATED{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// GnssMeasurements_CorrectedMeasurement_List is a list of GnssMeasurements_CorrectedMeasurement.
type GnssMeasurements_CorrectedMeasurement_List = capnp.StructList[GnssMeasurements_CorrectedMeasurement]

// NewGnssMeasurements_CorrectedMeasurement creates a new list of GnssMeasurements_CorrectedMeasurement.
func NewGnssMeasurements_CorrectedMeasurement_List(s *capnp.Segment, sz int32) (GnssMeasurements_CorrectedMeasurement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 3}, sz)
	return capnp.StructList[GnssMeasurements_CorrectedMeasurement](l), err
}

// GnssMeasurements_CorrectedMeasurement_Future is a wrapper for a GnssMeasurements_CorrectedMeasurement promised by a client call.
type GnssMeasurements_CorrectedMeasurement_Future struct{ *capnp.Future }

func (f GnssMeasurements_CorrectedMeasurement_Future) Struct() (GnssMeasurements_CorrectedMeasurement, error) {
	p, err := f.Future.Ptr()
	return GnssMeasurements_CorrectedMeasurement(p.Struct()), err
}
func (p GnssMeasurements_CorrectedMeasurement_Future) EphemerisSourceDEPRECATED() GnssMeasurements_EphemerisSourceDEPRECATED_Future {
	return GnssMeasurements_EphemerisSourceDEPRECATED_Future{Future: p.Future.Field(2, nil)}
}

type GnssMeasurements_EphemerisSourceDEPRECATED capnp.Struct

// GnssMeasurements_EphemerisSourceDEPRECATED_TypeID is the unique identifier for the type GnssMeasurements_EphemerisSourceDEPRECATED.
const GnssMeasurements_EphemerisSourceDEPRECATED_TypeID = 0xbcc2ef5087c0ad85

func NewGnssMeasurements_EphemerisSourceDEPRECATED(s *capnp.Segment) (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GnssMeasurements_EphemerisSourceDEPRECATED(st), err
}

func NewRootGnssMeasurements_EphemerisSourceDEPRECATED(s *capnp.Segment) (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GnssMeasurements_EphemerisSourceDEPRECATED(st), err
}

func ReadRootGnssMeasurements_EphemerisSourceDEPRECATED(msg *capnp.Message) (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	root, err := msg.Root()
	return GnssMeasurements_EphemerisSourceDEPRECATED(root.Struct()), err
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) String() string {
	str, _ := text.Marshal(0xbcc2ef5087c0ad85, capnp.Struct(s))
	return str
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GnssMeasurements_EphemerisSourceDEPRECATED) DecodeFromPtr(p capnp.Ptr) GnssMeasurements_EphemerisSourceDEPRECATED {
	return GnssMeasurements_EphemerisSourceDEPRECATED(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GnssMeasurements_EphemerisSourceDEPRECATED) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GnssMeasurements_EphemerisSourceDEPRECATED) Type() GnssMeasurements_EphemerisType {
	return GnssMeasurements_EphemerisType(capnp.Struct(s).Uint16(0))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) SetType(v GnssMeasurements_EphemerisType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) GpsWeek() int16 {
	return int16(capnp.Struct(s).Uint16(2))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) SetGpsWeek(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) GpsTimeOfWeek() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s GnssMeasurements_EphemerisSourceDEPRECATED) SetGpsTimeOfWeek(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// GnssMeasurements_EphemerisSourceDEPRECATED_List is a list of GnssMeasurements_EphemerisSourceDEPRECATED.
type GnssMeasurements_EphemerisSourceDEPRECATED_List = capnp.StructList[GnssMeasurements_EphemerisSourceDEPRECATED]

// NewGnssMeasurements_EphemerisSourceDEPRECATED creates a new list of GnssMeasurements_EphemerisSourceDEPRECATED.
func NewGnssMeasurements_EphemerisSourceDEPRECATED_List(s *capnp.Segment, sz int32) (GnssMeasurements_EphemerisSourceDEPRECATED_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[GnssMeasurements_EphemerisSourceDEPRECATED](l), err
}

// GnssMeasurements_EphemerisSourceDEPRECATED_Future is a wrapper for a GnssMeasurements_EphemerisSourceDEPRECATED promised by a client call.
type GnssMeasurements_EphemerisSourceDEPRECATED_Future struct{ *capnp.Future }

func (f GnssMeasurements_EphemerisSourceDEPRECATED_Future) Struct() (GnssMeasurements_EphemerisSourceDEPRECATED, error) {
	p, err := f.Future.Ptr()
	return GnssMeasurements_EphemerisSourceDEPRECATED(p.Struct()), err
}

type GnssMeasurements_ConstellationId uint16

// GnssMeasurements_ConstellationId_TypeID is the unique identifier for the type GnssMeasurements_ConstellationId.
const GnssMeasurements_ConstellationId_TypeID = 0x82079c2ea8450877

// Values of GnssMeasurements_ConstellationId.
const (
	GnssMeasurements_ConstellationId_gps     GnssMeasurements_ConstellationId = 0
	GnssMeasurements_ConstellationId_sbas    GnssMeasurements_ConstellationId = 1
	GnssMeasurements_ConstellationId_galileo GnssMeasurements_ConstellationId = 2
	GnssMeasurements_ConstellationId_beidou  GnssMeasurements_ConstellationId = 3
	GnssMeasurements_ConstellationId_imes    GnssMeasurements_ConstellationId = 4
	GnssMeasurements_ConstellationId_qznss   GnssMeasurements_ConstellationId = 5
	GnssMeasurements_ConstellationId_glonass GnssMeasurements_ConstellationId = 6
)

// String returns the enum's constant name.
func (c GnssMeasurements_ConstellationId) String() string {
	switch c {
	case GnssMeasurements_ConstellationId_gps:
		return "gps"
	case GnssMeasurements_ConstellationId_sbas:
		return "sbas"
	case GnssMeasurements_ConstellationId_galileo:
		return "galileo"
	case GnssMeasurements_ConstellationId_beidou:
		return "beidou"
	case GnssMeasurements_ConstellationId_imes:
		return "imes"
	case GnssMeasurements_ConstellationId_qznss:
		return "qznss"
	case GnssMeasurements_ConstellationId_glonass:
		return "glonass"

	default:
		return ""
	}
}

// GnssMeasurements_ConstellationIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GnssMeasurements_ConstellationIdFromString(c string) GnssMeasurements_ConstellationId {
	switch c {
	case "gps":
		return GnssMeasurements_ConstellationId_gps
	case "sbas":
		return GnssMeasurements_ConstellationId_sbas
	case "galileo":
		return GnssMeasurements_ConstellationId_galileo
	case "beidou":
		return GnssMeasurements_ConstellationId_beidou
	case "imes":
		return GnssMeasurements_ConstellationId_imes
	case "qznss":
		return GnssMeasurements_ConstellationId_qznss
	case "glonass":
		return GnssMeasurements_ConstellationId_glonass

	default:
		return 0
	}
}

type GnssMeasurements_ConstellationId_List = capnp.EnumList[GnssMeasurements_ConstellationId]

func NewGnssMeasurements_ConstellationId_List(s *capnp.Segment, sz int32) (GnssMeasurements_ConstellationId_List, error) {
	return capnp.NewEnumList[GnssMeasurements_ConstellationId](s, sz)
}

type GnssMeasurements_EphemerisType uint16

// GnssMeasurements_EphemerisType_TypeID is the unique identifier for the type GnssMeasurements_EphemerisType.
const GnssMeasurements_EphemerisType_TypeID = 0xc299bc1804b08d93

// Values of GnssMeasurements_EphemerisType.
const (
	GnssMeasurements_EphemerisType_nav                  GnssMeasurements_EphemerisType = 0
	GnssMeasurements_EphemerisType_nasaUltraRapid       GnssMeasurements_EphemerisType = 1
	GnssMeasurements_EphemerisType_glonassIacUltraRapid GnssMeasurements_EphemerisType = 2
	GnssMeasurements_EphemerisType_qcom                 GnssMeasurements_EphemerisType = 3
)

// String returns the enum's constant name.
func (c GnssMeasurements_EphemerisType) String() string {
	switch c {
	case GnssMeasurements_EphemerisType_nav:
		return "nav"
	case GnssMeasurements_EphemerisType_nasaUltraRapid:
		return "nasaUltraRapid"
	case GnssMeasurements_EphemerisType_glonassIacUltraRapid:
		return "glonassIacUltraRapid"
	case GnssMeasurements_EphemerisType_qcom:
		return "qcom"

	default:
		return ""
	}
}

// GnssMeasurements_EphemerisTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GnssMeasurements_EphemerisTypeFromString(c string) GnssMeasurements_EphemerisType {
	switch c {
	case "nav":
		return GnssMeasurements_EphemerisType_nav
	case "nasaUltraRapid":
		return GnssMeasurements_EphemerisType_nasaUltraRapid
	case "glonassIacUltraRapid":
		return GnssMeasurements_EphemerisType_glonassIacUltraRapid
	case "qcom":
		return GnssMeasurements_EphemerisType_qcom

	default:
		return 0
	}
}

type GnssMeasurements_EphemerisType_List = capnp.EnumList[GnssMeasurements_EphemerisType]

func NewGnssMeasurements_EphemerisType_List(s *capnp.Segment, sz int32) (GnssMeasurements_EphemerisType_List, error) {
	return capnp.NewEnumList[GnssMeasurements_EphemerisType](s, sz)
}

type GnssMeasurements_EphemerisSource uint16

// GnssMeasurements_EphemerisSource_TypeID is the unique identifier for the type GnssMeasurements_EphemerisSource.
const GnssMeasurements_EphemerisSource_TypeID = 0xf6e39b3396a699f6

// Values of GnssMeasurements_EphemerisSource.
const (
	GnssMeasurements_EphemerisSource_gnssChip GnssMeasurements_EphemerisSource = 0
	GnssMeasurements_EphemerisSource_internet GnssMeasurements_EphemerisSource = 1
	GnssMeasurements_EphemerisSource_cache    GnssMeasurements_EphemerisSource = 2
	GnssMeasurements_EphemerisSource_unknown  GnssMeasurements_EphemerisSource = 3
)

// String returns the enum's constant name.
func (c GnssMeasurements_EphemerisSource) String() string {
	switch c {
	case GnssMeasurements_EphemerisSource_gnssChip:
		return "gnssChip"
	case GnssMeasurements_EphemerisSource_internet:
		return "internet"
	case GnssMeasurements_EphemerisSource_cache:
		return "cache"
	case GnssMeasurements_EphemerisSource_unknown:
		return "unknown"

	default:
		return ""
	}
}

// GnssMeasurements_EphemerisSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GnssMeasurements_EphemerisSourceFromString(c string) GnssMeasurements_EphemerisSource {
	switch c {
	case "gnssChip":
		return GnssMeasurements_EphemerisSource_gnssChip
	case "internet":
		return GnssMeasurements_EphemerisSource_internet
	case "cache":
		return GnssMeasurements_EphemerisSource_cache
	case "unknown":
		return GnssMeasurements_EphemerisSource_unknown

	default:
		return 0
	}
}

type GnssMeasurements_EphemerisSource_List = capnp.EnumList[GnssMeasurements_EphemerisSource]

func NewGnssMeasurements_EphemerisSource_List(s *capnp.Segment, sz int32) (GnssMeasurements_EphemerisSource_List, error) {
	return capnp.NewEnumList[GnssMeasurements_EphemerisSource](s, sz)
}

type UbloxGnss capnp.Struct
type UbloxGnss_Which uint16

const (
	UbloxGnss_Which_measurementReport UbloxGnss_Which = 0
	UbloxGnss_Which_ephemeris         UbloxGnss_Which = 1
	UbloxGnss_Which_ionoData          UbloxGnss_Which = 2
	UbloxGnss_Which_hwStatus          UbloxGnss_Which = 3
	UbloxGnss_Which_hwStatus2         UbloxGnss_Which = 4
	UbloxGnss_Which_glonassEphemeris  UbloxGnss_Which = 5
	UbloxGnss_Which_satReport         UbloxGnss_Which = 6
)

func (w UbloxGnss_Which) String() string {
	const s = "measurementReportephemerisionoDatahwStatushwStatus2glonassEphemerissatReport"
	switch w {
	case UbloxGnss_Which_measurementReport:
		return s[0:17]
	case UbloxGnss_Which_ephemeris:
		return s[17:26]
	case UbloxGnss_Which_ionoData:
		return s[26:34]
	case UbloxGnss_Which_hwStatus:
		return s[34:42]
	case UbloxGnss_Which_hwStatus2:
		return s[42:51]
	case UbloxGnss_Which_glonassEphemeris:
		return s[51:67]
	case UbloxGnss_Which_satReport:
		return s[67:76]

	}
	return "UbloxGnss_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// UbloxGnss_TypeID is the unique identifier for the type UbloxGnss.
const UbloxGnss_TypeID = 0x85dddd7ce6cefa5d

func NewUbloxGnss(s *capnp.Segment) (UbloxGnss, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UbloxGnss(st), err
}

func NewRootUbloxGnss(s *capnp.Segment) (UbloxGnss, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UbloxGnss(st), err
}

func ReadRootUbloxGnss(msg *capnp.Message) (UbloxGnss, error) {
	root, err := msg.Root()
	return UbloxGnss(root.Struct()), err
}

func (s UbloxGnss) String() string {
	str, _ := text.Marshal(0x85dddd7ce6cefa5d, capnp.Struct(s))
	return str
}

func (s UbloxGnss) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss) DecodeFromPtr(p capnp.Ptr) UbloxGnss {
	return UbloxGnss(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s UbloxGnss) Which() UbloxGnss_Which {
	return UbloxGnss_Which(capnp.Struct(s).Uint16(0))
}
func (s UbloxGnss) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss) MeasurementReport() (UbloxGnss_MeasurementReport, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != measurementReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_MeasurementReport(p.Struct()), err
}

func (s UbloxGnss) HasMeasurementReport() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetMeasurementReport(v UbloxGnss_MeasurementReport) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeasurementReport sets the measurementReport field to a newly
// allocated UbloxGnss_MeasurementReport struct, preferring placement in s's segment.
func (s UbloxGnss) NewMeasurementReport() (UbloxGnss_MeasurementReport, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewUbloxGnss_MeasurementReport(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_MeasurementReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) Ephemeris() (UbloxGnss_Ephemeris, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != ephemeris")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_Ephemeris(p.Struct()), err
}

func (s UbloxGnss) HasEphemeris() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetEphemeris(v UbloxGnss_Ephemeris) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEphemeris sets the ephemeris field to a newly
// allocated UbloxGnss_Ephemeris struct, preferring placement in s's segment.
func (s UbloxGnss) NewEphemeris() (UbloxGnss_Ephemeris, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewUbloxGnss_Ephemeris(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_Ephemeris{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) IonoData() (UbloxGnss_IonoData, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != ionoData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_IonoData(p.Struct()), err
}

func (s UbloxGnss) HasIonoData() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetIonoData(v UbloxGnss_IonoData) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIonoData sets the ionoData field to a newly
// allocated UbloxGnss_IonoData struct, preferring placement in s's segment.
func (s UbloxGnss) NewIonoData() (UbloxGnss_IonoData, error) {
	capnp.Struct(s).SetUint16(0, 2)
	ss, err := NewUbloxGnss_IonoData(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_IonoData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) HwStatus() (UbloxGnss_HwStatus, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != hwStatus")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_HwStatus(p.Struct()), err
}

func (s UbloxGnss) HasHwStatus() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetHwStatus(v UbloxGnss_HwStatus) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHwStatus sets the hwStatus field to a newly
// allocated UbloxGnss_HwStatus struct, preferring placement in s's segment.
func (s UbloxGnss) NewHwStatus() (UbloxGnss_HwStatus, error) {
	capnp.Struct(s).SetUint16(0, 3)
	ss, err := NewUbloxGnss_HwStatus(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_HwStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) HwStatus2() (UbloxGnss_HwStatus2, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != hwStatus2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_HwStatus2(p.Struct()), err
}

func (s UbloxGnss) HasHwStatus2() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetHwStatus2(v UbloxGnss_HwStatus2) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHwStatus2 sets the hwStatus2 field to a newly
// allocated UbloxGnss_HwStatus2 struct, preferring placement in s's segment.
func (s UbloxGnss) NewHwStatus2() (UbloxGnss_HwStatus2, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := NewUbloxGnss_HwStatus2(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_HwStatus2{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) GlonassEphemeris() (UbloxGnss_GlonassEphemeris, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != glonassEphemeris")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_GlonassEphemeris(p.Struct()), err
}

func (s UbloxGnss) HasGlonassEphemeris() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetGlonassEphemeris(v UbloxGnss_GlonassEphemeris) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGlonassEphemeris sets the glonassEphemeris field to a newly
// allocated UbloxGnss_GlonassEphemeris struct, preferring placement in s's segment.
func (s UbloxGnss) NewGlonassEphemeris() (UbloxGnss_GlonassEphemeris, error) {
	capnp.Struct(s).SetUint16(0, 5)
	ss, err := NewUbloxGnss_GlonassEphemeris(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_GlonassEphemeris{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss) SatReport() (UbloxGnss_SatReport, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != satReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_SatReport(p.Struct()), err
}

func (s UbloxGnss) HasSatReport() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss) SetSatReport(v UbloxGnss_SatReport) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSatReport sets the satReport field to a newly
// allocated UbloxGnss_SatReport struct, preferring placement in s's segment.
func (s UbloxGnss) NewSatReport() (UbloxGnss_SatReport, error) {
	capnp.Struct(s).SetUint16(0, 6)
	ss, err := NewUbloxGnss_SatReport(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_SatReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// UbloxGnss_List is a list of UbloxGnss.
type UbloxGnss_List = capnp.StructList[UbloxGnss]

// NewUbloxGnss creates a new list of UbloxGnss.
func NewUbloxGnss_List(s *capnp.Segment, sz int32) (UbloxGnss_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[UbloxGnss](l), err
}

// UbloxGnss_Future is a wrapper for a UbloxGnss promised by a client call.
type UbloxGnss_Future struct{ *capnp.Future }

func (f UbloxGnss_Future) Struct() (UbloxGnss, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss(p.Struct()), err
}
func (p UbloxGnss_Future) MeasurementReport() UbloxGnss_MeasurementReport_Future {
	return UbloxGnss_MeasurementReport_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) Ephemeris() UbloxGnss_Ephemeris_Future {
	return UbloxGnss_Ephemeris_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) IonoData() UbloxGnss_IonoData_Future {
	return UbloxGnss_IonoData_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) HwStatus() UbloxGnss_HwStatus_Future {
	return UbloxGnss_HwStatus_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) HwStatus2() UbloxGnss_HwStatus2_Future {
	return UbloxGnss_HwStatus2_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) GlonassEphemeris() UbloxGnss_GlonassEphemeris_Future {
	return UbloxGnss_GlonassEphemeris_Future{Future: p.Future.Field(0, nil)}
}
func (p UbloxGnss_Future) SatReport() UbloxGnss_SatReport_Future {
	return UbloxGnss_SatReport_Future{Future: p.Future.Field(0, nil)}
}

type UbloxGnss_SatReport capnp.Struct

// UbloxGnss_SatReport_TypeID is the unique identifier for the type UbloxGnss_SatReport.
const UbloxGnss_SatReport_TypeID = 0xbb642aff76688f53

func NewUbloxGnss_SatReport(s *capnp.Segment) (UbloxGnss_SatReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UbloxGnss_SatReport(st), err
}

func NewRootUbloxGnss_SatReport(s *capnp.Segment) (UbloxGnss_SatReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return UbloxGnss_SatReport(st), err
}

func ReadRootUbloxGnss_SatReport(msg *capnp.Message) (UbloxGnss_SatReport, error) {
	root, err := msg.Root()
	return UbloxGnss_SatReport(root.Struct()), err
}

func (s UbloxGnss_SatReport) String() string {
	str, _ := text.Marshal(0xbb642aff76688f53, capnp.Struct(s))
	return str
}

func (s UbloxGnss_SatReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_SatReport) DecodeFromPtr(p capnp.Ptr) UbloxGnss_SatReport {
	return UbloxGnss_SatReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_SatReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_SatReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_SatReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_SatReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_SatReport) ITow() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s UbloxGnss_SatReport) SetITow(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s UbloxGnss_SatReport) Svs() (UbloxGnss_SatReport_SatInfo_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_SatReport_SatInfo_List(p.List()), err
}

func (s UbloxGnss_SatReport) HasSvs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss_SatReport) SetSvs(v UbloxGnss_SatReport_SatInfo_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSvs sets the svs field to a newly
// allocated UbloxGnss_SatReport_SatInfo_List, preferring placement in s's segment.
func (s UbloxGnss_SatReport) NewSvs(n int32) (UbloxGnss_SatReport_SatInfo_List, error) {
	l, err := NewUbloxGnss_SatReport_SatInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UbloxGnss_SatReport_SatInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// UbloxGnss_SatReport_List is a list of UbloxGnss_SatReport.
type UbloxGnss_SatReport_List = capnp.StructList[UbloxGnss_SatReport]

// NewUbloxGnss_SatReport creates a new list of UbloxGnss_SatReport.
func NewUbloxGnss_SatReport_List(s *capnp.Segment, sz int32) (UbloxGnss_SatReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[UbloxGnss_SatReport](l), err
}

// UbloxGnss_SatReport_Future is a wrapper for a UbloxGnss_SatReport promised by a client call.
type UbloxGnss_SatReport_Future struct{ *capnp.Future }

func (f UbloxGnss_SatReport_Future) Struct() (UbloxGnss_SatReport, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_SatReport(p.Struct()), err
}

type UbloxGnss_SatReport_SatInfo capnp.Struct

// UbloxGnss_SatReport_SatInfo_TypeID is the unique identifier for the type UbloxGnss_SatReport_SatInfo.
const UbloxGnss_SatReport_SatInfo_TypeID = 0xe89dce02ced79e43

func NewUbloxGnss_SatReport_SatInfo(s *capnp.Segment) (UbloxGnss_SatReport_SatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_SatReport_SatInfo(st), err
}

func NewRootUbloxGnss_SatReport_SatInfo(s *capnp.Segment) (UbloxGnss_SatReport_SatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_SatReport_SatInfo(st), err
}

func ReadRootUbloxGnss_SatReport_SatInfo(msg *capnp.Message) (UbloxGnss_SatReport_SatInfo, error) {
	root, err := msg.Root()
	return UbloxGnss_SatReport_SatInfo(root.Struct()), err
}

func (s UbloxGnss_SatReport_SatInfo) String() string {
	str, _ := text.Marshal(0xe89dce02ced79e43, capnp.Struct(s))
	return str
}

func (s UbloxGnss_SatReport_SatInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_SatReport_SatInfo) DecodeFromPtr(p capnp.Ptr) UbloxGnss_SatReport_SatInfo {
	return UbloxGnss_SatReport_SatInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_SatReport_SatInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_SatReport_SatInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_SatReport_SatInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_SatReport_SatInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_SatReport_SatInfo) SvId() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s UbloxGnss_SatReport_SatInfo) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s UbloxGnss_SatReport_SatInfo) GnssId() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s UbloxGnss_SatReport_SatInfo) SetGnssId(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s UbloxGnss_SatReport_SatInfo) FlagsBitfield() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s UbloxGnss_SatReport_SatInfo) SetFlagsBitfield(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

// UbloxGnss_SatReport_SatInfo_List is a list of UbloxGnss_SatReport_SatInfo.
type UbloxGnss_SatReport_SatInfo_List = capnp.StructList[UbloxGnss_SatReport_SatInfo]

// NewUbloxGnss_SatReport_SatInfo creates a new list of UbloxGnss_SatReport_SatInfo.
func NewUbloxGnss_SatReport_SatInfo_List(s *capnp.Segment, sz int32) (UbloxGnss_SatReport_SatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_SatReport_SatInfo](l), err
}

// UbloxGnss_SatReport_SatInfo_Future is a wrapper for a UbloxGnss_SatReport_SatInfo promised by a client call.
type UbloxGnss_SatReport_SatInfo_Future struct{ *capnp.Future }

func (f UbloxGnss_SatReport_SatInfo_Future) Struct() (UbloxGnss_SatReport_SatInfo, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_SatReport_SatInfo(p.Struct()), err
}

type UbloxGnss_MeasurementReport capnp.Struct

// UbloxGnss_MeasurementReport_TypeID is the unique identifier for the type UbloxGnss_MeasurementReport.
const UbloxGnss_MeasurementReport_TypeID = 0xa73ba546a29820f4

func NewUbloxGnss_MeasurementReport(s *capnp.Segment) (UbloxGnss_MeasurementReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return UbloxGnss_MeasurementReport(st), err
}

func NewRootUbloxGnss_MeasurementReport(s *capnp.Segment) (UbloxGnss_MeasurementReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return UbloxGnss_MeasurementReport(st), err
}

func ReadRootUbloxGnss_MeasurementReport(msg *capnp.Message) (UbloxGnss_MeasurementReport, error) {
	root, err := msg.Root()
	return UbloxGnss_MeasurementReport(root.Struct()), err
}

func (s UbloxGnss_MeasurementReport) String() string {
	str, _ := text.Marshal(0xa73ba546a29820f4, capnp.Struct(s))
	return str
}

func (s UbloxGnss_MeasurementReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_MeasurementReport) DecodeFromPtr(p capnp.Ptr) UbloxGnss_MeasurementReport {
	return UbloxGnss_MeasurementReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_MeasurementReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_MeasurementReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_MeasurementReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_MeasurementReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_MeasurementReport) RcvTow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s UbloxGnss_MeasurementReport) SetRcvTow(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s UbloxGnss_MeasurementReport) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s UbloxGnss_MeasurementReport) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s UbloxGnss_MeasurementReport) LeapSeconds() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s UbloxGnss_MeasurementReport) SetLeapSeconds(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s UbloxGnss_MeasurementReport) ReceiverStatus() (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_MeasurementReport_ReceiverStatus(p.Struct()), err
}

func (s UbloxGnss_MeasurementReport) HasReceiverStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss_MeasurementReport) SetReceiverStatus(v UbloxGnss_MeasurementReport_ReceiverStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewReceiverStatus sets the receiverStatus field to a newly
// allocated UbloxGnss_MeasurementReport_ReceiverStatus struct, preferring placement in s's segment.
func (s UbloxGnss_MeasurementReport) NewReceiverStatus() (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	ss, err := NewUbloxGnss_MeasurementReport_ReceiverStatus(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_MeasurementReport_ReceiverStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss_MeasurementReport) NumMeas() uint8 {
	return capnp.Struct(s).Uint8(12)
}

func (s UbloxGnss_MeasurementReport) SetNumMeas(v uint8) {
	capnp.Struct(s).SetUint8(12, v)
}

func (s UbloxGnss_MeasurementReport) Measurements() (UbloxGnss_MeasurementReport_Measurement_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UbloxGnss_MeasurementReport_Measurement_List(p.List()), err
}

func (s UbloxGnss_MeasurementReport) HasMeasurements() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UbloxGnss_MeasurementReport) SetMeasurements(v UbloxGnss_MeasurementReport_Measurement_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeasurements sets the measurements field to a newly
// allocated UbloxGnss_MeasurementReport_Measurement_List, preferring placement in s's segment.
func (s UbloxGnss_MeasurementReport) NewMeasurements(n int32) (UbloxGnss_MeasurementReport_Measurement_List, error) {
	l, err := NewUbloxGnss_MeasurementReport_Measurement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UbloxGnss_MeasurementReport_Measurement_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// UbloxGnss_MeasurementReport_List is a list of UbloxGnss_MeasurementReport.
type UbloxGnss_MeasurementReport_List = capnp.StructList[UbloxGnss_MeasurementReport]

// NewUbloxGnss_MeasurementReport creates a new list of UbloxGnss_MeasurementReport.
func NewUbloxGnss_MeasurementReport_List(s *capnp.Segment, sz int32) (UbloxGnss_MeasurementReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[UbloxGnss_MeasurementReport](l), err
}

// UbloxGnss_MeasurementReport_Future is a wrapper for a UbloxGnss_MeasurementReport promised by a client call.
type UbloxGnss_MeasurementReport_Future struct{ *capnp.Future }

func (f UbloxGnss_MeasurementReport_Future) Struct() (UbloxGnss_MeasurementReport, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_MeasurementReport(p.Struct()), err
}
func (p UbloxGnss_MeasurementReport_Future) ReceiverStatus() UbloxGnss_MeasurementReport_ReceiverStatus_Future {
	return UbloxGnss_MeasurementReport_ReceiverStatus_Future{Future: p.Future.Field(0, nil)}
}

type UbloxGnss_MeasurementReport_ReceiverStatus capnp.Struct

// UbloxGnss_MeasurementReport_ReceiverStatus_TypeID is the unique identifier for the type UbloxGnss_MeasurementReport_ReceiverStatus.
const UbloxGnss_MeasurementReport_ReceiverStatus_TypeID = 0xfbb838d65160aab6

func NewUbloxGnss_MeasurementReport_ReceiverStatus(s *capnp.Segment) (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_MeasurementReport_ReceiverStatus(st), err
}

func NewRootUbloxGnss_MeasurementReport_ReceiverStatus(s *capnp.Segment) (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_MeasurementReport_ReceiverStatus(st), err
}

func ReadRootUbloxGnss_MeasurementReport_ReceiverStatus(msg *capnp.Message) (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	root, err := msg.Root()
	return UbloxGnss_MeasurementReport_ReceiverStatus(root.Struct()), err
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) String() string {
	str, _ := text.Marshal(0xfbb838d65160aab6, capnp.Struct(s))
	return str
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_MeasurementReport_ReceiverStatus) DecodeFromPtr(p capnp.Ptr) UbloxGnss_MeasurementReport_ReceiverStatus {
	return UbloxGnss_MeasurementReport_ReceiverStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_MeasurementReport_ReceiverStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_MeasurementReport_ReceiverStatus) LeapSecValid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) SetLeapSecValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) ClkReset() bool {
	return capnp.Struct(s).Bit(1)
}

func (s UbloxGnss_MeasurementReport_ReceiverStatus) SetClkReset(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// UbloxGnss_MeasurementReport_ReceiverStatus_List is a list of UbloxGnss_MeasurementReport_ReceiverStatus.
type UbloxGnss_MeasurementReport_ReceiverStatus_List = capnp.StructList[UbloxGnss_MeasurementReport_ReceiverStatus]

// NewUbloxGnss_MeasurementReport_ReceiverStatus creates a new list of UbloxGnss_MeasurementReport_ReceiverStatus.
func NewUbloxGnss_MeasurementReport_ReceiverStatus_List(s *capnp.Segment, sz int32) (UbloxGnss_MeasurementReport_ReceiverStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_MeasurementReport_ReceiverStatus](l), err
}

// UbloxGnss_MeasurementReport_ReceiverStatus_Future is a wrapper for a UbloxGnss_MeasurementReport_ReceiverStatus promised by a client call.
type UbloxGnss_MeasurementReport_ReceiverStatus_Future struct{ *capnp.Future }

func (f UbloxGnss_MeasurementReport_ReceiverStatus_Future) Struct() (UbloxGnss_MeasurementReport_ReceiverStatus, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_MeasurementReport_ReceiverStatus(p.Struct()), err
}

type UbloxGnss_MeasurementReport_Measurement capnp.Struct

// UbloxGnss_MeasurementReport_Measurement_TypeID is the unique identifier for the type UbloxGnss_MeasurementReport_Measurement.
const UbloxGnss_MeasurementReport_Measurement_TypeID = 0x8f8a655f5e326401

func NewUbloxGnss_MeasurementReport_Measurement(s *capnp.Segment) (UbloxGnss_MeasurementReport_Measurement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return UbloxGnss_MeasurementReport_Measurement(st), err
}

func NewRootUbloxGnss_MeasurementReport_Measurement(s *capnp.Segment) (UbloxGnss_MeasurementReport_Measurement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return UbloxGnss_MeasurementReport_Measurement(st), err
}

func ReadRootUbloxGnss_MeasurementReport_Measurement(msg *capnp.Message) (UbloxGnss_MeasurementReport_Measurement, error) {
	root, err := msg.Root()
	return UbloxGnss_MeasurementReport_Measurement(root.Struct()), err
}

func (s UbloxGnss_MeasurementReport_Measurement) String() string {
	str, _ := text.Marshal(0x8f8a655f5e326401, capnp.Struct(s))
	return str
}

func (s UbloxGnss_MeasurementReport_Measurement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_MeasurementReport_Measurement) DecodeFromPtr(p capnp.Ptr) UbloxGnss_MeasurementReport_Measurement {
	return UbloxGnss_MeasurementReport_Measurement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_MeasurementReport_Measurement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_MeasurementReport_Measurement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_MeasurementReport_Measurement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_MeasurementReport_Measurement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_MeasurementReport_Measurement) SvId() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s UbloxGnss_MeasurementReport_Measurement) TrackingStatus() (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(p.Struct()), err
}

func (s UbloxGnss_MeasurementReport_Measurement) HasTrackingStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetTrackingStatus(v UbloxGnss_MeasurementReport_Measurement_TrackingStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTrackingStatus sets the trackingStatus field to a newly
// allocated UbloxGnss_MeasurementReport_Measurement_TrackingStatus struct, preferring placement in s's segment.
func (s UbloxGnss_MeasurementReport_Measurement) NewTrackingStatus() (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	ss, err := NewUbloxGnss_MeasurementReport_Measurement_TrackingStatus(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss_MeasurementReport_Measurement_TrackingStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UbloxGnss_MeasurementReport_Measurement) Pseudorange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetPseudorange(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) CarrierCycles() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetCarrierCycles(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) Doppler() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetDoppler(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) GnssId() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetGnssId(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s UbloxGnss_MeasurementReport_Measurement) GlonassFrequencyIndex() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetGlonassFrequencyIndex(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s UbloxGnss_MeasurementReport_Measurement) Locktime() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetLocktime(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s UbloxGnss_MeasurementReport_Measurement) Cno() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetCno(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s UbloxGnss_MeasurementReport_Measurement) PseudorangeStdev() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetPseudorangeStdev(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) CarrierPhaseStdev() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetCarrierPhaseStdev(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) DopplerStdev() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s UbloxGnss_MeasurementReport_Measurement) SetDopplerStdev(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s UbloxGnss_MeasurementReport_Measurement) SigId() uint8 {
	return capnp.Struct(s).Uint8(26)
}

func (s UbloxGnss_MeasurementReport_Measurement) SetSigId(v uint8) {
	capnp.Struct(s).SetUint8(26, v)
}

// UbloxGnss_MeasurementReport_Measurement_List is a list of UbloxGnss_MeasurementReport_Measurement.
type UbloxGnss_MeasurementReport_Measurement_List = capnp.StructList[UbloxGnss_MeasurementReport_Measurement]

// NewUbloxGnss_MeasurementReport_Measurement creates a new list of UbloxGnss_MeasurementReport_Measurement.
func NewUbloxGnss_MeasurementReport_Measurement_List(s *capnp.Segment, sz int32) (UbloxGnss_MeasurementReport_Measurement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[UbloxGnss_MeasurementReport_Measurement](l), err
}

// UbloxGnss_MeasurementReport_Measurement_Future is a wrapper for a UbloxGnss_MeasurementReport_Measurement promised by a client call.
type UbloxGnss_MeasurementReport_Measurement_Future struct{ *capnp.Future }

func (f UbloxGnss_MeasurementReport_Measurement_Future) Struct() (UbloxGnss_MeasurementReport_Measurement, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_MeasurementReport_Measurement(p.Struct()), err
}
func (p UbloxGnss_MeasurementReport_Measurement_Future) TrackingStatus() UbloxGnss_MeasurementReport_Measurement_TrackingStatus_Future {
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus_Future{Future: p.Future.Field(0, nil)}
}

type UbloxGnss_MeasurementReport_Measurement_TrackingStatus capnp.Struct

// UbloxGnss_MeasurementReport_Measurement_TrackingStatus_TypeID is the unique identifier for the type UbloxGnss_MeasurementReport_Measurement_TrackingStatus.
const UbloxGnss_MeasurementReport_Measurement_TrackingStatus_TypeID = 0xe8efb3a802b299b2

func NewUbloxGnss_MeasurementReport_Measurement_TrackingStatus(s *capnp.Segment) (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(st), err
}

func NewRootUbloxGnss_MeasurementReport_Measurement_TrackingStatus(s *capnp.Segment) (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(st), err
}

func ReadRootUbloxGnss_MeasurementReport_Measurement_TrackingStatus(msg *capnp.Message) (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	root, err := msg.Root()
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(root.Struct()), err
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) String() string {
	str, _ := text.Marshal(0xe8efb3a802b299b2, capnp.Struct(s))
	return str
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_MeasurementReport_Measurement_TrackingStatus) DecodeFromPtr(p capnp.Ptr) UbloxGnss_MeasurementReport_Measurement_TrackingStatus {
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) PseudorangeValid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) SetPseudorangeValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) CarrierPhaseValid() bool {
	return capnp.Struct(s).Bit(1)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) SetCarrierPhaseValid(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) HalfCycleValid() bool {
	return capnp.Struct(s).Bit(2)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) SetHalfCycleValid(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) HalfCycleSubtracted() bool {
	return capnp.Struct(s).Bit(3)
}

func (s UbloxGnss_MeasurementReport_Measurement_TrackingStatus) SetHalfCycleSubtracted(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

// UbloxGnss_MeasurementReport_Measurement_TrackingStatus_List is a list of UbloxGnss_MeasurementReport_Measurement_TrackingStatus.
type UbloxGnss_MeasurementReport_Measurement_TrackingStatus_List = capnp.StructList[UbloxGnss_MeasurementReport_Measurement_TrackingStatus]

// NewUbloxGnss_MeasurementReport_Measurement_TrackingStatus creates a new list of UbloxGnss_MeasurementReport_Measurement_TrackingStatus.
func NewUbloxGnss_MeasurementReport_Measurement_TrackingStatus_List(s *capnp.Segment, sz int32) (UbloxGnss_MeasurementReport_Measurement_TrackingStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_MeasurementReport_Measurement_TrackingStatus](l), err
}

// UbloxGnss_MeasurementReport_Measurement_TrackingStatus_Future is a wrapper for a UbloxGnss_MeasurementReport_Measurement_TrackingStatus promised by a client call.
type UbloxGnss_MeasurementReport_Measurement_TrackingStatus_Future struct{ *capnp.Future }

func (f UbloxGnss_MeasurementReport_Measurement_TrackingStatus_Future) Struct() (UbloxGnss_MeasurementReport_Measurement_TrackingStatus, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_MeasurementReport_Measurement_TrackingStatus(p.Struct()), err
}

type UbloxGnss_Ephemeris capnp.Struct

// UbloxGnss_Ephemeris_TypeID is the unique identifier for the type UbloxGnss_Ephemeris.
const UbloxGnss_Ephemeris_TypeID = 0xd8418c788118f85c

func NewUbloxGnss_Ephemeris(s *capnp.Segment) (UbloxGnss_Ephemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 272, PointerCount: 2})
	return UbloxGnss_Ephemeris(st), err
}

func NewRootUbloxGnss_Ephemeris(s *capnp.Segment) (UbloxGnss_Ephemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 272, PointerCount: 2})
	return UbloxGnss_Ephemeris(st), err
}

func ReadRootUbloxGnss_Ephemeris(msg *capnp.Message) (UbloxGnss_Ephemeris, error) {
	root, err := msg.Root()
	return UbloxGnss_Ephemeris(root.Struct()), err
}

func (s UbloxGnss_Ephemeris) String() string {
	str, _ := text.Marshal(0xd8418c788118f85c, capnp.Struct(s))
	return str
}

func (s UbloxGnss_Ephemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_Ephemeris) DecodeFromPtr(p capnp.Ptr) UbloxGnss_Ephemeris {
	return UbloxGnss_Ephemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_Ephemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_Ephemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_Ephemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_Ephemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_Ephemeris) SvId() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s UbloxGnss_Ephemeris) SetSvId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s UbloxGnss_Ephemeris) Year() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s UbloxGnss_Ephemeris) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s UbloxGnss_Ephemeris) Month() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s UbloxGnss_Ephemeris) SetMonth(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s UbloxGnss_Ephemeris) Day() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s UbloxGnss_Ephemeris) SetDay(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s UbloxGnss_Ephemeris) Hour() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s UbloxGnss_Ephemeris) SetHour(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s UbloxGnss_Ephemeris) Minute() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s UbloxGnss_Ephemeris) SetMinute(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s UbloxGnss_Ephemeris) Second() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s UbloxGnss_Ephemeris) SetSecond(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s UbloxGnss_Ephemeris) Af0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s UbloxGnss_Ephemeris) SetAf0(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Af1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s UbloxGnss_Ephemeris) SetAf1(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Af2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s UbloxGnss_Ephemeris) SetAf2(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Iode() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s UbloxGnss_Ephemeris) SetIode(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Crs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s UbloxGnss_Ephemeris) SetCrs(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) DeltaN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s UbloxGnss_Ephemeris) SetDeltaN(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) M0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s UbloxGnss_Ephemeris) SetM0(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Cuc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s UbloxGnss_Ephemeris) SetCuc(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Ecc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s UbloxGnss_Ephemeris) SetEcc(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Cus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s UbloxGnss_Ephemeris) SetCus(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) A() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s UbloxGnss_Ephemeris) SetA(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Toe() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s UbloxGnss_Ephemeris) SetToe(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Cic() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s UbloxGnss_Ephemeris) SetCic(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Omega0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s UbloxGnss_Ephemeris) SetOmega0(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Cis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s UbloxGnss_Ephemeris) SetCis(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) I0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s UbloxGnss_Ephemeris) SetI0(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Crc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s UbloxGnss_Ephemeris) SetCrc(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Omega() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s UbloxGnss_Ephemeris) SetOmega(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) OmegaDot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s UbloxGnss_Ephemeris) SetOmegaDot(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) IDot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s UbloxGnss_Ephemeris) SetIDot(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) CodesL2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s UbloxGnss_Ephemeris) SetCodesL2(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) GpsWeekDEPRECATED() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s UbloxGnss_Ephemeris) SetGpsWeekDEPRECATED(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) L2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s UbloxGnss_Ephemeris) SetL2(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) SvAcc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s UbloxGnss_Ephemeris) SetSvAcc(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) SvHealth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s UbloxGnss_Ephemeris) SetSvHealth(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Tgd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s UbloxGnss_Ephemeris) SetTgd(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Iodc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s UbloxGnss_Ephemeris) SetIodc(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) TransmissionTime() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s UbloxGnss_Ephemeris) SetTransmissionTime(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) FitInterval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s UbloxGnss_Ephemeris) SetFitInterval(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) Toc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s UbloxGnss_Ephemeris) SetToc(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s UbloxGnss_Ephemeris) IonoCoeffsValid() bool {
	return capnp.Struct(s).Bit(2048)
}

func (s UbloxGnss_Ephemeris) SetIonoCoeffsValid(v bool) {
	capnp.Struct(s).SetBit(2048, v)
}

func (s UbloxGnss_Ephemeris) IonoAlpha() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s UbloxGnss_Ephemeris) HasIonoAlpha() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss_Ephemeris) SetIonoAlpha(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewIonoAlpha sets the ionoAlpha field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s UbloxGnss_Ephemeris) NewIonoAlpha(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s UbloxGnss_Ephemeris) IonoBeta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s UbloxGnss_Ephemeris) HasIonoBeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UbloxGnss_Ephemeris) SetIonoBeta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewIonoBeta sets the ionoBeta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s UbloxGnss_Ephemeris) NewIonoBeta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s UbloxGnss_Ephemeris) TowCount() uint32 {
	return capnp.Struct(s).Uint32(260)
}

func (s UbloxGnss_Ephemeris) SetTowCount(v uint32) {
	capnp.Struct(s).SetUint32(260, v)
}

func (s UbloxGnss_Ephemeris) ToeWeek() uint16 {
	return capnp.Struct(s).Uint16(258)
}

func (s UbloxGnss_Ephemeris) SetToeWeek(v uint16) {
	capnp.Struct(s).SetUint16(258, v)
}

func (s UbloxGnss_Ephemeris) TocWeek() uint16 {
	return capnp.Struct(s).Uint16(264)
}

func (s UbloxGnss_Ephemeris) SetTocWeek(v uint16) {
	capnp.Struct(s).SetUint16(264, v)
}

// UbloxGnss_Ephemeris_List is a list of UbloxGnss_Ephemeris.
type UbloxGnss_Ephemeris_List = capnp.StructList[UbloxGnss_Ephemeris]

// NewUbloxGnss_Ephemeris creates a new list of UbloxGnss_Ephemeris.
func NewUbloxGnss_Ephemeris_List(s *capnp.Segment, sz int32) (UbloxGnss_Ephemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 272, PointerCount: 2}, sz)
	return capnp.StructList[UbloxGnss_Ephemeris](l), err
}

// UbloxGnss_Ephemeris_Future is a wrapper for a UbloxGnss_Ephemeris promised by a client call.
type UbloxGnss_Ephemeris_Future struct{ *capnp.Future }

func (f UbloxGnss_Ephemeris_Future) Struct() (UbloxGnss_Ephemeris, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_Ephemeris(p.Struct()), err
}

type UbloxGnss_IonoData capnp.Struct

// UbloxGnss_IonoData_TypeID is the unique identifier for the type UbloxGnss_IonoData.
const UbloxGnss_IonoData_TypeID = 0xc3a3a8de519a4a26

func NewUbloxGnss_IonoData(s *capnp.Segment) (UbloxGnss_IonoData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return UbloxGnss_IonoData(st), err
}

func NewRootUbloxGnss_IonoData(s *capnp.Segment) (UbloxGnss_IonoData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return UbloxGnss_IonoData(st), err
}

func ReadRootUbloxGnss_IonoData(msg *capnp.Message) (UbloxGnss_IonoData, error) {
	root, err := msg.Root()
	return UbloxGnss_IonoData(root.Struct()), err
}

func (s UbloxGnss_IonoData) String() string {
	str, _ := text.Marshal(0xc3a3a8de519a4a26, capnp.Struct(s))
	return str
}

func (s UbloxGnss_IonoData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_IonoData) DecodeFromPtr(p capnp.Ptr) UbloxGnss_IonoData {
	return UbloxGnss_IonoData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_IonoData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_IonoData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_IonoData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_IonoData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_IonoData) SvHealth() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s UbloxGnss_IonoData) SetSvHealth(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s UbloxGnss_IonoData) Tow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s UbloxGnss_IonoData) SetTow(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s UbloxGnss_IonoData) GpsWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s UbloxGnss_IonoData) SetGpsWeek(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s UbloxGnss_IonoData) IonoAlpha() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s UbloxGnss_IonoData) HasIonoAlpha() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UbloxGnss_IonoData) SetIonoAlpha(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewIonoAlpha sets the ionoAlpha field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s UbloxGnss_IonoData) NewIonoAlpha(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s UbloxGnss_IonoData) IonoBeta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s UbloxGnss_IonoData) HasIonoBeta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UbloxGnss_IonoData) SetIonoBeta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewIonoBeta sets the ionoBeta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s UbloxGnss_IonoData) NewIonoBeta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s UbloxGnss_IonoData) HealthValid() bool {
	return capnp.Struct(s).Bit(32)
}

func (s UbloxGnss_IonoData) SetHealthValid(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s UbloxGnss_IonoData) IonoCoeffsValid() bool {
	return capnp.Struct(s).Bit(33)
}

func (s UbloxGnss_IonoData) SetIonoCoeffsValid(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

// UbloxGnss_IonoData_List is a list of UbloxGnss_IonoData.
type UbloxGnss_IonoData_List = capnp.StructList[UbloxGnss_IonoData]

// NewUbloxGnss_IonoData creates a new list of UbloxGnss_IonoData.
func NewUbloxGnss_IonoData_List(s *capnp.Segment, sz int32) (UbloxGnss_IonoData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[UbloxGnss_IonoData](l), err
}

// UbloxGnss_IonoData_Future is a wrapper for a UbloxGnss_IonoData promised by a client call.
type UbloxGnss_IonoData_Future struct{ *capnp.Future }

func (f UbloxGnss_IonoData_Future) Struct() (UbloxGnss_IonoData, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_IonoData(p.Struct()), err
}

type UbloxGnss_HwStatus capnp.Struct

// UbloxGnss_HwStatus_TypeID is the unique identifier for the type UbloxGnss_HwStatus.
const UbloxGnss_HwStatus_TypeID = 0xebb036b114275aa8

func NewUbloxGnss_HwStatus(s *capnp.Segment) (UbloxGnss_HwStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UbloxGnss_HwStatus(st), err
}

func NewRootUbloxGnss_HwStatus(s *capnp.Segment) (UbloxGnss_HwStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UbloxGnss_HwStatus(st), err
}

func ReadRootUbloxGnss_HwStatus(msg *capnp.Message) (UbloxGnss_HwStatus, error) {
	root, err := msg.Root()
	return UbloxGnss_HwStatus(root.Struct()), err
}

func (s UbloxGnss_HwStatus) String() string {
	str, _ := text.Marshal(0xebb036b114275aa8, capnp.Struct(s))
	return str
}

func (s UbloxGnss_HwStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_HwStatus) DecodeFromPtr(p capnp.Ptr) UbloxGnss_HwStatus {
	return UbloxGnss_HwStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_HwStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_HwStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_HwStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_HwStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_HwStatus) NoisePerMS() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s UbloxGnss_HwStatus) SetNoisePerMS(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s UbloxGnss_HwStatus) AgcCnt() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s UbloxGnss_HwStatus) SetAgcCnt(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s UbloxGnss_HwStatus) AStatus() UbloxGnss_HwStatus_AntennaSupervisorState {
	return UbloxGnss_HwStatus_AntennaSupervisorState(capnp.Struct(s).Uint16(4))
}

func (s UbloxGnss_HwStatus) SetAStatus(v UbloxGnss_HwStatus_AntennaSupervisorState) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s UbloxGnss_HwStatus) APower() UbloxGnss_HwStatus_AntennaPowerStatus {
	return UbloxGnss_HwStatus_AntennaPowerStatus(capnp.Struct(s).Uint16(6))
}

func (s UbloxGnss_HwStatus) SetAPower(v UbloxGnss_HwStatus_AntennaPowerStatus) {
	capnp.Struct(s).SetUint16(6, uint16(v))
}

func (s UbloxGnss_HwStatus) JamInd() uint8 {
	return capnp.Struct(s).Uint8(8)
}

func (s UbloxGnss_HwStatus) SetJamInd(v uint8) {
	capnp.Struct(s).SetUint8(8, v)
}

func (s UbloxGnss_HwStatus) Flags() uint8 {
	return capnp.Struct(s).Uint8(9)
}

func (s UbloxGnss_HwStatus) SetFlags(v uint8) {
	capnp.Struct(s).SetUint8(9, v)
}

// UbloxGnss_HwStatus_List is a list of UbloxGnss_HwStatus.
type UbloxGnss_HwStatus_List = capnp.StructList[UbloxGnss_HwStatus]

// NewUbloxGnss_HwStatus creates a new list of UbloxGnss_HwStatus.
func NewUbloxGnss_HwStatus_List(s *capnp.Segment, sz int32) (UbloxGnss_HwStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_HwStatus](l), err
}

// UbloxGnss_HwStatus_Future is a wrapper for a UbloxGnss_HwStatus promised by a client call.
type UbloxGnss_HwStatus_Future struct{ *capnp.Future }

func (f UbloxGnss_HwStatus_Future) Struct() (UbloxGnss_HwStatus, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_HwStatus(p.Struct()), err
}

type UbloxGnss_HwStatus_AntennaSupervisorState uint16

// UbloxGnss_HwStatus_AntennaSupervisorState_TypeID is the unique identifier for the type UbloxGnss_HwStatus_AntennaSupervisorState.
const UbloxGnss_HwStatus_AntennaSupervisorState_TypeID = 0xc23e1128ab4d5b53

// Values of UbloxGnss_HwStatus_AntennaSupervisorState.
const (
	UbloxGnss_HwStatus_AntennaSupervisorState_init     UbloxGnss_HwStatus_AntennaSupervisorState = 0
	UbloxGnss_HwStatus_AntennaSupervisorState_dontknow UbloxGnss_HwStatus_AntennaSupervisorState = 1
	UbloxGnss_HwStatus_AntennaSupervisorState_ok       UbloxGnss_HwStatus_AntennaSupervisorState = 2
	UbloxGnss_HwStatus_AntennaSupervisorState_short    UbloxGnss_HwStatus_AntennaSupervisorState = 3
	UbloxGnss_HwStatus_AntennaSupervisorState_open     UbloxGnss_HwStatus_AntennaSupervisorState = 4
)

// String returns the enum's constant name.
func (c UbloxGnss_HwStatus_AntennaSupervisorState) String() string {
	switch c {
	case UbloxGnss_HwStatus_AntennaSupervisorState_init:
		return "init"
	case UbloxGnss_HwStatus_AntennaSupervisorState_dontknow:
		return "dontknow"
	case UbloxGnss_HwStatus_AntennaSupervisorState_ok:
		return "ok"
	case UbloxGnss_HwStatus_AntennaSupervisorState_short:
		return "short"
	case UbloxGnss_HwStatus_AntennaSupervisorState_open:
		return "open"

	default:
		return ""
	}
}

// UbloxGnss_HwStatus_AntennaSupervisorStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UbloxGnss_HwStatus_AntennaSupervisorStateFromString(c string) UbloxGnss_HwStatus_AntennaSupervisorState {
	switch c {
	case "init":
		return UbloxGnss_HwStatus_AntennaSupervisorState_init
	case "dontknow":
		return UbloxGnss_HwStatus_AntennaSupervisorState_dontknow
	case "ok":
		return UbloxGnss_HwStatus_AntennaSupervisorState_ok
	case "short":
		return UbloxGnss_HwStatus_AntennaSupervisorState_short
	case "open":
		return UbloxGnss_HwStatus_AntennaSupervisorState_open

	default:
		return 0
	}
}

type UbloxGnss_HwStatus_AntennaSupervisorState_List = capnp.EnumList[UbloxGnss_HwStatus_AntennaSupervisorState]

func NewUbloxGnss_HwStatus_AntennaSupervisorState_List(s *capnp.Segment, sz int32) (UbloxGnss_HwStatus_AntennaSupervisorState_List, error) {
	return capnp.NewEnumList[UbloxGnss_HwStatus_AntennaSupervisorState](s, sz)
}

type UbloxGnss_HwStatus_AntennaPowerStatus uint16

// UbloxGnss_HwStatus_AntennaPowerStatus_TypeID is the unique identifier for the type UbloxGnss_HwStatus_AntennaPowerStatus.
const UbloxGnss_HwStatus_AntennaPowerStatus_TypeID = 0xfe3b51a924e46559

// Values of UbloxGnss_HwStatus_AntennaPowerStatus.
const (
	UbloxGnss_HwStatus_AntennaPowerStatus_off      UbloxGnss_HwStatus_AntennaPowerStatus = 0
	UbloxGnss_HwStatus_AntennaPowerStatus_on       UbloxGnss_HwStatus_AntennaPowerStatus = 1
	UbloxGnss_HwStatus_AntennaPowerStatus_dontknow UbloxGnss_HwStatus_AntennaPowerStatus = 2
)

// String returns the enum's constant name.
func (c UbloxGnss_HwStatus_AntennaPowerStatus) String() string {
	switch c {
	case UbloxGnss_HwStatus_AntennaPowerStatus_off:
		return "off"
	case UbloxGnss_HwStatus_AntennaPowerStatus_on:
		return "on"
	case UbloxGnss_HwStatus_AntennaPowerStatus_dontknow:
		return "dontknow"

	default:
		return ""
	}
}

// UbloxGnss_HwStatus_AntennaPowerStatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UbloxGnss_HwStatus_AntennaPowerStatusFromString(c string) UbloxGnss_HwStatus_AntennaPowerStatus {
	switch c {
	case "off":
		return UbloxGnss_HwStatus_AntennaPowerStatus_off
	case "on":
		return UbloxGnss_HwStatus_AntennaPowerStatus_on
	case "dontknow":
		return UbloxGnss_HwStatus_AntennaPowerStatus_dontknow

	default:
		return 0
	}
}

type UbloxGnss_HwStatus_AntennaPowerStatus_List = capnp.EnumList[UbloxGnss_HwStatus_AntennaPowerStatus]

func NewUbloxGnss_HwStatus_AntennaPowerStatus_List(s *capnp.Segment, sz int32) (UbloxGnss_HwStatus_AntennaPowerStatus_List, error) {
	return capnp.NewEnumList[UbloxGnss_HwStatus_AntennaPowerStatus](s, sz)
}

type UbloxGnss_HwStatus2 capnp.Struct

// UbloxGnss_HwStatus2_TypeID is the unique identifier for the type UbloxGnss_HwStatus2.
const UbloxGnss_HwStatus2_TypeID = 0xf919b410b90e53c6

func NewUbloxGnss_HwStatus2(s *capnp.Segment) (UbloxGnss_HwStatus2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UbloxGnss_HwStatus2(st), err
}

func NewRootUbloxGnss_HwStatus2(s *capnp.Segment) (UbloxGnss_HwStatus2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return UbloxGnss_HwStatus2(st), err
}

func ReadRootUbloxGnss_HwStatus2(msg *capnp.Message) (UbloxGnss_HwStatus2, error) {
	root, err := msg.Root()
	return UbloxGnss_HwStatus2(root.Struct()), err
}

func (s UbloxGnss_HwStatus2) String() string {
	str, _ := text.Marshal(0xf919b410b90e53c6, capnp.Struct(s))
	return str
}

func (s UbloxGnss_HwStatus2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_HwStatus2) DecodeFromPtr(p capnp.Ptr) UbloxGnss_HwStatus2 {
	return UbloxGnss_HwStatus2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_HwStatus2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_HwStatus2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_HwStatus2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_HwStatus2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_HwStatus2) OfsI() int8 {
	return int8(capnp.Struct(s).Uint8(0))
}

func (s UbloxGnss_HwStatus2) SetOfsI(v int8) {
	capnp.Struct(s).SetUint8(0, uint8(v))
}

func (s UbloxGnss_HwStatus2) MagI() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s UbloxGnss_HwStatus2) SetMagI(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s UbloxGnss_HwStatus2) OfsQ() int8 {
	return int8(capnp.Struct(s).Uint8(2))
}

func (s UbloxGnss_HwStatus2) SetOfsQ(v int8) {
	capnp.Struct(s).SetUint8(2, uint8(v))
}

func (s UbloxGnss_HwStatus2) MagQ() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s UbloxGnss_HwStatus2) SetMagQ(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s UbloxGnss_HwStatus2) CfgSource() UbloxGnss_HwStatus2_ConfigSource {
	return UbloxGnss_HwStatus2_ConfigSource(capnp.Struct(s).Uint16(4))
}

func (s UbloxGnss_HwStatus2) SetCfgSource(v UbloxGnss_HwStatus2_ConfigSource) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s UbloxGnss_HwStatus2) LowLevCfg() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s UbloxGnss_HwStatus2) SetLowLevCfg(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s UbloxGnss_HwStatus2) PostStatus() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s UbloxGnss_HwStatus2) SetPostStatus(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

// UbloxGnss_HwStatus2_List is a list of UbloxGnss_HwStatus2.
type UbloxGnss_HwStatus2_List = capnp.StructList[UbloxGnss_HwStatus2]

// NewUbloxGnss_HwStatus2 creates a new list of UbloxGnss_HwStatus2.
func NewUbloxGnss_HwStatus2_List(s *capnp.Segment, sz int32) (UbloxGnss_HwStatus2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_HwStatus2](l), err
}

// UbloxGnss_HwStatus2_Future is a wrapper for a UbloxGnss_HwStatus2 promised by a client call.
type UbloxGnss_HwStatus2_Future struct{ *capnp.Future }

func (f UbloxGnss_HwStatus2_Future) Struct() (UbloxGnss_HwStatus2, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_HwStatus2(p.Struct()), err
}

type UbloxGnss_HwStatus2_ConfigSource uint16

// UbloxGnss_HwStatus2_ConfigSource_TypeID is the unique identifier for the type UbloxGnss_HwStatus2_ConfigSource.
const UbloxGnss_HwStatus2_ConfigSource_TypeID = 0xb2d0985eb51c97b9

// Values of UbloxGnss_HwStatus2_ConfigSource.
const (
	UbloxGnss_HwStatus2_ConfigSource_undefined  UbloxGnss_HwStatus2_ConfigSource = 0
	UbloxGnss_HwStatus2_ConfigSource_rom        UbloxGnss_HwStatus2_ConfigSource = 1
	UbloxGnss_HwStatus2_ConfigSource_otp        UbloxGnss_HwStatus2_ConfigSource = 2
	UbloxGnss_HwStatus2_ConfigSource_configpins UbloxGnss_HwStatus2_ConfigSource = 3
	UbloxGnss_HwStatus2_ConfigSource_flash      UbloxGnss_HwStatus2_ConfigSource = 4
)

// String returns the enum's constant name.
func (c UbloxGnss_HwStatus2_ConfigSource) String() string {
	switch c {
	case UbloxGnss_HwStatus2_ConfigSource_undefined:
		return "undefined"
	case UbloxGnss_HwStatus2_ConfigSource_rom:
		return "rom"
	case UbloxGnss_HwStatus2_ConfigSource_otp:
		return "otp"
	case UbloxGnss_HwStatus2_ConfigSource_configpins:
		return "configpins"
	case UbloxGnss_HwStatus2_ConfigSource_flash:
		return "flash"

	default:
		return ""
	}
}

// UbloxGnss_HwStatus2_ConfigSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UbloxGnss_HwStatus2_ConfigSourceFromString(c string) UbloxGnss_HwStatus2_ConfigSource {
	switch c {
	case "undefined":
		return UbloxGnss_HwStatus2_ConfigSource_undefined
	case "rom":
		return UbloxGnss_HwStatus2_ConfigSource_rom
	case "otp":
		return UbloxGnss_HwStatus2_ConfigSource_otp
	case "configpins":
		return UbloxGnss_HwStatus2_ConfigSource_configpins
	case "flash":
		return UbloxGnss_HwStatus2_ConfigSource_flash

	default:
		return 0
	}
}

type UbloxGnss_HwStatus2_ConfigSource_List = capnp.EnumList[UbloxGnss_HwStatus2_ConfigSource]

func NewUbloxGnss_HwStatus2_ConfigSource_List(s *capnp.Segment, sz int32) (UbloxGnss_HwStatus2_ConfigSource_List, error) {
	return capnp.NewEnumList[UbloxGnss_HwStatus2_ConfigSource](s, sz)
}

type UbloxGnss_GlonassEphemeris capnp.Struct

// UbloxGnss_GlonassEphemeris_TypeID is the unique identifier for the type UbloxGnss_GlonassEphemeris.
const UbloxGnss_GlonassEphemeris_TypeID = 0xb9c5911198388e0c

func NewUbloxGnss_GlonassEphemeris(s *capnp.Segment) (UbloxGnss_GlonassEphemeris, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0})
	return UbloxGnss_GlonassEphemeris(st), err
}

func NewRootUbloxGnss_GlonassEphemeris(s *capnp.Segment) (UbloxGnss_GlonassEphemeris, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0})
	return UbloxGnss_GlonassEphemeris(st), err
}

func ReadRootUbloxGnss_GlonassEphemeris(msg *capnp.Message) (UbloxGnss_GlonassEphemeris, error) {
	root, err := msg.Root()
	return UbloxGnss_GlonassEphemeris(root.Struct()), err
}

func (s UbloxGnss_GlonassEphemeris) String() string {
	str, _ := text.Marshal(0xb9c5911198388e0c, capnp.Struct(s))
	return str
}

func (s UbloxGnss_GlonassEphemeris) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UbloxGnss_GlonassEphemeris) DecodeFromPtr(p capnp.Ptr) UbloxGnss_GlonassEphemeris {
	return UbloxGnss_GlonassEphemeris(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UbloxGnss_GlonassEphemeris) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UbloxGnss_GlonassEphemeris) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UbloxGnss_GlonassEphemeris) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UbloxGnss_GlonassEphemeris) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UbloxGnss_GlonassEphemeris) SvId() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s UbloxGnss_GlonassEphemeris) SetSvId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s UbloxGnss_GlonassEphemeris) Year() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s UbloxGnss_GlonassEphemeris) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s UbloxGnss_GlonassEphemeris) DayInYear() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s UbloxGnss_GlonassEphemeris) SetDayInYear(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s UbloxGnss_GlonassEphemeris) Hour() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s UbloxGnss_GlonassEphemeris) SetHour(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s UbloxGnss_GlonassEphemeris) Minute() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s UbloxGnss_GlonassEphemeris) SetMinute(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s UbloxGnss_GlonassEphemeris) Second() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s UbloxGnss_GlonassEphemeris) SetSecond(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s UbloxGnss_GlonassEphemeris) X() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s UbloxGnss_GlonassEphemeris) SetX(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) XVel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s UbloxGnss_GlonassEphemeris) SetXVel(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) XAccel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s UbloxGnss_GlonassEphemeris) SetXAccel(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) Y() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s UbloxGnss_GlonassEphemeris) SetY(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) YVel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s UbloxGnss_GlonassEphemeris) SetYVel(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) YAccel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s UbloxGnss_GlonassEphemeris) SetYAccel(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) Z() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s UbloxGnss_GlonassEphemeris) SetZ(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) ZVel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s UbloxGnss_GlonassEphemeris) SetZVel(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) ZAccel() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s UbloxGnss_GlonassEphemeris) SetZAccel(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) SvType() uint8 {
	return capnp.Struct(s).Uint8(10)
}

func (s UbloxGnss_GlonassEphemeris) SetSvType(v uint8) {
	capnp.Struct(s).SetUint8(10, v)
}

func (s UbloxGnss_GlonassEphemeris) SvURA() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(88))
}

func (s UbloxGnss_GlonassEphemeris) SetSvURA(v float32) {
	capnp.Struct(s).SetUint32(88, math.Float32bits(v))
}

func (s UbloxGnss_GlonassEphemeris) Age() uint8 {
	return capnp.Struct(s).Uint8(11)
}

func (s UbloxGnss_GlonassEphemeris) SetAge(v uint8) {
	capnp.Struct(s).SetUint8(11, v)
}

func (s UbloxGnss_GlonassEphemeris) SvHealth() uint8 {
	return capnp.Struct(s).Uint8(92)
}

func (s UbloxGnss_GlonassEphemeris) SetSvHealth(v uint8) {
	capnp.Struct(s).SetUint8(92, v)
}

func (s UbloxGnss_GlonassEphemeris) TkDEPRECATED() uint16 {
	return capnp.Struct(s).Uint16(94)
}

func (s UbloxGnss_GlonassEphemeris) SetTkDEPRECATED(v uint16) {
	capnp.Struct(s).SetUint16(94, v)
}

func (s UbloxGnss_GlonassEphemeris) Tb() uint16 {
	return capnp.Struct(s).Uint16(96)
}

func (s UbloxGnss_GlonassEphemeris) SetTb(v uint16) {
	capnp.Struct(s).SetUint16(96, v)
}

func (s UbloxGnss_GlonassEphemeris) TauN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s UbloxGnss_GlonassEphemeris) SetTauN(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) DeltaTauN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s UbloxGnss_GlonassEphemeris) SetDeltaTauN(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) GammaN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s UbloxGnss_GlonassEphemeris) SetGammaN(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s UbloxGnss_GlonassEphemeris) P1() uint8 {
	return capnp.Struct(s).Uint8(93)
}

func (s UbloxGnss_GlonassEphemeris) SetP1(v uint8) {
	capnp.Struct(s).SetUint8(93, v)
}

func (s UbloxGnss_GlonassEphemeris) P2() uint8 {
	return capnp.Struct(s).Uint8(98)
}

func (s UbloxGnss_GlonassEphemeris) SetP2(v uint8) {
	capnp.Struct(s).SetUint8(98, v)
}

func (s UbloxGnss_GlonassEphemeris) P3() uint8 {
	return capnp.Struct(s).Uint8(99)
}

func (s UbloxGnss_GlonassEphemeris) SetP3(v uint8) {
	capnp.Struct(s).SetUint8(99, v)
}

func (s UbloxGnss_GlonassEphemeris) P4() uint8 {
	return capnp.Struct(s).Uint8(100)
}

func (s UbloxGnss_GlonassEphemeris) SetP4(v uint8) {
	capnp.Struct(s).SetUint8(100, v)
}

func (s UbloxGnss_GlonassEphemeris) FreqNumDEPRECATED() uint32 {
	return capnp.Struct(s).Uint32(128)
}

func (s UbloxGnss_GlonassEphemeris) SetFreqNumDEPRECATED(v uint32) {
	capnp.Struct(s).SetUint32(128, v)
}

func (s UbloxGnss_GlonassEphemeris) N4() uint8 {
	return capnp.Struct(s).Uint8(101)
}

func (s UbloxGnss_GlonassEphemeris) SetN4(v uint8) {
	capnp.Struct(s).SetUint8(101, v)
}

func (s UbloxGnss_GlonassEphemeris) Nt() uint16 {
	return capnp.Struct(s).Uint16(102)
}

func (s UbloxGnss_GlonassEphemeris) SetNt(v uint16) {
	capnp.Struct(s).SetUint16(102, v)
}

func (s UbloxGnss_GlonassEphemeris) FreqNum() int16 {
	return int16(capnp.Struct(s).Uint16(132))
}

func (s UbloxGnss_GlonassEphemeris) SetFreqNum(v int16) {
	capnp.Struct(s).SetUint16(132, uint16(v))
}

func (s UbloxGnss_GlonassEphemeris) TkSeconds() uint32 {
	return capnp.Struct(s).Uint32(136)
}

func (s UbloxGnss_GlonassEphemeris) SetTkSeconds(v uint32) {
	capnp.Struct(s).SetUint32(136, v)
}

// UbloxGnss_GlonassEphemeris_List is a list of UbloxGnss_GlonassEphemeris.
type UbloxGnss_GlonassEphemeris_List = capnp.StructList[UbloxGnss_GlonassEphemeris]

// NewUbloxGnss_GlonassEphemeris creates a new list of UbloxGnss_GlonassEphemeris.
func NewUbloxGnss_GlonassEphemeris_List(s *capnp.Segment, sz int32) (UbloxGnss_GlonassEphemeris_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0}, sz)
	return capnp.StructList[UbloxGnss_GlonassEphemeris](l), err
}

// UbloxGnss_GlonassEphemeris_Future is a wrapper for a UbloxGnss_GlonassEphemeris promised by a client call.
type UbloxGnss_GlonassEphemeris_Future struct{ *capnp.Future }

func (f UbloxGnss_GlonassEphemeris_Future) Struct() (UbloxGnss_GlonassEphemeris, error) {
	p, err := f.Future.Ptr()
	return UbloxGnss_GlonassEphemeris(p.Struct()), err
}

type QcomGnss capnp.Struct
type QcomGnss_Which uint16

const (
	QcomGnss_Which_measurementReport   QcomGnss_Which = 0
	QcomGnss_Which_clockReport         QcomGnss_Which = 1
	QcomGnss_Which_drMeasurementReport QcomGnss_Which = 2
	QcomGnss_Which_drSvPoly            QcomGnss_Which = 3
	QcomGnss_Which_rawLog              QcomGnss_Which = 4
)

func (w QcomGnss_Which) String() string {
	const s = "measurementReportclockReportdrMeasurementReportdrSvPolyrawLog"
	switch w {
	case QcomGnss_Which_measurementReport:
		return s[0:17]
	case QcomGnss_Which_clockReport:
		return s[17:28]
	case QcomGnss_Which_drMeasurementReport:
		return s[28:47]
	case QcomGnss_Which_drSvPoly:
		return s[47:55]
	case QcomGnss_Which_rawLog:
		return s[55:61]

	}
	return "QcomGnss_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// QcomGnss_TypeID is the unique identifier for the type QcomGnss.
const QcomGnss_TypeID = 0xde94674b07ae51c1

func NewQcomGnss(s *capnp.Segment) (QcomGnss, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return QcomGnss(st), err
}

func NewRootQcomGnss(s *capnp.Segment) (QcomGnss, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return QcomGnss(st), err
}

func ReadRootQcomGnss(msg *capnp.Message) (QcomGnss, error) {
	root, err := msg.Root()
	return QcomGnss(root.Struct()), err
}

func (s QcomGnss) String() string {
	str, _ := text.Marshal(0xde94674b07ae51c1, capnp.Struct(s))
	return str
}

func (s QcomGnss) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss) DecodeFromPtr(p capnp.Ptr) QcomGnss {
	return QcomGnss(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s QcomGnss) Which() QcomGnss_Which {
	return QcomGnss_Which(capnp.Struct(s).Uint16(8))
}
func (s QcomGnss) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss) LogTs() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s QcomGnss) SetLogTs(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s QcomGnss) MeasurementReport() (QcomGnss_MeasurementReport, error) {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != measurementReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_MeasurementReport(p.Struct()), err
}

func (s QcomGnss) HasMeasurementReport() bool {
	if capnp.Struct(s).Uint16(8) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss) SetMeasurementReport(v QcomGnss_MeasurementReport) error {
	capnp.Struct(s).SetUint16(8, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeasurementReport sets the measurementReport field to a newly
// allocated QcomGnss_MeasurementReport struct, preferring placement in s's segment.
func (s QcomGnss) NewMeasurementReport() (QcomGnss_MeasurementReport, error) {
	capnp.Struct(s).SetUint16(8, 0)
	ss, err := NewQcomGnss_MeasurementReport(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_MeasurementReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss) ClockReport() (QcomGnss_ClockReport, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != clockReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_ClockReport(p.Struct()), err
}

func (s QcomGnss) HasClockReport() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss) SetClockReport(v QcomGnss_ClockReport) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewClockReport sets the clockReport field to a newly
// allocated QcomGnss_ClockReport struct, preferring placement in s's segment.
func (s QcomGnss) NewClockReport() (QcomGnss_ClockReport, error) {
	capnp.Struct(s).SetUint16(8, 1)
	ss, err := NewQcomGnss_ClockReport(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_ClockReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss) DrMeasurementReport() (QcomGnss_DrMeasurementReport, error) {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != drMeasurementReport")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_DrMeasurementReport(p.Struct()), err
}

func (s QcomGnss) HasDrMeasurementReport() bool {
	if capnp.Struct(s).Uint16(8) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss) SetDrMeasurementReport(v QcomGnss_DrMeasurementReport) error {
	capnp.Struct(s).SetUint16(8, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDrMeasurementReport sets the drMeasurementReport field to a newly
// allocated QcomGnss_DrMeasurementReport struct, preferring placement in s's segment.
func (s QcomGnss) NewDrMeasurementReport() (QcomGnss_DrMeasurementReport, error) {
	capnp.Struct(s).SetUint16(8, 2)
	ss, err := NewQcomGnss_DrMeasurementReport(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_DrMeasurementReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss) DrSvPoly() (QcomGnss_DrSvPolyReport, error) {
	if capnp.Struct(s).Uint16(8) != 3 {
		panic("Which() != drSvPoly")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_DrSvPolyReport(p.Struct()), err
}

func (s QcomGnss) HasDrSvPoly() bool {
	if capnp.Struct(s).Uint16(8) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss) SetDrSvPoly(v QcomGnss_DrSvPolyReport) error {
	capnp.Struct(s).SetUint16(8, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDrSvPoly sets the drSvPoly field to a newly
// allocated QcomGnss_DrSvPolyReport struct, preferring placement in s's segment.
func (s QcomGnss) NewDrSvPoly() (QcomGnss_DrSvPolyReport, error) {
	capnp.Struct(s).SetUint16(8, 3)
	ss, err := NewQcomGnss_DrSvPolyReport(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_DrSvPolyReport{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss) RawLog() ([]byte, error) {
	if capnp.Struct(s).Uint16(8) != 4 {
		panic("Which() != rawLog")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s QcomGnss) HasRawLog() bool {
	if capnp.Struct(s).Uint16(8) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss) SetRawLog(v []byte) error {
	capnp.Struct(s).SetUint16(8, 4)
	return capnp.Struct(s).SetData(0, v)
}

// QcomGnss_List is a list of QcomGnss.
type QcomGnss_List = capnp.StructList[QcomGnss]

// NewQcomGnss creates a new list of QcomGnss.
func NewQcomGnss_List(s *capnp.Segment, sz int32) (QcomGnss_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[QcomGnss](l), err
}

// QcomGnss_Future is a wrapper for a QcomGnss promised by a client call.
type QcomGnss_Future struct{ *capnp.Future }

func (f QcomGnss_Future) Struct() (QcomGnss, error) {
	p, err := f.Future.Ptr()
	return QcomGnss(p.Struct()), err
}
func (p QcomGnss_Future) MeasurementReport() QcomGnss_MeasurementReport_Future {
	return QcomGnss_MeasurementReport_Future{Future: p.Future.Field(0, nil)}
}
func (p QcomGnss_Future) ClockReport() QcomGnss_ClockReport_Future {
	return QcomGnss_ClockReport_Future{Future: p.Future.Field(0, nil)}
}
func (p QcomGnss_Future) DrMeasurementReport() QcomGnss_DrMeasurementReport_Future {
	return QcomGnss_DrMeasurementReport_Future{Future: p.Future.Field(0, nil)}
}
func (p QcomGnss_Future) DrSvPoly() QcomGnss_DrSvPolyReport_Future {
	return QcomGnss_DrSvPolyReport_Future{Future: p.Future.Field(0, nil)}
}

type QcomGnss_MeasurementSource uint16

// QcomGnss_MeasurementSource_TypeID is the unique identifier for the type QcomGnss_MeasurementSource.
const QcomGnss_MeasurementSource_TypeID = 0xd71a12b6faada7ee

// Values of QcomGnss_MeasurementSource.
const (
	QcomGnss_MeasurementSource_gps      QcomGnss_MeasurementSource = 0
	QcomGnss_MeasurementSource_glonass  QcomGnss_MeasurementSource = 1
	QcomGnss_MeasurementSource_beidou   QcomGnss_MeasurementSource = 2
	QcomGnss_MeasurementSource_unknown3 QcomGnss_MeasurementSource = 3
	QcomGnss_MeasurementSource_unknown4 QcomGnss_MeasurementSource = 4
	QcomGnss_MeasurementSource_unknown5 QcomGnss_MeasurementSource = 5
	QcomGnss_MeasurementSource_sbas     QcomGnss_MeasurementSource = 6
)

// String returns the enum's constant name.
func (c QcomGnss_MeasurementSource) String() string {
	switch c {
	case QcomGnss_MeasurementSource_gps:
		return "gps"
	case QcomGnss_MeasurementSource_glonass:
		return "glonass"
	case QcomGnss_MeasurementSource_beidou:
		return "beidou"
	case QcomGnss_MeasurementSource_unknown3:
		return "unknown3"
	case QcomGnss_MeasurementSource_unknown4:
		return "unknown4"
	case QcomGnss_MeasurementSource_unknown5:
		return "unknown5"
	case QcomGnss_MeasurementSource_sbas:
		return "sbas"

	default:
		return ""
	}
}

// QcomGnss_MeasurementSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func QcomGnss_MeasurementSourceFromString(c string) QcomGnss_MeasurementSource {
	switch c {
	case "gps":
		return QcomGnss_MeasurementSource_gps
	case "glonass":
		return QcomGnss_MeasurementSource_glonass
	case "beidou":
		return QcomGnss_MeasurementSource_beidou
	case "unknown3":
		return QcomGnss_MeasurementSource_unknown3
	case "unknown4":
		return QcomGnss_MeasurementSource_unknown4
	case "unknown5":
		return QcomGnss_MeasurementSource_unknown5
	case "sbas":
		return QcomGnss_MeasurementSource_sbas

	default:
		return 0
	}
}

type QcomGnss_MeasurementSource_List = capnp.EnumList[QcomGnss_MeasurementSource]

func NewQcomGnss_MeasurementSource_List(s *capnp.Segment, sz int32) (QcomGnss_MeasurementSource_List, error) {
	return capnp.NewEnumList[QcomGnss_MeasurementSource](s, sz)
}

type QcomGnss_SVObservationState uint16

// QcomGnss_SVObservationState_TypeID is the unique identifier for the type QcomGnss_SVObservationState.
const QcomGnss_SVObservationState_TypeID = 0xe81e829a0d6c83e9

// Values of QcomGnss_SVObservationState.
const (
	QcomGnss_SVObservationState_idle         QcomGnss_SVObservationState = 0
	QcomGnss_SVObservationState_search       QcomGnss_SVObservationState = 1
	QcomGnss_SVObservationState_searchVerify QcomGnss_SVObservationState = 2
	QcomGnss_SVObservationState_bitEdge      QcomGnss_SVObservationState = 3
	QcomGnss_SVObservationState_trackVerify  QcomGnss_SVObservationState = 4
	QcomGnss_SVObservationState_track        QcomGnss_SVObservationState = 5
	QcomGnss_SVObservationState_restart      QcomGnss_SVObservationState = 6
	QcomGnss_SVObservationState_dpo          QcomGnss_SVObservationState = 7
	QcomGnss_SVObservationState_glo10msBe    QcomGnss_SVObservationState = 8
	QcomGnss_SVObservationState_glo10msAt    QcomGnss_SVObservationState = 9
)

// String returns the enum's constant name.
func (c QcomGnss_SVObservationState) String() string {
	switch c {
	case QcomGnss_SVObservationState_idle:
		return "idle"
	case QcomGnss_SVObservationState_search:
		return "search"
	case QcomGnss_SVObservationState_searchVerify:
		return "searchVerify"
	case QcomGnss_SVObservationState_bitEdge:
		return "bitEdge"
	case QcomGnss_SVObservationState_trackVerify:
		return "trackVerify"
	case QcomGnss_SVObservationState_track:
		return "track"
	case QcomGnss_SVObservationState_restart:
		return "restart"
	case QcomGnss_SVObservationState_dpo:
		return "dpo"
	case QcomGnss_SVObservationState_glo10msBe:
		return "glo10msBe"
	case QcomGnss_SVObservationState_glo10msAt:
		return "glo10msAt"

	default:
		return ""
	}
}

// QcomGnss_SVObservationStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func QcomGnss_SVObservationStateFromString(c string) QcomGnss_SVObservationState {
	switch c {
	case "idle":
		return QcomGnss_SVObservationState_idle
	case "search":
		return QcomGnss_SVObservationState_search
	case "searchVerify":
		return QcomGnss_SVObservationState_searchVerify
	case "bitEdge":
		return QcomGnss_SVObservationState_bitEdge
	case "trackVerify":
		return QcomGnss_SVObservationState_trackVerify
	case "track":
		return QcomGnss_SVObservationState_track
	case "restart":
		return QcomGnss_SVObservationState_restart
	case "dpo":
		return QcomGnss_SVObservationState_dpo
	case "glo10msBe":
		return QcomGnss_SVObservationState_glo10msBe
	case "glo10msAt":
		return QcomGnss_SVObservationState_glo10msAt

	default:
		return 0
	}
}

type QcomGnss_SVObservationState_List = capnp.EnumList[QcomGnss_SVObservationState]

func NewQcomGnss_SVObservationState_List(s *capnp.Segment, sz int32) (QcomGnss_SVObservationState_List, error) {
	return capnp.NewEnumList[QcomGnss_SVObservationState](s, sz)
}

type QcomGnss_MeasurementStatus capnp.Struct

// QcomGnss_MeasurementStatus_TypeID is the unique identifier for the type QcomGnss_MeasurementStatus.
const QcomGnss_MeasurementStatus_TypeID = 0xe501010e1bcae83b

func NewQcomGnss_MeasurementStatus(s *capnp.Segment) (QcomGnss_MeasurementStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QcomGnss_MeasurementStatus(st), err
}

func NewRootQcomGnss_MeasurementStatus(s *capnp.Segment) (QcomGnss_MeasurementStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return QcomGnss_MeasurementStatus(st), err
}

func ReadRootQcomGnss_MeasurementStatus(msg *capnp.Message) (QcomGnss_MeasurementStatus, error) {
	root, err := msg.Root()
	return QcomGnss_MeasurementStatus(root.Struct()), err
}

func (s QcomGnss_MeasurementStatus) String() string {
	str, _ := text.Marshal(0xe501010e1bcae83b, capnp.Struct(s))
	return str
}

func (s QcomGnss_MeasurementStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_MeasurementStatus) DecodeFromPtr(p capnp.Ptr) QcomGnss_MeasurementStatus {
	return QcomGnss_MeasurementStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_MeasurementStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_MeasurementStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_MeasurementStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_MeasurementStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_MeasurementStatus) SubMillisecondIsValid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s QcomGnss_MeasurementStatus) SetSubMillisecondIsValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s QcomGnss_MeasurementStatus) SubBitTimeIsKnown() bool {
	return capnp.Struct(s).Bit(1)
}

func (s QcomGnss_MeasurementStatus) SetSubBitTimeIsKnown(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s QcomGnss_MeasurementStatus) SatelliteTimeIsKnown() bool {
	return capnp.Struct(s).Bit(2)
}

func (s QcomGnss_MeasurementStatus) SetSatelliteTimeIsKnown(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s QcomGnss_MeasurementStatus) BitEdgeConfirmedFromSignal() bool {
	return capnp.Struct(s).Bit(3)
}

func (s QcomGnss_MeasurementStatus) SetBitEdgeConfirmedFromSignal(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s QcomGnss_MeasurementStatus) MeasuredVelocity() bool {
	return capnp.Struct(s).Bit(4)
}

func (s QcomGnss_MeasurementStatus) SetMeasuredVelocity(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s QcomGnss_MeasurementStatus) FineOrCoarseVelocity() bool {
	return capnp.Struct(s).Bit(5)
}

func (s QcomGnss_MeasurementStatus) SetFineOrCoarseVelocity(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s QcomGnss_MeasurementStatus) LockPointValid() bool {
	return capnp.Struct(s).Bit(6)
}

func (s QcomGnss_MeasurementStatus) SetLockPointValid(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s QcomGnss_MeasurementStatus) LockPointPositive() bool {
	return capnp.Struct(s).Bit(7)
}

func (s QcomGnss_MeasurementStatus) SetLockPointPositive(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s QcomGnss_MeasurementStatus) LastUpdateFromDifference() bool {
	return capnp.Struct(s).Bit(8)
}

func (s QcomGnss_MeasurementStatus) SetLastUpdateFromDifference(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s QcomGnss_MeasurementStatus) LastUpdateFromVelocityDifference() bool {
	return capnp.Struct(s).Bit(9)
}

func (s QcomGnss_MeasurementStatus) SetLastUpdateFromVelocityDifference(v bool) {
	capnp.Struct(s).SetBit(9, v)
}

func (s QcomGnss_MeasurementStatus) StrongIndicationOfCrossCorelation() bool {
	return capnp.Struct(s).Bit(10)
}

func (s QcomGnss_MeasurementStatus) SetStrongIndicationOfCrossCorelation(v bool) {
	capnp.Struct(s).SetBit(10, v)
}

func (s QcomGnss_MeasurementStatus) TentativeMeasurement() bool {
	return capnp.Struct(s).Bit(11)
}

func (s QcomGnss_MeasurementStatus) SetTentativeMeasurement(v bool) {
	capnp.Struct(s).SetBit(11, v)
}

func (s QcomGnss_MeasurementStatus) MeasurementNotUsable() bool {
	return capnp.Struct(s).Bit(12)
}

func (s QcomGnss_MeasurementStatus) SetMeasurementNotUsable(v bool) {
	capnp.Struct(s).SetBit(12, v)
}

func (s QcomGnss_MeasurementStatus) SirCheckIsNeeded() bool {
	return capnp.Struct(s).Bit(13)
}

func (s QcomGnss_MeasurementStatus) SetSirCheckIsNeeded(v bool) {
	capnp.Struct(s).SetBit(13, v)
}

func (s QcomGnss_MeasurementStatus) ProbationMode() bool {
	return capnp.Struct(s).Bit(14)
}

func (s QcomGnss_MeasurementStatus) SetProbationMode(v bool) {
	capnp.Struct(s).SetBit(14, v)
}

func (s QcomGnss_MeasurementStatus) GlonassMeanderBitEdgeValid() bool {
	return capnp.Struct(s).Bit(15)
}

func (s QcomGnss_MeasurementStatus) SetGlonassMeanderBitEdgeValid(v bool) {
	capnp.Struct(s).SetBit(15, v)
}

func (s QcomGnss_MeasurementStatus) GlonassTimeMarkValid() bool {
	return capnp.Struct(s).Bit(16)
}

func (s QcomGnss_MeasurementStatus) SetGlonassTimeMarkValid(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s QcomGnss_MeasurementStatus) GpsRoundRobinRxDiversity() bool {
	return capnp.Struct(s).Bit(17)
}

func (s QcomGnss_MeasurementStatus) SetGpsRoundRobinRxDiversity(v bool) {
	capnp.Struct(s).SetBit(17, v)
}

func (s QcomGnss_MeasurementStatus) GpsRxDiversity() bool {
	return capnp.Struct(s).Bit(18)
}

func (s QcomGnss_MeasurementStatus) SetGpsRxDiversity(v bool) {
	capnp.Struct(s).SetBit(18, v)
}

func (s QcomGnss_MeasurementStatus) GpsLowBandwidthRxDiversityCombined() bool {
	return capnp.Struct(s).Bit(19)
}

func (s QcomGnss_MeasurementStatus) SetGpsLowBandwidthRxDiversityCombined(v bool) {
	capnp.Struct(s).SetBit(19, v)
}

func (s QcomGnss_MeasurementStatus) GpsHighBandwidthNu4() bool {
	return capnp.Struct(s).Bit(20)
}

func (s QcomGnss_MeasurementStatus) SetGpsHighBandwidthNu4(v bool) {
	capnp.Struct(s).SetBit(20, v)
}

func (s QcomGnss_MeasurementStatus) GpsHighBandwidthNu8() bool {
	return capnp.Struct(s).Bit(21)
}

func (s QcomGnss_MeasurementStatus) SetGpsHighBandwidthNu8(v bool) {
	capnp.Struct(s).SetBit(21, v)
}

func (s QcomGnss_MeasurementStatus) GpsHighBandwidthUniform() bool {
	return capnp.Struct(s).Bit(22)
}

func (s QcomGnss_MeasurementStatus) SetGpsHighBandwidthUniform(v bool) {
	capnp.Struct(s).SetBit(22, v)
}

func (s QcomGnss_MeasurementStatus) MultipathIndicator() bool {
	return capnp.Struct(s).Bit(23)
}

func (s QcomGnss_MeasurementStatus) SetMultipathIndicator(v bool) {
	capnp.Struct(s).SetBit(23, v)
}

func (s QcomGnss_MeasurementStatus) ImdJammingIndicator() bool {
	return capnp.Struct(s).Bit(24)
}

func (s QcomGnss_MeasurementStatus) SetImdJammingIndicator(v bool) {
	capnp.Struct(s).SetBit(24, v)
}

func (s QcomGnss_MeasurementStatus) LteB13TxJammingIndicator() bool {
	return capnp.Struct(s).Bit(25)
}

func (s QcomGnss_MeasurementStatus) SetLteB13TxJammingIndicator(v bool) {
	capnp.Struct(s).SetBit(25, v)
}

func (s QcomGnss_MeasurementStatus) FreshMeasurementIndicator() bool {
	return capnp.Struct(s).Bit(26)
}

func (s QcomGnss_MeasurementStatus) SetFreshMeasurementIndicator(v bool) {
	capnp.Struct(s).SetBit(26, v)
}

func (s QcomGnss_MeasurementStatus) MultipathEstimateIsValid() bool {
	return capnp.Struct(s).Bit(27)
}

func (s QcomGnss_MeasurementStatus) SetMultipathEstimateIsValid(v bool) {
	capnp.Struct(s).SetBit(27, v)
}

func (s QcomGnss_MeasurementStatus) DirectionIsValid() bool {
	return capnp.Struct(s).Bit(28)
}

func (s QcomGnss_MeasurementStatus) SetDirectionIsValid(v bool) {
	capnp.Struct(s).SetBit(28, v)
}

// QcomGnss_MeasurementStatus_List is a list of QcomGnss_MeasurementStatus.
type QcomGnss_MeasurementStatus_List = capnp.StructList[QcomGnss_MeasurementStatus]

// NewQcomGnss_MeasurementStatus creates a new list of QcomGnss_MeasurementStatus.
func NewQcomGnss_MeasurementStatus_List(s *capnp.Segment, sz int32) (QcomGnss_MeasurementStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[QcomGnss_MeasurementStatus](l), err
}

// QcomGnss_MeasurementStatus_Future is a wrapper for a QcomGnss_MeasurementStatus promised by a client call.
type QcomGnss_MeasurementStatus_Future struct{ *capnp.Future }

func (f QcomGnss_MeasurementStatus_Future) Struct() (QcomGnss_MeasurementStatus, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_MeasurementStatus(p.Struct()), err
}

type QcomGnss_MeasurementReport capnp.Struct

// QcomGnss_MeasurementReport_TypeID is the unique identifier for the type QcomGnss_MeasurementReport.
const QcomGnss_MeasurementReport_TypeID = 0xf580d7d86b7b8692

func NewQcomGnss_MeasurementReport(s *capnp.Segment) (QcomGnss_MeasurementReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return QcomGnss_MeasurementReport(st), err
}

func NewRootQcomGnss_MeasurementReport(s *capnp.Segment) (QcomGnss_MeasurementReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1})
	return QcomGnss_MeasurementReport(st), err
}

func ReadRootQcomGnss_MeasurementReport(msg *capnp.Message) (QcomGnss_MeasurementReport, error) {
	root, err := msg.Root()
	return QcomGnss_MeasurementReport(root.Struct()), err
}

func (s QcomGnss_MeasurementReport) String() string {
	str, _ := text.Marshal(0xf580d7d86b7b8692, capnp.Struct(s))
	return str
}

func (s QcomGnss_MeasurementReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_MeasurementReport) DecodeFromPtr(p capnp.Ptr) QcomGnss_MeasurementReport {
	return QcomGnss_MeasurementReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_MeasurementReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_MeasurementReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_MeasurementReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_MeasurementReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_MeasurementReport) Source() QcomGnss_MeasurementSource {
	return QcomGnss_MeasurementSource(capnp.Struct(s).Uint16(0))
}

func (s QcomGnss_MeasurementReport) SetSource(v QcomGnss_MeasurementSource) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s QcomGnss_MeasurementReport) FCount() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s QcomGnss_MeasurementReport) SetFCount(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s QcomGnss_MeasurementReport) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s QcomGnss_MeasurementReport) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s QcomGnss_MeasurementReport) GlonassCycleNumber() uint8 {
	return capnp.Struct(s).Uint8(8)
}

func (s QcomGnss_MeasurementReport) SetGlonassCycleNumber(v uint8) {
	capnp.Struct(s).SetUint8(8, v)
}

func (s QcomGnss_MeasurementReport) GlonassNumberOfDays() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s QcomGnss_MeasurementReport) SetGlonassNumberOfDays(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s QcomGnss_MeasurementReport) Milliseconds() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s QcomGnss_MeasurementReport) SetMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s QcomGnss_MeasurementReport) TimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s QcomGnss_MeasurementReport) SetTimeBias(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport) ClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s QcomGnss_MeasurementReport) SetClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport) ClockFrequencyBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s QcomGnss_MeasurementReport) SetClockFrequencyBias(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport) ClockFrequencyUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_MeasurementReport) SetClockFrequencyUncertainty(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport) Sv() (QcomGnss_MeasurementReport_SV_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_MeasurementReport_SV_List(p.List()), err
}

func (s QcomGnss_MeasurementReport) HasSv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss_MeasurementReport) SetSv(v QcomGnss_MeasurementReport_SV_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSv sets the sv field to a newly
// allocated QcomGnss_MeasurementReport_SV_List, preferring placement in s's segment.
func (s QcomGnss_MeasurementReport) NewSv(n int32) (QcomGnss_MeasurementReport_SV_List, error) {
	l, err := NewQcomGnss_MeasurementReport_SV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return QcomGnss_MeasurementReport_SV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// QcomGnss_MeasurementReport_List is a list of QcomGnss_MeasurementReport.
type QcomGnss_MeasurementReport_List = capnp.StructList[QcomGnss_MeasurementReport]

// NewQcomGnss_MeasurementReport creates a new list of QcomGnss_MeasurementReport.
func NewQcomGnss_MeasurementReport_List(s *capnp.Segment, sz int32) (QcomGnss_MeasurementReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 1}, sz)
	return capnp.StructList[QcomGnss_MeasurementReport](l), err
}

// QcomGnss_MeasurementReport_Future is a wrapper for a QcomGnss_MeasurementReport promised by a client call.
type QcomGnss_MeasurementReport_Future struct{ *capnp.Future }

func (f QcomGnss_MeasurementReport_Future) Struct() (QcomGnss_MeasurementReport, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_MeasurementReport(p.Struct()), err
}

type QcomGnss_MeasurementReport_SV capnp.Struct

// QcomGnss_MeasurementReport_SV_TypeID is the unique identifier for the type QcomGnss_MeasurementReport_SV.
const QcomGnss_MeasurementReport_SV_TypeID = 0xf10c595ae7bb2c27

func NewQcomGnss_MeasurementReport_SV(s *capnp.Segment) (QcomGnss_MeasurementReport_SV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1})
	return QcomGnss_MeasurementReport_SV(st), err
}

func NewRootQcomGnss_MeasurementReport_SV(s *capnp.Segment) (QcomGnss_MeasurementReport_SV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1})
	return QcomGnss_MeasurementReport_SV(st), err
}

func ReadRootQcomGnss_MeasurementReport_SV(msg *capnp.Message) (QcomGnss_MeasurementReport_SV, error) {
	root, err := msg.Root()
	return QcomGnss_MeasurementReport_SV(root.Struct()), err
}

func (s QcomGnss_MeasurementReport_SV) String() string {
	str, _ := text.Marshal(0xf10c595ae7bb2c27, capnp.Struct(s))
	return str
}

func (s QcomGnss_MeasurementReport_SV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_MeasurementReport_SV) DecodeFromPtr(p capnp.Ptr) QcomGnss_MeasurementReport_SV {
	return QcomGnss_MeasurementReport_SV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_MeasurementReport_SV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_MeasurementReport_SV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_MeasurementReport_SV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_MeasurementReport_SV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_MeasurementReport_SV) SvId() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s QcomGnss_MeasurementReport_SV) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s QcomGnss_MeasurementReport_SV) ObservationState() QcomGnss_SVObservationState {
	return QcomGnss_SVObservationState(capnp.Struct(s).Uint16(2))
}

func (s QcomGnss_MeasurementReport_SV) SetObservationState(v QcomGnss_SVObservationState) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s QcomGnss_MeasurementReport_SV) Observations() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s QcomGnss_MeasurementReport_SV) SetObservations(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s QcomGnss_MeasurementReport_SV) GoodObservations() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s QcomGnss_MeasurementReport_SV) SetGoodObservations(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

func (s QcomGnss_MeasurementReport_SV) GpsParityErrorCount() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s QcomGnss_MeasurementReport_SV) SetGpsParityErrorCount(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s QcomGnss_MeasurementReport_SV) GlonassFrequencyIndex() int8 {
	return int8(capnp.Struct(s).Uint8(1))
}

func (s QcomGnss_MeasurementReport_SV) SetGlonassFrequencyIndex(v int8) {
	capnp.Struct(s).SetUint8(1, uint8(v))
}

func (s QcomGnss_MeasurementReport_SV) GlonassHemmingErrorCount() uint8 {
	return capnp.Struct(s).Uint8(8)
}

func (s QcomGnss_MeasurementReport_SV) SetGlonassHemmingErrorCount(v uint8) {
	capnp.Struct(s).SetUint8(8, v)
}

func (s QcomGnss_MeasurementReport_SV) FilterStages() uint8 {
	return capnp.Struct(s).Uint8(9)
}

func (s QcomGnss_MeasurementReport_SV) SetFilterStages(v uint8) {
	capnp.Struct(s).SetUint8(9, v)
}

func (s QcomGnss_MeasurementReport_SV) CarrierNoise() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s QcomGnss_MeasurementReport_SV) SetCarrierNoise(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s QcomGnss_MeasurementReport_SV) Latency() int16 {
	return int16(capnp.Struct(s).Uint16(12))
}

func (s QcomGnss_MeasurementReport_SV) SetLatency(v int16) {
	capnp.Struct(s).SetUint16(12, uint16(v))
}

func (s QcomGnss_MeasurementReport_SV) PredetectInterval() uint8 {
	return capnp.Struct(s).Uint8(14)
}

func (s QcomGnss_MeasurementReport_SV) SetPredetectInterval(v uint8) {
	capnp.Struct(s).SetUint8(14, v)
}

func (s QcomGnss_MeasurementReport_SV) Postdetections() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s QcomGnss_MeasurementReport_SV) SetPostdetections(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s QcomGnss_MeasurementReport_SV) UnfilteredMeasurementIntegral() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s QcomGnss_MeasurementReport_SV) SetUnfilteredMeasurementIntegral(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

func (s QcomGnss_MeasurementReport_SV) UnfilteredMeasurementFraction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s QcomGnss_MeasurementReport_SV) SetUnfilteredMeasurementFraction(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) UnfilteredTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_MeasurementReport_SV) SetUnfilteredTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) UnfilteredSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s QcomGnss_MeasurementReport_SV) SetUnfilteredSpeed(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) UnfilteredSpeedUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s QcomGnss_MeasurementReport_SV) SetUnfilteredSpeedUncertainty(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) MeasurementStatus() (QcomGnss_MeasurementStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_MeasurementStatus(p.Struct()), err
}

func (s QcomGnss_MeasurementReport_SV) HasMeasurementStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss_MeasurementReport_SV) SetMeasurementStatus(v QcomGnss_MeasurementStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeasurementStatus sets the measurementStatus field to a newly
// allocated QcomGnss_MeasurementStatus struct, preferring placement in s's segment.
func (s QcomGnss_MeasurementReport_SV) NewMeasurementStatus() (QcomGnss_MeasurementStatus, error) {
	ss, err := NewQcomGnss_MeasurementStatus(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_MeasurementStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss_MeasurementReport_SV) MultipathEstimate() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s QcomGnss_MeasurementReport_SV) SetMultipathEstimate(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s QcomGnss_MeasurementReport_SV) Azimuth() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s QcomGnss_MeasurementReport_SV) SetAzimuth(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) Elevation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s QcomGnss_MeasurementReport_SV) SetElevation(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) CarrierPhaseCyclesIntegral() int32 {
	return int32(capnp.Struct(s).Uint32(52))
}

func (s QcomGnss_MeasurementReport_SV) SetCarrierPhaseCyclesIntegral(v int32) {
	capnp.Struct(s).SetUint32(52, uint32(v))
}

func (s QcomGnss_MeasurementReport_SV) CarrierPhaseCyclesFraction() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s QcomGnss_MeasurementReport_SV) SetCarrierPhaseCyclesFraction(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s QcomGnss_MeasurementReport_SV) FineSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s QcomGnss_MeasurementReport_SV) SetFineSpeed(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) FineSpeedUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s QcomGnss_MeasurementReport_SV) SetFineSpeedUncertainty(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s QcomGnss_MeasurementReport_SV) CycleSlipCount() uint8 {
	return capnp.Struct(s).Uint8(15)
}

func (s QcomGnss_MeasurementReport_SV) SetCycleSlipCount(v uint8) {
	capnp.Struct(s).SetUint8(15, v)
}

// QcomGnss_MeasurementReport_SV_List is a list of QcomGnss_MeasurementReport_SV.
type QcomGnss_MeasurementReport_SV_List = capnp.StructList[QcomGnss_MeasurementReport_SV]

// NewQcomGnss_MeasurementReport_SV creates a new list of QcomGnss_MeasurementReport_SV.
func NewQcomGnss_MeasurementReport_SV_List(s *capnp.Segment, sz int32) (QcomGnss_MeasurementReport_SV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 1}, sz)
	return capnp.StructList[QcomGnss_MeasurementReport_SV](l), err
}

// QcomGnss_MeasurementReport_SV_Future is a wrapper for a QcomGnss_MeasurementReport_SV promised by a client call.
type QcomGnss_MeasurementReport_SV_Future struct{ *capnp.Future }

func (f QcomGnss_MeasurementReport_SV_Future) Struct() (QcomGnss_MeasurementReport_SV, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_MeasurementReport_SV(p.Struct()), err
}
func (p QcomGnss_MeasurementReport_SV_Future) MeasurementStatus() QcomGnss_MeasurementStatus_Future {
	return QcomGnss_MeasurementStatus_Future{Future: p.Future.Field(0, nil)}
}

type QcomGnss_ClockReport capnp.Struct

// QcomGnss_ClockReport_TypeID is the unique identifier for the type QcomGnss_ClockReport.
const QcomGnss_ClockReport_TypeID = 0xca965e4add8f4f0b

func NewQcomGnss_ClockReport(s *capnp.Segment) (QcomGnss_ClockReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0})
	return QcomGnss_ClockReport(st), err
}

func NewRootQcomGnss_ClockReport(s *capnp.Segment) (QcomGnss_ClockReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0})
	return QcomGnss_ClockReport(st), err
}

func ReadRootQcomGnss_ClockReport(msg *capnp.Message) (QcomGnss_ClockReport, error) {
	root, err := msg.Root()
	return QcomGnss_ClockReport(root.Struct()), err
}

func (s QcomGnss_ClockReport) String() string {
	str, _ := text.Marshal(0xca965e4add8f4f0b, capnp.Struct(s))
	return str
}

func (s QcomGnss_ClockReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_ClockReport) DecodeFromPtr(p capnp.Ptr) QcomGnss_ClockReport {
	return QcomGnss_ClockReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_ClockReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_ClockReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_ClockReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_ClockReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_ClockReport) HasFCount() bool {
	return capnp.Struct(s).Bit(0)
}

func (s QcomGnss_ClockReport) SetHasFCount(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s QcomGnss_ClockReport) FCount() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s QcomGnss_ClockReport) SetFCount(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s QcomGnss_ClockReport) HasGpsWeek() bool {
	return capnp.Struct(s).Bit(1)
}

func (s QcomGnss_ClockReport) SetHasGpsWeek(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s QcomGnss_ClockReport) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s QcomGnss_ClockReport) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s QcomGnss_ClockReport) HasGpsMilliseconds() bool {
	return capnp.Struct(s).Bit(2)
}

func (s QcomGnss_ClockReport) SetHasGpsMilliseconds(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s QcomGnss_ClockReport) GpsMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s QcomGnss_ClockReport) SetGpsMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s QcomGnss_ClockReport) GpsTimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s QcomGnss_ClockReport) SetGpsTimeBias(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s QcomGnss_ClockReport) SetGpsClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsClockSource() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s QcomGnss_ClockReport) SetGpsClockSource(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s QcomGnss_ClockReport) HasGlonassYear() bool {
	return capnp.Struct(s).Bit(3)
}

func (s QcomGnss_ClockReport) SetHasGlonassYear(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s QcomGnss_ClockReport) GlonassYear() uint8 {
	return capnp.Struct(s).Uint8(20)
}

func (s QcomGnss_ClockReport) SetGlonassYear(v uint8) {
	capnp.Struct(s).SetUint8(20, v)
}

func (s QcomGnss_ClockReport) HasGlonassDay() bool {
	return capnp.Struct(s).Bit(4)
}

func (s QcomGnss_ClockReport) SetHasGlonassDay(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s QcomGnss_ClockReport) GlonassDay() uint16 {
	return capnp.Struct(s).Uint16(22)
}

func (s QcomGnss_ClockReport) SetGlonassDay(v uint16) {
	capnp.Struct(s).SetUint16(22, v)
}

func (s QcomGnss_ClockReport) HasGlonassMilliseconds() bool {
	return capnp.Struct(s).Bit(5)
}

func (s QcomGnss_ClockReport) SetHasGlonassMilliseconds(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s QcomGnss_ClockReport) GlonassMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(24)
}

func (s QcomGnss_ClockReport) SetGlonassMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(24, v)
}

func (s QcomGnss_ClockReport) GlonassTimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_ClockReport) SetGlonassTimeBias(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GlonassClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s QcomGnss_ClockReport) SetGlonassClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GlonassClockSource() uint8 {
	return capnp.Struct(s).Uint8(21)
}

func (s QcomGnss_ClockReport) SetGlonassClockSource(v uint8) {
	capnp.Struct(s).SetUint8(21, v)
}

func (s QcomGnss_ClockReport) BdsWeek() uint16 {
	return capnp.Struct(s).Uint16(36)
}

func (s QcomGnss_ClockReport) SetBdsWeek(v uint16) {
	capnp.Struct(s).SetUint16(36, v)
}

func (s QcomGnss_ClockReport) BdsMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s QcomGnss_ClockReport) SetBdsMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s QcomGnss_ClockReport) BdsTimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s QcomGnss_ClockReport) SetBdsTimeBias(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) BdsClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s QcomGnss_ClockReport) SetBdsClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) BdsClockSource() uint8 {
	return capnp.Struct(s).Uint8(38)
}

func (s QcomGnss_ClockReport) SetBdsClockSource(v uint8) {
	capnp.Struct(s).SetUint8(38, v)
}

func (s QcomGnss_ClockReport) GalWeek() uint16 {
	return capnp.Struct(s).Uint16(52)
}

func (s QcomGnss_ClockReport) SetGalWeek(v uint16) {
	capnp.Struct(s).SetUint16(52, v)
}

func (s QcomGnss_ClockReport) GalMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(56)
}

func (s QcomGnss_ClockReport) SetGalMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(56, v)
}

func (s QcomGnss_ClockReport) GalTimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s QcomGnss_ClockReport) SetGalTimeBias(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s QcomGnss_ClockReport) SetGalClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalClockSource() uint8 {
	return capnp.Struct(s).Uint8(39)
}

func (s QcomGnss_ClockReport) SetGalClockSource(v uint8) {
	capnp.Struct(s).SetUint8(39, v)
}

func (s QcomGnss_ClockReport) ClockFrequencyBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s QcomGnss_ClockReport) SetClockFrequencyBias(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) ClockFrequencyUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72))
}

func (s QcomGnss_ClockReport) SetClockFrequencyUncertainty(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) FrequencySource() uint8 {
	return capnp.Struct(s).Uint8(54)
}

func (s QcomGnss_ClockReport) SetFrequencySource(v uint8) {
	capnp.Struct(s).SetUint8(54, v)
}

func (s QcomGnss_ClockReport) GpsLeapSeconds() uint8 {
	return capnp.Struct(s).Uint8(55)
}

func (s QcomGnss_ClockReport) SetGpsLeapSeconds(v uint8) {
	capnp.Struct(s).SetUint8(55, v)
}

func (s QcomGnss_ClockReport) GpsLeapSecondsUncertainty() uint8 {
	return capnp.Struct(s).Uint8(76)
}

func (s QcomGnss_ClockReport) SetGpsLeapSecondsUncertainty(v uint8) {
	capnp.Struct(s).SetUint8(76, v)
}

func (s QcomGnss_ClockReport) GpsLeapSecondsSource() uint8 {
	return capnp.Struct(s).Uint8(77)
}

func (s QcomGnss_ClockReport) SetGpsLeapSecondsSource(v uint8) {
	capnp.Struct(s).SetUint8(77, v)
}

func (s QcomGnss_ClockReport) GpsToGlonassTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(80))
}

func (s QcomGnss_ClockReport) SetGpsToGlonassTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(80, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsToGlonassTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(84))
}

func (s QcomGnss_ClockReport) SetGpsToGlonassTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(84, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsToBdsTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(88))
}

func (s QcomGnss_ClockReport) SetGpsToBdsTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(88, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsToBdsTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(92))
}

func (s QcomGnss_ClockReport) SetGpsToBdsTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(92, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) BdsToGloTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(96))
}

func (s QcomGnss_ClockReport) SetBdsToGloTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(96, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) BdsToGloTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(100))
}

func (s QcomGnss_ClockReport) SetBdsToGloTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(100, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsToGalTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(104))
}

func (s QcomGnss_ClockReport) SetGpsToGalTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(104, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GpsToGalTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(108))
}

func (s QcomGnss_ClockReport) SetGpsToGalTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(108, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalToGloTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(112))
}

func (s QcomGnss_ClockReport) SetGalToGloTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(112, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalToGloTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(116))
}

func (s QcomGnss_ClockReport) SetGalToGloTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(116, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalToBdsTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(120))
}

func (s QcomGnss_ClockReport) SetGalToBdsTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(120, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) GalToBdsTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(124))
}

func (s QcomGnss_ClockReport) SetGalToBdsTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(124, math.Float32bits(v))
}

func (s QcomGnss_ClockReport) HasRtcTime() bool {
	return capnp.Struct(s).Bit(6)
}

func (s QcomGnss_ClockReport) SetHasRtcTime(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s QcomGnss_ClockReport) SystemRtcTime() uint32 {
	return capnp.Struct(s).Uint32(128)
}

func (s QcomGnss_ClockReport) SetSystemRtcTime(v uint32) {
	capnp.Struct(s).SetUint32(128, v)
}

func (s QcomGnss_ClockReport) FCountOffset() uint32 {
	return capnp.Struct(s).Uint32(132)
}

func (s QcomGnss_ClockReport) SetFCountOffset(v uint32) {
	capnp.Struct(s).SetUint32(132, v)
}

func (s QcomGnss_ClockReport) LpmRtcCount() uint32 {
	return capnp.Struct(s).Uint32(136)
}

func (s QcomGnss_ClockReport) SetLpmRtcCount(v uint32) {
	capnp.Struct(s).SetUint32(136, v)
}

func (s QcomGnss_ClockReport) ClockResets() uint32 {
	return capnp.Struct(s).Uint32(140)
}

func (s QcomGnss_ClockReport) SetClockResets(v uint32) {
	capnp.Struct(s).SetUint32(140, v)
}

// QcomGnss_ClockReport_List is a list of QcomGnss_ClockReport.
type QcomGnss_ClockReport_List = capnp.StructList[QcomGnss_ClockReport]

// NewQcomGnss_ClockReport creates a new list of QcomGnss_ClockReport.
func NewQcomGnss_ClockReport_List(s *capnp.Segment, sz int32) (QcomGnss_ClockReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 0}, sz)
	return capnp.StructList[QcomGnss_ClockReport](l), err
}

// QcomGnss_ClockReport_Future is a wrapper for a QcomGnss_ClockReport promised by a client call.
type QcomGnss_ClockReport_Future struct{ *capnp.Future }

func (f QcomGnss_ClockReport_Future) Struct() (QcomGnss_ClockReport, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_ClockReport(p.Struct()), err
}

type QcomGnss_DrMeasurementReport capnp.Struct

// QcomGnss_DrMeasurementReport_TypeID is the unique identifier for the type QcomGnss_DrMeasurementReport.
const QcomGnss_DrMeasurementReport_TypeID = 0x8053c39445c6c75c

func NewQcomGnss_DrMeasurementReport(s *capnp.Segment) (QcomGnss_DrMeasurementReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return QcomGnss_DrMeasurementReport(st), err
}

func NewRootQcomGnss_DrMeasurementReport(s *capnp.Segment) (QcomGnss_DrMeasurementReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return QcomGnss_DrMeasurementReport(st), err
}

func ReadRootQcomGnss_DrMeasurementReport(msg *capnp.Message) (QcomGnss_DrMeasurementReport, error) {
	root, err := msg.Root()
	return QcomGnss_DrMeasurementReport(root.Struct()), err
}

func (s QcomGnss_DrMeasurementReport) String() string {
	str, _ := text.Marshal(0x8053c39445c6c75c, capnp.Struct(s))
	return str
}

func (s QcomGnss_DrMeasurementReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_DrMeasurementReport) DecodeFromPtr(p capnp.Ptr) QcomGnss_DrMeasurementReport {
	return QcomGnss_DrMeasurementReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_DrMeasurementReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_DrMeasurementReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_DrMeasurementReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_DrMeasurementReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_DrMeasurementReport) Reason() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s QcomGnss_DrMeasurementReport) SetReason(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s QcomGnss_DrMeasurementReport) SeqNum() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s QcomGnss_DrMeasurementReport) SetSeqNum(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s QcomGnss_DrMeasurementReport) SeqMax() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s QcomGnss_DrMeasurementReport) SetSeqMax(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s QcomGnss_DrMeasurementReport) RfLoss() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s QcomGnss_DrMeasurementReport) SetRfLoss(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s QcomGnss_DrMeasurementReport) SystemRtcValid() bool {
	return capnp.Struct(s).Bit(24)
}

func (s QcomGnss_DrMeasurementReport) SetSystemRtcValid(v bool) {
	capnp.Struct(s).SetBit(24, v)
}

func (s QcomGnss_DrMeasurementReport) FCount() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s QcomGnss_DrMeasurementReport) SetFCount(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s QcomGnss_DrMeasurementReport) ClockResets() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s QcomGnss_DrMeasurementReport) SetClockResets(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s QcomGnss_DrMeasurementReport) SystemRtcTime() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s QcomGnss_DrMeasurementReport) SetSystemRtcTime(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s QcomGnss_DrMeasurementReport) GpsLeapSeconds() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s QcomGnss_DrMeasurementReport) SetGpsLeapSeconds(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

func (s QcomGnss_DrMeasurementReport) GpsLeapSecondsUncertainty() uint8 {
	return capnp.Struct(s).Uint8(7)
}

func (s QcomGnss_DrMeasurementReport) SetGpsLeapSecondsUncertainty(v uint8) {
	capnp.Struct(s).SetUint8(7, v)
}

func (s QcomGnss_DrMeasurementReport) GpsToGlonassTimeBiasMilliseconds() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s QcomGnss_DrMeasurementReport) SetGpsToGlonassTimeBiasMilliseconds(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) GpsToGlonassTimeBiasMillisecondsUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_DrMeasurementReport) SetGpsToGlonassTimeBiasMillisecondsUncertainty(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(32)
}

func (s QcomGnss_DrMeasurementReport) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(32, v)
}

func (s QcomGnss_DrMeasurementReport) GpsMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(36)
}

func (s QcomGnss_DrMeasurementReport) SetGpsMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(36, v)
}

func (s QcomGnss_DrMeasurementReport) GpsTimeBiasMs() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s QcomGnss_DrMeasurementReport) SetGpsTimeBiasMs(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s QcomGnss_DrMeasurementReport) GpsClockTimeUncertaintyMs() uint32 {
	return capnp.Struct(s).Uint32(44)
}

func (s QcomGnss_DrMeasurementReport) SetGpsClockTimeUncertaintyMs(v uint32) {
	capnp.Struct(s).SetUint32(44, v)
}

func (s QcomGnss_DrMeasurementReport) GpsClockSource() uint8 {
	return capnp.Struct(s).Uint8(34)
}

func (s QcomGnss_DrMeasurementReport) SetGpsClockSource(v uint8) {
	capnp.Struct(s).SetUint8(34, v)
}

func (s QcomGnss_DrMeasurementReport) GlonassClockSource() uint8 {
	return capnp.Struct(s).Uint8(35)
}

func (s QcomGnss_DrMeasurementReport) SetGlonassClockSource(v uint8) {
	capnp.Struct(s).SetUint8(35, v)
}

func (s QcomGnss_DrMeasurementReport) GlonassYear() uint8 {
	return capnp.Struct(s).Uint8(48)
}

func (s QcomGnss_DrMeasurementReport) SetGlonassYear(v uint8) {
	capnp.Struct(s).SetUint8(48, v)
}

func (s QcomGnss_DrMeasurementReport) GlonassDay() uint16 {
	return capnp.Struct(s).Uint16(50)
}

func (s QcomGnss_DrMeasurementReport) SetGlonassDay(v uint16) {
	capnp.Struct(s).SetUint16(50, v)
}

func (s QcomGnss_DrMeasurementReport) GlonassMilliseconds() uint32 {
	return capnp.Struct(s).Uint32(52)
}

func (s QcomGnss_DrMeasurementReport) SetGlonassMilliseconds(v uint32) {
	capnp.Struct(s).SetUint32(52, v)
}

func (s QcomGnss_DrMeasurementReport) GlonassTimeBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s QcomGnss_DrMeasurementReport) SetGlonassTimeBias(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) GlonassClockTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s QcomGnss_DrMeasurementReport) SetGlonassClockTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) ClockFrequencyBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s QcomGnss_DrMeasurementReport) SetClockFrequencyBias(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) ClockFrequencyUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s QcomGnss_DrMeasurementReport) SetClockFrequencyUncertainty(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport) FrequencySource() uint8 {
	return capnp.Struct(s).Uint8(49)
}

func (s QcomGnss_DrMeasurementReport) SetFrequencySource(v uint8) {
	capnp.Struct(s).SetUint8(49, v)
}

func (s QcomGnss_DrMeasurementReport) Source() QcomGnss_MeasurementSource {
	return QcomGnss_MeasurementSource(capnp.Struct(s).Uint16(72))
}

func (s QcomGnss_DrMeasurementReport) SetSource(v QcomGnss_MeasurementSource) {
	capnp.Struct(s).SetUint16(72, uint16(v))
}

func (s QcomGnss_DrMeasurementReport) Sv() (QcomGnss_DrMeasurementReport_SV_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_DrMeasurementReport_SV_List(p.List()), err
}

func (s QcomGnss_DrMeasurementReport) HasSv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss_DrMeasurementReport) SetSv(v QcomGnss_DrMeasurementReport_SV_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSv sets the sv field to a newly
// allocated QcomGnss_DrMeasurementReport_SV_List, preferring placement in s's segment.
func (s QcomGnss_DrMeasurementReport) NewSv(n int32) (QcomGnss_DrMeasurementReport_SV_List, error) {
	l, err := NewQcomGnss_DrMeasurementReport_SV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return QcomGnss_DrMeasurementReport_SV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// QcomGnss_DrMeasurementReport_List is a list of QcomGnss_DrMeasurementReport.
type QcomGnss_DrMeasurementReport_List = capnp.StructList[QcomGnss_DrMeasurementReport]

// NewQcomGnss_DrMeasurementReport creates a new list of QcomGnss_DrMeasurementReport.
func NewQcomGnss_DrMeasurementReport_List(s *capnp.Segment, sz int32) (QcomGnss_DrMeasurementReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[QcomGnss_DrMeasurementReport](l), err
}

// QcomGnss_DrMeasurementReport_Future is a wrapper for a QcomGnss_DrMeasurementReport promised by a client call.
type QcomGnss_DrMeasurementReport_Future struct{ *capnp.Future }

func (f QcomGnss_DrMeasurementReport_Future) Struct() (QcomGnss_DrMeasurementReport, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_DrMeasurementReport(p.Struct()), err
}

type QcomGnss_DrMeasurementReport_SV capnp.Struct

// QcomGnss_DrMeasurementReport_SV_TypeID is the unique identifier for the type QcomGnss_DrMeasurementReport_SV.
const QcomGnss_DrMeasurementReport_SV_TypeID = 0xf08b81df8cbf459c

func NewQcomGnss_DrMeasurementReport_SV(s *capnp.Segment) (QcomGnss_DrMeasurementReport_SV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 1})
	return QcomGnss_DrMeasurementReport_SV(st), err
}

func NewRootQcomGnss_DrMeasurementReport_SV(s *capnp.Segment) (QcomGnss_DrMeasurementReport_SV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 96, PointerCount: 1})
	return QcomGnss_DrMeasurementReport_SV(st), err
}

func ReadRootQcomGnss_DrMeasurementReport_SV(msg *capnp.Message) (QcomGnss_DrMeasurementReport_SV, error) {
	root, err := msg.Root()
	return QcomGnss_DrMeasurementReport_SV(root.Struct()), err
}

func (s QcomGnss_DrMeasurementReport_SV) String() string {
	str, _ := text.Marshal(0xf08b81df8cbf459c, capnp.Struct(s))
	return str
}

func (s QcomGnss_DrMeasurementReport_SV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_DrMeasurementReport_SV) DecodeFromPtr(p capnp.Ptr) QcomGnss_DrMeasurementReport_SV {
	return QcomGnss_DrMeasurementReport_SV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_DrMeasurementReport_SV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_DrMeasurementReport_SV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_DrMeasurementReport_SV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_DrMeasurementReport_SV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_DrMeasurementReport_SV) SvId() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s QcomGnss_DrMeasurementReport_SV) SetSvId(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s QcomGnss_DrMeasurementReport_SV) GlonassFrequencyIndex() int8 {
	return int8(capnp.Struct(s).Uint8(1))
}

func (s QcomGnss_DrMeasurementReport_SV) SetGlonassFrequencyIndex(v int8) {
	capnp.Struct(s).SetUint8(1, uint8(v))
}

func (s QcomGnss_DrMeasurementReport_SV) ObservationState() QcomGnss_SVObservationState {
	return QcomGnss_SVObservationState(capnp.Struct(s).Uint16(2))
}

func (s QcomGnss_DrMeasurementReport_SV) SetObservationState(v QcomGnss_SVObservationState) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s QcomGnss_DrMeasurementReport_SV) Observations() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s QcomGnss_DrMeasurementReport_SV) SetObservations(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s QcomGnss_DrMeasurementReport_SV) GoodObservations() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s QcomGnss_DrMeasurementReport_SV) SetGoodObservations(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

func (s QcomGnss_DrMeasurementReport_SV) FilterStages() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilterStages(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

func (s QcomGnss_DrMeasurementReport_SV) PredetectInterval() uint8 {
	return capnp.Struct(s).Uint8(7)
}

func (s QcomGnss_DrMeasurementReport_SV) SetPredetectInterval(v uint8) {
	capnp.Struct(s).SetUint8(7, v)
}

func (s QcomGnss_DrMeasurementReport_SV) CycleSlipCount() uint8 {
	return capnp.Struct(s).Uint8(8)
}

func (s QcomGnss_DrMeasurementReport_SV) SetCycleSlipCount(v uint8) {
	capnp.Struct(s).SetUint8(8, v)
}

func (s QcomGnss_DrMeasurementReport_SV) Postdetections() uint16 {
	return capnp.Struct(s).Uint16(10)
}

func (s QcomGnss_DrMeasurementReport_SV) SetPostdetections(v uint16) {
	capnp.Struct(s).SetUint16(10, v)
}

func (s QcomGnss_DrMeasurementReport_SV) MeasurementStatus() (QcomGnss_MeasurementStatus, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss_MeasurementStatus(p.Struct()), err
}

func (s QcomGnss_DrMeasurementReport_SV) HasMeasurementStatus() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss_DrMeasurementReport_SV) SetMeasurementStatus(v QcomGnss_MeasurementStatus) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeasurementStatus sets the measurementStatus field to a newly
// allocated QcomGnss_MeasurementStatus struct, preferring placement in s's segment.
func (s QcomGnss_DrMeasurementReport_SV) NewMeasurementStatus() (QcomGnss_MeasurementStatus, error) {
	ss, err := NewQcomGnss_MeasurementStatus(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss_MeasurementStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QcomGnss_DrMeasurementReport_SV) CarrierNoise() uint16 {
	return capnp.Struct(s).Uint16(12)
}

func (s QcomGnss_DrMeasurementReport_SV) SetCarrierNoise(v uint16) {
	capnp.Struct(s).SetUint16(12, v)
}

func (s QcomGnss_DrMeasurementReport_SV) RfLoss() uint16 {
	return capnp.Struct(s).Uint16(14)
}

func (s QcomGnss_DrMeasurementReport_SV) SetRfLoss(v uint16) {
	capnp.Struct(s).SetUint16(14, v)
}

func (s QcomGnss_DrMeasurementReport_SV) Latency() int16 {
	return int16(capnp.Struct(s).Uint16(16))
}

func (s QcomGnss_DrMeasurementReport_SV) SetLatency(v int16) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FilteredMeasurementFraction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilteredMeasurementFraction(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FilteredMeasurementIntegral() uint32 {
	return capnp.Struct(s).Uint32(24)
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilteredMeasurementIntegral(v uint32) {
	capnp.Struct(s).SetUint32(24, v)
}

func (s QcomGnss_DrMeasurementReport_SV) FilteredTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilteredTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FilteredSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilteredSpeed(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FilteredSpeedUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFilteredSpeedUncertainty(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) UnfilteredMeasurementFraction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s QcomGnss_DrMeasurementReport_SV) SetUnfilteredMeasurementFraction(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) UnfilteredMeasurementIntegral() uint32 {
	return capnp.Struct(s).Uint32(44)
}

func (s QcomGnss_DrMeasurementReport_SV) SetUnfilteredMeasurementIntegral(v uint32) {
	capnp.Struct(s).SetUint32(44, v)
}

func (s QcomGnss_DrMeasurementReport_SV) UnfilteredTimeUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s QcomGnss_DrMeasurementReport_SV) SetUnfilteredTimeUncertainty(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) UnfilteredSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s QcomGnss_DrMeasurementReport_SV) SetUnfilteredSpeed(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) UnfilteredSpeedUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s QcomGnss_DrMeasurementReport_SV) SetUnfilteredSpeedUncertainty(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) MultipathEstimate() uint32 {
	return capnp.Struct(s).Uint32(60)
}

func (s QcomGnss_DrMeasurementReport_SV) SetMultipathEstimate(v uint32) {
	capnp.Struct(s).SetUint32(60, v)
}

func (s QcomGnss_DrMeasurementReport_SV) Azimuth() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s QcomGnss_DrMeasurementReport_SV) SetAzimuth(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) Elevation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s QcomGnss_DrMeasurementReport_SV) SetElevation(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) DopplerAcceleration() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72))
}

func (s QcomGnss_DrMeasurementReport_SV) SetDopplerAcceleration(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FineSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(76))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFineSpeed(v float32) {
	capnp.Struct(s).SetUint32(76, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FineSpeedUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(80))
}

func (s QcomGnss_DrMeasurementReport_SV) SetFineSpeedUncertainty(v float32) {
	capnp.Struct(s).SetUint32(80, math.Float32bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) CarrierPhase() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s QcomGnss_DrMeasurementReport_SV) SetCarrierPhase(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s QcomGnss_DrMeasurementReport_SV) FCount() uint32 {
	return capnp.Struct(s).Uint32(84)
}

func (s QcomGnss_DrMeasurementReport_SV) SetFCount(v uint32) {
	capnp.Struct(s).SetUint32(84, v)
}

func (s QcomGnss_DrMeasurementReport_SV) ParityErrorCount() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s QcomGnss_DrMeasurementReport_SV) SetParityErrorCount(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s QcomGnss_DrMeasurementReport_SV) GoodParity() bool {
	return capnp.Struct(s).Bit(72)
}

func (s QcomGnss_DrMeasurementReport_SV) SetGoodParity(v bool) {
	capnp.Struct(s).SetBit(72, v)
}

// QcomGnss_DrMeasurementReport_SV_List is a list of QcomGnss_DrMeasurementReport_SV.
type QcomGnss_DrMeasurementReport_SV_List = capnp.StructList[QcomGnss_DrMeasurementReport_SV]

// NewQcomGnss_DrMeasurementReport_SV creates a new list of QcomGnss_DrMeasurementReport_SV.
func NewQcomGnss_DrMeasurementReport_SV_List(s *capnp.Segment, sz int32) (QcomGnss_DrMeasurementReport_SV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 96, PointerCount: 1}, sz)
	return capnp.StructList[QcomGnss_DrMeasurementReport_SV](l), err
}

// QcomGnss_DrMeasurementReport_SV_Future is a wrapper for a QcomGnss_DrMeasurementReport_SV promised by a client call.
type QcomGnss_DrMeasurementReport_SV_Future struct{ *capnp.Future }

func (f QcomGnss_DrMeasurementReport_SV_Future) Struct() (QcomGnss_DrMeasurementReport_SV, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_DrMeasurementReport_SV(p.Struct()), err
}
func (p QcomGnss_DrMeasurementReport_SV_Future) MeasurementStatus() QcomGnss_MeasurementStatus_Future {
	return QcomGnss_MeasurementStatus_Future{Future: p.Future.Field(0, nil)}
}

type QcomGnss_DrSvPolyReport capnp.Struct

// QcomGnss_DrSvPolyReport_TypeID is the unique identifier for the type QcomGnss_DrSvPolyReport.
const QcomGnss_DrSvPolyReport_TypeID = 0xb1fb80811a673270

func NewQcomGnss_DrSvPolyReport(s *capnp.Segment) (QcomGnss_DrSvPolyReport, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 4})
	return QcomGnss_DrSvPolyReport(st), err
}

func NewRootQcomGnss_DrSvPolyReport(s *capnp.Segment) (QcomGnss_DrSvPolyReport, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 4})
	return QcomGnss_DrSvPolyReport(st), err
}

func ReadRootQcomGnss_DrSvPolyReport(msg *capnp.Message) (QcomGnss_DrSvPolyReport, error) {
	root, err := msg.Root()
	return QcomGnss_DrSvPolyReport(root.Struct()), err
}

func (s QcomGnss_DrSvPolyReport) String() string {
	str, _ := text.Marshal(0xb1fb80811a673270, capnp.Struct(s))
	return str
}

func (s QcomGnss_DrSvPolyReport) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QcomGnss_DrSvPolyReport) DecodeFromPtr(p capnp.Ptr) QcomGnss_DrSvPolyReport {
	return QcomGnss_DrSvPolyReport(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QcomGnss_DrSvPolyReport) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QcomGnss_DrSvPolyReport) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QcomGnss_DrSvPolyReport) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QcomGnss_DrSvPolyReport) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QcomGnss_DrSvPolyReport) SvId() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s QcomGnss_DrSvPolyReport) SetSvId(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s QcomGnss_DrSvPolyReport) FrequencyIndex() int8 {
	return int8(capnp.Struct(s).Uint8(2))
}

func (s QcomGnss_DrSvPolyReport) SetFrequencyIndex(v int8) {
	capnp.Struct(s).SetUint8(2, uint8(v))
}

func (s QcomGnss_DrSvPolyReport) HasPosition() bool {
	return capnp.Struct(s).Bit(24)
}

func (s QcomGnss_DrSvPolyReport) SetHasPosition(v bool) {
	capnp.Struct(s).SetBit(24, v)
}

func (s QcomGnss_DrSvPolyReport) HasIono() bool {
	return capnp.Struct(s).Bit(25)
}

func (s QcomGnss_DrSvPolyReport) SetHasIono(v bool) {
	capnp.Struct(s).SetBit(25, v)
}

func (s QcomGnss_DrSvPolyReport) HasTropo() bool {
	return capnp.Struct(s).Bit(26)
}

func (s QcomGnss_DrSvPolyReport) SetHasTropo(v bool) {
	capnp.Struct(s).SetBit(26, v)
}

func (s QcomGnss_DrSvPolyReport) HasElevation() bool {
	return capnp.Struct(s).Bit(27)
}

func (s QcomGnss_DrSvPolyReport) SetHasElevation(v bool) {
	capnp.Struct(s).SetBit(27, v)
}

func (s QcomGnss_DrSvPolyReport) PolyFromXtra() bool {
	return capnp.Struct(s).Bit(28)
}

func (s QcomGnss_DrSvPolyReport) SetPolyFromXtra(v bool) {
	capnp.Struct(s).SetBit(28, v)
}

func (s QcomGnss_DrSvPolyReport) HasSbasIono() bool {
	return capnp.Struct(s).Bit(29)
}

func (s QcomGnss_DrSvPolyReport) SetHasSbasIono(v bool) {
	capnp.Struct(s).SetBit(29, v)
}

func (s QcomGnss_DrSvPolyReport) Iode() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s QcomGnss_DrSvPolyReport) SetIode(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s QcomGnss_DrSvPolyReport) T0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s QcomGnss_DrSvPolyReport) SetT0(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s QcomGnss_DrSvPolyReport) Xyz0() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s QcomGnss_DrSvPolyReport) HasXyz0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QcomGnss_DrSvPolyReport) SetXyz0(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewXyz0 sets the xyz0 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s QcomGnss_DrSvPolyReport) NewXyz0(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s QcomGnss_DrSvPolyReport) XyzN() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s QcomGnss_DrSvPolyReport) HasXyzN() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s QcomGnss_DrSvPolyReport) SetXyzN(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewXyzN sets the xyzN field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s QcomGnss_DrSvPolyReport) NewXyzN(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s QcomGnss_DrSvPolyReport) Other() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s QcomGnss_DrSvPolyReport) HasOther() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s QcomGnss_DrSvPolyReport) SetOther(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewOther sets the other field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s QcomGnss_DrSvPolyReport) NewOther(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s QcomGnss_DrSvPolyReport) PositionUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s QcomGnss_DrSvPolyReport) SetPositionUncertainty(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) IonoDelay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s QcomGnss_DrSvPolyReport) SetIonoDelay(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) IonoDot() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s QcomGnss_DrSvPolyReport) SetIonoDot(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) SbasIonoDelay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s QcomGnss_DrSvPolyReport) SetSbasIonoDelay(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) SbasIonoDot() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s QcomGnss_DrSvPolyReport) SetSbasIonoDot(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) TropoDelay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s QcomGnss_DrSvPolyReport) SetTropoDelay(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) Elevation() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s QcomGnss_DrSvPolyReport) SetElevation(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) ElevationDot() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s QcomGnss_DrSvPolyReport) SetElevationDot(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) ElevationUncertainty() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s QcomGnss_DrSvPolyReport) SetElevationUncertainty(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s QcomGnss_DrSvPolyReport) VelocityCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s QcomGnss_DrSvPolyReport) HasVelocityCoeff() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s QcomGnss_DrSvPolyReport) SetVelocityCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVelocityCoeff sets the velocityCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s QcomGnss_DrSvPolyReport) NewVelocityCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s QcomGnss_DrSvPolyReport) GpsWeek() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s QcomGnss_DrSvPolyReport) SetGpsWeek(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s QcomGnss_DrSvPolyReport) GpsTow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s QcomGnss_DrSvPolyReport) SetGpsTow(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

// QcomGnss_DrSvPolyReport_List is a list of QcomGnss_DrSvPolyReport.
type QcomGnss_DrSvPolyReport_List = capnp.StructList[QcomGnss_DrSvPolyReport]

// NewQcomGnss_DrSvPolyReport creates a new list of QcomGnss_DrSvPolyReport.
func NewQcomGnss_DrSvPolyReport_List(s *capnp.Segment, sz int32) (QcomGnss_DrSvPolyReport_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 4}, sz)
	return capnp.StructList[QcomGnss_DrSvPolyReport](l), err
}

// QcomGnss_DrSvPolyReport_Future is a wrapper for a QcomGnss_DrSvPolyReport promised by a client call.
type QcomGnss_DrSvPolyReport_Future struct{ *capnp.Future }

func (f QcomGnss_DrSvPolyReport_Future) Struct() (QcomGnss_DrSvPolyReport, error) {
	p, err := f.Future.Ptr()
	return QcomGnss_DrSvPolyReport(p.Struct()), err
}

type Clocks capnp.Struct

// Clocks_TypeID is the unique identifier for the type Clocks.
const Clocks_TypeID = 0xc95fb49a7bdc4618

func NewClocks(s *capnp.Segment) (Clocks, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Clocks(st), err
}

func NewRootClocks(s *capnp.Segment) (Clocks, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Clocks(st), err
}

func ReadRootClocks(msg *capnp.Message) (Clocks, error) {
	root, err := msg.Root()
	return Clocks(root.Struct()), err
}

func (s Clocks) String() string {
	str, _ := text.Marshal(0xc95fb49a7bdc4618, capnp.Struct(s))
	return str
}

func (s Clocks) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Clocks) DecodeFromPtr(p capnp.Ptr) Clocks {
	return Clocks(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Clocks) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Clocks) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Clocks) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Clocks) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Clocks) BootTimeNanos() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Clocks) SetBootTimeNanos(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Clocks) MonotonicNanos() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Clocks) SetMonotonicNanos(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Clocks) MonotonicRawNanos() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s Clocks) SetMonotonicRawNanos(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s Clocks) WallTimeNanos() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s Clocks) SetWallTimeNanos(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

func (s Clocks) ModemUptimeMillis() uint64 {
	return capnp.Struct(s).Uint64(32)
}

func (s Clocks) SetModemUptimeMillis(v uint64) {
	capnp.Struct(s).SetUint64(32, v)
}

// Clocks_List is a list of Clocks.
type Clocks_List = capnp.StructList[Clocks]

// NewClocks creates a new list of Clocks.
func NewClocks_List(s *capnp.Segment, sz int32) (Clocks_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Clocks](l), err
}

// Clocks_Future is a wrapper for a Clocks promised by a client call.
type Clocks_Future struct{ *capnp.Future }

func (f Clocks_Future) Struct() (Clocks, error) {
	p, err := f.Future.Ptr()
	return Clocks(p.Struct()), err
}

type LiveMpcData capnp.Struct

// LiveMpcData_TypeID is the unique identifier for the type LiveMpcData.
const LiveMpcData_TypeID = 0x92a5e332a85f32a0

func NewLiveMpcData(s *capnp.Segment) (LiveMpcData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return LiveMpcData(st), err
}

func NewRootLiveMpcData(s *capnp.Segment) (LiveMpcData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return LiveMpcData(st), err
}

func ReadRootLiveMpcData(msg *capnp.Message) (LiveMpcData, error) {
	root, err := msg.Root()
	return LiveMpcData(root.Struct()), err
}

func (s LiveMpcData) String() string {
	str, _ := text.Marshal(0x92a5e332a85f32a0, capnp.Struct(s))
	return str
}

func (s LiveMpcData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveMpcData) DecodeFromPtr(p capnp.Ptr) LiveMpcData {
	return LiveMpcData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveMpcData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveMpcData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveMpcData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveMpcData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveMpcData) X() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveMpcData) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveMpcData) SetX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMpcData) NewX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveMpcData) Y() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveMpcData) HasY() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveMpcData) SetY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewY sets the y field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMpcData) NewY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveMpcData) Psi() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s LiveMpcData) HasPsi() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveMpcData) SetPsi(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPsi sets the psi field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMpcData) NewPsi(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LiveMpcData) Curvature() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LiveMpcData) HasCurvature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveMpcData) SetCurvature(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCurvature sets the curvature field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMpcData) NewCurvature(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s LiveMpcData) QpIterations() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s LiveMpcData) SetQpIterations(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s LiveMpcData) CalculationTime() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s LiveMpcData) SetCalculationTime(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s LiveMpcData) Cost() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s LiveMpcData) SetCost(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// LiveMpcData_List is a list of LiveMpcData.
type LiveMpcData_List = capnp.StructList[LiveMpcData]

// NewLiveMpcData creates a new list of LiveMpcData.
func NewLiveMpcData_List(s *capnp.Segment, sz int32) (LiveMpcData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return capnp.StructList[LiveMpcData](l), err
}

// LiveMpcData_Future is a wrapper for a LiveMpcData promised by a client call.
type LiveMpcData_Future struct{ *capnp.Future }

func (f LiveMpcData_Future) Struct() (LiveMpcData, error) {
	p, err := f.Future.Ptr()
	return LiveMpcData(p.Struct()), err
}

type LiveLongitudinalMpcData capnp.Struct

// LiveLongitudinalMpcData_TypeID is the unique identifier for the type LiveLongitudinalMpcData.
const LiveLongitudinalMpcData_TypeID = 0xe7e17c434f865ae2

func NewLiveLongitudinalMpcData(s *capnp.Segment) (LiveLongitudinalMpcData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6})
	return LiveLongitudinalMpcData(st), err
}

func NewRootLiveLongitudinalMpcData(s *capnp.Segment) (LiveLongitudinalMpcData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6})
	return LiveLongitudinalMpcData(st), err
}

func ReadRootLiveLongitudinalMpcData(msg *capnp.Message) (LiveLongitudinalMpcData, error) {
	root, err := msg.Root()
	return LiveLongitudinalMpcData(root.Struct()), err
}

func (s LiveLongitudinalMpcData) String() string {
	str, _ := text.Marshal(0xe7e17c434f865ae2, capnp.Struct(s))
	return str
}

func (s LiveLongitudinalMpcData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveLongitudinalMpcData) DecodeFromPtr(p capnp.Ptr) LiveLongitudinalMpcData {
	return LiveLongitudinalMpcData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveLongitudinalMpcData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveLongitudinalMpcData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveLongitudinalMpcData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveLongitudinalMpcData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveLongitudinalMpcData) XEgo() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasXEgo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveLongitudinalMpcData) SetXEgo(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewXEgo sets the xEgo field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewXEgo(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) VEgo() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasVEgo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveLongitudinalMpcData) SetVEgo(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVEgo sets the vEgo field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewVEgo(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) AEgo() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasAEgo() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveLongitudinalMpcData) SetAEgo(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAEgo sets the aEgo field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewAEgo(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) XLead() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasXLead() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveLongitudinalMpcData) SetXLead(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewXLead sets the xLead field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewXLead(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) VLead() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasVLead() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LiveLongitudinalMpcData) SetVLead(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewVLead sets the vLead field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewVLead(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) ALead() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s LiveLongitudinalMpcData) HasALead() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LiveLongitudinalMpcData) SetALead(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewALead sets the aLead field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLongitudinalMpcData) NewALead(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s LiveLongitudinalMpcData) ALeadTau() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s LiveLongitudinalMpcData) SetALeadTau(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s LiveLongitudinalMpcData) QpIterations() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s LiveLongitudinalMpcData) SetQpIterations(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s LiveLongitudinalMpcData) MpcId() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s LiveLongitudinalMpcData) SetMpcId(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s LiveLongitudinalMpcData) CalculationTime() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s LiveLongitudinalMpcData) SetCalculationTime(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s LiveLongitudinalMpcData) Cost() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s LiveLongitudinalMpcData) SetCost(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// LiveLongitudinalMpcData_List is a list of LiveLongitudinalMpcData.
type LiveLongitudinalMpcData_List = capnp.StructList[LiveLongitudinalMpcData]

// NewLiveLongitudinalMpcData creates a new list of LiveLongitudinalMpcData.
func NewLiveLongitudinalMpcData_List(s *capnp.Segment, sz int32) (LiveLongitudinalMpcData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6}, sz)
	return capnp.StructList[LiveLongitudinalMpcData](l), err
}

// LiveLongitudinalMpcData_Future is a wrapper for a LiveLongitudinalMpcData promised by a client call.
type LiveLongitudinalMpcData_Future struct{ *capnp.Future }

func (f LiveLongitudinalMpcData_Future) Struct() (LiveLongitudinalMpcData, error) {
	p, err := f.Future.Ptr()
	return LiveLongitudinalMpcData(p.Struct()), err
}

type Joystick capnp.Struct

// Joystick_TypeID is the unique identifier for the type Joystick.
const Joystick_TypeID = 0xe42401658e2715e2

func NewJoystick(s *capnp.Segment) (Joystick, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Joystick(st), err
}

func NewRootJoystick(s *capnp.Segment) (Joystick, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Joystick(st), err
}

func ReadRootJoystick(msg *capnp.Message) (Joystick, error) {
	root, err := msg.Root()
	return Joystick(root.Struct()), err
}

func (s Joystick) String() string {
	str, _ := text.Marshal(0xe42401658e2715e2, capnp.Struct(s))
	return str
}

func (s Joystick) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Joystick) DecodeFromPtr(p capnp.Ptr) Joystick {
	return Joystick(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Joystick) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Joystick) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Joystick) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Joystick) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Joystick) Axes() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s Joystick) HasAxes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Joystick) SetAxes(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAxes sets the axes field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Joystick) NewAxes(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Joystick) Buttons() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.BitList(p.List()), err
}

func (s Joystick) HasButtons() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Joystick) SetButtons(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewButtons sets the buttons field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s Joystick) NewButtons(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Joystick_List is a list of Joystick.
type Joystick_List = capnp.StructList[Joystick]

// NewJoystick creates a new list of Joystick.
func NewJoystick_List(s *capnp.Segment, sz int32) (Joystick_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Joystick](l), err
}

// Joystick_Future is a wrapper for a Joystick promised by a client call.
type Joystick_Future struct{ *capnp.Future }

func (f Joystick_Future) Struct() (Joystick, error) {
	p, err := f.Future.Ptr()
	return Joystick(p.Struct()), err
}

type DriverStateV2 capnp.Struct

// DriverStateV2_TypeID is the unique identifier for the type DriverStateV2.
const DriverStateV2_TypeID = 0xfc010c40147563b0

func NewDriverStateV2(s *capnp.Segment) (DriverStateV2, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return DriverStateV2(st), err
}

func NewRootDriverStateV2(s *capnp.Segment) (DriverStateV2, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return DriverStateV2(st), err
}

func ReadRootDriverStateV2(msg *capnp.Message) (DriverStateV2, error) {
	root, err := msg.Root()
	return DriverStateV2(root.Struct()), err
}

func (s DriverStateV2) String() string {
	str, _ := text.Marshal(0xfc010c40147563b0, capnp.Struct(s))
	return str
}

func (s DriverStateV2) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DriverStateV2) DecodeFromPtr(p capnp.Ptr) DriverStateV2 {
	return DriverStateV2(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DriverStateV2) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DriverStateV2) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DriverStateV2) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DriverStateV2) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DriverStateV2) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s DriverStateV2) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s DriverStateV2) ModelExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DriverStateV2) SetModelExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DriverStateV2) DspExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DriverStateV2) SetDspExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DriverStateV2) RawPredictions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s DriverStateV2) HasRawPredictions() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DriverStateV2) SetRawPredictions(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s DriverStateV2) PoorVisionProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s DriverStateV2) SetPoorVisionProb(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s DriverStateV2) WheelOnRightProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DriverStateV2) SetWheelOnRightProb(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DriverStateV2) LeftDriverData() (DriverStateV2_DriverData, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return DriverStateV2_DriverData(p.Struct()), err
}

func (s DriverStateV2) HasLeftDriverData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DriverStateV2) SetLeftDriverData(v DriverStateV2_DriverData) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLeftDriverData sets the leftDriverData field to a newly
// allocated DriverStateV2_DriverData struct, preferring placement in s's segment.
func (s DriverStateV2) NewLeftDriverData() (DriverStateV2_DriverData, error) {
	ss, err := NewDriverStateV2_DriverData(capnp.Struct(s).Segment())
	if err != nil {
		return DriverStateV2_DriverData{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s DriverStateV2) RightDriverData() (DriverStateV2_DriverData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return DriverStateV2_DriverData(p.Struct()), err
}

func (s DriverStateV2) HasRightDriverData() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DriverStateV2) SetRightDriverData(v DriverStateV2_DriverData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewRightDriverData sets the rightDriverData field to a newly
// allocated DriverStateV2_DriverData struct, preferring placement in s's segment.
func (s DriverStateV2) NewRightDriverData() (DriverStateV2_DriverData, error) {
	ss, err := NewDriverStateV2_DriverData(capnp.Struct(s).Segment())
	if err != nil {
		return DriverStateV2_DriverData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// DriverStateV2_List is a list of DriverStateV2.
type DriverStateV2_List = capnp.StructList[DriverStateV2]

// NewDriverStateV2 creates a new list of DriverStateV2.
func NewDriverStateV2_List(s *capnp.Segment, sz int32) (DriverStateV2_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[DriverStateV2](l), err
}

// DriverStateV2_Future is a wrapper for a DriverStateV2 promised by a client call.
type DriverStateV2_Future struct{ *capnp.Future }

func (f DriverStateV2_Future) Struct() (DriverStateV2, error) {
	p, err := f.Future.Ptr()
	return DriverStateV2(p.Struct()), err
}
func (p DriverStateV2_Future) LeftDriverData() DriverStateV2_DriverData_Future {
	return DriverStateV2_DriverData_Future{Future: p.Future.Field(1, nil)}
}
func (p DriverStateV2_Future) RightDriverData() DriverStateV2_DriverData_Future {
	return DriverStateV2_DriverData_Future{Future: p.Future.Field(2, nil)}
}

type DriverStateV2_DriverData capnp.Struct

// DriverStateV2_DriverData_TypeID is the unique identifier for the type DriverStateV2_DriverData.
const DriverStateV2_DriverData_TypeID = 0xc9f73bb1cdf28a6a

func NewDriverStateV2_DriverData(s *capnp.Segment) (DriverStateV2_DriverData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6})
	return DriverStateV2_DriverData(st), err
}

func NewRootDriverStateV2_DriverData(s *capnp.Segment) (DriverStateV2_DriverData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6})
	return DriverStateV2_DriverData(st), err
}

func ReadRootDriverStateV2_DriverData(msg *capnp.Message) (DriverStateV2_DriverData, error) {
	root, err := msg.Root()
	return DriverStateV2_DriverData(root.Struct()), err
}

func (s DriverStateV2_DriverData) String() string {
	str, _ := text.Marshal(0xc9f73bb1cdf28a6a, capnp.Struct(s))
	return str
}

func (s DriverStateV2_DriverData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DriverStateV2_DriverData) DecodeFromPtr(p capnp.Ptr) DriverStateV2_DriverData {
	return DriverStateV2_DriverData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DriverStateV2_DriverData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DriverStateV2_DriverData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DriverStateV2_DriverData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DriverStateV2_DriverData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DriverStateV2_DriverData) FaceOrientation() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasFaceOrientation() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DriverStateV2_DriverData) SetFaceOrientation(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFaceOrientation sets the faceOrientation field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewFaceOrientation(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s DriverStateV2_DriverData) FaceOrientationStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasFaceOrientationStd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DriverStateV2_DriverData) SetFaceOrientationStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewFaceOrientationStd sets the faceOrientationStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewFaceOrientationStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s DriverStateV2_DriverData) FacePosition() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasFacePosition() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DriverStateV2_DriverData) SetFacePosition(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewFacePosition sets the facePosition field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewFacePosition(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s DriverStateV2_DriverData) FacePositionStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasFacePositionStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s DriverStateV2_DriverData) SetFacePositionStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewFacePositionStd sets the facePositionStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewFacePositionStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s DriverStateV2_DriverData) FaceProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s DriverStateV2_DriverData) SetFaceProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) LeftEyeProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DriverStateV2_DriverData) SetLeftEyeProb(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) RightEyeProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DriverStateV2_DriverData) SetRightEyeProb(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) LeftBlinkProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s DriverStateV2_DriverData) SetLeftBlinkProb(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) RightBlinkProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DriverStateV2_DriverData) SetRightBlinkProb(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) SunglassesProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s DriverStateV2_DriverData) SetSunglassesProb(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) OccludedProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DriverStateV2_DriverData) SetOccludedProb(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s DriverStateV2_DriverData) ReadyProb() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasReadyProb() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s DriverStateV2_DriverData) SetReadyProb(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewReadyProb sets the readyProb field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewReadyProb(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s DriverStateV2_DriverData) NotReadyProb() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateV2_DriverData) HasNotReadyProb() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s DriverStateV2_DriverData) SetNotReadyProb(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewNotReadyProb sets the notReadyProb field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateV2_DriverData) NewNotReadyProb(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// DriverStateV2_DriverData_List is a list of DriverStateV2_DriverData.
type DriverStateV2_DriverData_List = capnp.StructList[DriverStateV2_DriverData]

// NewDriverStateV2_DriverData creates a new list of DriverStateV2_DriverData.
func NewDriverStateV2_DriverData_List(s *capnp.Segment, sz int32) (DriverStateV2_DriverData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 6}, sz)
	return capnp.StructList[DriverStateV2_DriverData](l), err
}

// DriverStateV2_DriverData_Future is a wrapper for a DriverStateV2_DriverData promised by a client call.
type DriverStateV2_DriverData_Future struct{ *capnp.Future }

func (f DriverStateV2_DriverData_Future) Struct() (DriverStateV2_DriverData, error) {
	p, err := f.Future.Ptr()
	return DriverStateV2_DriverData(p.Struct()), err
}

type DriverStateDEPRECATED capnp.Struct

// DriverStateDEPRECATED_TypeID is the unique identifier for the type DriverStateDEPRECATED.
const DriverStateDEPRECATED_TypeID = 0xb83c6cc593ed0a00

func NewDriverStateDEPRECATED(s *capnp.Segment) (DriverStateDEPRECATED, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8})
	return DriverStateDEPRECATED(st), err
}

func NewRootDriverStateDEPRECATED(s *capnp.Segment) (DriverStateDEPRECATED, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8})
	return DriverStateDEPRECATED(st), err
}

func ReadRootDriverStateDEPRECATED(msg *capnp.Message) (DriverStateDEPRECATED, error) {
	root, err := msg.Root()
	return DriverStateDEPRECATED(root.Struct()), err
}

func (s DriverStateDEPRECATED) String() string {
	str, _ := text.Marshal(0xb83c6cc593ed0a00, capnp.Struct(s))
	return str
}

func (s DriverStateDEPRECATED) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DriverStateDEPRECATED) DecodeFromPtr(p capnp.Ptr) DriverStateDEPRECATED {
	return DriverStateDEPRECATED(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DriverStateDEPRECATED) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DriverStateDEPRECATED) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DriverStateDEPRECATED) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DriverStateDEPRECATED) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DriverStateDEPRECATED) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s DriverStateDEPRECATED) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s DriverStateDEPRECATED) ModelExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s DriverStateDEPRECATED) SetModelExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) DspExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s DriverStateDEPRECATED) SetDspExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) RawPredictions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return []byte(p.Data()), err
}

func (s DriverStateDEPRECATED) HasRawPredictions() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s DriverStateDEPRECATED) SetRawPredictions(v []byte) error {
	return capnp.Struct(s).SetData(5, v)
}

func (s DriverStateDEPRECATED) FaceOrientation() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasFaceOrientation() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s DriverStateDEPRECATED) SetFaceOrientation(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewFaceOrientation sets the faceOrientation field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewFaceOrientation(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) FacePosition() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasFacePosition() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s DriverStateDEPRECATED) SetFacePosition(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewFacePosition sets the facePosition field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewFacePosition(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) FaceProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DriverStateDEPRECATED) SetFaceProb(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) LeftEyeProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s DriverStateDEPRECATED) SetLeftEyeProb(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) RightEyeProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DriverStateDEPRECATED) SetRightEyeProb(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) LeftBlinkProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s DriverStateDEPRECATED) SetLeftBlinkProb(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) RightBlinkProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DriverStateDEPRECATED) SetRightBlinkProb(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) FaceOrientationStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasFaceOrientationStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s DriverStateDEPRECATED) SetFaceOrientationStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewFaceOrientationStd sets the faceOrientationStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewFaceOrientationStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) FacePositionStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasFacePositionStd() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s DriverStateDEPRECATED) SetFacePositionStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewFacePositionStd sets the facePositionStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewFacePositionStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) SunglassesProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s DriverStateDEPRECATED) SetSunglassesProb(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) PoorVision() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s DriverStateDEPRECATED) SetPoorVision(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) PartialFace() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s DriverStateDEPRECATED) SetPartialFace(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) DistractedPose() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s DriverStateDEPRECATED) SetDistractedPose(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) DistractedEyes() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s DriverStateDEPRECATED) SetDistractedEyes(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) EyesOnRoad() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s DriverStateDEPRECATED) SetEyesOnRoad(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) PhoneUse() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s DriverStateDEPRECATED) SetPhoneUse(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) OccludedProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(68))
}

func (s DriverStateDEPRECATED) SetOccludedProb(v float32) {
	capnp.Struct(s).SetUint32(68, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) ReadyProb() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasReadyProb() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s DriverStateDEPRECATED) SetReadyProb(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewReadyProb sets the readyProb field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewReadyProb(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) NotReadyProb() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasNotReadyProb() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s DriverStateDEPRECATED) SetNotReadyProb(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewNotReadyProb sets the notReadyProb field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewNotReadyProb(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) IrPwrDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s DriverStateDEPRECATED) SetIrPwrDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s DriverStateDEPRECATED) DescriptorDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s DriverStateDEPRECATED) HasDescriptorDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DriverStateDEPRECATED) SetDescriptorDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDescriptorDEPRECATED sets the descriptorDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s DriverStateDEPRECATED) NewDescriptorDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s DriverStateDEPRECATED) StdDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DriverStateDEPRECATED) SetStdDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// DriverStateDEPRECATED_List is a list of DriverStateDEPRECATED.
type DriverStateDEPRECATED_List = capnp.StructList[DriverStateDEPRECATED]

// NewDriverStateDEPRECATED creates a new list of DriverStateDEPRECATED.
func NewDriverStateDEPRECATED_List(s *capnp.Segment, sz int32) (DriverStateDEPRECATED_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 8}, sz)
	return capnp.StructList[DriverStateDEPRECATED](l), err
}

// DriverStateDEPRECATED_Future is a wrapper for a DriverStateDEPRECATED promised by a client call.
type DriverStateDEPRECATED_Future struct{ *capnp.Future }

func (f DriverStateDEPRECATED_Future) Struct() (DriverStateDEPRECATED, error) {
	p, err := f.Future.Ptr()
	return DriverStateDEPRECATED(p.Struct()), err
}

type DriverMonitoringState capnp.Struct

// DriverMonitoringState_TypeID is the unique identifier for the type DriverMonitoringState.
const DriverMonitoringState_TypeID = 0xb83cda094a1da284

func NewDriverMonitoringState(s *capnp.Segment) (DriverMonitoringState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return DriverMonitoringState(st), err
}

func NewRootDriverMonitoringState(s *capnp.Segment) (DriverMonitoringState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return DriverMonitoringState(st), err
}

func ReadRootDriverMonitoringState(msg *capnp.Message) (DriverMonitoringState, error) {
	root, err := msg.Root()
	return DriverMonitoringState(root.Struct()), err
}

func (s DriverMonitoringState) String() string {
	str, _ := text.Marshal(0xb83cda094a1da284, capnp.Struct(s))
	return str
}

func (s DriverMonitoringState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (DriverMonitoringState) DecodeFromPtr(p capnp.Ptr) DriverMonitoringState {
	return DriverMonitoringState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s DriverMonitoringState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s DriverMonitoringState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s DriverMonitoringState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s DriverMonitoringState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s DriverMonitoringState) Events() (CarEvent_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CarEvent_List(p.List()), err
}

func (s DriverMonitoringState) HasEvents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s DriverMonitoringState) SetEvents(v CarEvent_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated CarEvent_List, preferring placement in s's segment.
func (s DriverMonitoringState) NewEvents(n int32) (CarEvent_List, error) {
	l, err := NewCarEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s DriverMonitoringState) FaceDetected() bool {
	return capnp.Struct(s).Bit(0)
}

func (s DriverMonitoringState) SetFaceDetected(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s DriverMonitoringState) IsDistracted() bool {
	return capnp.Struct(s).Bit(1)
}

func (s DriverMonitoringState) SetIsDistracted(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s DriverMonitoringState) DistractedType() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s DriverMonitoringState) SetDistractedType(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s DriverMonitoringState) AwarenessStatus() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s DriverMonitoringState) SetAwarenessStatus(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s DriverMonitoringState) PosePitchOffset() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s DriverMonitoringState) SetPosePitchOffset(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s DriverMonitoringState) PosePitchValidCount() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s DriverMonitoringState) SetPosePitchValidCount(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s DriverMonitoringState) PoseYawOffset() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s DriverMonitoringState) SetPoseYawOffset(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s DriverMonitoringState) PoseYawValidCount() uint32 {
	return capnp.Struct(s).Uint32(20)
}

func (s DriverMonitoringState) SetPoseYawValidCount(v uint32) {
	capnp.Struct(s).SetUint32(20, v)
}

func (s DriverMonitoringState) StepChange() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s DriverMonitoringState) SetStepChange(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s DriverMonitoringState) AwarenessActive() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s DriverMonitoringState) SetAwarenessActive(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s DriverMonitoringState) AwarenessPassive() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s DriverMonitoringState) SetAwarenessPassive(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s DriverMonitoringState) IsLowStd() bool {
	return capnp.Struct(s).Bit(4)
}

func (s DriverMonitoringState) SetIsLowStd(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s DriverMonitoringState) HiStdCount() uint32 {
	return capnp.Struct(s).Uint32(36)
}

func (s DriverMonitoringState) SetHiStdCount(v uint32) {
	capnp.Struct(s).SetUint32(36, v)
}

func (s DriverMonitoringState) IsActiveMode() bool {
	return capnp.Struct(s).Bit(6)
}

func (s DriverMonitoringState) SetIsActiveMode(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s DriverMonitoringState) IsRHD() bool {
	return capnp.Struct(s).Bit(2)
}

func (s DriverMonitoringState) SetIsRHD(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s DriverMonitoringState) IsPreviewDEPRECATED() bool {
	return capnp.Struct(s).Bit(5)
}

func (s DriverMonitoringState) SetIsPreviewDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s DriverMonitoringState) RhdCheckedDEPRECATED() bool {
	return capnp.Struct(s).Bit(3)
}

func (s DriverMonitoringState) SetRhdCheckedDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

// DriverMonitoringState_List is a list of DriverMonitoringState.
type DriverMonitoringState_List = capnp.StructList[DriverMonitoringState]

// NewDriverMonitoringState creates a new list of DriverMonitoringState.
func NewDriverMonitoringState_List(s *capnp.Segment, sz int32) (DriverMonitoringState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[DriverMonitoringState](l), err
}

// DriverMonitoringState_Future is a wrapper for a DriverMonitoringState promised by a client call.
type DriverMonitoringState_Future struct{ *capnp.Future }

func (f DriverMonitoringState_Future) Struct() (DriverMonitoringState, error) {
	p, err := f.Future.Ptr()
	return DriverMonitoringState(p.Struct()), err
}

type Boot capnp.Struct

// Boot_TypeID is the unique identifier for the type Boot.
const Boot_TypeID = 0xa12e8670927a2549

func NewBoot(s *capnp.Segment) (Boot, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Boot(st), err
}

func NewRootBoot(s *capnp.Segment) (Boot, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Boot(st), err
}

func ReadRootBoot(msg *capnp.Message) (Boot, error) {
	root, err := msg.Root()
	return Boot(root.Struct()), err
}

func (s Boot) String() string {
	str, _ := text.Marshal(0xa12e8670927a2549, capnp.Struct(s))
	return str
}

func (s Boot) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Boot) DecodeFromPtr(p capnp.Ptr) Boot {
	return Boot(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Boot) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Boot) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Boot) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Boot) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Boot) WallTimeNanos() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Boot) SetWallTimeNanos(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Boot) Pstore() (Map, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Map(p.Struct()), err
}

func (s Boot) HasPstore() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Boot) SetPstore(v Map) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewPstore sets the pstore field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Boot) NewPstore() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Boot) Commands() (Map, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return Map(p.Struct()), err
}

func (s Boot) HasCommands() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Boot) SetCommands(v Map) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewCommands sets the commands field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Boot) NewCommands() (Map, error) {
	ss, err := NewMap(capnp.Struct(s).Segment())
	if err != nil {
		return Map{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Boot) LaunchLog() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Boot) HasLaunchLog() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Boot) LaunchLogBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Boot) SetLaunchLog(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Boot) LastKmsgDEPRECATED() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Boot) HasLastKmsgDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Boot) SetLastKmsgDEPRECATED(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Boot) LastPmsgDEPRECATED() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Boot) HasLastPmsgDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Boot) SetLastPmsgDEPRECATED(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// Boot_List is a list of Boot.
type Boot_List = capnp.StructList[Boot]

// NewBoot creates a new list of Boot.
func NewBoot_List(s *capnp.Segment, sz int32) (Boot_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Boot](l), err
}

// Boot_Future is a wrapper for a Boot promised by a client call.
type Boot_Future struct{ *capnp.Future }

func (f Boot_Future) Struct() (Boot, error) {
	p, err := f.Future.Ptr()
	return Boot(p.Struct()), err
}
func (p Boot_Future) Pstore() Map_Future {
	return Map_Future{Future: p.Future.Field(3, nil)}
}
func (p Boot_Future) Commands() Map_Future {
	return Map_Future{Future: p.Future.Field(4, nil)}
}

type LiveParametersData capnp.Struct

// LiveParametersData_TypeID is the unique identifier for the type LiveParametersData.
const LiveParametersData_TypeID = 0xd9058dcb967c2753

func NewLiveParametersData(s *capnp.Segment) (LiveParametersData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1})
	return LiveParametersData(st), err
}

func NewRootLiveParametersData(s *capnp.Segment) (LiveParametersData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1})
	return LiveParametersData(st), err
}

func ReadRootLiveParametersData(msg *capnp.Message) (LiveParametersData, error) {
	root, err := msg.Root()
	return LiveParametersData(root.Struct()), err
}

func (s LiveParametersData) String() string {
	str, _ := text.Marshal(0xd9058dcb967c2753, capnp.Struct(s))
	return str
}

func (s LiveParametersData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveParametersData) DecodeFromPtr(p capnp.Ptr) LiveParametersData {
	return LiveParametersData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveParametersData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveParametersData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveParametersData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveParametersData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveParametersData) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LiveParametersData) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s LiveParametersData) GyroBias() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveParametersData) SetGyroBias(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveParametersData) AngleOffsetDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LiveParametersData) SetAngleOffsetDeg(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LiveParametersData) AngleOffsetAverageDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LiveParametersData) SetAngleOffsetAverageDeg(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LiveParametersData) StiffnessFactor() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LiveParametersData) SetStiffnessFactor(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LiveParametersData) SteerRatio() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s LiveParametersData) SetSteerRatio(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s LiveParametersData) SensorValid() bool {
	return capnp.Struct(s).Bit(1)
}

func (s LiveParametersData) SetSensorValid(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s LiveParametersData) PosenetSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LiveParametersData) SetPosenetSpeed(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LiveParametersData) PosenetValid() bool {
	return capnp.Struct(s).Bit(2)
}

func (s LiveParametersData) SetPosenetValid(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s LiveParametersData) AngleOffsetFastStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s LiveParametersData) SetAngleOffsetFastStd(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s LiveParametersData) AngleOffsetAverageStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s LiveParametersData) SetAngleOffsetAverageStd(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s LiveParametersData) StiffnessFactorStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s LiveParametersData) SetStiffnessFactorStd(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s LiveParametersData) SteerRatioStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s LiveParametersData) SetSteerRatioStd(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s LiveParametersData) Roll() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s LiveParametersData) SetRoll(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s LiveParametersData) FilterState() (LiveLocationKalman_Measurement, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationKalman_Measurement(p.Struct()), err
}

func (s LiveParametersData) HasFilterState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveParametersData) SetFilterState(v LiveLocationKalman_Measurement) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFilterState sets the filterState field to a newly
// allocated LiveLocationKalman_Measurement struct, preferring placement in s's segment.
func (s LiveParametersData) NewFilterState() (LiveLocationKalman_Measurement, error) {
	ss, err := NewLiveLocationKalman_Measurement(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman_Measurement{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveParametersData) YawRateDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LiveParametersData) SetYawRateDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

// LiveParametersData_List is a list of LiveParametersData.
type LiveParametersData_List = capnp.StructList[LiveParametersData]

// NewLiveParametersData creates a new list of LiveParametersData.
func NewLiveParametersData_List(s *capnp.Segment, sz int32) (LiveParametersData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1}, sz)
	return capnp.StructList[LiveParametersData](l), err
}

// LiveParametersData_Future is a wrapper for a LiveParametersData promised by a client call.
type LiveParametersData_Future struct{ *capnp.Future }

func (f LiveParametersData_Future) Struct() (LiveParametersData, error) {
	p, err := f.Future.Ptr()
	return LiveParametersData(p.Struct()), err
}
func (p LiveParametersData_Future) FilterState() LiveLocationKalman_Measurement_Future {
	return LiveLocationKalman_Measurement_Future{Future: p.Future.Field(0, nil)}
}

type LiveTorqueParametersData capnp.Struct

// LiveTorqueParametersData_TypeID is the unique identifier for the type LiveTorqueParametersData.
const LiveTorqueParametersData_TypeID = 0xe61690eb0b091692

func NewLiveTorqueParametersData(s *capnp.Segment) (LiveTorqueParametersData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return LiveTorqueParametersData(st), err
}

func NewRootLiveTorqueParametersData(s *capnp.Segment) (LiveTorqueParametersData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return LiveTorqueParametersData(st), err
}

func ReadRootLiveTorqueParametersData(msg *capnp.Message) (LiveTorqueParametersData, error) {
	root, err := msg.Root()
	return LiveTorqueParametersData(root.Struct()), err
}

func (s LiveTorqueParametersData) String() string {
	str, _ := text.Marshal(0xe61690eb0b091692, capnp.Struct(s))
	return str
}

func (s LiveTorqueParametersData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveTorqueParametersData) DecodeFromPtr(p capnp.Ptr) LiveTorqueParametersData {
	return LiveTorqueParametersData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveTorqueParametersData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveTorqueParametersData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveTorqueParametersData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveTorqueParametersData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveTorqueParametersData) LiveValid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LiveTorqueParametersData) SetLiveValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s LiveTorqueParametersData) LatAccelFactorRaw() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveTorqueParametersData) SetLatAccelFactorRaw(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveTorqueParametersData) LatAccelOffsetRaw() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LiveTorqueParametersData) SetLatAccelOffsetRaw(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LiveTorqueParametersData) FrictionCoefficientRaw() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LiveTorqueParametersData) SetFrictionCoefficientRaw(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LiveTorqueParametersData) LatAccelFactorFiltered() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LiveTorqueParametersData) SetLatAccelFactorFiltered(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LiveTorqueParametersData) LatAccelOffsetFiltered() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s LiveTorqueParametersData) SetLatAccelOffsetFiltered(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s LiveTorqueParametersData) FrictionCoefficientFiltered() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LiveTorqueParametersData) SetFrictionCoefficientFiltered(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s LiveTorqueParametersData) TotalBucketPoints() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LiveTorqueParametersData) SetTotalBucketPoints(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LiveTorqueParametersData) Decay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s LiveTorqueParametersData) SetDecay(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s LiveTorqueParametersData) MaxResets() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s LiveTorqueParametersData) SetMaxResets(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s LiveTorqueParametersData) Points() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s LiveTorqueParametersData) HasPoints() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveTorqueParametersData) SetPoints(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPoints sets the points field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s LiveTorqueParametersData) NewPoints(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveTorqueParametersData) Version() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s LiveTorqueParametersData) SetVersion(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s LiveTorqueParametersData) UseParams() bool {
	return capnp.Struct(s).Bit(1)
}

func (s LiveTorqueParametersData) SetUseParams(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// LiveTorqueParametersData_List is a list of LiveTorqueParametersData.
type LiveTorqueParametersData_List = capnp.StructList[LiveTorqueParametersData]

// NewLiveTorqueParametersData creates a new list of LiveTorqueParametersData.
func NewLiveTorqueParametersData_List(s *capnp.Segment, sz int32) (LiveTorqueParametersData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[LiveTorqueParametersData](l), err
}

// LiveTorqueParametersData_Future is a wrapper for a LiveTorqueParametersData promised by a client call.
type LiveTorqueParametersData_Future struct{ *capnp.Future }

func (f LiveTorqueParametersData_Future) Struct() (LiveTorqueParametersData, error) {
	p, err := f.Future.Ptr()
	return LiveTorqueParametersData(p.Struct()), err
}

type LiveMapDataDEPRECATED capnp.Struct

// LiveMapDataDEPRECATED_TypeID is the unique identifier for the type LiveMapDataDEPRECATED.
const LiveMapDataDEPRECATED_TypeID = 0x943e268f93f711a6

func NewLiveMapDataDEPRECATED(s *capnp.Segment) (LiveMapDataDEPRECATED, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return LiveMapDataDEPRECATED(st), err
}

func NewRootLiveMapDataDEPRECATED(s *capnp.Segment) (LiveMapDataDEPRECATED, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return LiveMapDataDEPRECATED(st), err
}

func ReadRootLiveMapDataDEPRECATED(msg *capnp.Message) (LiveMapDataDEPRECATED, error) {
	root, err := msg.Root()
	return LiveMapDataDEPRECATED(root.Struct()), err
}

func (s LiveMapDataDEPRECATED) String() string {
	str, _ := text.Marshal(0x943e268f93f711a6, capnp.Struct(s))
	return str
}

func (s LiveMapDataDEPRECATED) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveMapDataDEPRECATED) DecodeFromPtr(p capnp.Ptr) LiveMapDataDEPRECATED {
	return LiveMapDataDEPRECATED(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveMapDataDEPRECATED) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveMapDataDEPRECATED) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveMapDataDEPRECATED) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveMapDataDEPRECATED) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveMapDataDEPRECATED) SpeedLimitValid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LiveMapDataDEPRECATED) SetSpeedLimitValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s LiveMapDataDEPRECATED) SpeedLimit() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveMapDataDEPRECATED) SetSpeedLimit(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) SpeedAdvisoryValid() bool {
	return capnp.Struct(s).Bit(3)
}

func (s LiveMapDataDEPRECATED) SetSpeedAdvisoryValid(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s LiveMapDataDEPRECATED) SpeedAdvisory() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LiveMapDataDEPRECATED) SetSpeedAdvisory(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) SpeedLimitAheadValid() bool {
	return capnp.Struct(s).Bit(4)
}

func (s LiveMapDataDEPRECATED) SetSpeedLimitAheadValid(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s LiveMapDataDEPRECATED) SpeedLimitAhead() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LiveMapDataDEPRECATED) SetSpeedLimitAhead(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) SpeedLimitAheadDistance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s LiveMapDataDEPRECATED) SetSpeedLimitAheadDistance(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) CurvatureValid() bool {
	return capnp.Struct(s).Bit(1)
}

func (s LiveMapDataDEPRECATED) SetCurvatureValid(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s LiveMapDataDEPRECATED) Curvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LiveMapDataDEPRECATED) SetCurvature(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) WayId() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s LiveMapDataDEPRECATED) SetWayId(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s LiveMapDataDEPRECATED) RoadX() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveMapDataDEPRECATED) HasRoadX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveMapDataDEPRECATED) SetRoadX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRoadX sets the roadX field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMapDataDEPRECATED) NewRoadX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveMapDataDEPRECATED) RoadY() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveMapDataDEPRECATED) HasRoadY() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveMapDataDEPRECATED) SetRoadY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRoadY sets the roadY field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMapDataDEPRECATED) NewRoadY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveMapDataDEPRECATED) LastGps() (GpsLocationData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return GpsLocationData(p.Struct()), err
}

func (s LiveMapDataDEPRECATED) HasLastGps() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveMapDataDEPRECATED) SetLastGps(v GpsLocationData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLastGps sets the lastGps field to a newly
// allocated GpsLocationData struct, preferring placement in s's segment.
func (s LiveMapDataDEPRECATED) NewLastGps() (GpsLocationData, error) {
	ss, err := NewGpsLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return GpsLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveMapDataDEPRECATED) RoadCurvatureX() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s LiveMapDataDEPRECATED) HasRoadCurvatureX() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveMapDataDEPRECATED) SetRoadCurvatureX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRoadCurvatureX sets the roadCurvatureX field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMapDataDEPRECATED) NewRoadCurvatureX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s LiveMapDataDEPRECATED) RoadCurvature() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s LiveMapDataDEPRECATED) HasRoadCurvature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LiveMapDataDEPRECATED) SetRoadCurvature(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewRoadCurvature sets the roadCurvature field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveMapDataDEPRECATED) NewRoadCurvature(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LiveMapDataDEPRECATED) DistToTurn() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LiveMapDataDEPRECATED) SetDistToTurn(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LiveMapDataDEPRECATED) MapValid() bool {
	return capnp.Struct(s).Bit(2)
}

func (s LiveMapDataDEPRECATED) SetMapValid(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

// LiveMapDataDEPRECATED_List is a list of LiveMapDataDEPRECATED.
type LiveMapDataDEPRECATED_List = capnp.StructList[LiveMapDataDEPRECATED]

// NewLiveMapDataDEPRECATED creates a new list of LiveMapDataDEPRECATED.
func NewLiveMapDataDEPRECATED_List(s *capnp.Segment, sz int32) (LiveMapDataDEPRECATED_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[LiveMapDataDEPRECATED](l), err
}

// LiveMapDataDEPRECATED_Future is a wrapper for a LiveMapDataDEPRECATED promised by a client call.
type LiveMapDataDEPRECATED_Future struct{ *capnp.Future }

func (f LiveMapDataDEPRECATED_Future) Struct() (LiveMapDataDEPRECATED, error) {
	p, err := f.Future.Ptr()
	return LiveMapDataDEPRECATED(p.Struct()), err
}
func (p LiveMapDataDEPRECATED_Future) LastGps() GpsLocationData_Future {
	return GpsLocationData_Future{Future: p.Future.Field(2, nil)}
}

type CameraOdometry capnp.Struct

// CameraOdometry_TypeID is the unique identifier for the type CameraOdometry.
const CameraOdometry_TypeID = 0xfa9a296b9fd41a96

func NewCameraOdometry(s *capnp.Segment) (CameraOdometry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return CameraOdometry(st), err
}

func NewRootCameraOdometry(s *capnp.Segment) (CameraOdometry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return CameraOdometry(st), err
}

func ReadRootCameraOdometry(msg *capnp.Message) (CameraOdometry, error) {
	root, err := msg.Root()
	return CameraOdometry(root.Struct()), err
}

func (s CameraOdometry) String() string {
	str, _ := text.Marshal(0xfa9a296b9fd41a96, capnp.Struct(s))
	return str
}

func (s CameraOdometry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CameraOdometry) DecodeFromPtr(p capnp.Ptr) CameraOdometry {
	return CameraOdometry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CameraOdometry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CameraOdometry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CameraOdometry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CameraOdometry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CameraOdometry) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CameraOdometry) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s CameraOdometry) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s CameraOdometry) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s CameraOdometry) Trans() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasTrans() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CameraOdometry) SetTrans(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTrans sets the trans field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewTrans(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CameraOdometry) Rot() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasRot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CameraOdometry) SetRot(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRot sets the rot field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewRot(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CameraOdometry) TransStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasTransStd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CameraOdometry) SetTransStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTransStd sets the transStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewTransStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CameraOdometry) RotStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasRotStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CameraOdometry) SetRotStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRotStd sets the rotStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewRotStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CameraOdometry) WideFromDeviceEuler() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasWideFromDeviceEuler() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CameraOdometry) SetWideFromDeviceEuler(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewWideFromDeviceEuler sets the wideFromDeviceEuler field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewWideFromDeviceEuler(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CameraOdometry) WideFromDeviceEulerStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasWideFromDeviceEulerStd() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CameraOdometry) SetWideFromDeviceEulerStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewWideFromDeviceEulerStd sets the wideFromDeviceEulerStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewWideFromDeviceEulerStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CameraOdometry) RoadTransformTrans() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasRoadTransformTrans() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CameraOdometry) SetRoadTransformTrans(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewRoadTransformTrans sets the roadTransformTrans field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewRoadTransformTrans(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CameraOdometry) RoadTransformTransStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s CameraOdometry) HasRoadTransformTransStd() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CameraOdometry) SetRoadTransformTransStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewRoadTransformTransStd sets the roadTransformTransStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CameraOdometry) NewRoadTransformTransStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}

// CameraOdometry_List is a list of CameraOdometry.
type CameraOdometry_List = capnp.StructList[CameraOdometry]

// NewCameraOdometry creates a new list of CameraOdometry.
func NewCameraOdometry_List(s *capnp.Segment, sz int32) (CameraOdometry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8}, sz)
	return capnp.StructList[CameraOdometry](l), err
}

// CameraOdometry_Future is a wrapper for a CameraOdometry promised by a client call.
type CameraOdometry_Future struct{ *capnp.Future }

func (f CameraOdometry_Future) Struct() (CameraOdometry, error) {
	p, err := f.Future.Ptr()
	return CameraOdometry(p.Struct()), err
}

type Sentinel capnp.Struct

// Sentinel_TypeID is the unique identifier for the type Sentinel.
const Sentinel_TypeID = 0xef0382d244f56e38

func NewSentinel(s *capnp.Segment) (Sentinel, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sentinel(st), err
}

func NewRootSentinel(s *capnp.Segment) (Sentinel, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Sentinel(st), err
}

func ReadRootSentinel(msg *capnp.Message) (Sentinel, error) {
	root, err := msg.Root()
	return Sentinel(root.Struct()), err
}

func (s Sentinel) String() string {
	str, _ := text.Marshal(0xef0382d244f56e38, capnp.Struct(s))
	return str
}

func (s Sentinel) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Sentinel) DecodeFromPtr(p capnp.Ptr) Sentinel {
	return Sentinel(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Sentinel) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Sentinel) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Sentinel) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Sentinel) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Sentinel) Type() Sentinel_SentinelType {
	return Sentinel_SentinelType(capnp.Struct(s).Uint16(0))
}

func (s Sentinel) SetType(v Sentinel_SentinelType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Sentinel) Signal() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s Sentinel) SetSignal(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

// Sentinel_List is a list of Sentinel.
type Sentinel_List = capnp.StructList[Sentinel]

// NewSentinel creates a new list of Sentinel.
func NewSentinel_List(s *capnp.Segment, sz int32) (Sentinel_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Sentinel](l), err
}

// Sentinel_Future is a wrapper for a Sentinel promised by a client call.
type Sentinel_Future struct{ *capnp.Future }

func (f Sentinel_Future) Struct() (Sentinel, error) {
	p, err := f.Future.Ptr()
	return Sentinel(p.Struct()), err
}

type Sentinel_SentinelType uint16

// Sentinel_SentinelType_TypeID is the unique identifier for the type Sentinel_SentinelType.
const Sentinel_SentinelType_TypeID = 0xa2d8e61eb6f7031a

// Values of Sentinel_SentinelType.
const (
	Sentinel_SentinelType_endOfSegment   Sentinel_SentinelType = 0
	Sentinel_SentinelType_endOfRoute     Sentinel_SentinelType = 1
	Sentinel_SentinelType_startOfSegment Sentinel_SentinelType = 2
	Sentinel_SentinelType_startOfRoute   Sentinel_SentinelType = 3
)

// String returns the enum's constant name.
func (c Sentinel_SentinelType) String() string {
	switch c {
	case Sentinel_SentinelType_endOfSegment:
		return "endOfSegment"
	case Sentinel_SentinelType_endOfRoute:
		return "endOfRoute"
	case Sentinel_SentinelType_startOfSegment:
		return "startOfSegment"
	case Sentinel_SentinelType_startOfRoute:
		return "startOfRoute"

	default:
		return ""
	}
}

// Sentinel_SentinelTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Sentinel_SentinelTypeFromString(c string) Sentinel_SentinelType {
	switch c {
	case "endOfSegment":
		return Sentinel_SentinelType_endOfSegment
	case "endOfRoute":
		return Sentinel_SentinelType_endOfRoute
	case "startOfSegment":
		return Sentinel_SentinelType_startOfSegment
	case "startOfRoute":
		return Sentinel_SentinelType_startOfRoute

	default:
		return 0
	}
}

type Sentinel_SentinelType_List = capnp.EnumList[Sentinel_SentinelType]

func NewSentinel_SentinelType_List(s *capnp.Segment, sz int32) (Sentinel_SentinelType_List, error) {
	return capnp.NewEnumList[Sentinel_SentinelType](s, sz)
}

type UIDebug capnp.Struct

// UIDebug_TypeID is the unique identifier for the type UIDebug.
const UIDebug_TypeID = 0xfe35ad896ffaeacf

func NewUIDebug(s *capnp.Segment) (UIDebug, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UIDebug(st), err
}

func NewRootUIDebug(s *capnp.Segment) (UIDebug, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UIDebug(st), err
}

func ReadRootUIDebug(msg *capnp.Message) (UIDebug, error) {
	root, err := msg.Root()
	return UIDebug(root.Struct()), err
}

func (s UIDebug) String() string {
	str, _ := text.Marshal(0xfe35ad896ffaeacf, capnp.Struct(s))
	return str
}

func (s UIDebug) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UIDebug) DecodeFromPtr(p capnp.Ptr) UIDebug {
	return UIDebug(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UIDebug) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UIDebug) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UIDebug) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UIDebug) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UIDebug) DrawTimeMillis() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s UIDebug) SetDrawTimeMillis(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// UIDebug_List is a list of UIDebug.
type UIDebug_List = capnp.StructList[UIDebug]

// NewUIDebug creates a new list of UIDebug.
func NewUIDebug_List(s *capnp.Segment, sz int32) (UIDebug_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UIDebug](l), err
}

// UIDebug_Future is a wrapper for a UIDebug promised by a client call.
type UIDebug_Future struct{ *capnp.Future }

func (f UIDebug_Future) Struct() (UIDebug, error) {
	p, err := f.Future.Ptr()
	return UIDebug(p.Struct()), err
}

type ManagerState capnp.Struct

// ManagerState_TypeID is the unique identifier for the type ManagerState.
const ManagerState_TypeID = 0xcf7154b31a69635b

func NewManagerState(s *capnp.Segment) (ManagerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ManagerState(st), err
}

func NewRootManagerState(s *capnp.Segment) (ManagerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ManagerState(st), err
}

func ReadRootManagerState(msg *capnp.Message) (ManagerState, error) {
	root, err := msg.Root()
	return ManagerState(root.Struct()), err
}

func (s ManagerState) String() string {
	str, _ := text.Marshal(0xcf7154b31a69635b, capnp.Struct(s))
	return str
}

func (s ManagerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ManagerState) DecodeFromPtr(p capnp.Ptr) ManagerState {
	return ManagerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ManagerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ManagerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ManagerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ManagerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ManagerState) Processes() (ManagerState_ProcessState_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ManagerState_ProcessState_List(p.List()), err
}

func (s ManagerState) HasProcesses() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ManagerState) SetProcesses(v ManagerState_ProcessState_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProcesses sets the processes field to a newly
// allocated ManagerState_ProcessState_List, preferring placement in s's segment.
func (s ManagerState) NewProcesses(n int32) (ManagerState_ProcessState_List, error) {
	l, err := NewManagerState_ProcessState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ManagerState_ProcessState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ManagerState_List is a list of ManagerState.
type ManagerState_List = capnp.StructList[ManagerState]

// NewManagerState creates a new list of ManagerState.
func NewManagerState_List(s *capnp.Segment, sz int32) (ManagerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ManagerState](l), err
}

// ManagerState_Future is a wrapper for a ManagerState promised by a client call.
type ManagerState_Future struct{ *capnp.Future }

func (f ManagerState_Future) Struct() (ManagerState, error) {
	p, err := f.Future.Ptr()
	return ManagerState(p.Struct()), err
}

type ManagerState_ProcessState capnp.Struct

// ManagerState_ProcessState_TypeID is the unique identifier for the type ManagerState_ProcessState.
const ManagerState_ProcessState_TypeID = 0x869a54d2708469ea

func NewManagerState_ProcessState(s *capnp.Segment) (ManagerState_ProcessState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManagerState_ProcessState(st), err
}

func NewRootManagerState_ProcessState(s *capnp.Segment) (ManagerState_ProcessState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return ManagerState_ProcessState(st), err
}

func ReadRootManagerState_ProcessState(msg *capnp.Message) (ManagerState_ProcessState, error) {
	root, err := msg.Root()
	return ManagerState_ProcessState(root.Struct()), err
}

func (s ManagerState_ProcessState) String() string {
	str, _ := text.Marshal(0x869a54d2708469ea, capnp.Struct(s))
	return str
}

func (s ManagerState_ProcessState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ManagerState_ProcessState) DecodeFromPtr(p capnp.Ptr) ManagerState_ProcessState {
	return ManagerState_ProcessState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ManagerState_ProcessState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ManagerState_ProcessState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ManagerState_ProcessState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ManagerState_ProcessState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ManagerState_ProcessState) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ManagerState_ProcessState) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ManagerState_ProcessState) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ManagerState_ProcessState) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ManagerState_ProcessState) Pid() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ManagerState_ProcessState) SetPid(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s ManagerState_ProcessState) Running() bool {
	return capnp.Struct(s).Bit(32)
}

func (s ManagerState_ProcessState) SetRunning(v bool) {
	capnp.Struct(s).SetBit(32, v)
}

func (s ManagerState_ProcessState) ShouldBeRunning() bool {
	return capnp.Struct(s).Bit(33)
}

func (s ManagerState_ProcessState) SetShouldBeRunning(v bool) {
	capnp.Struct(s).SetBit(33, v)
}

func (s ManagerState_ProcessState) ExitCode() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s ManagerState_ProcessState) SetExitCode(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

// ManagerState_ProcessState_List is a list of ManagerState_ProcessState.
type ManagerState_ProcessState_List = capnp.StructList[ManagerState_ProcessState]

// NewManagerState_ProcessState creates a new list of ManagerState_ProcessState.
func NewManagerState_ProcessState_List(s *capnp.Segment, sz int32) (ManagerState_ProcessState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[ManagerState_ProcessState](l), err
}

// ManagerState_ProcessState_Future is a wrapper for a ManagerState_ProcessState promised by a client call.
type ManagerState_ProcessState_Future struct{ *capnp.Future }

func (f ManagerState_ProcessState_Future) Struct() (ManagerState_ProcessState, error) {
	p, err := f.Future.Ptr()
	return ManagerState_ProcessState(p.Struct()), err
}

type UploaderState capnp.Struct

// UploaderState_TypeID is the unique identifier for the type UploaderState.
const UploaderState_TypeID = 0xde266b39b76b461e

func NewUploaderState(s *capnp.Segment) (UploaderState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UploaderState(st), err
}

func NewRootUploaderState(s *capnp.Segment) (UploaderState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UploaderState(st), err
}

func ReadRootUploaderState(msg *capnp.Message) (UploaderState, error) {
	root, err := msg.Root()
	return UploaderState(root.Struct()), err
}

func (s UploaderState) String() string {
	str, _ := text.Marshal(0xde266b39b76b461e, capnp.Struct(s))
	return str
}

func (s UploaderState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UploaderState) DecodeFromPtr(p capnp.Ptr) UploaderState {
	return UploaderState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UploaderState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UploaderState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UploaderState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UploaderState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UploaderState) ImmediateQueueSize() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s UploaderState) SetImmediateQueueSize(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s UploaderState) ImmediateQueueCount() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s UploaderState) SetImmediateQueueCount(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s UploaderState) RawQueueSize() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s UploaderState) SetRawQueueSize(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s UploaderState) RawQueueCount() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s UploaderState) SetRawQueueCount(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

func (s UploaderState) LastTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s UploaderState) SetLastTime(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s UploaderState) LastSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s UploaderState) SetLastSpeed(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s UploaderState) LastFilename() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UploaderState) HasLastFilename() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UploaderState) LastFilenameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UploaderState) SetLastFilename(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UploaderState_List is a list of UploaderState.
type UploaderState_List = capnp.StructList[UploaderState]

// NewUploaderState creates a new list of UploaderState.
func NewUploaderState_List(s *capnp.Segment, sz int32) (UploaderState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[UploaderState](l), err
}

// UploaderState_Future is a wrapper for a UploaderState promised by a client call.
type UploaderState_Future struct{ *capnp.Future }

func (f UploaderState_Future) Struct() (UploaderState, error) {
	p, err := f.Future.Ptr()
	return UploaderState(p.Struct()), err
}

type NavInstruction capnp.Struct

// NavInstruction_TypeID is the unique identifier for the type NavInstruction.
const NavInstruction_TypeID = 0xc18216b27f8602af

func NewNavInstruction(s *capnp.Segment) (NavInstruction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return NavInstruction(st), err
}

func NewRootNavInstruction(s *capnp.Segment) (NavInstruction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return NavInstruction(st), err
}

func ReadRootNavInstruction(msg *capnp.Message) (NavInstruction, error) {
	root, err := msg.Root()
	return NavInstruction(root.Struct()), err
}

func (s NavInstruction) String() string {
	str, _ := text.Marshal(0xc18216b27f8602af, capnp.Struct(s))
	return str
}

func (s NavInstruction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavInstruction) DecodeFromPtr(p capnp.Ptr) NavInstruction {
	return NavInstruction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavInstruction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavInstruction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavInstruction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavInstruction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavInstruction) ManeuverPrimaryText() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NavInstruction) HasManeuverPrimaryText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavInstruction) ManeuverPrimaryTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NavInstruction) SetManeuverPrimaryText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NavInstruction) ManeuverSecondaryText() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NavInstruction) HasManeuverSecondaryText() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavInstruction) ManeuverSecondaryTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NavInstruction) SetManeuverSecondaryText(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NavInstruction) ManeuverDistance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s NavInstruction) SetManeuverDistance(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s NavInstruction) ManeuverType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s NavInstruction) HasManeuverType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NavInstruction) ManeuverTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s NavInstruction) SetManeuverType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s NavInstruction) ManeuverModifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s NavInstruction) HasManeuverModifier() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s NavInstruction) ManeuverModifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s NavInstruction) SetManeuverModifier(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s NavInstruction) DistanceRemaining() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s NavInstruction) SetDistanceRemaining(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s NavInstruction) TimeRemaining() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s NavInstruction) SetTimeRemaining(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s NavInstruction) TimeRemainingTypical() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s NavInstruction) SetTimeRemainingTypical(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s NavInstruction) Lanes() (NavInstruction_Lane_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return NavInstruction_Lane_List(p.List()), err
}

func (s NavInstruction) HasLanes() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s NavInstruction) SetLanes(v NavInstruction_Lane_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewLanes sets the lanes field to a newly
// allocated NavInstruction_Lane_List, preferring placement in s's segment.
func (s NavInstruction) NewLanes(n int32) (NavInstruction_Lane_List, error) {
	l, err := NewNavInstruction_Lane_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavInstruction_Lane_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s NavInstruction) ShowFull() bool {
	return capnp.Struct(s).Bit(128)
}

func (s NavInstruction) SetShowFull(v bool) {
	capnp.Struct(s).SetBit(128, v)
}

func (s NavInstruction) SpeedLimit() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s NavInstruction) SetSpeedLimit(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s NavInstruction) SpeedLimitSign() NavInstruction_SpeedLimitSign {
	return NavInstruction_SpeedLimitSign(capnp.Struct(s).Uint16(18))
}

func (s NavInstruction) SetSpeedLimitSign(v NavInstruction_SpeedLimitSign) {
	capnp.Struct(s).SetUint16(18, uint16(v))
}

func (s NavInstruction) AllManeuvers() (NavInstruction_Maneuver_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return NavInstruction_Maneuver_List(p.List()), err
}

func (s NavInstruction) HasAllManeuvers() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s NavInstruction) SetAllManeuvers(v NavInstruction_Maneuver_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAllManeuvers sets the allManeuvers field to a newly
// allocated NavInstruction_Maneuver_List, preferring placement in s's segment.
func (s NavInstruction) NewAllManeuvers(n int32) (NavInstruction_Maneuver_List, error) {
	l, err := NewNavInstruction_Maneuver_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavInstruction_Maneuver_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// NavInstruction_List is a list of NavInstruction.
type NavInstruction_List = capnp.StructList[NavInstruction]

// NewNavInstruction creates a new list of NavInstruction.
func NewNavInstruction_List(s *capnp.Segment, sz int32) (NavInstruction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return capnp.StructList[NavInstruction](l), err
}

// NavInstruction_Future is a wrapper for a NavInstruction promised by a client call.
type NavInstruction_Future struct{ *capnp.Future }

func (f NavInstruction_Future) Struct() (NavInstruction, error) {
	p, err := f.Future.Ptr()
	return NavInstruction(p.Struct()), err
}

type NavInstruction_Lane capnp.Struct

// NavInstruction_Lane_TypeID is the unique identifier for the type NavInstruction_Lane.
const NavInstruction_Lane_TypeID = 0xa4cd1689c0a439d9

func NewNavInstruction_Lane(s *capnp.Segment) (NavInstruction_Lane, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavInstruction_Lane(st), err
}

func NewRootNavInstruction_Lane(s *capnp.Segment) (NavInstruction_Lane, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavInstruction_Lane(st), err
}

func ReadRootNavInstruction_Lane(msg *capnp.Message) (NavInstruction_Lane, error) {
	root, err := msg.Root()
	return NavInstruction_Lane(root.Struct()), err
}

func (s NavInstruction_Lane) String() string {
	str, _ := text.Marshal(0xa4cd1689c0a439d9, capnp.Struct(s))
	return str
}

func (s NavInstruction_Lane) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavInstruction_Lane) DecodeFromPtr(p capnp.Ptr) NavInstruction_Lane {
	return NavInstruction_Lane(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavInstruction_Lane) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavInstruction_Lane) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavInstruction_Lane) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavInstruction_Lane) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavInstruction_Lane) Directions() (NavInstruction_Direction_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NavInstruction_Direction_List(p.List()), err
}

func (s NavInstruction_Lane) HasDirections() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavInstruction_Lane) SetDirections(v NavInstruction_Direction_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDirections sets the directions field to a newly
// allocated NavInstruction_Direction_List, preferring placement in s's segment.
func (s NavInstruction_Lane) NewDirections(n int32) (NavInstruction_Direction_List, error) {
	l, err := NewNavInstruction_Direction_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavInstruction_Direction_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s NavInstruction_Lane) Active() bool {
	return capnp.Struct(s).Bit(0)
}

func (s NavInstruction_Lane) SetActive(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s NavInstruction_Lane) ActiveDirection() NavInstruction_Direction {
	return NavInstruction_Direction(capnp.Struct(s).Uint16(2))
}

func (s NavInstruction_Lane) SetActiveDirection(v NavInstruction_Direction) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// NavInstruction_Lane_List is a list of NavInstruction_Lane.
type NavInstruction_Lane_List = capnp.StructList[NavInstruction_Lane]

// NewNavInstruction_Lane creates a new list of NavInstruction_Lane.
func NewNavInstruction_Lane_List(s *capnp.Segment, sz int32) (NavInstruction_Lane_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NavInstruction_Lane](l), err
}

// NavInstruction_Lane_Future is a wrapper for a NavInstruction_Lane promised by a client call.
type NavInstruction_Lane_Future struct{ *capnp.Future }

func (f NavInstruction_Lane_Future) Struct() (NavInstruction_Lane, error) {
	p, err := f.Future.Ptr()
	return NavInstruction_Lane(p.Struct()), err
}

type NavInstruction_Direction uint16

// NavInstruction_Direction_TypeID is the unique identifier for the type NavInstruction_Direction.
const NavInstruction_Direction_TypeID = 0xeea5b9d8c9e5c192

// Values of NavInstruction_Direction.
const (
	NavInstruction_Direction_none        NavInstruction_Direction = 0
	NavInstruction_Direction_left        NavInstruction_Direction = 1
	NavInstruction_Direction_right       NavInstruction_Direction = 2
	NavInstruction_Direction_straight    NavInstruction_Direction = 3
	NavInstruction_Direction_slightLeft  NavInstruction_Direction = 4
	NavInstruction_Direction_slightRight NavInstruction_Direction = 5
)

// String returns the enum's constant name.
func (c NavInstruction_Direction) String() string {
	switch c {
	case NavInstruction_Direction_none:
		return "none"
	case NavInstruction_Direction_left:
		return "left"
	case NavInstruction_Direction_right:
		return "right"
	case NavInstruction_Direction_straight:
		return "straight"
	case NavInstruction_Direction_slightLeft:
		return "slightLeft"
	case NavInstruction_Direction_slightRight:
		return "slightRight"

	default:
		return ""
	}
}

// NavInstruction_DirectionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NavInstruction_DirectionFromString(c string) NavInstruction_Direction {
	switch c {
	case "none":
		return NavInstruction_Direction_none
	case "left":
		return NavInstruction_Direction_left
	case "right":
		return NavInstruction_Direction_right
	case "straight":
		return NavInstruction_Direction_straight
	case "slightLeft":
		return NavInstruction_Direction_slightLeft
	case "slightRight":
		return NavInstruction_Direction_slightRight

	default:
		return 0
	}
}

type NavInstruction_Direction_List = capnp.EnumList[NavInstruction_Direction]

func NewNavInstruction_Direction_List(s *capnp.Segment, sz int32) (NavInstruction_Direction_List, error) {
	return capnp.NewEnumList[NavInstruction_Direction](s, sz)
}

type NavInstruction_SpeedLimitSign uint16

// NavInstruction_SpeedLimitSign_TypeID is the unique identifier for the type NavInstruction_SpeedLimitSign.
const NavInstruction_SpeedLimitSign_TypeID = 0xb66e0aa568d09c66

// Values of NavInstruction_SpeedLimitSign.
const (
	NavInstruction_SpeedLimitSign_mutcd  NavInstruction_SpeedLimitSign = 0
	NavInstruction_SpeedLimitSign_vienna NavInstruction_SpeedLimitSign = 1
)

// String returns the enum's constant name.
func (c NavInstruction_SpeedLimitSign) String() string {
	switch c {
	case NavInstruction_SpeedLimitSign_mutcd:
		return "mutcd"
	case NavInstruction_SpeedLimitSign_vienna:
		return "vienna"

	default:
		return ""
	}
}

// NavInstruction_SpeedLimitSignFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NavInstruction_SpeedLimitSignFromString(c string) NavInstruction_SpeedLimitSign {
	switch c {
	case "mutcd":
		return NavInstruction_SpeedLimitSign_mutcd
	case "vienna":
		return NavInstruction_SpeedLimitSign_vienna

	default:
		return 0
	}
}

type NavInstruction_SpeedLimitSign_List = capnp.EnumList[NavInstruction_SpeedLimitSign]

func NewNavInstruction_SpeedLimitSign_List(s *capnp.Segment, sz int32) (NavInstruction_SpeedLimitSign_List, error) {
	return capnp.NewEnumList[NavInstruction_SpeedLimitSign](s, sz)
}

type NavInstruction_Maneuver capnp.Struct

// NavInstruction_Maneuver_TypeID is the unique identifier for the type NavInstruction_Maneuver.
const NavInstruction_Maneuver_TypeID = 0xb3ec4a1a6ce20a45

func NewNavInstruction_Maneuver(s *capnp.Segment) (NavInstruction_Maneuver, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NavInstruction_Maneuver(st), err
}

func NewRootNavInstruction_Maneuver(s *capnp.Segment) (NavInstruction_Maneuver, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NavInstruction_Maneuver(st), err
}

func ReadRootNavInstruction_Maneuver(msg *capnp.Message) (NavInstruction_Maneuver, error) {
	root, err := msg.Root()
	return NavInstruction_Maneuver(root.Struct()), err
}

func (s NavInstruction_Maneuver) String() string {
	str, _ := text.Marshal(0xb3ec4a1a6ce20a45, capnp.Struct(s))
	return str
}

func (s NavInstruction_Maneuver) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavInstruction_Maneuver) DecodeFromPtr(p capnp.Ptr) NavInstruction_Maneuver {
	return NavInstruction_Maneuver(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavInstruction_Maneuver) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavInstruction_Maneuver) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavInstruction_Maneuver) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavInstruction_Maneuver) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavInstruction_Maneuver) Distance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s NavInstruction_Maneuver) SetDistance(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s NavInstruction_Maneuver) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NavInstruction_Maneuver) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavInstruction_Maneuver) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NavInstruction_Maneuver) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NavInstruction_Maneuver) Modifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NavInstruction_Maneuver) HasModifier() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavInstruction_Maneuver) ModifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NavInstruction_Maneuver) SetModifier(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// NavInstruction_Maneuver_List is a list of NavInstruction_Maneuver.
type NavInstruction_Maneuver_List = capnp.StructList[NavInstruction_Maneuver]

// NewNavInstruction_Maneuver creates a new list of NavInstruction_Maneuver.
func NewNavInstruction_Maneuver_List(s *capnp.Segment, sz int32) (NavInstruction_Maneuver_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[NavInstruction_Maneuver](l), err
}

// NavInstruction_Maneuver_Future is a wrapper for a NavInstruction_Maneuver promised by a client call.
type NavInstruction_Maneuver_Future struct{ *capnp.Future }

func (f NavInstruction_Maneuver_Future) Struct() (NavInstruction_Maneuver, error) {
	p, err := f.Future.Ptr()
	return NavInstruction_Maneuver(p.Struct()), err
}

type NavRoute capnp.Struct

// NavRoute_TypeID is the unique identifier for the type NavRoute.
const NavRoute_TypeID = 0xa61452f6440d97d3

func NewNavRoute(s *capnp.Segment) (NavRoute, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NavRoute(st), err
}

func NewRootNavRoute(s *capnp.Segment) (NavRoute, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return NavRoute(st), err
}

func ReadRootNavRoute(msg *capnp.Message) (NavRoute, error) {
	root, err := msg.Root()
	return NavRoute(root.Struct()), err
}

func (s NavRoute) String() string {
	str, _ := text.Marshal(0xa61452f6440d97d3, capnp.Struct(s))
	return str
}

func (s NavRoute) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavRoute) DecodeFromPtr(p capnp.Ptr) NavRoute {
	return NavRoute(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavRoute) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavRoute) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavRoute) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavRoute) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavRoute) Coordinates() (NavRoute_Coordinate_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NavRoute_Coordinate_List(p.List()), err
}

func (s NavRoute) HasCoordinates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavRoute) SetCoordinates(v NavRoute_Coordinate_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCoordinates sets the coordinates field to a newly
// allocated NavRoute_Coordinate_List, preferring placement in s's segment.
func (s NavRoute) NewCoordinates(n int32) (NavRoute_Coordinate_List, error) {
	l, err := NewNavRoute_Coordinate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavRoute_Coordinate_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// NavRoute_List is a list of NavRoute.
type NavRoute_List = capnp.StructList[NavRoute]

// NewNavRoute creates a new list of NavRoute.
func NewNavRoute_List(s *capnp.Segment, sz int32) (NavRoute_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[NavRoute](l), err
}

// NavRoute_Future is a wrapper for a NavRoute promised by a client call.
type NavRoute_Future struct{ *capnp.Future }

func (f NavRoute_Future) Struct() (NavRoute, error) {
	p, err := f.Future.Ptr()
	return NavRoute(p.Struct()), err
}

type NavRoute_Coordinate capnp.Struct

// NavRoute_Coordinate_TypeID is the unique identifier for the type NavRoute_Coordinate.
const NavRoute_Coordinate_TypeID = 0xc4c96f53ad1e7485

func NewNavRoute_Coordinate(s *capnp.Segment) (NavRoute_Coordinate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NavRoute_Coordinate(st), err
}

func NewRootNavRoute_Coordinate(s *capnp.Segment) (NavRoute_Coordinate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return NavRoute_Coordinate(st), err
}

func ReadRootNavRoute_Coordinate(msg *capnp.Message) (NavRoute_Coordinate, error) {
	root, err := msg.Root()
	return NavRoute_Coordinate(root.Struct()), err
}

func (s NavRoute_Coordinate) String() string {
	str, _ := text.Marshal(0xc4c96f53ad1e7485, capnp.Struct(s))
	return str
}

func (s NavRoute_Coordinate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavRoute_Coordinate) DecodeFromPtr(p capnp.Ptr) NavRoute_Coordinate {
	return NavRoute_Coordinate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavRoute_Coordinate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavRoute_Coordinate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavRoute_Coordinate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavRoute_Coordinate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavRoute_Coordinate) Latitude() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s NavRoute_Coordinate) SetLatitude(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s NavRoute_Coordinate) Longitude() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s NavRoute_Coordinate) SetLongitude(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// NavRoute_Coordinate_List is a list of NavRoute_Coordinate.
type NavRoute_Coordinate_List = capnp.StructList[NavRoute_Coordinate]

// NewNavRoute_Coordinate creates a new list of NavRoute_Coordinate.
func NewNavRoute_Coordinate_List(s *capnp.Segment, sz int32) (NavRoute_Coordinate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[NavRoute_Coordinate](l), err
}

// NavRoute_Coordinate_Future is a wrapper for a NavRoute_Coordinate promised by a client call.
type NavRoute_Coordinate_Future struct{ *capnp.Future }

func (f NavRoute_Coordinate_Future) Struct() (NavRoute_Coordinate, error) {
	p, err := f.Future.Ptr()
	return NavRoute_Coordinate(p.Struct()), err
}

type MapRenderState capnp.Struct

// MapRenderState_TypeID is the unique identifier for the type MapRenderState.
const MapRenderState_TypeID = 0xa158dd2a4cfaa81b

func NewMapRenderState(s *capnp.Segment) (MapRenderState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MapRenderState(st), err
}

func NewRootMapRenderState(s *capnp.Segment) (MapRenderState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MapRenderState(st), err
}

func ReadRootMapRenderState(msg *capnp.Message) (MapRenderState, error) {
	root, err := msg.Root()
	return MapRenderState(root.Struct()), err
}

func (s MapRenderState) String() string {
	str, _ := text.Marshal(0xa158dd2a4cfaa81b, capnp.Struct(s))
	return str
}

func (s MapRenderState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MapRenderState) DecodeFromPtr(p capnp.Ptr) MapRenderState {
	return MapRenderState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MapRenderState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MapRenderState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MapRenderState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MapRenderState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MapRenderState) LocationMonoTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s MapRenderState) SetLocationMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s MapRenderState) RenderTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s MapRenderState) SetRenderTime(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s MapRenderState) FrameId() uint32 {
	return capnp.Struct(s).Uint32(12)
}

func (s MapRenderState) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(12, v)
}

// MapRenderState_List is a list of MapRenderState.
type MapRenderState_List = capnp.StructList[MapRenderState]

// NewMapRenderState creates a new list of MapRenderState.
func NewMapRenderState_List(s *capnp.Segment, sz int32) (MapRenderState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MapRenderState](l), err
}

// MapRenderState_Future is a wrapper for a MapRenderState promised by a client call.
type MapRenderState_Future struct{ *capnp.Future }

func (f MapRenderState_Future) Struct() (MapRenderState, error) {
	p, err := f.Future.Ptr()
	return MapRenderState(p.Struct()), err
}

type NavModelData capnp.Struct

// NavModelData_TypeID is the unique identifier for the type NavModelData.
const NavModelData_TypeID = 0xac3de5c437be057a

func NewNavModelData(s *capnp.Segment) (NavModelData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return NavModelData(st), err
}

func NewRootNavModelData(s *capnp.Segment) (NavModelData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return NavModelData(st), err
}

func ReadRootNavModelData(msg *capnp.Message) (NavModelData, error) {
	root, err := msg.Root()
	return NavModelData(root.Struct()), err
}

func (s NavModelData) String() string {
	str, _ := text.Marshal(0xac3de5c437be057a, capnp.Struct(s))
	return str
}

func (s NavModelData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavModelData) DecodeFromPtr(p capnp.Ptr) NavModelData {
	return NavModelData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavModelData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavModelData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavModelData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavModelData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavModelData) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s NavModelData) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s NavModelData) LocationMonoTime() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s NavModelData) SetLocationMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s NavModelData) ModelExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s NavModelData) SetModelExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s NavModelData) DspExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s NavModelData) SetDspExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s NavModelData) Features() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData) HasFeatures() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavModelData) SetFeatures(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFeatures sets the features field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData) NewFeatures(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s NavModelData) Position() (NavModelData_XYData, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return NavModelData_XYData(p.Struct()), err
}

func (s NavModelData) HasPosition() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavModelData) SetPosition(v NavModelData_XYData) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewPosition sets the position field to a newly
// allocated NavModelData_XYData struct, preferring placement in s's segment.
func (s NavModelData) NewPosition() (NavModelData_XYData, error) {
	ss, err := NewNavModelData_XYData(capnp.Struct(s).Segment())
	if err != nil {
		return NavModelData_XYData{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s NavModelData) DesirePrediction() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData) HasDesirePrediction() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NavModelData) SetDesirePrediction(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDesirePrediction sets the desirePrediction field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData) NewDesirePrediction(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// NavModelData_List is a list of NavModelData.
type NavModelData_List = capnp.StructList[NavModelData]

// NewNavModelData creates a new list of NavModelData.
func NewNavModelData_List(s *capnp.Segment, sz int32) (NavModelData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[NavModelData](l), err
}

// NavModelData_Future is a wrapper for a NavModelData promised by a client call.
type NavModelData_Future struct{ *capnp.Future }

func (f NavModelData_Future) Struct() (NavModelData, error) {
	p, err := f.Future.Ptr()
	return NavModelData(p.Struct()), err
}
func (p NavModelData_Future) Position() NavModelData_XYData_Future {
	return NavModelData_XYData_Future{Future: p.Future.Field(1, nil)}
}

type NavModelData_XYData capnp.Struct

// NavModelData_XYData_TypeID is the unique identifier for the type NavModelData_XYData.
const NavModelData_XYData_TypeID = 0xbe09e615b2507e26

func NewNavModelData_XYData(s *capnp.Segment) (NavModelData_XYData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return NavModelData_XYData(st), err
}

func NewRootNavModelData_XYData(s *capnp.Segment) (NavModelData_XYData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return NavModelData_XYData(st), err
}

func ReadRootNavModelData_XYData(msg *capnp.Message) (NavModelData_XYData, error) {
	root, err := msg.Root()
	return NavModelData_XYData(root.Struct()), err
}

func (s NavModelData_XYData) String() string {
	str, _ := text.Marshal(0xbe09e615b2507e26, capnp.Struct(s))
	return str
}

func (s NavModelData_XYData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavModelData_XYData) DecodeFromPtr(p capnp.Ptr) NavModelData_XYData {
	return NavModelData_XYData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavModelData_XYData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavModelData_XYData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavModelData_XYData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavModelData_XYData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavModelData_XYData) X() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData_XYData) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavModelData_XYData) SetX(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewX sets the x field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData_XYData) NewX(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s NavModelData_XYData) Y() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData_XYData) HasY() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavModelData_XYData) SetY(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewY sets the y field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData_XYData) NewY(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s NavModelData_XYData) XStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData_XYData) HasXStd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NavModelData_XYData) SetXStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewXStd sets the xStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData_XYData) NewXStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s NavModelData_XYData) YStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s NavModelData_XYData) HasYStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s NavModelData_XYData) SetYStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewYStd sets the yStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s NavModelData_XYData) NewYStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// NavModelData_XYData_List is a list of NavModelData_XYData.
type NavModelData_XYData_List = capnp.StructList[NavModelData_XYData]

// NewNavModelData_XYData creates a new list of NavModelData_XYData.
func NewNavModelData_XYData_List(s *capnp.Segment, sz int32) (NavModelData_XYData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[NavModelData_XYData](l), err
}

// NavModelData_XYData_Future is a wrapper for a NavModelData_XYData promised by a client call.
type NavModelData_XYData_Future struct{ *capnp.Future }

func (f NavModelData_XYData_Future) Struct() (NavModelData_XYData, error) {
	p, err := f.Future.Ptr()
	return NavModelData_XYData(p.Struct()), err
}

type EncodeData capnp.Struct

// EncodeData_TypeID is the unique identifier for the type EncodeData.
const EncodeData_TypeID = 0xcf9aeab355dd85f0

func NewEncodeData(s *capnp.Segment) (EncodeData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EncodeData(st), err
}

func NewRootEncodeData(s *capnp.Segment) (EncodeData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return EncodeData(st), err
}

func ReadRootEncodeData(msg *capnp.Message) (EncodeData, error) {
	root, err := msg.Root()
	return EncodeData(root.Struct()), err
}

func (s EncodeData) String() string {
	str, _ := text.Marshal(0xcf9aeab355dd85f0, capnp.Struct(s))
	return str
}

func (s EncodeData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EncodeData) DecodeFromPtr(p capnp.Ptr) EncodeData {
	return EncodeData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EncodeData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EncodeData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EncodeData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EncodeData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EncodeData) Idx() (EncodeIndex, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s EncodeData) HasIdx() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EncodeData) SetIdx(v EncodeIndex) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdx sets the idx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s EncodeData) NewIdx() (EncodeIndex, error) {
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s EncodeData) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s EncodeData) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EncodeData) SetData(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s EncodeData) Header() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s EncodeData) HasHeader() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s EncodeData) SetHeader(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s EncodeData) UnixTimestampNanos() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s EncodeData) SetUnixTimestampNanos(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// EncodeData_List is a list of EncodeData.
type EncodeData_List = capnp.StructList[EncodeData]

// NewEncodeData creates a new list of EncodeData.
func NewEncodeData_List(s *capnp.Segment, sz int32) (EncodeData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[EncodeData](l), err
}

// EncodeData_Future is a wrapper for a EncodeData promised by a client call.
type EncodeData_Future struct{ *capnp.Future }

func (f EncodeData_Future) Struct() (EncodeData, error) {
	p, err := f.Future.Ptr()
	return EncodeData(p.Struct()), err
}
func (p EncodeData_Future) Idx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}

type UserFlag capnp.Struct

// UserFlag_TypeID is the unique identifier for the type UserFlag.
const UserFlag_TypeID = 0xfe346a9de48d9b50

func NewUserFlag(s *capnp.Segment) (UserFlag, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserFlag(st), err
}

func NewRootUserFlag(s *capnp.Segment) (UserFlag, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserFlag(st), err
}

func ReadRootUserFlag(msg *capnp.Message) (UserFlag, error) {
	root, err := msg.Root()
	return UserFlag(root.Struct()), err
}

func (s UserFlag) String() string {
	str, _ := text.Marshal(0xfe346a9de48d9b50, capnp.Struct(s))
	return str
}

func (s UserFlag) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserFlag) DecodeFromPtr(p capnp.Ptr) UserFlag {
	return UserFlag(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserFlag) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserFlag) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserFlag) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserFlag) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserFlag_List is a list of UserFlag.
type UserFlag_List = capnp.StructList[UserFlag]

// NewUserFlag creates a new list of UserFlag.
func NewUserFlag_List(s *capnp.Segment, sz int32) (UserFlag_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserFlag](l), err
}

// UserFlag_Future is a wrapper for a UserFlag promised by a client call.
type UserFlag_Future struct{ *capnp.Future }

func (f UserFlag_Future) Struct() (UserFlag, error) {
	p, err := f.Future.Ptr()
	return UserFlag(p.Struct()), err
}

type Microphone capnp.Struct

// Microphone_TypeID is the unique identifier for the type Microphone.
const Microphone_TypeID = 0xdc24138990726023

func NewMicrophone(s *capnp.Segment) (Microphone, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Microphone(st), err
}

func NewRootMicrophone(s *capnp.Segment) (Microphone, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Microphone(st), err
}

func ReadRootMicrophone(msg *capnp.Message) (Microphone, error) {
	root, err := msg.Root()
	return Microphone(root.Struct()), err
}

func (s Microphone) String() string {
	str, _ := text.Marshal(0xdc24138990726023, capnp.Struct(s))
	return str
}

func (s Microphone) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Microphone) DecodeFromPtr(p capnp.Ptr) Microphone {
	return Microphone(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Microphone) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Microphone) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Microphone) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Microphone) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Microphone) SoundPressure() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Microphone) SetSoundPressure(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Microphone) SoundPressureWeighted() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s Microphone) SetSoundPressureWeighted(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s Microphone) SoundPressureWeightedDb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Microphone) SetSoundPressureWeightedDb(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Microphone) FilteredSoundPressureWeightedDb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s Microphone) SetFilteredSoundPressureWeightedDb(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// Microphone_List is a list of Microphone.
type Microphone_List = capnp.StructList[Microphone]

// NewMicrophone creates a new list of Microphone.
func NewMicrophone_List(s *capnp.Segment, sz int32) (Microphone_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Microphone](l), err
}

// Microphone_Future is a wrapper for a Microphone promised by a client call.
type Microphone_Future struct{ *capnp.Future }

func (f Microphone_Future) Struct() (Microphone, error) {
	p, err := f.Future.Ptr()
	return Microphone(p.Struct()), err
}

type Event capnp.Struct
type Event_Which uint16

const (
	Event_Which_initData                        Event_Which = 0
	Event_Which_sentinel                        Event_Which = 71
	Event_Which_boot                            Event_Which = 59
	Event_Which_gpsNMEA                         Event_Which = 2
	Event_Which_can                             Event_Which = 4
	Event_Which_controlsState                   Event_Which = 6
	Event_Which_gyroscope                       Event_Which = 97
	Event_Which_gyroscope2                      Event_Which = 98
	Event_Which_accelerometer                   Event_Which = 96
	Event_Which_accelerometer2                  Event_Which = 99
	Event_Which_magnetometer                    Event_Which = 93
	Event_Which_lightSensor                     Event_Which = 94
	Event_Which_temperatureSensor               Event_Which = 95
	Event_Which_temperatureSensor2              Event_Which = 121
	Event_Which_pandaStates                     Event_Which = 79
	Event_Which_peripheralState                 Event_Which = 78
	Event_Which_radarState                      Event_Which = 12
	Event_Which_liveTracks                      Event_Which = 15
	Event_Which_sendcan                         Event_Which = 16
	Event_Which_liveCalibration                 Event_Which = 18
	Event_Which_carState                        Event_Which = 21
	Event_Which_carControl                      Event_Which = 22
	Event_Which_longitudinalPlan                Event_Which = 23
	Event_Which_lateralPlan                     Event_Which = 63
	Event_Which_uiPlan                          Event_Which = 104
	Event_Which_ubloxGnss                       Event_Which = 33
	Event_Which_ubloxRaw                        Event_Which = 38
	Event_Which_qcomGnss                        Event_Which = 30
	Event_Which_gpsLocationExternal             Event_Which = 47
	Event_Which_gpsLocation                     Event_Which = 20
	Event_Which_gnssMeasurements                Event_Which = 89
	Event_Which_liveParameters                  Event_Which = 60
	Event_Which_liveTorqueParameters            Event_Which = 92
	Event_Which_cameraOdometry                  Event_Which = 62
	Event_Which_thumbnail                       Event_Which = 65
	Event_Which_carEvents                       Event_Which = 66
	Event_Which_carParams                       Event_Which = 67
	Event_Which_driverMonitoringState           Event_Which = 69
	Event_Which_liveLocationKalman              Event_Which = 70
	Event_Which_modelV2                         Event_Which = 73
	Event_Which_driverStateV2                   Event_Which = 90
	Event_Which_navModel                        Event_Which = 102
	Event_Which_roadCameraState                 Event_Which = 1
	Event_Which_driverCameraState               Event_Which = 68
	Event_Which_wideRoadCameraState             Event_Which = 72
	Event_Which_roadEncodeIdx                   Event_Which = 14
	Event_Which_driverEncodeIdx                 Event_Which = 74
	Event_Which_wideRoadEncodeIdx               Event_Which = 75
	Event_Which_qRoadEncodeIdx                  Event_Which = 88
	Event_Which_livestreamRoadEncodeIdx         Event_Which = 115
	Event_Which_livestreamWideRoadEncodeIdx     Event_Which = 116
	Event_Which_livestreamDriverEncodeIdx       Event_Which = 117
	Event_Which_microphone                      Event_Which = 101
	Event_Which_androidLog                      Event_Which = 19
	Event_Which_managerState                    Event_Which = 76
	Event_Which_uploaderState                   Event_Which = 77
	Event_Which_procLog                         Event_Which = 32
	Event_Which_clocks                          Event_Which = 34
	Event_Which_deviceState                     Event_Which = 5
	Event_Which_logMessage                      Event_Which = 17
	Event_Which_errorLogMessage                 Event_Which = 83
	Event_Which_navInstruction                  Event_Which = 80
	Event_Which_navRoute                        Event_Which = 81
	Event_Which_navThumbnail                    Event_Which = 82
	Event_Which_mapRenderState                  Event_Which = 103
	Event_Which_userFlag                        Event_Which = 91
	Event_Which_uiDebug                         Event_Which = 100
	Event_Which_testJoystick                    Event_Which = 51
	Event_Which_roadEncodeData                  Event_Which = 84
	Event_Which_driverEncodeData                Event_Which = 85
	Event_Which_wideRoadEncodeData              Event_Which = 86
	Event_Which_qRoadEncodeData                 Event_Which = 87
	Event_Which_livestreamRoadEncodeData        Event_Which = 118
	Event_Which_livestreamWideRoadEncodeData    Event_Which = 119
	Event_Which_livestreamDriverEncodeData      Event_Which = 120
	Event_Which_customReserved0                 Event_Which = 105
	Event_Which_customReserved1                 Event_Which = 106
	Event_Which_customReserved2                 Event_Which = 107
	Event_Which_customReserved3                 Event_Which = 108
	Event_Which_customReserved4                 Event_Which = 109
	Event_Which_customReserved5                 Event_Which = 110
	Event_Which_customReserved6                 Event_Which = 111
	Event_Which_customReserved7                 Event_Which = 112
	Event_Which_customReserved8                 Event_Which = 113
	Event_Which_customReserved9                 Event_Which = 114
	Event_Which_model                           Event_Which = 8
	Event_Which_liveMpcDEPRECATED               Event_Which = 35
	Event_Which_liveLongitudinalMpcDEPRECATED   Event_Which = 36
	Event_Which_liveLocationKalmanDEPRECATED    Event_Which = 50
	Event_Which_orbslamCorrectionDEPRECATED     Event_Which = 44
	Event_Which_liveUIDEPRECATED                Event_Which = 13
	Event_Which_sensorEventDEPRECATED           Event_Which = 3
	Event_Which_liveEventDEPRECATED             Event_Which = 7
	Event_Which_liveLocationDEPRECATED          Event_Which = 24
	Event_Which_ethernetDataDEPRECATED          Event_Which = 25
	Event_Which_cellInfoDEPRECATED              Event_Which = 27
	Event_Which_wifiScanDEPRECATED              Event_Which = 28
	Event_Which_uiNavigationEventDEPRECATED     Event_Which = 49
	Event_Which_liveMapDataDEPRECATED           Event_Which = 61
	Event_Which_gpsPlannerPointsDEPRECATED      Event_Which = 39
	Event_Which_gpsPlannerPlanDEPRECATED        Event_Which = 40
	Event_Which_applanixRawDEPRECATED           Event_Which = 41
	Event_Which_androidGnssDEPRECATED           Event_Which = 29
	Event_Which_lidarPtsDEPRECATED              Event_Which = 31
	Event_Which_navStatusDEPRECATED             Event_Which = 37
	Event_Which_trafficEventsDEPRECATED         Event_Which = 42
	Event_Which_liveLocationTimingDEPRECATED    Event_Which = 43
	Event_Which_liveLocationCorrectedDEPRECATED Event_Which = 45
	Event_Which_navUpdateDEPRECATED             Event_Which = 26
	Event_Which_orbObservationDEPRECATED        Event_Which = 46
	Event_Which_locationDEPRECATED              Event_Which = 48
	Event_Which_orbOdometryDEPRECATED           Event_Which = 52
	Event_Which_orbFeaturesDEPRECATED           Event_Which = 53
	Event_Which_applanixLocationDEPRECATED      Event_Which = 54
	Event_Which_orbKeyFrameDEPRECATED           Event_Which = 55
	Event_Which_orbFeaturesSummaryDEPRECATED    Event_Which = 57
	Event_Which_featuresDEPRECATED              Event_Which = 9
	Event_Which_kalmanOdometryDEPRECATED        Event_Which = 64
	Event_Which_uiLayoutStateDEPRECATED         Event_Which = 56
	Event_Which_pandaStateDEPRECATED            Event_Which = 11
	Event_Which_driverStateDEPRECATED           Event_Which = 58
	Event_Which_sensorEventsDEPRECATED          Event_Which = 10
)

func (w Event_Which) String() string {
	const s = "initDatasentinelbootgpsNMEAcancontrolsStategyroscopegyroscope2accelerometeraccelerometer2magnetometerlightSensortemperatureSensortemperatureSensor2pandaStatesperipheralStateradarStateliveTrackssendcanliveCalibrationcarStatecarControllongitudinalPlanlateralPlanuiPlanubloxGnssubloxRawqcomGnssgpsLocationExternalgpsLocationgnssMeasurementsliveParametersliveTorqueParameterscameraOdometrythumbnailcarEventscarParamsdriverMonitoringStateliveLocationKalmanmodelV2driverStateV2navModelroadCameraStatedriverCameraStatewideRoadCameraStateroadEncodeIdxdriverEncodeIdxwideRoadEncodeIdxqRoadEncodeIdxlivestreamRoadEncodeIdxlivestreamWideRoadEncodeIdxlivestreamDriverEncodeIdxmicrophoneandroidLogmanagerStateuploaderStateprocLogclocksdeviceStatelogMessageerrorLogMessagenavInstructionnavRoutenavThumbnailmapRenderStateuserFlaguiDebugtestJoystickroadEncodeDatadriverEncodeDatawideRoadEncodeDataqRoadEncodeDatalivestreamRoadEncodeDatalivestreamWideRoadEncodeDatalivestreamDriverEncodeDatacustomReserved0customReserved1customReserved2customReserved3customReserved4customReserved5customReserved6customReserved7customReserved8customReserved9modelliveMpcDEPRECATEDliveLongitudinalMpcDEPRECATEDliveLocationKalmanDEPRECATEDorbslamCorrectionDEPRECATEDliveUIDEPRECATEDsensorEventDEPRECATEDliveEventDEPRECATEDliveLocationDEPRECATEDethernetDataDEPRECATEDcellInfoDEPRECATEDwifiScanDEPRECATEDuiNavigationEventDEPRECATEDliveMapDataDEPRECATEDgpsPlannerPointsDEPRECATEDgpsPlannerPlanDEPRECATEDapplanixRawDEPRECATEDandroidGnssDEPRECATEDlidarPtsDEPRECATEDnavStatusDEPRECATEDtrafficEventsDEPRECATEDliveLocationTimingDEPRECATEDliveLocationCorrectedDEPRECATEDnavUpdateDEPRECATEDorbObservationDEPRECATEDlocationDEPRECATEDorbOdometryDEPRECATEDorbFeaturesDEPRECATEDapplanixLocationDEPRECATEDorbKeyFrameDEPRECATEDorbFeaturesSummaryDEPRECATEDfeaturesDEPRECATEDkalmanOdometryDEPRECATEDuiLayoutStateDEPRECATEDpandaStateDEPRECATEDdriverStateDEPRECATEDsensorEventsDEPRECATED"
	switch w {
	case Event_Which_initData:
		return s[0:8]
	case Event_Which_sentinel:
		return s[8:16]
	case Event_Which_boot:
		return s[16:20]
	case Event_Which_gpsNMEA:
		return s[20:27]
	case Event_Which_can:
		return s[27:30]
	case Event_Which_controlsState:
		return s[30:43]
	case Event_Which_gyroscope:
		return s[43:52]
	case Event_Which_gyroscope2:
		return s[52:62]
	case Event_Which_accelerometer:
		return s[62:75]
	case Event_Which_accelerometer2:
		return s[75:89]
	case Event_Which_magnetometer:
		return s[89:101]
	case Event_Which_lightSensor:
		return s[101:112]
	case Event_Which_temperatureSensor:
		return s[112:129]
	case Event_Which_temperatureSensor2:
		return s[129:147]
	case Event_Which_pandaStates:
		return s[147:158]
	case Event_Which_peripheralState:
		return s[158:173]
	case Event_Which_radarState:
		return s[173:183]
	case Event_Which_liveTracks:
		return s[183:193]
	case Event_Which_sendcan:
		return s[193:200]
	case Event_Which_liveCalibration:
		return s[200:215]
	case Event_Which_carState:
		return s[215:223]
	case Event_Which_carControl:
		return s[223:233]
	case Event_Which_longitudinalPlan:
		return s[233:249]
	case Event_Which_lateralPlan:
		return s[249:260]
	case Event_Which_uiPlan:
		return s[260:266]
	case Event_Which_ubloxGnss:
		return s[266:275]
	case Event_Which_ubloxRaw:
		return s[275:283]
	case Event_Which_qcomGnss:
		return s[283:291]
	case Event_Which_gpsLocationExternal:
		return s[291:310]
	case Event_Which_gpsLocation:
		return s[310:321]
	case Event_Which_gnssMeasurements:
		return s[321:337]
	case Event_Which_liveParameters:
		return s[337:351]
	case Event_Which_liveTorqueParameters:
		return s[351:371]
	case Event_Which_cameraOdometry:
		return s[371:385]
	case Event_Which_thumbnail:
		return s[385:394]
	case Event_Which_carEvents:
		return s[394:403]
	case Event_Which_carParams:
		return s[403:412]
	case Event_Which_driverMonitoringState:
		return s[412:433]
	case Event_Which_liveLocationKalman:
		return s[433:451]
	case Event_Which_modelV2:
		return s[451:458]
	case Event_Which_driverStateV2:
		return s[458:471]
	case Event_Which_navModel:
		return s[471:479]
	case Event_Which_roadCameraState:
		return s[479:494]
	case Event_Which_driverCameraState:
		return s[494:511]
	case Event_Which_wideRoadCameraState:
		return s[511:530]
	case Event_Which_roadEncodeIdx:
		return s[530:543]
	case Event_Which_driverEncodeIdx:
		return s[543:558]
	case Event_Which_wideRoadEncodeIdx:
		return s[558:575]
	case Event_Which_qRoadEncodeIdx:
		return s[575:589]
	case Event_Which_livestreamRoadEncodeIdx:
		return s[589:612]
	case Event_Which_livestreamWideRoadEncodeIdx:
		return s[612:639]
	case Event_Which_livestreamDriverEncodeIdx:
		return s[639:664]
	case Event_Which_microphone:
		return s[664:674]
	case Event_Which_androidLog:
		return s[674:684]
	case Event_Which_managerState:
		return s[684:696]
	case Event_Which_uploaderState:
		return s[696:709]
	case Event_Which_procLog:
		return s[709:716]
	case Event_Which_clocks:
		return s[716:722]
	case Event_Which_deviceState:
		return s[722:733]
	case Event_Which_logMessage:
		return s[733:743]
	case Event_Which_errorLogMessage:
		return s[743:758]
	case Event_Which_navInstruction:
		return s[758:772]
	case Event_Which_navRoute:
		return s[772:780]
	case Event_Which_navThumbnail:
		return s[780:792]
	case Event_Which_mapRenderState:
		return s[792:806]
	case Event_Which_userFlag:
		return s[806:814]
	case Event_Which_uiDebug:
		return s[814:821]
	case Event_Which_testJoystick:
		return s[821:833]
	case Event_Which_roadEncodeData:
		return s[833:847]
	case Event_Which_driverEncodeData:
		return s[847:863]
	case Event_Which_wideRoadEncodeData:
		return s[863:881]
	case Event_Which_qRoadEncodeData:
		return s[881:896]
	case Event_Which_livestreamRoadEncodeData:
		return s[896:920]
	case Event_Which_livestreamWideRoadEncodeData:
		return s[920:948]
	case Event_Which_livestreamDriverEncodeData:
		return s[948:974]
	case Event_Which_customReserved0:
		return s[974:989]
	case Event_Which_customReserved1:
		return s[989:1004]
	case Event_Which_customReserved2:
		return s[1004:1019]
	case Event_Which_customReserved3:
		return s[1019:1034]
	case Event_Which_customReserved4:
		return s[1034:1049]
	case Event_Which_customReserved5:
		return s[1049:1064]
	case Event_Which_customReserved6:
		return s[1064:1079]
	case Event_Which_customReserved7:
		return s[1079:1094]
	case Event_Which_customReserved8:
		return s[1094:1109]
	case Event_Which_customReserved9:
		return s[1109:1124]
	case Event_Which_model:
		return s[1124:1129]
	case Event_Which_liveMpcDEPRECATED:
		return s[1129:1146]
	case Event_Which_liveLongitudinalMpcDEPRECATED:
		return s[1146:1175]
	case Event_Which_liveLocationKalmanDEPRECATED:
		return s[1175:1203]
	case Event_Which_orbslamCorrectionDEPRECATED:
		return s[1203:1230]
	case Event_Which_liveUIDEPRECATED:
		return s[1230:1246]
	case Event_Which_sensorEventDEPRECATED:
		return s[1246:1267]
	case Event_Which_liveEventDEPRECATED:
		return s[1267:1286]
	case Event_Which_liveLocationDEPRECATED:
		return s[1286:1308]
	case Event_Which_ethernetDataDEPRECATED:
		return s[1308:1330]
	case Event_Which_cellInfoDEPRECATED:
		return s[1330:1348]
	case Event_Which_wifiScanDEPRECATED:
		return s[1348:1366]
	case Event_Which_uiNavigationEventDEPRECATED:
		return s[1366:1393]
	case Event_Which_liveMapDataDEPRECATED:
		return s[1393:1414]
	case Event_Which_gpsPlannerPointsDEPRECATED:
		return s[1414:1440]
	case Event_Which_gpsPlannerPlanDEPRECATED:
		return s[1440:1464]
	case Event_Which_applanixRawDEPRECATED:
		return s[1464:1485]
	case Event_Which_androidGnssDEPRECATED:
		return s[1485:1506]
	case Event_Which_lidarPtsDEPRECATED:
		return s[1506:1524]
	case Event_Which_navStatusDEPRECATED:
		return s[1524:1543]
	case Event_Which_trafficEventsDEPRECATED:
		return s[1543:1566]
	case Event_Which_liveLocationTimingDEPRECATED:
		return s[1566:1594]
	case Event_Which_liveLocationCorrectedDEPRECATED:
		return s[1594:1625]
	case Event_Which_navUpdateDEPRECATED:
		return s[1625:1644]
	case Event_Which_orbObservationDEPRECATED:
		return s[1644:1668]
	case Event_Which_locationDEPRECATED:
		return s[1668:1686]
	case Event_Which_orbOdometryDEPRECATED:
		return s[1686:1707]
	case Event_Which_orbFeaturesDEPRECATED:
		return s[1707:1728]
	case Event_Which_applanixLocationDEPRECATED:
		return s[1728:1754]
	case Event_Which_orbKeyFrameDEPRECATED:
		return s[1754:1775]
	case Event_Which_orbFeaturesSummaryDEPRECATED:
		return s[1775:1803]
	case Event_Which_featuresDEPRECATED:
		return s[1803:1821]
	case Event_Which_kalmanOdometryDEPRECATED:
		return s[1821:1845]
	case Event_Which_uiLayoutStateDEPRECATED:
		return s[1845:1868]
	case Event_Which_pandaStateDEPRECATED:
		return s[1868:1888]
	case Event_Which_driverStateDEPRECATED:
		return s[1888:1909]
	case Event_Which_sensorEventsDEPRECATED:
		return s[1909:1931]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xd314cfd957229c11

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xd314cfd957229c11, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(8))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) LogMonoTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Event) SetLogMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Event) Valid() bool {
	return !capnp.Struct(s).Bit(80)
}

func (s Event) SetValid(v bool) {
	capnp.Struct(s).SetBit(80, !v)
}

func (s Event) InitData() (InitData, error) {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != initData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return InitData(p.Struct()), err
}

func (s Event) HasInitData() bool {
	if capnp.Struct(s).Uint16(8) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInitData(v InitData) error {
	capnp.Struct(s).SetUint16(8, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInitData sets the initData field to a newly
// allocated InitData struct, preferring placement in s's segment.
func (s Event) NewInitData() (InitData, error) {
	capnp.Struct(s).SetUint16(8, 0)
	ss, err := NewInitData(capnp.Struct(s).Segment())
	if err != nil {
		return InitData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Sentinel() (Sentinel, error) {
	if capnp.Struct(s).Uint16(8) != 71 {
		panic("Which() != sentinel")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Sentinel(p.Struct()), err
}

func (s Event) HasSentinel() bool {
	if capnp.Struct(s).Uint16(8) != 71 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetSentinel(v Sentinel) error {
	capnp.Struct(s).SetUint16(8, 71)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSentinel sets the sentinel field to a newly
// allocated Sentinel struct, preferring placement in s's segment.
func (s Event) NewSentinel() (Sentinel, error) {
	capnp.Struct(s).SetUint16(8, 71)
	ss, err := NewSentinel(capnp.Struct(s).Segment())
	if err != nil {
		return Sentinel{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Boot() (Boot, error) {
	if capnp.Struct(s).Uint16(8) != 59 {
		panic("Which() != boot")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Boot(p.Struct()), err
}

func (s Event) HasBoot() bool {
	if capnp.Struct(s).Uint16(8) != 59 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetBoot(v Boot) error {
	capnp.Struct(s).SetUint16(8, 59)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewBoot sets the boot field to a newly
// allocated Boot struct, preferring placement in s's segment.
func (s Event) NewBoot() (Boot, error) {
	capnp.Struct(s).SetUint16(8, 59)
	ss, err := NewBoot(capnp.Struct(s).Segment())
	if err != nil {
		return Boot{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GpsNMEA() (GPSNMEAData, error) {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != gpsNMEA")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GPSNMEAData(p.Struct()), err
}

func (s Event) HasGpsNMEA() bool {
	if capnp.Struct(s).Uint16(8) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGpsNMEA(v GPSNMEAData) error {
	capnp.Struct(s).SetUint16(8, 2)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGpsNMEA sets the gpsNMEA field to a newly
// allocated GPSNMEAData struct, preferring placement in s's segment.
func (s Event) NewGpsNMEA() (GPSNMEAData, error) {
	capnp.Struct(s).SetUint16(8, 2)
	ss, err := NewGPSNMEAData(capnp.Struct(s).Segment())
	if err != nil {
		return GPSNMEAData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Can() (CanData_List, error) {
	if capnp.Struct(s).Uint16(8) != 4 {
		panic("Which() != can")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CanData_List(p.List()), err
}

func (s Event) HasCan() bool {
	if capnp.Struct(s).Uint16(8) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCan(v CanData_List) error {
	capnp.Struct(s).SetUint16(8, 4)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCan sets the can field to a newly
// allocated CanData_List, preferring placement in s's segment.
func (s Event) NewCan(n int32) (CanData_List, error) {
	capnp.Struct(s).SetUint16(8, 4)
	l, err := NewCanData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CanData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) ControlsState() (ControlsState, error) {
	if capnp.Struct(s).Uint16(8) != 6 {
		panic("Which() != controlsState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ControlsState(p.Struct()), err
}

func (s Event) HasControlsState() bool {
	if capnp.Struct(s).Uint16(8) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetControlsState(v ControlsState) error {
	capnp.Struct(s).SetUint16(8, 6)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewControlsState sets the controlsState field to a newly
// allocated ControlsState struct, preferring placement in s's segment.
func (s Event) NewControlsState() (ControlsState, error) {
	capnp.Struct(s).SetUint16(8, 6)
	ss, err := NewControlsState(capnp.Struct(s).Segment())
	if err != nil {
		return ControlsState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Gyroscope() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 97 {
		panic("Which() != gyroscope")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasGyroscope() bool {
	if capnp.Struct(s).Uint16(8) != 97 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGyroscope(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 97)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGyroscope sets the gyroscope field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewGyroscope() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 97)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Gyroscope2() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 98 {
		panic("Which() != gyroscope2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasGyroscope2() bool {
	if capnp.Struct(s).Uint16(8) != 98 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGyroscope2(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 98)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGyroscope2 sets the gyroscope2 field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewGyroscope2() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 98)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Accelerometer() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 96 {
		panic("Which() != accelerometer")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasAccelerometer() bool {
	if capnp.Struct(s).Uint16(8) != 96 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetAccelerometer(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 96)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAccelerometer sets the accelerometer field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewAccelerometer() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 96)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Accelerometer2() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 99 {
		panic("Which() != accelerometer2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasAccelerometer2() bool {
	if capnp.Struct(s).Uint16(8) != 99 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetAccelerometer2(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 99)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAccelerometer2 sets the accelerometer2 field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewAccelerometer2() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 99)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Magnetometer() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 93 {
		panic("Which() != magnetometer")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasMagnetometer() bool {
	if capnp.Struct(s).Uint16(8) != 93 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetMagnetometer(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 93)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMagnetometer sets the magnetometer field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewMagnetometer() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 93)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LightSensor() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 94 {
		panic("Which() != lightSensor")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasLightSensor() bool {
	if capnp.Struct(s).Uint16(8) != 94 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLightSensor(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 94)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLightSensor sets the lightSensor field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewLightSensor() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 94)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) TemperatureSensor() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 95 {
		panic("Which() != temperatureSensor")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasTemperatureSensor() bool {
	if capnp.Struct(s).Uint16(8) != 95 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetTemperatureSensor(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 95)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTemperatureSensor sets the temperatureSensor field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewTemperatureSensor() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 95)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) TemperatureSensor2() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 121 {
		panic("Which() != temperatureSensor2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasTemperatureSensor2() bool {
	if capnp.Struct(s).Uint16(8) != 121 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetTemperatureSensor2(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 121)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTemperatureSensor2 sets the temperatureSensor2 field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewTemperatureSensor2() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 121)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) PandaStates() (PandaState_List, error) {
	if capnp.Struct(s).Uint16(8) != 79 {
		panic("Which() != pandaStates")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PandaState_List(p.List()), err
}

func (s Event) HasPandaStates() bool {
	if capnp.Struct(s).Uint16(8) != 79 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetPandaStates(v PandaState_List) error {
	capnp.Struct(s).SetUint16(8, 79)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPandaStates sets the pandaStates field to a newly
// allocated PandaState_List, preferring placement in s's segment.
func (s Event) NewPandaStates(n int32) (PandaState_List, error) {
	capnp.Struct(s).SetUint16(8, 79)
	l, err := NewPandaState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PandaState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) PeripheralState() (PeripheralState, error) {
	if capnp.Struct(s).Uint16(8) != 78 {
		panic("Which() != peripheralState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PeripheralState(p.Struct()), err
}

func (s Event) HasPeripheralState() bool {
	if capnp.Struct(s).Uint16(8) != 78 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetPeripheralState(v PeripheralState) error {
	capnp.Struct(s).SetUint16(8, 78)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPeripheralState sets the peripheralState field to a newly
// allocated PeripheralState struct, preferring placement in s's segment.
func (s Event) NewPeripheralState() (PeripheralState, error) {
	capnp.Struct(s).SetUint16(8, 78)
	ss, err := NewPeripheralState(capnp.Struct(s).Segment())
	if err != nil {
		return PeripheralState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) RadarState() (RadarState, error) {
	if capnp.Struct(s).Uint16(8) != 12 {
		panic("Which() != radarState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return RadarState(p.Struct()), err
}

func (s Event) HasRadarState() bool {
	if capnp.Struct(s).Uint16(8) != 12 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetRadarState(v RadarState) error {
	capnp.Struct(s).SetUint16(8, 12)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRadarState sets the radarState field to a newly
// allocated RadarState struct, preferring placement in s's segment.
func (s Event) NewRadarState() (RadarState, error) {
	capnp.Struct(s).SetUint16(8, 12)
	ss, err := NewRadarState(capnp.Struct(s).Segment())
	if err != nil {
		return RadarState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveTracks() (LiveTracks_List, error) {
	if capnp.Struct(s).Uint16(8) != 15 {
		panic("Which() != liveTracks")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveTracks_List(p.List()), err
}

func (s Event) HasLiveTracks() bool {
	if capnp.Struct(s).Uint16(8) != 15 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveTracks(v LiveTracks_List) error {
	capnp.Struct(s).SetUint16(8, 15)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLiveTracks sets the liveTracks field to a newly
// allocated LiveTracks_List, preferring placement in s's segment.
func (s Event) NewLiveTracks(n int32) (LiveTracks_List, error) {
	capnp.Struct(s).SetUint16(8, 15)
	l, err := NewLiveTracks_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return LiveTracks_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) Sendcan() (CanData_List, error) {
	if capnp.Struct(s).Uint16(8) != 16 {
		panic("Which() != sendcan")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CanData_List(p.List()), err
}

func (s Event) HasSendcan() bool {
	if capnp.Struct(s).Uint16(8) != 16 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetSendcan(v CanData_List) error {
	capnp.Struct(s).SetUint16(8, 16)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSendcan sets the sendcan field to a newly
// allocated CanData_List, preferring placement in s's segment.
func (s Event) NewSendcan(n int32) (CanData_List, error) {
	capnp.Struct(s).SetUint16(8, 16)
	l, err := NewCanData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CanData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) LiveCalibration() (LiveCalibrationData, error) {
	if capnp.Struct(s).Uint16(8) != 18 {
		panic("Which() != liveCalibration")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveCalibrationData(p.Struct()), err
}

func (s Event) HasLiveCalibration() bool {
	if capnp.Struct(s).Uint16(8) != 18 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveCalibration(v LiveCalibrationData) error {
	capnp.Struct(s).SetUint16(8, 18)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveCalibration sets the liveCalibration field to a newly
// allocated LiveCalibrationData struct, preferring placement in s's segment.
func (s Event) NewLiveCalibration() (LiveCalibrationData, error) {
	capnp.Struct(s).SetUint16(8, 18)
	ss, err := NewLiveCalibrationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveCalibrationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CarState() (CarState, error) {
	if capnp.Struct(s).Uint16(8) != 21 {
		panic("Which() != carState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CarState(p.Struct()), err
}

func (s Event) HasCarState() bool {
	if capnp.Struct(s).Uint16(8) != 21 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCarState(v CarState) error {
	capnp.Struct(s).SetUint16(8, 21)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCarState sets the carState field to a newly
// allocated CarState struct, preferring placement in s's segment.
func (s Event) NewCarState() (CarState, error) {
	capnp.Struct(s).SetUint16(8, 21)
	ss, err := NewCarState(capnp.Struct(s).Segment())
	if err != nil {
		return CarState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CarControl() (CarControl, error) {
	if capnp.Struct(s).Uint16(8) != 22 {
		panic("Which() != carControl")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CarControl(p.Struct()), err
}

func (s Event) HasCarControl() bool {
	if capnp.Struct(s).Uint16(8) != 22 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCarControl(v CarControl) error {
	capnp.Struct(s).SetUint16(8, 22)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCarControl sets the carControl field to a newly
// allocated CarControl struct, preferring placement in s's segment.
func (s Event) NewCarControl() (CarControl, error) {
	capnp.Struct(s).SetUint16(8, 22)
	ss, err := NewCarControl(capnp.Struct(s).Segment())
	if err != nil {
		return CarControl{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LongitudinalPlan() (LongitudinalPlan, error) {
	if capnp.Struct(s).Uint16(8) != 23 {
		panic("Which() != longitudinalPlan")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LongitudinalPlan(p.Struct()), err
}

func (s Event) HasLongitudinalPlan() bool {
	if capnp.Struct(s).Uint16(8) != 23 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLongitudinalPlan(v LongitudinalPlan) error {
	capnp.Struct(s).SetUint16(8, 23)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLongitudinalPlan sets the longitudinalPlan field to a newly
// allocated LongitudinalPlan struct, preferring placement in s's segment.
func (s Event) NewLongitudinalPlan() (LongitudinalPlan, error) {
	capnp.Struct(s).SetUint16(8, 23)
	ss, err := NewLongitudinalPlan(capnp.Struct(s).Segment())
	if err != nil {
		return LongitudinalPlan{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LateralPlan() (LateralPlan, error) {
	if capnp.Struct(s).Uint16(8) != 63 {
		panic("Which() != lateralPlan")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LateralPlan(p.Struct()), err
}

func (s Event) HasLateralPlan() bool {
	if capnp.Struct(s).Uint16(8) != 63 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLateralPlan(v LateralPlan) error {
	capnp.Struct(s).SetUint16(8, 63)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLateralPlan sets the lateralPlan field to a newly
// allocated LateralPlan struct, preferring placement in s's segment.
func (s Event) NewLateralPlan() (LateralPlan, error) {
	capnp.Struct(s).SetUint16(8, 63)
	ss, err := NewLateralPlan(capnp.Struct(s).Segment())
	if err != nil {
		return LateralPlan{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UiPlan() (UiPlan, error) {
	if capnp.Struct(s).Uint16(8) != 104 {
		panic("Which() != uiPlan")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UiPlan(p.Struct()), err
}

func (s Event) HasUiPlan() bool {
	if capnp.Struct(s).Uint16(8) != 104 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUiPlan(v UiPlan) error {
	capnp.Struct(s).SetUint16(8, 104)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUiPlan sets the uiPlan field to a newly
// allocated UiPlan struct, preferring placement in s's segment.
func (s Event) NewUiPlan() (UiPlan, error) {
	capnp.Struct(s).SetUint16(8, 104)
	ss, err := NewUiPlan(capnp.Struct(s).Segment())
	if err != nil {
		return UiPlan{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UbloxGnss() (UbloxGnss, error) {
	if capnp.Struct(s).Uint16(8) != 33 {
		panic("Which() != ubloxGnss")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UbloxGnss(p.Struct()), err
}

func (s Event) HasUbloxGnss() bool {
	if capnp.Struct(s).Uint16(8) != 33 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUbloxGnss(v UbloxGnss) error {
	capnp.Struct(s).SetUint16(8, 33)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUbloxGnss sets the ubloxGnss field to a newly
// allocated UbloxGnss struct, preferring placement in s's segment.
func (s Event) NewUbloxGnss() (UbloxGnss, error) {
	capnp.Struct(s).SetUint16(8, 33)
	ss, err := NewUbloxGnss(capnp.Struct(s).Segment())
	if err != nil {
		return UbloxGnss{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UbloxRaw() ([]byte, error) {
	if capnp.Struct(s).Uint16(8) != 38 {
		panic("Which() != ubloxRaw")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasUbloxRaw() bool {
	if capnp.Struct(s).Uint16(8) != 38 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUbloxRaw(v []byte) error {
	capnp.Struct(s).SetUint16(8, 38)
	return capnp.Struct(s).SetData(0, v)
}

func (s Event) QcomGnss() (QcomGnss, error) {
	if capnp.Struct(s).Uint16(8) != 30 {
		panic("Which() != qcomGnss")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return QcomGnss(p.Struct()), err
}

func (s Event) HasQcomGnss() bool {
	if capnp.Struct(s).Uint16(8) != 30 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetQcomGnss(v QcomGnss) error {
	capnp.Struct(s).SetUint16(8, 30)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewQcomGnss sets the qcomGnss field to a newly
// allocated QcomGnss struct, preferring placement in s's segment.
func (s Event) NewQcomGnss() (QcomGnss, error) {
	capnp.Struct(s).SetUint16(8, 30)
	ss, err := NewQcomGnss(capnp.Struct(s).Segment())
	if err != nil {
		return QcomGnss{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GpsLocationExternal() (GpsLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 47 {
		panic("Which() != gpsLocationExternal")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GpsLocationData(p.Struct()), err
}

func (s Event) HasGpsLocationExternal() bool {
	if capnp.Struct(s).Uint16(8) != 47 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGpsLocationExternal(v GpsLocationData) error {
	capnp.Struct(s).SetUint16(8, 47)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGpsLocationExternal sets the gpsLocationExternal field to a newly
// allocated GpsLocationData struct, preferring placement in s's segment.
func (s Event) NewGpsLocationExternal() (GpsLocationData, error) {
	capnp.Struct(s).SetUint16(8, 47)
	ss, err := NewGpsLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return GpsLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GpsLocation() (GpsLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 20 {
		panic("Which() != gpsLocation")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GpsLocationData(p.Struct()), err
}

func (s Event) HasGpsLocation() bool {
	if capnp.Struct(s).Uint16(8) != 20 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGpsLocation(v GpsLocationData) error {
	capnp.Struct(s).SetUint16(8, 20)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGpsLocation sets the gpsLocation field to a newly
// allocated GpsLocationData struct, preferring placement in s's segment.
func (s Event) NewGpsLocation() (GpsLocationData, error) {
	capnp.Struct(s).SetUint16(8, 20)
	ss, err := NewGpsLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return GpsLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GnssMeasurements() (GnssMeasurements, error) {
	if capnp.Struct(s).Uint16(8) != 89 {
		panic("Which() != gnssMeasurements")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GnssMeasurements(p.Struct()), err
}

func (s Event) HasGnssMeasurements() bool {
	if capnp.Struct(s).Uint16(8) != 89 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGnssMeasurements(v GnssMeasurements) error {
	capnp.Struct(s).SetUint16(8, 89)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGnssMeasurements sets the gnssMeasurements field to a newly
// allocated GnssMeasurements struct, preferring placement in s's segment.
func (s Event) NewGnssMeasurements() (GnssMeasurements, error) {
	capnp.Struct(s).SetUint16(8, 89)
	ss, err := NewGnssMeasurements(capnp.Struct(s).Segment())
	if err != nil {
		return GnssMeasurements{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveParameters() (LiveParametersData, error) {
	if capnp.Struct(s).Uint16(8) != 60 {
		panic("Which() != liveParameters")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveParametersData(p.Struct()), err
}

func (s Event) HasLiveParameters() bool {
	if capnp.Struct(s).Uint16(8) != 60 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveParameters(v LiveParametersData) error {
	capnp.Struct(s).SetUint16(8, 60)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveParameters sets the liveParameters field to a newly
// allocated LiveParametersData struct, preferring placement in s's segment.
func (s Event) NewLiveParameters() (LiveParametersData, error) {
	capnp.Struct(s).SetUint16(8, 60)
	ss, err := NewLiveParametersData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveParametersData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveTorqueParameters() (LiveTorqueParametersData, error) {
	if capnp.Struct(s).Uint16(8) != 92 {
		panic("Which() != liveTorqueParameters")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveTorqueParametersData(p.Struct()), err
}

func (s Event) HasLiveTorqueParameters() bool {
	if capnp.Struct(s).Uint16(8) != 92 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveTorqueParameters(v LiveTorqueParametersData) error {
	capnp.Struct(s).SetUint16(8, 92)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveTorqueParameters sets the liveTorqueParameters field to a newly
// allocated LiveTorqueParametersData struct, preferring placement in s's segment.
func (s Event) NewLiveTorqueParameters() (LiveTorqueParametersData, error) {
	capnp.Struct(s).SetUint16(8, 92)
	ss, err := NewLiveTorqueParametersData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveTorqueParametersData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CameraOdometry() (CameraOdometry, error) {
	if capnp.Struct(s).Uint16(8) != 62 {
		panic("Which() != cameraOdometry")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CameraOdometry(p.Struct()), err
}

func (s Event) HasCameraOdometry() bool {
	if capnp.Struct(s).Uint16(8) != 62 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCameraOdometry(v CameraOdometry) error {
	capnp.Struct(s).SetUint16(8, 62)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCameraOdometry sets the cameraOdometry field to a newly
// allocated CameraOdometry struct, preferring placement in s's segment.
func (s Event) NewCameraOdometry() (CameraOdometry, error) {
	capnp.Struct(s).SetUint16(8, 62)
	ss, err := NewCameraOdometry(capnp.Struct(s).Segment())
	if err != nil {
		return CameraOdometry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Thumbnail() (Thumbnail, error) {
	if capnp.Struct(s).Uint16(8) != 65 {
		panic("Which() != thumbnail")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Thumbnail(p.Struct()), err
}

func (s Event) HasThumbnail() bool {
	if capnp.Struct(s).Uint16(8) != 65 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetThumbnail(v Thumbnail) error {
	capnp.Struct(s).SetUint16(8, 65)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewThumbnail sets the thumbnail field to a newly
// allocated Thumbnail struct, preferring placement in s's segment.
func (s Event) NewThumbnail() (Thumbnail, error) {
	capnp.Struct(s).SetUint16(8, 65)
	ss, err := NewThumbnail(capnp.Struct(s).Segment())
	if err != nil {
		return Thumbnail{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CarEvents() (CarEvent_List, error) {
	if capnp.Struct(s).Uint16(8) != 66 {
		panic("Which() != carEvents")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CarEvent_List(p.List()), err
}

func (s Event) HasCarEvents() bool {
	if capnp.Struct(s).Uint16(8) != 66 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCarEvents(v CarEvent_List) error {
	capnp.Struct(s).SetUint16(8, 66)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCarEvents sets the carEvents field to a newly
// allocated CarEvent_List, preferring placement in s's segment.
func (s Event) NewCarEvents(n int32) (CarEvent_List, error) {
	capnp.Struct(s).SetUint16(8, 66)
	l, err := NewCarEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) CarParams() (CarParams, error) {
	if capnp.Struct(s).Uint16(8) != 67 {
		panic("Which() != carParams")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CarParams(p.Struct()), err
}

func (s Event) HasCarParams() bool {
	if capnp.Struct(s).Uint16(8) != 67 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCarParams(v CarParams) error {
	capnp.Struct(s).SetUint16(8, 67)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCarParams sets the carParams field to a newly
// allocated CarParams struct, preferring placement in s's segment.
func (s Event) NewCarParams() (CarParams, error) {
	capnp.Struct(s).SetUint16(8, 67)
	ss, err := NewCarParams(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverMonitoringState() (DriverMonitoringState, error) {
	if capnp.Struct(s).Uint16(8) != 69 {
		panic("Which() != driverMonitoringState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DriverMonitoringState(p.Struct()), err
}

func (s Event) HasDriverMonitoringState() bool {
	if capnp.Struct(s).Uint16(8) != 69 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverMonitoringState(v DriverMonitoringState) error {
	capnp.Struct(s).SetUint16(8, 69)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverMonitoringState sets the driverMonitoringState field to a newly
// allocated DriverMonitoringState struct, preferring placement in s's segment.
func (s Event) NewDriverMonitoringState() (DriverMonitoringState, error) {
	capnp.Struct(s).SetUint16(8, 69)
	ss, err := NewDriverMonitoringState(capnp.Struct(s).Segment())
	if err != nil {
		return DriverMonitoringState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveLocationKalman() (LiveLocationKalman, error) {
	if capnp.Struct(s).Uint16(8) != 70 {
		panic("Which() != liveLocationKalman")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationKalman(p.Struct()), err
}

func (s Event) HasLiveLocationKalman() bool {
	if capnp.Struct(s).Uint16(8) != 70 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLocationKalman(v LiveLocationKalman) error {
	capnp.Struct(s).SetUint16(8, 70)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLocationKalman sets the liveLocationKalman field to a newly
// allocated LiveLocationKalman struct, preferring placement in s's segment.
func (s Event) NewLiveLocationKalman() (LiveLocationKalman, error) {
	capnp.Struct(s).SetUint16(8, 70)
	ss, err := NewLiveLocationKalman(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationKalman{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) ModelV2() (ModelDataV2, error) {
	if capnp.Struct(s).Uint16(8) != 73 {
		panic("Which() != modelV2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ModelDataV2(p.Struct()), err
}

func (s Event) HasModelV2() bool {
	if capnp.Struct(s).Uint16(8) != 73 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetModelV2(v ModelDataV2) error {
	capnp.Struct(s).SetUint16(8, 73)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModelV2 sets the modelV2 field to a newly
// allocated ModelDataV2 struct, preferring placement in s's segment.
func (s Event) NewModelV2() (ModelDataV2, error) {
	capnp.Struct(s).SetUint16(8, 73)
	ss, err := NewModelDataV2(capnp.Struct(s).Segment())
	if err != nil {
		return ModelDataV2{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverStateV2() (DriverStateV2, error) {
	if capnp.Struct(s).Uint16(8) != 90 {
		panic("Which() != driverStateV2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DriverStateV2(p.Struct()), err
}

func (s Event) HasDriverStateV2() bool {
	if capnp.Struct(s).Uint16(8) != 90 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverStateV2(v DriverStateV2) error {
	capnp.Struct(s).SetUint16(8, 90)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverStateV2 sets the driverStateV2 field to a newly
// allocated DriverStateV2 struct, preferring placement in s's segment.
func (s Event) NewDriverStateV2() (DriverStateV2, error) {
	capnp.Struct(s).SetUint16(8, 90)
	ss, err := NewDriverStateV2(capnp.Struct(s).Segment())
	if err != nil {
		return DriverStateV2{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) NavModel() (NavModelData, error) {
	if capnp.Struct(s).Uint16(8) != 102 {
		panic("Which() != navModel")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return NavModelData(p.Struct()), err
}

func (s Event) HasNavModel() bool {
	if capnp.Struct(s).Uint16(8) != 102 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavModel(v NavModelData) error {
	capnp.Struct(s).SetUint16(8, 102)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavModel sets the navModel field to a newly
// allocated NavModelData struct, preferring placement in s's segment.
func (s Event) NewNavModel() (NavModelData, error) {
	capnp.Struct(s).SetUint16(8, 102)
	ss, err := NewNavModelData(capnp.Struct(s).Segment())
	if err != nil {
		return NavModelData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) RoadCameraState() (FrameData, error) {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != roadCameraState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return FrameData(p.Struct()), err
}

func (s Event) HasRoadCameraState() bool {
	if capnp.Struct(s).Uint16(8) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetRoadCameraState(v FrameData) error {
	capnp.Struct(s).SetUint16(8, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRoadCameraState sets the roadCameraState field to a newly
// allocated FrameData struct, preferring placement in s's segment.
func (s Event) NewRoadCameraState() (FrameData, error) {
	capnp.Struct(s).SetUint16(8, 1)
	ss, err := NewFrameData(capnp.Struct(s).Segment())
	if err != nil {
		return FrameData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverCameraState() (FrameData, error) {
	if capnp.Struct(s).Uint16(8) != 68 {
		panic("Which() != driverCameraState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return FrameData(p.Struct()), err
}

func (s Event) HasDriverCameraState() bool {
	if capnp.Struct(s).Uint16(8) != 68 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverCameraState(v FrameData) error {
	capnp.Struct(s).SetUint16(8, 68)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverCameraState sets the driverCameraState field to a newly
// allocated FrameData struct, preferring placement in s's segment.
func (s Event) NewDriverCameraState() (FrameData, error) {
	capnp.Struct(s).SetUint16(8, 68)
	ss, err := NewFrameData(capnp.Struct(s).Segment())
	if err != nil {
		return FrameData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) WideRoadCameraState() (FrameData, error) {
	if capnp.Struct(s).Uint16(8) != 72 {
		panic("Which() != wideRoadCameraState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return FrameData(p.Struct()), err
}

func (s Event) HasWideRoadCameraState() bool {
	if capnp.Struct(s).Uint16(8) != 72 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetWideRoadCameraState(v FrameData) error {
	capnp.Struct(s).SetUint16(8, 72)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewWideRoadCameraState sets the wideRoadCameraState field to a newly
// allocated FrameData struct, preferring placement in s's segment.
func (s Event) NewWideRoadCameraState() (FrameData, error) {
	capnp.Struct(s).SetUint16(8, 72)
	ss, err := NewFrameData(capnp.Struct(s).Segment())
	if err != nil {
		return FrameData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) RoadEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 14 {
		panic("Which() != roadEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasRoadEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 14 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetRoadEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 14)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRoadEncodeIdx sets the roadEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewRoadEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 14)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 74 {
		panic("Which() != driverEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasDriverEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 74 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 74)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverEncodeIdx sets the driverEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewDriverEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 74)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) WideRoadEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 75 {
		panic("Which() != wideRoadEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasWideRoadEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 75 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetWideRoadEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 75)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewWideRoadEncodeIdx sets the wideRoadEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewWideRoadEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 75)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) QRoadEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 88 {
		panic("Which() != qRoadEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasQRoadEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 88 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetQRoadEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 88)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewQRoadEncodeIdx sets the qRoadEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewQRoadEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 88)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamRoadEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 115 {
		panic("Which() != livestreamRoadEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasLivestreamRoadEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 115 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamRoadEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 115)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamRoadEncodeIdx sets the livestreamRoadEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewLivestreamRoadEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 115)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamWideRoadEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 116 {
		panic("Which() != livestreamWideRoadEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasLivestreamWideRoadEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 116 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamWideRoadEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 116)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamWideRoadEncodeIdx sets the livestreamWideRoadEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewLivestreamWideRoadEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 116)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamDriverEncodeIdx() (EncodeIndex, error) {
	if capnp.Struct(s).Uint16(8) != 117 {
		panic("Which() != livestreamDriverEncodeIdx")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeIndex(p.Struct()), err
}

func (s Event) HasLivestreamDriverEncodeIdx() bool {
	if capnp.Struct(s).Uint16(8) != 117 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamDriverEncodeIdx(v EncodeIndex) error {
	capnp.Struct(s).SetUint16(8, 117)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamDriverEncodeIdx sets the livestreamDriverEncodeIdx field to a newly
// allocated EncodeIndex struct, preferring placement in s's segment.
func (s Event) NewLivestreamDriverEncodeIdx() (EncodeIndex, error) {
	capnp.Struct(s).SetUint16(8, 117)
	ss, err := NewEncodeIndex(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeIndex{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Microphone() (Microphone, error) {
	if capnp.Struct(s).Uint16(8) != 101 {
		panic("Which() != microphone")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Microphone(p.Struct()), err
}

func (s Event) HasMicrophone() bool {
	if capnp.Struct(s).Uint16(8) != 101 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetMicrophone(v Microphone) error {
	capnp.Struct(s).SetUint16(8, 101)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMicrophone sets the microphone field to a newly
// allocated Microphone struct, preferring placement in s's segment.
func (s Event) NewMicrophone() (Microphone, error) {
	capnp.Struct(s).SetUint16(8, 101)
	ss, err := NewMicrophone(capnp.Struct(s).Segment())
	if err != nil {
		return Microphone{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) AndroidLog() (AndroidLogEntry, error) {
	if capnp.Struct(s).Uint16(8) != 19 {
		panic("Which() != androidLog")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AndroidLogEntry(p.Struct()), err
}

func (s Event) HasAndroidLog() bool {
	if capnp.Struct(s).Uint16(8) != 19 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetAndroidLog(v AndroidLogEntry) error {
	capnp.Struct(s).SetUint16(8, 19)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAndroidLog sets the androidLog field to a newly
// allocated AndroidLogEntry struct, preferring placement in s's segment.
func (s Event) NewAndroidLog() (AndroidLogEntry, error) {
	capnp.Struct(s).SetUint16(8, 19)
	ss, err := NewAndroidLogEntry(capnp.Struct(s).Segment())
	if err != nil {
		return AndroidLogEntry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) ManagerState() (ManagerState, error) {
	if capnp.Struct(s).Uint16(8) != 76 {
		panic("Which() != managerState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ManagerState(p.Struct()), err
}

func (s Event) HasManagerState() bool {
	if capnp.Struct(s).Uint16(8) != 76 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetManagerState(v ManagerState) error {
	capnp.Struct(s).SetUint16(8, 76)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewManagerState sets the managerState field to a newly
// allocated ManagerState struct, preferring placement in s's segment.
func (s Event) NewManagerState() (ManagerState, error) {
	capnp.Struct(s).SetUint16(8, 76)
	ss, err := NewManagerState(capnp.Struct(s).Segment())
	if err != nil {
		return ManagerState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UploaderState() (UploaderState, error) {
	if capnp.Struct(s).Uint16(8) != 77 {
		panic("Which() != uploaderState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UploaderState(p.Struct()), err
}

func (s Event) HasUploaderState() bool {
	if capnp.Struct(s).Uint16(8) != 77 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUploaderState(v UploaderState) error {
	capnp.Struct(s).SetUint16(8, 77)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUploaderState sets the uploaderState field to a newly
// allocated UploaderState struct, preferring placement in s's segment.
func (s Event) NewUploaderState() (UploaderState, error) {
	capnp.Struct(s).SetUint16(8, 77)
	ss, err := NewUploaderState(capnp.Struct(s).Segment())
	if err != nil {
		return UploaderState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) ProcLog() (ProcLog, error) {
	if capnp.Struct(s).Uint16(8) != 32 {
		panic("Which() != procLog")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ProcLog(p.Struct()), err
}

func (s Event) HasProcLog() bool {
	if capnp.Struct(s).Uint16(8) != 32 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetProcLog(v ProcLog) error {
	capnp.Struct(s).SetUint16(8, 32)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewProcLog sets the procLog field to a newly
// allocated ProcLog struct, preferring placement in s's segment.
func (s Event) NewProcLog() (ProcLog, error) {
	capnp.Struct(s).SetUint16(8, 32)
	ss, err := NewProcLog(capnp.Struct(s).Segment())
	if err != nil {
		return ProcLog{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Clocks() (Clocks, error) {
	if capnp.Struct(s).Uint16(8) != 34 {
		panic("Which() != clocks")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Clocks(p.Struct()), err
}

func (s Event) HasClocks() bool {
	if capnp.Struct(s).Uint16(8) != 34 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetClocks(v Clocks) error {
	capnp.Struct(s).SetUint16(8, 34)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewClocks sets the clocks field to a newly
// allocated Clocks struct, preferring placement in s's segment.
func (s Event) NewClocks() (Clocks, error) {
	capnp.Struct(s).SetUint16(8, 34)
	ss, err := NewClocks(capnp.Struct(s).Segment())
	if err != nil {
		return Clocks{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DeviceState() (DeviceState, error) {
	if capnp.Struct(s).Uint16(8) != 5 {
		panic("Which() != deviceState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DeviceState(p.Struct()), err
}

func (s Event) HasDeviceState() bool {
	if capnp.Struct(s).Uint16(8) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDeviceState(v DeviceState) error {
	capnp.Struct(s).SetUint16(8, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDeviceState sets the deviceState field to a newly
// allocated DeviceState struct, preferring placement in s's segment.
func (s Event) NewDeviceState() (DeviceState, error) {
	capnp.Struct(s).SetUint16(8, 5)
	ss, err := NewDeviceState(capnp.Struct(s).Segment())
	if err != nil {
		return DeviceState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LogMessage() (string, error) {
	if capnp.Struct(s).Uint16(8) != 17 {
		panic("Which() != logMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Event) HasLogMessage() bool {
	if capnp.Struct(s).Uint16(8) != 17 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) LogMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetLogMessage(v string) error {
	capnp.Struct(s).SetUint16(8, 17)
	return capnp.Struct(s).SetText(0, v)
}

func (s Event) ErrorLogMessage() (string, error) {
	if capnp.Struct(s).Uint16(8) != 83 {
		panic("Which() != errorLogMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Event) HasErrorLogMessage() bool {
	if capnp.Struct(s).Uint16(8) != 83 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) ErrorLogMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Event) SetErrorLogMessage(v string) error {
	capnp.Struct(s).SetUint16(8, 83)
	return capnp.Struct(s).SetText(0, v)
}

func (s Event) NavInstruction() (NavInstruction, error) {
	if capnp.Struct(s).Uint16(8) != 80 {
		panic("Which() != navInstruction")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return NavInstruction(p.Struct()), err
}

func (s Event) HasNavInstruction() bool {
	if capnp.Struct(s).Uint16(8) != 80 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavInstruction(v NavInstruction) error {
	capnp.Struct(s).SetUint16(8, 80)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavInstruction sets the navInstruction field to a newly
// allocated NavInstruction struct, preferring placement in s's segment.
func (s Event) NewNavInstruction() (NavInstruction, error) {
	capnp.Struct(s).SetUint16(8, 80)
	ss, err := NewNavInstruction(capnp.Struct(s).Segment())
	if err != nil {
		return NavInstruction{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) NavRoute() (NavRoute, error) {
	if capnp.Struct(s).Uint16(8) != 81 {
		panic("Which() != navRoute")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return NavRoute(p.Struct()), err
}

func (s Event) HasNavRoute() bool {
	if capnp.Struct(s).Uint16(8) != 81 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavRoute(v NavRoute) error {
	capnp.Struct(s).SetUint16(8, 81)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavRoute sets the navRoute field to a newly
// allocated NavRoute struct, preferring placement in s's segment.
func (s Event) NewNavRoute() (NavRoute, error) {
	capnp.Struct(s).SetUint16(8, 81)
	ss, err := NewNavRoute(capnp.Struct(s).Segment())
	if err != nil {
		return NavRoute{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) NavThumbnail() (Thumbnail, error) {
	if capnp.Struct(s).Uint16(8) != 82 {
		panic("Which() != navThumbnail")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Thumbnail(p.Struct()), err
}

func (s Event) HasNavThumbnail() bool {
	if capnp.Struct(s).Uint16(8) != 82 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavThumbnail(v Thumbnail) error {
	capnp.Struct(s).SetUint16(8, 82)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavThumbnail sets the navThumbnail field to a newly
// allocated Thumbnail struct, preferring placement in s's segment.
func (s Event) NewNavThumbnail() (Thumbnail, error) {
	capnp.Struct(s).SetUint16(8, 82)
	ss, err := NewThumbnail(capnp.Struct(s).Segment())
	if err != nil {
		return Thumbnail{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) MapRenderState() (MapRenderState, error) {
	if capnp.Struct(s).Uint16(8) != 103 {
		panic("Which() != mapRenderState")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return MapRenderState(p.Struct()), err
}

func (s Event) HasMapRenderState() bool {
	if capnp.Struct(s).Uint16(8) != 103 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetMapRenderState(v MapRenderState) error {
	capnp.Struct(s).SetUint16(8, 103)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMapRenderState sets the mapRenderState field to a newly
// allocated MapRenderState struct, preferring placement in s's segment.
func (s Event) NewMapRenderState() (MapRenderState, error) {
	capnp.Struct(s).SetUint16(8, 103)
	ss, err := NewMapRenderState(capnp.Struct(s).Segment())
	if err != nil {
		return MapRenderState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UserFlag() (UserFlag, error) {
	if capnp.Struct(s).Uint16(8) != 91 {
		panic("Which() != userFlag")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UserFlag(p.Struct()), err
}

func (s Event) HasUserFlag() bool {
	if capnp.Struct(s).Uint16(8) != 91 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUserFlag(v UserFlag) error {
	capnp.Struct(s).SetUint16(8, 91)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserFlag sets the userFlag field to a newly
// allocated UserFlag struct, preferring placement in s's segment.
func (s Event) NewUserFlag() (UserFlag, error) {
	capnp.Struct(s).SetUint16(8, 91)
	ss, err := NewUserFlag(capnp.Struct(s).Segment())
	if err != nil {
		return UserFlag{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UiDebug() (UIDebug, error) {
	if capnp.Struct(s).Uint16(8) != 100 {
		panic("Which() != uiDebug")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UIDebug(p.Struct()), err
}

func (s Event) HasUiDebug() bool {
	if capnp.Struct(s).Uint16(8) != 100 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUiDebug(v UIDebug) error {
	capnp.Struct(s).SetUint16(8, 100)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUiDebug sets the uiDebug field to a newly
// allocated UIDebug struct, preferring placement in s's segment.
func (s Event) NewUiDebug() (UIDebug, error) {
	capnp.Struct(s).SetUint16(8, 100)
	ss, err := NewUIDebug(capnp.Struct(s).Segment())
	if err != nil {
		return UIDebug{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) TestJoystick() (Joystick, error) {
	if capnp.Struct(s).Uint16(8) != 51 {
		panic("Which() != testJoystick")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return Joystick(p.Struct()), err
}

func (s Event) HasTestJoystick() bool {
	if capnp.Struct(s).Uint16(8) != 51 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetTestJoystick(v Joystick) error {
	capnp.Struct(s).SetUint16(8, 51)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTestJoystick sets the testJoystick field to a newly
// allocated Joystick struct, preferring placement in s's segment.
func (s Event) NewTestJoystick() (Joystick, error) {
	capnp.Struct(s).SetUint16(8, 51)
	ss, err := NewJoystick(capnp.Struct(s).Segment())
	if err != nil {
		return Joystick{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) RoadEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 84 {
		panic("Which() != roadEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasRoadEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 84 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetRoadEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 84)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRoadEncodeData sets the roadEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewRoadEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 84)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 85 {
		panic("Which() != driverEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasDriverEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 85 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 85)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverEncodeData sets the driverEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewDriverEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 85)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) WideRoadEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 86 {
		panic("Which() != wideRoadEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasWideRoadEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 86 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetWideRoadEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 86)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewWideRoadEncodeData sets the wideRoadEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewWideRoadEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 86)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) QRoadEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 87 {
		panic("Which() != qRoadEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasQRoadEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 87 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetQRoadEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 87)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewQRoadEncodeData sets the qRoadEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewQRoadEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 87)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamRoadEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 118 {
		panic("Which() != livestreamRoadEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasLivestreamRoadEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 118 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamRoadEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 118)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamRoadEncodeData sets the livestreamRoadEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewLivestreamRoadEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 118)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamWideRoadEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 119 {
		panic("Which() != livestreamWideRoadEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasLivestreamWideRoadEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 119 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamWideRoadEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 119)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamWideRoadEncodeData sets the livestreamWideRoadEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewLivestreamWideRoadEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 119)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LivestreamDriverEncodeData() (EncodeData, error) {
	if capnp.Struct(s).Uint16(8) != 120 {
		panic("Which() != livestreamDriverEncodeData")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EncodeData(p.Struct()), err
}

func (s Event) HasLivestreamDriverEncodeData() bool {
	if capnp.Struct(s).Uint16(8) != 120 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLivestreamDriverEncodeData(v EncodeData) error {
	capnp.Struct(s).SetUint16(8, 120)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLivestreamDriverEncodeData sets the livestreamDriverEncodeData field to a newly
// allocated EncodeData struct, preferring placement in s's segment.
func (s Event) NewLivestreamDriverEncodeData() (EncodeData, error) {
	capnp.Struct(s).SetUint16(8, 120)
	ss, err := NewEncodeData(capnp.Struct(s).Segment())
	if err != nil {
		return EncodeData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved0() (CustomReserved0, error) {
	if capnp.Struct(s).Uint16(8) != 105 {
		panic("Which() != customReserved0")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved0(p.Struct()), err
}

func (s Event) HasCustomReserved0() bool {
	if capnp.Struct(s).Uint16(8) != 105 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved0(v CustomReserved0) error {
	capnp.Struct(s).SetUint16(8, 105)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved0 sets the customReserved0 field to a newly
// allocated CustomReserved0 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved0() (CustomReserved0, error) {
	capnp.Struct(s).SetUint16(8, 105)
	ss, err := NewCustomReserved0(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved0{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved1() (CustomReserved1, error) {
	if capnp.Struct(s).Uint16(8) != 106 {
		panic("Which() != customReserved1")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved1(p.Struct()), err
}

func (s Event) HasCustomReserved1() bool {
	if capnp.Struct(s).Uint16(8) != 106 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved1(v CustomReserved1) error {
	capnp.Struct(s).SetUint16(8, 106)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved1 sets the customReserved1 field to a newly
// allocated CustomReserved1 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved1() (CustomReserved1, error) {
	capnp.Struct(s).SetUint16(8, 106)
	ss, err := NewCustomReserved1(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved1{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved2() (CustomReserved2, error) {
	if capnp.Struct(s).Uint16(8) != 107 {
		panic("Which() != customReserved2")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved2(p.Struct()), err
}

func (s Event) HasCustomReserved2() bool {
	if capnp.Struct(s).Uint16(8) != 107 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved2(v CustomReserved2) error {
	capnp.Struct(s).SetUint16(8, 107)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved2 sets the customReserved2 field to a newly
// allocated CustomReserved2 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved2() (CustomReserved2, error) {
	capnp.Struct(s).SetUint16(8, 107)
	ss, err := NewCustomReserved2(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved2{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved3() (CustomReserved3, error) {
	if capnp.Struct(s).Uint16(8) != 108 {
		panic("Which() != customReserved3")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved3(p.Struct()), err
}

func (s Event) HasCustomReserved3() bool {
	if capnp.Struct(s).Uint16(8) != 108 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved3(v CustomReserved3) error {
	capnp.Struct(s).SetUint16(8, 108)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved3 sets the customReserved3 field to a newly
// allocated CustomReserved3 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved3() (CustomReserved3, error) {
	capnp.Struct(s).SetUint16(8, 108)
	ss, err := NewCustomReserved3(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved3{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved4() (CustomReserved4, error) {
	if capnp.Struct(s).Uint16(8) != 109 {
		panic("Which() != customReserved4")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved4(p.Struct()), err
}

func (s Event) HasCustomReserved4() bool {
	if capnp.Struct(s).Uint16(8) != 109 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved4(v CustomReserved4) error {
	capnp.Struct(s).SetUint16(8, 109)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved4 sets the customReserved4 field to a newly
// allocated CustomReserved4 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved4() (CustomReserved4, error) {
	capnp.Struct(s).SetUint16(8, 109)
	ss, err := NewCustomReserved4(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved4{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved5() (CustomReserved5, error) {
	if capnp.Struct(s).Uint16(8) != 110 {
		panic("Which() != customReserved5")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved5(p.Struct()), err
}

func (s Event) HasCustomReserved5() bool {
	if capnp.Struct(s).Uint16(8) != 110 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved5(v CustomReserved5) error {
	capnp.Struct(s).SetUint16(8, 110)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved5 sets the customReserved5 field to a newly
// allocated CustomReserved5 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved5() (CustomReserved5, error) {
	capnp.Struct(s).SetUint16(8, 110)
	ss, err := NewCustomReserved5(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved5{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved6() (CustomReserved6, error) {
	if capnp.Struct(s).Uint16(8) != 111 {
		panic("Which() != customReserved6")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved6(p.Struct()), err
}

func (s Event) HasCustomReserved6() bool {
	if capnp.Struct(s).Uint16(8) != 111 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved6(v CustomReserved6) error {
	capnp.Struct(s).SetUint16(8, 111)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved6 sets the customReserved6 field to a newly
// allocated CustomReserved6 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved6() (CustomReserved6, error) {
	capnp.Struct(s).SetUint16(8, 111)
	ss, err := NewCustomReserved6(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved6{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved7() (CustomReserved7, error) {
	if capnp.Struct(s).Uint16(8) != 112 {
		panic("Which() != customReserved7")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved7(p.Struct()), err
}

func (s Event) HasCustomReserved7() bool {
	if capnp.Struct(s).Uint16(8) != 112 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved7(v CustomReserved7) error {
	capnp.Struct(s).SetUint16(8, 112)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved7 sets the customReserved7 field to a newly
// allocated CustomReserved7 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved7() (CustomReserved7, error) {
	capnp.Struct(s).SetUint16(8, 112)
	ss, err := NewCustomReserved7(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved7{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved8() (CustomReserved8, error) {
	if capnp.Struct(s).Uint16(8) != 113 {
		panic("Which() != customReserved8")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved8(p.Struct()), err
}

func (s Event) HasCustomReserved8() bool {
	if capnp.Struct(s).Uint16(8) != 113 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved8(v CustomReserved8) error {
	capnp.Struct(s).SetUint16(8, 113)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved8 sets the customReserved8 field to a newly
// allocated CustomReserved8 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved8() (CustomReserved8, error) {
	capnp.Struct(s).SetUint16(8, 113)
	ss, err := NewCustomReserved8(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved8{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) CustomReserved9() (CustomReserved9, error) {
	if capnp.Struct(s).Uint16(8) != 114 {
		panic("Which() != customReserved9")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CustomReserved9(p.Struct()), err
}

func (s Event) HasCustomReserved9() bool {
	if capnp.Struct(s).Uint16(8) != 114 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCustomReserved9(v CustomReserved9) error {
	capnp.Struct(s).SetUint16(8, 114)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCustomReserved9 sets the customReserved9 field to a newly
// allocated CustomReserved9 struct, preferring placement in s's segment.
func (s Event) NewCustomReserved9() (CustomReserved9, error) {
	capnp.Struct(s).SetUint16(8, 114)
	ss, err := NewCustomReserved9(capnp.Struct(s).Segment())
	if err != nil {
		return CustomReserved9{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Model() (ModelData, error) {
	if capnp.Struct(s).Uint16(8) != 8 {
		panic("Which() != model")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return ModelData(p.Struct()), err
}

func (s Event) HasModel() bool {
	if capnp.Struct(s).Uint16(8) != 8 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetModel(v ModelData) error {
	capnp.Struct(s).SetUint16(8, 8)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModel sets the model field to a newly
// allocated ModelData struct, preferring placement in s's segment.
func (s Event) NewModel() (ModelData, error) {
	capnp.Struct(s).SetUint16(8, 8)
	ss, err := NewModelData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveMpcDEPRECATED() (LiveMpcData, error) {
	if capnp.Struct(s).Uint16(8) != 35 {
		panic("Which() != liveMpcDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveMpcData(p.Struct()), err
}

func (s Event) HasLiveMpcDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 35 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveMpcDEPRECATED(v LiveMpcData) error {
	capnp.Struct(s).SetUint16(8, 35)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveMpcDEPRECATED sets the liveMpcDEPRECATED field to a newly
// allocated LiveMpcData struct, preferring placement in s's segment.
func (s Event) NewLiveMpcDEPRECATED() (LiveMpcData, error) {
	capnp.Struct(s).SetUint16(8, 35)
	ss, err := NewLiveMpcData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveMpcData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveLongitudinalMpcDEPRECATED() (LiveLongitudinalMpcData, error) {
	if capnp.Struct(s).Uint16(8) != 36 {
		panic("Which() != liveLongitudinalMpcDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLongitudinalMpcData(p.Struct()), err
}

func (s Event) HasLiveLongitudinalMpcDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 36 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLongitudinalMpcDEPRECATED(v LiveLongitudinalMpcData) error {
	capnp.Struct(s).SetUint16(8, 36)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLongitudinalMpcDEPRECATED sets the liveLongitudinalMpcDEPRECATED field to a newly
// allocated LiveLongitudinalMpcData struct, preferring placement in s's segment.
func (s Event) NewLiveLongitudinalMpcDEPRECATED() (LiveLongitudinalMpcData, error) {
	capnp.Struct(s).SetUint16(8, 36)
	ss, err := NewLiveLongitudinalMpcData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLongitudinalMpcData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveLocationKalmanDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 50 {
		panic("Which() != liveLocationKalmanDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasLiveLocationKalmanDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 50 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLocationKalmanDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 50)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLocationKalmanDEPRECATED sets the liveLocationKalmanDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewLiveLocationKalmanDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 50)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbslamCorrectionDEPRECATED() (OrbslamCorrection, error) {
	if capnp.Struct(s).Uint16(8) != 44 {
		panic("Which() != orbslamCorrectionDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbslamCorrection(p.Struct()), err
}

func (s Event) HasOrbslamCorrectionDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 44 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbslamCorrectionDEPRECATED(v OrbslamCorrection) error {
	capnp.Struct(s).SetUint16(8, 44)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrbslamCorrectionDEPRECATED sets the orbslamCorrectionDEPRECATED field to a newly
// allocated OrbslamCorrection struct, preferring placement in s's segment.
func (s Event) NewOrbslamCorrectionDEPRECATED() (OrbslamCorrection, error) {
	capnp.Struct(s).SetUint16(8, 44)
	ss, err := NewOrbslamCorrection(capnp.Struct(s).Segment())
	if err != nil {
		return OrbslamCorrection{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveUIDEPRECATED() (LiveUI, error) {
	if capnp.Struct(s).Uint16(8) != 13 {
		panic("Which() != liveUIDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveUI(p.Struct()), err
}

func (s Event) HasLiveUIDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 13 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveUIDEPRECATED(v LiveUI) error {
	capnp.Struct(s).SetUint16(8, 13)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveUIDEPRECATED sets the liveUIDEPRECATED field to a newly
// allocated LiveUI struct, preferring placement in s's segment.
func (s Event) NewLiveUIDEPRECATED() (LiveUI, error) {
	capnp.Struct(s).SetUint16(8, 13)
	ss, err := NewLiveUI(capnp.Struct(s).Segment())
	if err != nil {
		return LiveUI{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) SensorEventDEPRECATED() (SensorEventData, error) {
	if capnp.Struct(s).Uint16(8) != 3 {
		panic("Which() != sensorEventDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData(p.Struct()), err
}

func (s Event) HasSensorEventDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetSensorEventDEPRECATED(v SensorEventData) error {
	capnp.Struct(s).SetUint16(8, 3)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSensorEventDEPRECATED sets the sensorEventDEPRECATED field to a newly
// allocated SensorEventData struct, preferring placement in s's segment.
func (s Event) NewSensorEventDEPRECATED() (SensorEventData, error) {
	capnp.Struct(s).SetUint16(8, 3)
	ss, err := NewSensorEventData(capnp.Struct(s).Segment())
	if err != nil {
		return SensorEventData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveEventDEPRECATED() (LiveEventData_List, error) {
	if capnp.Struct(s).Uint16(8) != 7 {
		panic("Which() != liveEventDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveEventData_List(p.List()), err
}

func (s Event) HasLiveEventDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveEventDEPRECATED(v LiveEventData_List) error {
	capnp.Struct(s).SetUint16(8, 7)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLiveEventDEPRECATED sets the liveEventDEPRECATED field to a newly
// allocated LiveEventData_List, preferring placement in s's segment.
func (s Event) NewLiveEventDEPRECATED(n int32) (LiveEventData_List, error) {
	capnp.Struct(s).SetUint16(8, 7)
	l, err := NewLiveEventData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return LiveEventData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) LiveLocationDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 24 {
		panic("Which() != liveLocationDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasLiveLocationDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 24 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLocationDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 24)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLocationDEPRECATED sets the liveLocationDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewLiveLocationDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 24)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) EthernetDataDEPRECATED() (EthernetPacket_List, error) {
	if capnp.Struct(s).Uint16(8) != 25 {
		panic("Which() != ethernetDataDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EthernetPacket_List(p.List()), err
}

func (s Event) HasEthernetDataDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 25 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetEthernetDataDEPRECATED(v EthernetPacket_List) error {
	capnp.Struct(s).SetUint16(8, 25)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEthernetDataDEPRECATED sets the ethernetDataDEPRECATED field to a newly
// allocated EthernetPacket_List, preferring placement in s's segment.
func (s Event) NewEthernetDataDEPRECATED(n int32) (EthernetPacket_List, error) {
	capnp.Struct(s).SetUint16(8, 25)
	l, err := NewEthernetPacket_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EthernetPacket_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) CellInfoDEPRECATED() (CellInfo_List, error) {
	if capnp.Struct(s).Uint16(8) != 27 {
		panic("Which() != cellInfoDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CellInfo_List(p.List()), err
}

func (s Event) HasCellInfoDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 27 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetCellInfoDEPRECATED(v CellInfo_List) error {
	capnp.Struct(s).SetUint16(8, 27)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCellInfoDEPRECATED sets the cellInfoDEPRECATED field to a newly
// allocated CellInfo_List, preferring placement in s's segment.
func (s Event) NewCellInfoDEPRECATED(n int32) (CellInfo_List, error) {
	capnp.Struct(s).SetUint16(8, 27)
	l, err := NewCellInfo_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CellInfo_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) WifiScanDEPRECATED() (WifiScan_List, error) {
	if capnp.Struct(s).Uint16(8) != 28 {
		panic("Which() != wifiScanDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return WifiScan_List(p.List()), err
}

func (s Event) HasWifiScanDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 28 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetWifiScanDEPRECATED(v WifiScan_List) error {
	capnp.Struct(s).SetUint16(8, 28)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewWifiScanDEPRECATED sets the wifiScanDEPRECATED field to a newly
// allocated WifiScan_List, preferring placement in s's segment.
func (s Event) NewWifiScanDEPRECATED(n int32) (WifiScan_List, error) {
	capnp.Struct(s).SetUint16(8, 28)
	l, err := NewWifiScan_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return WifiScan_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) UiNavigationEventDEPRECATED() (UiNavigationEvent, error) {
	if capnp.Struct(s).Uint16(8) != 49 {
		panic("Which() != uiNavigationEventDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UiNavigationEvent(p.Struct()), err
}

func (s Event) HasUiNavigationEventDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 49 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUiNavigationEventDEPRECATED(v UiNavigationEvent) error {
	capnp.Struct(s).SetUint16(8, 49)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUiNavigationEventDEPRECATED sets the uiNavigationEventDEPRECATED field to a newly
// allocated UiNavigationEvent struct, preferring placement in s's segment.
func (s Event) NewUiNavigationEventDEPRECATED() (UiNavigationEvent, error) {
	capnp.Struct(s).SetUint16(8, 49)
	ss, err := NewUiNavigationEvent(capnp.Struct(s).Segment())
	if err != nil {
		return UiNavigationEvent{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveMapDataDEPRECATED() (LiveMapDataDEPRECATED, error) {
	if capnp.Struct(s).Uint16(8) != 61 {
		panic("Which() != liveMapDataDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveMapDataDEPRECATED(p.Struct()), err
}

func (s Event) HasLiveMapDataDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 61 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveMapDataDEPRECATED(v LiveMapDataDEPRECATED) error {
	capnp.Struct(s).SetUint16(8, 61)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveMapDataDEPRECATED sets the liveMapDataDEPRECATED field to a newly
// allocated LiveMapDataDEPRECATED struct, preferring placement in s's segment.
func (s Event) NewLiveMapDataDEPRECATED() (LiveMapDataDEPRECATED, error) {
	capnp.Struct(s).SetUint16(8, 61)
	ss, err := NewLiveMapDataDEPRECATED(capnp.Struct(s).Segment())
	if err != nil {
		return LiveMapDataDEPRECATED{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GpsPlannerPointsDEPRECATED() (GPSPlannerPoints, error) {
	if capnp.Struct(s).Uint16(8) != 39 {
		panic("Which() != gpsPlannerPointsDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GPSPlannerPoints(p.Struct()), err
}

func (s Event) HasGpsPlannerPointsDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 39 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGpsPlannerPointsDEPRECATED(v GPSPlannerPoints) error {
	capnp.Struct(s).SetUint16(8, 39)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGpsPlannerPointsDEPRECATED sets the gpsPlannerPointsDEPRECATED field to a newly
// allocated GPSPlannerPoints struct, preferring placement in s's segment.
func (s Event) NewGpsPlannerPointsDEPRECATED() (GPSPlannerPoints, error) {
	capnp.Struct(s).SetUint16(8, 39)
	ss, err := NewGPSPlannerPoints(capnp.Struct(s).Segment())
	if err != nil {
		return GPSPlannerPoints{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) GpsPlannerPlanDEPRECATED() (GPSPlannerPlan, error) {
	if capnp.Struct(s).Uint16(8) != 40 {
		panic("Which() != gpsPlannerPlanDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return GPSPlannerPlan(p.Struct()), err
}

func (s Event) HasGpsPlannerPlanDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 40 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetGpsPlannerPlanDEPRECATED(v GPSPlannerPlan) error {
	capnp.Struct(s).SetUint16(8, 40)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewGpsPlannerPlanDEPRECATED sets the gpsPlannerPlanDEPRECATED field to a newly
// allocated GPSPlannerPlan struct, preferring placement in s's segment.
func (s Event) NewGpsPlannerPlanDEPRECATED() (GPSPlannerPlan, error) {
	capnp.Struct(s).SetUint16(8, 40)
	ss, err := NewGPSPlannerPlan(capnp.Struct(s).Segment())
	if err != nil {
		return GPSPlannerPlan{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) ApplanixRawDEPRECATED() ([]byte, error) {
	if capnp.Struct(s).Uint16(8) != 41 {
		panic("Which() != applanixRawDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Event) HasApplanixRawDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 41 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetApplanixRawDEPRECATED(v []byte) error {
	capnp.Struct(s).SetUint16(8, 41)
	return capnp.Struct(s).SetData(0, v)
}

func (s Event) AndroidGnssDEPRECATED() (AndroidGnss, error) {
	if capnp.Struct(s).Uint16(8) != 29 {
		panic("Which() != androidGnssDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AndroidGnss(p.Struct()), err
}

func (s Event) HasAndroidGnssDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 29 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetAndroidGnssDEPRECATED(v AndroidGnss) error {
	capnp.Struct(s).SetUint16(8, 29)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAndroidGnssDEPRECATED sets the androidGnssDEPRECATED field to a newly
// allocated AndroidGnss struct, preferring placement in s's segment.
func (s Event) NewAndroidGnssDEPRECATED() (AndroidGnss, error) {
	capnp.Struct(s).SetUint16(8, 29)
	ss, err := NewAndroidGnss(capnp.Struct(s).Segment())
	if err != nil {
		return AndroidGnss{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LidarPtsDEPRECATED() (LidarPts, error) {
	if capnp.Struct(s).Uint16(8) != 31 {
		panic("Which() != lidarPtsDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LidarPts(p.Struct()), err
}

func (s Event) HasLidarPtsDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 31 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLidarPtsDEPRECATED(v LidarPts) error {
	capnp.Struct(s).SetUint16(8, 31)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLidarPtsDEPRECATED sets the lidarPtsDEPRECATED field to a newly
// allocated LidarPts struct, preferring placement in s's segment.
func (s Event) NewLidarPtsDEPRECATED() (LidarPts, error) {
	capnp.Struct(s).SetUint16(8, 31)
	ss, err := NewLidarPts(capnp.Struct(s).Segment())
	if err != nil {
		return LidarPts{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) NavStatusDEPRECATED() (NavStatus, error) {
	if capnp.Struct(s).Uint16(8) != 37 {
		panic("Which() != navStatusDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return NavStatus(p.Struct()), err
}

func (s Event) HasNavStatusDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 37 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavStatusDEPRECATED(v NavStatus) error {
	capnp.Struct(s).SetUint16(8, 37)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavStatusDEPRECATED sets the navStatusDEPRECATED field to a newly
// allocated NavStatus struct, preferring placement in s's segment.
func (s Event) NewNavStatusDEPRECATED() (NavStatus, error) {
	capnp.Struct(s).SetUint16(8, 37)
	ss, err := NewNavStatus(capnp.Struct(s).Segment())
	if err != nil {
		return NavStatus{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) TrafficEventsDEPRECATED() (TrafficEvent_List, error) {
	if capnp.Struct(s).Uint16(8) != 42 {
		panic("Which() != trafficEventsDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return TrafficEvent_List(p.List()), err
}

func (s Event) HasTrafficEventsDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 42 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetTrafficEventsDEPRECATED(v TrafficEvent_List) error {
	capnp.Struct(s).SetUint16(8, 42)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTrafficEventsDEPRECATED sets the trafficEventsDEPRECATED field to a newly
// allocated TrafficEvent_List, preferring placement in s's segment.
func (s Event) NewTrafficEventsDEPRECATED(n int32) (TrafficEvent_List, error) {
	capnp.Struct(s).SetUint16(8, 42)
	l, err := NewTrafficEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return TrafficEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) LiveLocationTimingDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 43 {
		panic("Which() != liveLocationTimingDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasLiveLocationTimingDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 43 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLocationTimingDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 43)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLocationTimingDEPRECATED sets the liveLocationTimingDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewLiveLocationTimingDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 43)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) LiveLocationCorrectedDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 45 {
		panic("Which() != liveLocationCorrectedDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasLiveLocationCorrectedDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 45 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLiveLocationCorrectedDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 45)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLiveLocationCorrectedDEPRECATED sets the liveLocationCorrectedDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewLiveLocationCorrectedDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 45)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) NavUpdateDEPRECATED() (NavUpdate, error) {
	if capnp.Struct(s).Uint16(8) != 26 {
		panic("Which() != navUpdateDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return NavUpdate(p.Struct()), err
}

func (s Event) HasNavUpdateDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 26 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetNavUpdateDEPRECATED(v NavUpdate) error {
	capnp.Struct(s).SetUint16(8, 26)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavUpdateDEPRECATED sets the navUpdateDEPRECATED field to a newly
// allocated NavUpdate struct, preferring placement in s's segment.
func (s Event) NewNavUpdateDEPRECATED() (NavUpdate, error) {
	capnp.Struct(s).SetUint16(8, 26)
	ss, err := NewNavUpdate(capnp.Struct(s).Segment())
	if err != nil {
		return NavUpdate{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbObservationDEPRECATED() (OrbObservation_List, error) {
	if capnp.Struct(s).Uint16(8) != 46 {
		panic("Which() != orbObservationDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbObservation_List(p.List()), err
}

func (s Event) HasOrbObservationDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 46 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbObservationDEPRECATED(v OrbObservation_List) error {
	capnp.Struct(s).SetUint16(8, 46)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewOrbObservationDEPRECATED sets the orbObservationDEPRECATED field to a newly
// allocated OrbObservation_List, preferring placement in s's segment.
func (s Event) NewOrbObservationDEPRECATED(n int32) (OrbObservation_List, error) {
	capnp.Struct(s).SetUint16(8, 46)
	l, err := NewOrbObservation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return OrbObservation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Event) LocationDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 48 {
		panic("Which() != locationDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasLocationDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 48 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetLocationDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 48)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocationDEPRECATED sets the locationDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewLocationDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 48)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbOdometryDEPRECATED() (OrbOdometry, error) {
	if capnp.Struct(s).Uint16(8) != 52 {
		panic("Which() != orbOdometryDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbOdometry(p.Struct()), err
}

func (s Event) HasOrbOdometryDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 52 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbOdometryDEPRECATED(v OrbOdometry) error {
	capnp.Struct(s).SetUint16(8, 52)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrbOdometryDEPRECATED sets the orbOdometryDEPRECATED field to a newly
// allocated OrbOdometry struct, preferring placement in s's segment.
func (s Event) NewOrbOdometryDEPRECATED() (OrbOdometry, error) {
	capnp.Struct(s).SetUint16(8, 52)
	ss, err := NewOrbOdometry(capnp.Struct(s).Segment())
	if err != nil {
		return OrbOdometry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbFeaturesDEPRECATED() (OrbFeatures, error) {
	if capnp.Struct(s).Uint16(8) != 53 {
		panic("Which() != orbFeaturesDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbFeatures(p.Struct()), err
}

func (s Event) HasOrbFeaturesDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 53 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbFeaturesDEPRECATED(v OrbFeatures) error {
	capnp.Struct(s).SetUint16(8, 53)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrbFeaturesDEPRECATED sets the orbFeaturesDEPRECATED field to a newly
// allocated OrbFeatures struct, preferring placement in s's segment.
func (s Event) NewOrbFeaturesDEPRECATED() (OrbFeatures, error) {
	capnp.Struct(s).SetUint16(8, 53)
	ss, err := NewOrbFeatures(capnp.Struct(s).Segment())
	if err != nil {
		return OrbFeatures{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) ApplanixLocationDEPRECATED() (LiveLocationData, error) {
	if capnp.Struct(s).Uint16(8) != 54 {
		panic("Which() != applanixLocationDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return LiveLocationData(p.Struct()), err
}

func (s Event) HasApplanixLocationDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 54 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetApplanixLocationDEPRECATED(v LiveLocationData) error {
	capnp.Struct(s).SetUint16(8, 54)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewApplanixLocationDEPRECATED sets the applanixLocationDEPRECATED field to a newly
// allocated LiveLocationData struct, preferring placement in s's segment.
func (s Event) NewApplanixLocationDEPRECATED() (LiveLocationData, error) {
	capnp.Struct(s).SetUint16(8, 54)
	ss, err := NewLiveLocationData(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbKeyFrameDEPRECATED() (OrbKeyFrame, error) {
	if capnp.Struct(s).Uint16(8) != 55 {
		panic("Which() != orbKeyFrameDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbKeyFrame(p.Struct()), err
}

func (s Event) HasOrbKeyFrameDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 55 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbKeyFrameDEPRECATED(v OrbKeyFrame) error {
	capnp.Struct(s).SetUint16(8, 55)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrbKeyFrameDEPRECATED sets the orbKeyFrameDEPRECATED field to a newly
// allocated OrbKeyFrame struct, preferring placement in s's segment.
func (s Event) NewOrbKeyFrameDEPRECATED() (OrbKeyFrame, error) {
	capnp.Struct(s).SetUint16(8, 55)
	ss, err := NewOrbKeyFrame(capnp.Struct(s).Segment())
	if err != nil {
		return OrbKeyFrame{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) OrbFeaturesSummaryDEPRECATED() (OrbFeaturesSummary, error) {
	if capnp.Struct(s).Uint16(8) != 57 {
		panic("Which() != orbFeaturesSummaryDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return OrbFeaturesSummary(p.Struct()), err
}

func (s Event) HasOrbFeaturesSummaryDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 57 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetOrbFeaturesSummaryDEPRECATED(v OrbFeaturesSummary) error {
	capnp.Struct(s).SetUint16(8, 57)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOrbFeaturesSummaryDEPRECATED sets the orbFeaturesSummaryDEPRECATED field to a newly
// allocated OrbFeaturesSummary struct, preferring placement in s's segment.
func (s Event) NewOrbFeaturesSummaryDEPRECATED() (OrbFeaturesSummary, error) {
	capnp.Struct(s).SetUint16(8, 57)
	ss, err := NewOrbFeaturesSummary(capnp.Struct(s).Segment())
	if err != nil {
		return OrbFeaturesSummary{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) FeaturesDEPRECATED() (CalibrationFeatures, error) {
	if capnp.Struct(s).Uint16(8) != 9 {
		panic("Which() != featuresDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return CalibrationFeatures(p.Struct()), err
}

func (s Event) HasFeaturesDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 9 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetFeaturesDEPRECATED(v CalibrationFeatures) error {
	capnp.Struct(s).SetUint16(8, 9)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFeaturesDEPRECATED sets the featuresDEPRECATED field to a newly
// allocated CalibrationFeatures struct, preferring placement in s's segment.
func (s Event) NewFeaturesDEPRECATED() (CalibrationFeatures, error) {
	capnp.Struct(s).SetUint16(8, 9)
	ss, err := NewCalibrationFeatures(capnp.Struct(s).Segment())
	if err != nil {
		return CalibrationFeatures{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) KalmanOdometryDEPRECATED() (KalmanOdometry, error) {
	if capnp.Struct(s).Uint16(8) != 64 {
		panic("Which() != kalmanOdometryDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return KalmanOdometry(p.Struct()), err
}

func (s Event) HasKalmanOdometryDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 64 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetKalmanOdometryDEPRECATED(v KalmanOdometry) error {
	capnp.Struct(s).SetUint16(8, 64)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewKalmanOdometryDEPRECATED sets the kalmanOdometryDEPRECATED field to a newly
// allocated KalmanOdometry struct, preferring placement in s's segment.
func (s Event) NewKalmanOdometryDEPRECATED() (KalmanOdometry, error) {
	capnp.Struct(s).SetUint16(8, 64)
	ss, err := NewKalmanOdometry(capnp.Struct(s).Segment())
	if err != nil {
		return KalmanOdometry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) UiLayoutStateDEPRECATED() (UiLayoutState, error) {
	if capnp.Struct(s).Uint16(8) != 56 {
		panic("Which() != uiLayoutStateDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return UiLayoutState(p.Struct()), err
}

func (s Event) HasUiLayoutStateDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 56 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetUiLayoutStateDEPRECATED(v UiLayoutState) error {
	capnp.Struct(s).SetUint16(8, 56)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUiLayoutStateDEPRECATED sets the uiLayoutStateDEPRECATED field to a newly
// allocated UiLayoutState struct, preferring placement in s's segment.
func (s Event) NewUiLayoutStateDEPRECATED() (UiLayoutState, error) {
	capnp.Struct(s).SetUint16(8, 56)
	ss, err := NewUiLayoutState(capnp.Struct(s).Segment())
	if err != nil {
		return UiLayoutState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) PandaStateDEPRECATED() (PandaState, error) {
	if capnp.Struct(s).Uint16(8) != 11 {
		panic("Which() != pandaStateDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return PandaState(p.Struct()), err
}

func (s Event) HasPandaStateDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetPandaStateDEPRECATED(v PandaState) error {
	capnp.Struct(s).SetUint16(8, 11)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPandaStateDEPRECATED sets the pandaStateDEPRECATED field to a newly
// allocated PandaState struct, preferring placement in s's segment.
func (s Event) NewPandaStateDEPRECATED() (PandaState, error) {
	capnp.Struct(s).SetUint16(8, 11)
	ss, err := NewPandaState(capnp.Struct(s).Segment())
	if err != nil {
		return PandaState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) DriverStateDEPRECATED() (DriverStateDEPRECATED, error) {
	if capnp.Struct(s).Uint16(8) != 58 {
		panic("Which() != driverStateDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return DriverStateDEPRECATED(p.Struct()), err
}

func (s Event) HasDriverStateDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 58 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetDriverStateDEPRECATED(v DriverStateDEPRECATED) error {
	capnp.Struct(s).SetUint16(8, 58)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDriverStateDEPRECATED sets the driverStateDEPRECATED field to a newly
// allocated DriverStateDEPRECATED struct, preferring placement in s's segment.
func (s Event) NewDriverStateDEPRECATED() (DriverStateDEPRECATED, error) {
	capnp.Struct(s).SetUint16(8, 58)
	ss, err := NewDriverStateDEPRECATED(capnp.Struct(s).Segment())
	if err != nil {
		return DriverStateDEPRECATED{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) SensorEventsDEPRECATED() (SensorEventData_List, error) {
	if capnp.Struct(s).Uint16(8) != 10 {
		panic("Which() != sensorEventsDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return SensorEventData_List(p.List()), err
}

func (s Event) HasSensorEventsDEPRECATED() bool {
	if capnp.Struct(s).Uint16(8) != 10 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetSensorEventsDEPRECATED(v SensorEventData_List) error {
	capnp.Struct(s).SetUint16(8, 10)
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSensorEventsDEPRECATED sets the sensorEventsDEPRECATED field to a newly
// allocated SensorEventData_List, preferring placement in s's segment.
func (s Event) NewSensorEventsDEPRECATED(n int32) (SensorEventData_List, error) {
	capnp.Struct(s).SetUint16(8, 10)
	l, err := NewSensorEventData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SensorEventData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) InitData() InitData_Future {
	return InitData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Sentinel() Sentinel_Future {
	return Sentinel_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Boot() Boot_Future {
	return Boot_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GpsNMEA() GPSNMEAData_Future {
	return GPSNMEAData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) ControlsState() ControlsState_Future {
	return ControlsState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Gyroscope() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Gyroscope2() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Accelerometer() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Accelerometer2() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Magnetometer() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LightSensor() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) TemperatureSensor() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) TemperatureSensor2() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) PeripheralState() PeripheralState_Future {
	return PeripheralState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) RadarState() RadarState_Future {
	return RadarState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveCalibration() LiveCalibrationData_Future {
	return LiveCalibrationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CarState() CarState_Future {
	return CarState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CarControl() CarControl_Future {
	return CarControl_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LongitudinalPlan() LongitudinalPlan_Future {
	return LongitudinalPlan_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LateralPlan() LateralPlan_Future {
	return LateralPlan_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UiPlan() UiPlan_Future {
	return UiPlan_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UbloxGnss() UbloxGnss_Future {
	return UbloxGnss_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) QcomGnss() QcomGnss_Future {
	return QcomGnss_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GpsLocationExternal() GpsLocationData_Future {
	return GpsLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GpsLocation() GpsLocationData_Future {
	return GpsLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GnssMeasurements() GnssMeasurements_Future {
	return GnssMeasurements_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveParameters() LiveParametersData_Future {
	return LiveParametersData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveTorqueParameters() LiveTorqueParametersData_Future {
	return LiveTorqueParametersData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CameraOdometry() CameraOdometry_Future {
	return CameraOdometry_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Thumbnail() Thumbnail_Future {
	return Thumbnail_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CarParams() CarParams_Future {
	return CarParams_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverMonitoringState() DriverMonitoringState_Future {
	return DriverMonitoringState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLocationKalman() LiveLocationKalman_Future {
	return LiveLocationKalman_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) ModelV2() ModelDataV2_Future {
	return ModelDataV2_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverStateV2() DriverStateV2_Future {
	return DriverStateV2_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavModel() NavModelData_Future {
	return NavModelData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) RoadCameraState() FrameData_Future {
	return FrameData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverCameraState() FrameData_Future {
	return FrameData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) WideRoadCameraState() FrameData_Future {
	return FrameData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) RoadEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) WideRoadEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) QRoadEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamRoadEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamWideRoadEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamDriverEncodeIdx() EncodeIndex_Future {
	return EncodeIndex_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Microphone() Microphone_Future {
	return Microphone_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) AndroidLog() AndroidLogEntry_Future {
	return AndroidLogEntry_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) ManagerState() ManagerState_Future {
	return ManagerState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UploaderState() UploaderState_Future {
	return UploaderState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) ProcLog() ProcLog_Future {
	return ProcLog_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Clocks() Clocks_Future {
	return Clocks_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DeviceState() DeviceState_Future {
	return DeviceState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavInstruction() NavInstruction_Future {
	return NavInstruction_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavRoute() NavRoute_Future {
	return NavRoute_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavThumbnail() Thumbnail_Future {
	return Thumbnail_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) MapRenderState() MapRenderState_Future {
	return MapRenderState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UserFlag() UserFlag_Future {
	return UserFlag_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UiDebug() UIDebug_Future {
	return UIDebug_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) TestJoystick() Joystick_Future {
	return Joystick_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) RoadEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) WideRoadEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) QRoadEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamRoadEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamWideRoadEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LivestreamDriverEncodeData() EncodeData_Future {
	return EncodeData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved0() CustomReserved0_Future {
	return CustomReserved0_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved1() CustomReserved1_Future {
	return CustomReserved1_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved2() CustomReserved2_Future {
	return CustomReserved2_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved3() CustomReserved3_Future {
	return CustomReserved3_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved4() CustomReserved4_Future {
	return CustomReserved4_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved5() CustomReserved5_Future {
	return CustomReserved5_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved6() CustomReserved6_Future {
	return CustomReserved6_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved7() CustomReserved7_Future {
	return CustomReserved7_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved8() CustomReserved8_Future {
	return CustomReserved8_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) CustomReserved9() CustomReserved9_Future {
	return CustomReserved9_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) Model() ModelData_Future {
	return ModelData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveMpcDEPRECATED() LiveMpcData_Future {
	return LiveMpcData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLongitudinalMpcDEPRECATED() LiveLongitudinalMpcData_Future {
	return LiveLongitudinalMpcData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLocationKalmanDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) OrbslamCorrectionDEPRECATED() OrbslamCorrection_Future {
	return OrbslamCorrection_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveUIDEPRECATED() LiveUI_Future {
	return LiveUI_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) SensorEventDEPRECATED() SensorEventData_Future {
	return SensorEventData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLocationDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UiNavigationEventDEPRECATED() UiNavigationEvent_Future {
	return UiNavigationEvent_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveMapDataDEPRECATED() LiveMapDataDEPRECATED_Future {
	return LiveMapDataDEPRECATED_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GpsPlannerPointsDEPRECATED() GPSPlannerPoints_Future {
	return GPSPlannerPoints_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) GpsPlannerPlanDEPRECATED() GPSPlannerPlan_Future {
	return GPSPlannerPlan_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) AndroidGnssDEPRECATED() AndroidGnss_Future {
	return AndroidGnss_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LidarPtsDEPRECATED() LidarPts_Future {
	return LidarPts_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavStatusDEPRECATED() NavStatus_Future {
	return NavStatus_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLocationTimingDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LiveLocationCorrectedDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) NavUpdateDEPRECATED() NavUpdate_Future {
	return NavUpdate_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) LocationDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) OrbOdometryDEPRECATED() OrbOdometry_Future {
	return OrbOdometry_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) OrbFeaturesDEPRECATED() OrbFeatures_Future {
	return OrbFeatures_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) ApplanixLocationDEPRECATED() LiveLocationData_Future {
	return LiveLocationData_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) OrbKeyFrameDEPRECATED() OrbKeyFrame_Future {
	return OrbKeyFrame_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) OrbFeaturesSummaryDEPRECATED() OrbFeaturesSummary_Future {
	return OrbFeaturesSummary_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) FeaturesDEPRECATED() CalibrationFeatures_Future {
	return CalibrationFeatures_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) KalmanOdometryDEPRECATED() KalmanOdometry_Future {
	return KalmanOdometry_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) UiLayoutStateDEPRECATED() UiLayoutState_Future {
	return UiLayoutState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) PandaStateDEPRECATED() PandaState_Future {
	return PandaState_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) DriverStateDEPRECATED() DriverStateDEPRECATED_Future {
	return DriverStateDEPRECATED_Future{Future: p.Future.Field(0, nil)}
}

const schema_f3b1f17e25a4285b = "x\xda\xbc\xfd\x0d\x9c\x14\xd5\x99/\x8e\x9f\xa7\xaa{z" +
	"f\x98\xa1\xa7\xe9\xc1\x01\x04\x07\x08(\x10aa\x06\x82" +
	"\x10q`^\x80ag\xc2\xf4\xf4\x80`tcM\xf7" +
	"\x99\x99\x92\xee\xaa\xa6\xaaz\x98\xe1bx\x89\x18p%" +
	"\x01\x16\x12!\xbaQ\x03\xbb\xe8\x95\x0d\x18\xcd\x95,\xee" +
	"\x82\x91U\x8cf\x95\xe8F\xbd\xb2\xd1\xacl\xc0\xe8]" +
	"\xf5j\x12\x8d\xa4\xff\x9f\xe79\xf5\xd6=\x8d\xba{\xf7" +
	"\xff\xfb\xf8\xf9\xc8\xf4\xf7\x9c:u\xea\xbc<\xef\xe79" +
	"3\x17k\x0b\x03\xb3*{W3)^\x15\x08\x96\xe4" +
	"n|\xea\x9fZ\xf6\xfc4\xbe\x89\xc5\xa2P\x9e;\x19" +
	"\xfb\xbb\xd0\x9f\xf7\xee\xf9W\x16\x84\x10c\xf5\xfb\xae\x9e" +
	"\x0f\xd1\x07\xae\xaea\xac\xfe\xe8\xd5W\x950\xc8\xad+" +
	"m94\xe3\xee\xd0\x16\x16\xb9\\\xca\x95\xdd3\xfc\xfa" +
	"\xcb2/\xfe\x901\xa8\x7f\xae\xfe\x06\x88\xbeQ\x1fb" +
	",z\xb6\xfe\x87\x0cr7}\xfc\xf3\x7f\xdfp\xf6\xec" +
	"V\x16+\x07\xc8}u\xca\x81\xc9_\x7f\xef\xe8\xffe" +
	"-\x10\xc2:\xb3f\xdf\x1f\x9d7{\x1dc\xf5\x87g" +
	"\x7f\x1b\x18\xe4&\xefx\xed\xf8\xd9\x83\xe5\xb7\xb3\xc8e" +
	"\x90\xbb\xf0?\xbfT\xb9\xa6a\xed\x93,\x88\x95\xebW" +
	"\x7f\xe9\x06\x88\xa6\xbf\x84\x7f\xaa_\xa2\xdao\xa9\xb7e" +
	"\xcet\xed\xbf\x9d\xc5j@\xca}5\xa1\x8e\xf9Q\xd7" +
	"\xda\x7f\xb6{\xfd\xc05\x13!z\xec\x1a\xfc\xf3\xd1k" +
	"j\x81\xc1\xafVoh\xfb\xce\xfe\xad\xdf\xcc\xef\x09U" +
	"\x8e>7ow\xf4\xa5y\xf8\xd7\x0b\xf3~\xc3 \xf7" +
	"\xc9\x9c\x9a\xae\x7f\xdb\xf3\x8b\xed\xd8\xed\x12\xafr\x00k" +
	"\x1c\x9c\xffp\xf4\xf0|\x1c\x8dG\xe7\xcf\x95\x18\xe4b" +
	"s\xbfz\xddG\x87W\xdd\xc1\"#\xa5\xdc\x15\xab\xdf" +
	"\xccN\xfe\xeb\xe4\xdf2\x06\xd1\xb2\x05\x1fGG.\xc0" +
	"g\"\x0b~\xcf\xe0OU3?4\x8e\xfc\xe9\xce\xc8" +
	"\xe5\x90K}s\xc4O\xae\xfb\xea\xb0\xd7YP\xa2\xce" +
	".X\x06\xd1\xc7\xa9\xea\xb1\x05\xeb\x18\xe4\xe0\x93\xd8\x9f" +
	"?\xfbt\xfb\xb7Xd\x9c\x94\x9bz\xf27W,\xc8" +
	"\x9c\xfa-\x8e\xf0\x9c\xeb&B\xb4\xe5:\xac\xb9\xe8\xba" +
	"\xe5X3Y\xf7\x17_\xe3w|\x9b\xc5\xae\x84`\xee" +
	"\x83\xf1w\xdd\xbf\xf8\xe0\x97\xff\xd6\x1e\x84\x9b\xae\xdb\x0d" +
	"\xd1\xecu\xd8\xd9\xcd\xd7\xfd\x8a:\xfb\xc4\xbf\xd6-I" +
	">\xf8m\xfc\xb2`\xc1\x97\xdd\xb3\xe8\xc1\xe8\xc1E\xf8" +
	"\xdc}\x8b\xe8\xcb\xfeu\xda\xd3;\x7f\xf9\xebI;Y" +
	"l\x14\xc8\xb9\xf7\xfe'|\xe9\x94\x9a\xfb.U\xae\x7f" +
	"\xa7\xa9\x11\xa2\x17\x9b\xf0\xcf\x8f\x9ah:\xee\xad\xfb\xda" +
	"\xa1\xba\x7f;\xb8\x1b\x9b\x96}#Lm\xefky8" +
	"z_\x0b\xd6\xbe\xa7\x85j\xff\xc5\xdc\xba\xdbg'\xf6" +
	"\xfc\x15\xb6]R\xd0\xf6\xda%\xcb \xbau\x09\xfe\xb9" +
	"y\x09u\xfbo\"\xbf\xff\xabo_y\xdd\x9e\x82n" +
	"\x07\x834z\xcb$\x88>\xba\x0c\xff<\xba\xec\x1fe" +
	"\x06\xb9\xe3;\xbf\xd1\x9e\xcd\xfc\xea;X]\xf2U/" +
	"\xa5\xc9X\xfe~t\xdcr\x1c\x93\xc9\xcb\xa9q\xf7\xe5" +
	"\xb1r\x18\xe5\xab]\x82\xb5_\xea|\"z\xb6\xf3o" +
	"\x19\xab\xdf\x11\xbf\xaa\x92A\xeek\xcf_\xfc\x97\xed\xf1" +
	"Q\xfb\x8bu%\xfaa\xf7\x83\xd1\x8b\xdd\xd8vY\x82" +
	"\xda~\xee\x7f\x7f\xf3\xd0_}9\xf6=\xdcY%\xb9" +
	"\x1b\x7f\xdc\xf0\xdbgJ\xab~\xc3\x822\xf66\xdbS" +
	"\x0e\xd1\xad=\xf4\x9d=5\xd8\xf1\x83#\x7fw ~" +
	"\xd3\x1f\xeff\x91(\xf8j\xd3d\xbe\xa0N\x83\xe8\x1b" +
	"*m.\xb5\x81An\xdb\xb2\x9fD\x07\xc6M\xbd\xa7" +
	"\xf0+iI\xc7ny8\xba\xfa\x16\xfck\xc5-\xb8" +
	"\x13?Yvb\xcb\xf4\xf8\xf5\xf7\xb0\xd8e\x00\xb9\xdf" +
	"\xee>0\xed\x87\x8f\xbe|\xc0\x1e\xc1\x0fo\x19\x01\xd1" +
	"\xe0\x1a\xfc\x13\xd6\\\x8f\xd3S\xdas\xe8\xb7\xd7\x187" +
	"\xdd\xc3\"Q\xc9\xeb\x08\x83\xe8\x8a\xd4\xfbQ%\x85\xed" +
	"\xde\x94\xc2v\xbb\xaf\x1d\x1d}\xe1\xb5\xe7\xefe\x91Q" +
	"\x927\x92\x0c\xea\x8f\xa5&B\xf44\xd5<\x95\xc2\x95" +
	"\xda:y\xfd\xee\xcc\xed3\xee+\xa0\x05b\xe0\xdeH" +
	"\xad\x8f\x9e\xc3\xca\xf5o\xa4\xa8\x03\x97\x1f\xfa\xb8m\xda" +
	"\xd9U\xf7\x15|\x1c-\xa6W\xb4g\xa2\xe74zL" +
	"\xc3>\xdc7\xb5\xe5Eu\xff\xc3\xf7c\xdd@\x1e\x95" +
	")\x87\x92\xe8V\xfdLt\x97~\x15R\x19\xfd\x9b8" +
	"\xc8c\xe4\xdf\xff\xf8\x8a\x7f\x7f\xf9~\xfa\xb6k\xb4\x0f" +
	"\x9b\xcfl\x91\xff\x03\xbb\xbc\xd5\x94 \xba\xcb\xc4\x86w" +
	"\x98\xbd\xb826\xed{h\xdb[o\xde\x8f\x8bT*" +
	"X\xa4'\xcdN\x88\xbed\xd2\xcc\x98H`r\x9fL" +
	"\xfa\xe4\x8b\x8fO\x9d}\x80\xc5\xc6\x80\xafSb\xf6>" +
	"\xb4&B4\x98\xc5\xb6!\x8b[|\xca\x0f\xbf9\xe1" +
	"\x8b\xef4\x1f\x10\x13\xe2\x11;\"\x08\xe9l9Do" +
	"\xa5\xda\x83Y\xa4H\xaf\xcc;pb\xfbe\xcf\x1d`" +
	"\xb1\xd1\x00\xb9\x1fJ\xb7o|\xf8\xb2-'\xed\xb9N" +
	"\xf7\xbf\x1f\x1d\xec\xc7\xbf\xb2\xfd8\x1e\xee\xec\xc6\xca\xa1" +
	"\xc27\xd2\xe5Xe\xf2\xba\x87\xa3\xd3\xd7\xf52V\xbf" +
	"}\xdd\xaf\xca\x18\xe4\x86\xbf\xa5-+=\xfb\xab\x83," +
	"2\x1cr\xdf\xf9\xf1u\xa3~}\xed\xd1?`?\xaa" +
	" \x9a\xfe\xc6\xfd\xd1\xec7\xf0\xb1\xb5\xdf\xc0N\xff\xe2" +
	"\xbb\x95\xcd\xbf\xeb\xac\xfe\x1b\x16)\x1fJD\xbf\xb1?" +
	"\xfa\xd27jpV\xbe\x81\xcbs\xfa\xf7\xb6\xbd\xff\xee" +
	"\xe2\xf9\x7fSl\xf0F\xde\xd6\x09\xd1\xa9\xb7Q\x7fn" +
	"\xc3\xefs\x09W\xac\x1a$\x8fm\x88\xd1\x08n\xad\x83" +
	"\xe8\xc8\xad8\x85\xb3\xb6\xd2\xeap\xc9l\xac\x1c\xca\x86" +
	"\xd0\x9a\xdb\x1f\x8c\xdew\xfb\xf5H\xa4n\xaf-E~" +
	"u\xd7\xd5?\xfa\xc6\x9cm\x87Xd\x8c\x94\xdb\xb6~" +
	"\xeb\xec\xef~\xf0\xd8\xcfq\xc2[w\xde\x01Qe'" +
	"\xad\xe6\x9d8\xe1/\x8e\xfd\x9b3\xaf,\xa9{\x90E" +
	".\x93\xbc9aP\xbfyg\x1dDwQ\xcd\x1d;" +
	"q5\xaf\x0f\xfe\xc3\xdc'\xcf-x\xa8\x90\xda\xe1\xc6" +
	"\x8e\xde\xb7\xf3'\xd1\x07v\x12\xc7\xdcI\xd4N\xd9\xa0" +
	"\x9f\xd8\xbb\xe9\x9e\xc38\x16\x81\x82\xb1\xd8\xbc\xdb\x80\xe8" +
	"\xde\xdd\xf8\xe7\xae\xdd9\xac\xfd\xf5\xdfw=Q\xb56" +
	"\xfcC\xea\x85;\x99\x0c\xea\xef\xdb3\x11\xa2G\xf7\xe0" +
	"+\x0e\xef\xc1\xfe\x96T\xf75\xfc\x8fk\xb6\xfe\xb0`" +
	">\xa8\x13/\xec\xd9\x1d}e\xcf\\\xc6\xa2\x17\xf7\xe0" +
	"\xaap\x19uA\x8f\x89\xcc\x1d\xdb\xfbj\xf4\xd4^\\" +
	"\x15\xd3\xbfC\xb4\x7fJ\xfa\xaf\xdf\x8b\xae|\xec\x08\x8b" +
	"\x8d\x802\xef=\xa2\xe9\xc7\xef:\x13=}\x17\xf6\xf8" +
	"\xd4]Dp3u\xbdc6o\xfa\xe3Q$s\xa5" +
	">\x01\x82>\xf0\xa5\xbbG@\xf4\xdc\xdd\xb4\xb9\xef\xde" +
	"\x18d\x90\x1b\xbf+\xf4l\xfcog=L\x02\x84\xcb" +
	"\x0b\x19\xd4O\xfe\xc1n\x88.\xf8\x01\xbec\xde\x0f6" +
	"2\xc8\x1d\xfb\xee\xd8G\xff\xe2\xae\xe7\x1ff\x91+\xa4" +
	"\xdc?\xc5\x87\x1f\xabzd\xf4GX3\xfd\x83\x1b " +
	"\xba\x99j\xdeJ5[\xca\x7f\x9d\x1a\xb3\xec\xed\x1f\x15" +
	"\xee\x10ZA\xc7~0\x02\xa2\xa7\xa9\xf6\xa9\x1f\xe0`" +
	"\xfc\xe2\xf7\xe5#\x92?\xff\xda\x8f\x8b\xd2N~\xe0\xfe" +
	"h\xfa\x00\xfe\xa5\x1e\xc0\xca=w?\xdfw\xb0\\\xfb" +
	"1\x8b\x8c\x96\xbc\x96\x19\xd4\x97\x1dl\x84\xe8\xe8\x83X" +
	"s\xe4\xc1\xb9\x0c\xfeT\xfe\xce_\x9dJ]\xfbX\xc1" +
	"\xaaD\xb6S?\xfa\xa0\x04\xd1\xc9X\xb7~\xc2\xc1\xff" +
	"\x85\xa3p\xdb\xfd\xe3\x96\x95\xbdz\xedc\x05R\x86\xa0" +
	"\x17\xf0\x90\x04\xd1\xca\x87\xf0\xcf\xb2\x87~\x8fc\xbc\xf5" +
	"\xdd\x8a\x9aW\xe6\xeb\xc7Xl$\x84<6DK~" +
	"\xfb\x91\xf7\xa3{\x8f\xd0\x12:B4\xee\xdeom\xbf" +
	"\xea\xad\xe4\x9d\xc7\x90\xba\xf8\xd6\x10\xcdG\xcb#c " +
	"\xba\xe2\x11\xe2\x12\x8f\xe0\xae\xae\xf8\xd65wEv\x9d" +
	":\x86\x9bo\x84\xb7\xf9\xa8\xf2\xe1G\xa6A\xf4\xf1G" +
	"h\x10\x1fi\x081\xc8Un\x9c\xf6\xcf\x0d\xff\x11\xff" +
	"{Z\x9dW<z~\xda\xb7f]x\x03YC\xf6" +
	"\xf8[\xd1\xcd\xc7iF\x8e\xe3\xb0\xc5\xbf\xdd\xd7\x9f\x9b" +
	"\x96\xfc{l\xd6'\x0a\x8a1\xbep\xfc\xfd\xe8\x87\xc7" +
	"\x91Z\\<\x8e}\xb8'\xf0\xc2\xaa\xd3w?\xf5\xf7" +
	"C\xd6\xbc\xfa\xf8\x08\x88\x0e>N\xd4\xedqlv\xeb" +
	"\xe1\x13\xdf\xec\xf8\x8f'\x8e\xb3\xd8\xe5\xe0[\xd5\xd4\xdb" +
	"\xe7\x1e\x7f\x10\xa2\xe7\xa8\xf2\x1bTy\xe9\xf8qO\xfe" +
	"\xe4?~z\x1c\xfb\x10\xc8\xd5\x97\xff\xdd\xde\xdf\xb5H" +
	"o\xd9\xab\xe2\xd6\x7fX\x06\xd1]\xff\x80\x7f\xee\xf8\x07" +
	"\xda\xa7W~\xbd\xe3\xe1\x91\xff^\xf6\x0f,R\xe3\xdb" +
	"\xe2\x82\xac('\xde\x8f\xa6O\xd0\xaa8\x81$k\xec" +
	"\xcf_\xedy\xe7\xa3/\xfc#\x8b\x8d\x03\xf0\x844\xbb" +
	"\xe9\x93\xd8\xf4I\xa2\x17'i\xc1={\xfd\xc9\xbf\x9e" +
	"|\xf8\x04}\x9f+_2\x88\xb6<\xf1j4\xf6\x04" +
	"Vl\x7f\xe2)\x06\xb9\xdc7\xea^x\xa4\xe3\x7f\x9f" +
	"`\x91/H\xb9\x1b_\xac\xf8\xed\xf4\xef\x9e\xf9\x03\x0e" +
	"\xc4\xb9'\xb6@\xf4#\xaa\xf9!\xd5tWb\xb1\x0d" +
	"\x9d\xfd\xe93\xd1\xcd?]\x82\xd3\xf6S\x92D\xe2_" +
	"m\xff\x9fS\"\xd7=A\"\xe5\xa1\x1b\xae\xaa>\xfa" +
	"\xa5#$RF\x9e\xba\x1f\xa2S\x9f\"Z\xfc\x14\xee" +
	"\xa4\xbf\xdaq$0\xea\xf8\xbe'\x86\x88\xf77=\xb5" +
	"\x0c\xa2k\xa9f\xfa)$?W.\xdb\x1f\xfb\xd7C" +
	"?\xf8)\x8e\xae\\@\xb5\xa3\xf7<\xf5V\xf4\x01\xac" +
	"\\\x7f\xf0)\x1a\xdcM\x7f\x17|\xa9\xf6\xef~\xf6\xd3" +
	"\x02bE\xaa\x80rz\x7fT=\x8d\x95\xf9i\xaa\xec" +
	"\x12\xdf\x82\xcd\x11&b\xfd\xb3\x87\xa3\xfcgH\xadN" +
	"\xfe\x8c\x08\xcaV\xeb\x8a\xc3q\xfd\xf4\x93H\x7f|\\" +
	"\x8a\xe6-v\xe6\xfd\xe8Mg\xf0\xaf\xd5gp\xa5\x8d" +
	"Z\xfc\xda\xff\xd8\xff\xc8\xd7N\x17\x13\x81\x1f?sG" +
	"\xf4\xd4\x19b\xefg\x88\xa7\xdfr\xc7\xfb\xcf\x1d\xfd\xf2" +
	"\xefO\x0b\xc2}$\x91\xad^X\x01\x9f\x881\xae\x7f" +
	"\xe7\x17c z\xf1\x17$\x03\xff\x82\x06y\xd8\xf2o" +
	"\x9f]\xf6\x17\xdfy\x06\xfb1\xc2\xa3\x83\xd4\xf6\xe6_" +
	"~\x1c\xdd\xf1K\xac\xbc\xfd\x97\x7f6\x8cA\xae}\xde" +
	"\xe1\x9e=\xd2\x83\xcf\x10msEV\x06\xf5\xaf\xbc9" +
	"\x0d\xa2\x17\xde\xc4\x87\xce\xbd\x89\xe3|\xd7w'\xa9\x1b" +
	"O\xacxn\x88\x8a1\xf2\xdc\xc7\xd1\x09\xe7\xb0\xcdq" +
	"\xe7\xbe\x8d\x1dp\xb9[\x11\xb1i\xc7o\xceD\xf7\xfd" +
	"\x06\xb9\xd2\x03\xbf\xa1\x8fsU\xa6\"\xdc\xfc\xf4\xf9\x9f" +
	"D_8\x8f\xfb\xf3\xecy\xe4\xe6\xefn=\xbb\xe2G" +
	"o\xed\xff\xe7B\xe9\x8d\xf8A\xe4\xc2\x83\xd1\xd1\x17\x88" +
	"\x0c^\xf8\x0d\x83_\xe9\xbf[\xb0u\xea\xe0\xf3\x05\xa2" +
	"&\xd1\xb5\xf7.\x8c\x80(\xbc\x85u/^\xc0\xe9x" +
	"\xfc\xe3\x1b\x1f\xf9\xd1-\xc9\x17\x90R\xc9>9\x88\x1a" +
	"^\xfd\xd6\xc7Q\x8e\x95\xeb\x95\xb7\x9e\xc2.G\xee\x9e" +
	"x\xfd+\xff\\\xfd\x8b\x82\xefk\x81\xd0z\x08D\xb7" +
	"\xbf\xbd%\xba\xe3m\x1a\xe2\xb7\xaf\xba\x9cA.\xb1\xd4" +
	"\xbc\xf1\xfd\xc1\xdc/\x88\xf3\x0f\x7f\xe9\xf0\xea\xa5\x9d\x8b" +
	"/0\x06s'T\xc2|\xa8\x99U\x89}\xaa\x99^" +
	"\x09\xbfb\x90k\xeax\xc7\xa8\xff\xe3\xc0K,R\xee" +
	"\x93\"\x19\xd4\x1c\xae\x84\x07k\x1e\xa5\xba\xd7\x1f\xa9\x04" +
	"\x19\xae?^\x09\x120\x96\xdbw\xeb\xa41\x0b~\xbd" +
	"\xfb_X\xa4\\\xf2?2\xf7p%\x8c\x80\x9a\xc7E" +
	"\xfb\xc7*\x01E\x86\xdfn\xfc\xf9\xf3c\xb6\xdd\xf5/" +
	"\x85\x12_Y\x88\xb1\xb9/UB9\xd4\x9c\xa3\x07\xe6" +
	"\xbeQ\x09:\xce\xe6\xff\xf9\xdb\xc3\x1f\xffx\xc4\x98_" +
	"\x92\xa4\xea\xae&\x06s\xdf\xa9\x82iPs\xb1\x8a\x9a" +
	"\xff\xa8\x0a\x90\xc2\xdc\xfd/7e~s\xb4\xeae\x16" +
	"\xa9\x96<J\xc7`\xee\xea\x08HP\xc3#TY\x89" +
	"P_n\xfc\xc3\xa8\xcd\x03w.z\x19w\xee\xc4\x82" +
	"\x9d[\x93\x8d\xc0\xfb5\x9b\xa9\xfe\xdc[#\xa0\xa3\x94" +
	"\x18\xbfj\xc3w~\xb6#\xf8\x0a\x0e|\xa8`\xb1\xd4" +
	"\x9c\xbc\x1c\xde\xaay\xeerz\xe0\xf4\xe5@\x1ch\xd3" +
	"\x8a\xef\x7fa\xca\x97\xbf\xfe\x8a\xd8\x92\xf9\x9a\xcf\xdcc" +
	"\xb5\xd8\xa5S\xb5\xe2\xe9Z@z\xaa<\xf4\xc2\x99\xef" +
	"\xfc\xe5\xb9\xff]\xa8I\xcc=8\x1e\xe7\xea\xd1\xf1T" +
	"\xf9\xe8x@\x1a\xf5\x85\x9b\x8d\x9d\xdb\xa3\x93^+\xb2" +
	"\xcek>\x1c\x0f\x0f\xd6\\\x14\xd5?\x1aOmG\xaf" +
	"\x1b\x1f\xbd\xe3\xce\x99g\x0b\xb9\xcb\xdcw&@\x1d\xd4" +
	"\\\x9c *O\xa0\xb6\x07\xa7T]\xf1\xaez\xf4l" +
	"\xe1@\xd6\xcc\x9a\x08\xef\xd7,\x98Hu\xe7M\x04\xdc" +
	"\x99W,^\xf3\xbf\xe6\xad\xb9\xf2_\x0bi\xb0\x18\xeb" +
	"\x89\xf0D\x8dJ\xf5\xe7\xf2\x89@t\xcd\x9d\xc5!\x0b" +
	"8\x08\x81\x9a\xc8$\xd8_3z\x12\xaccl\xee\xbe" +
	"I@\xb2\xae+\x1f\xc5\xcaaX\x01\x99\xaf\xb98\x19" +
	"^\xad)\xbb\x12\xaebl\xee\xd4+\x81\xc4]\x97'" +
	"\x17\x88!\xb8\xcej`&<\\S6\x13\x9606" +
	"\xb7e&\xacC\x8e\xfe\xeb\x91W}\x8b\xc3\xa47\x0b" +
	"\xe8\x00\xad\x85\xb5\xf3`\x7f\xcd\xe0<\xfa\x9e\xec<\xc0" +
	"\x1d[\xb9\xe3\x83\xdf\x9f\xbf\xf6{o\xd2\xa6r\xd5\x1c" +
	"\x06s\xdf\x9b\x87\x13\x05\xf3\xe9\x83/\xce\x83\xab\xb0\xfb" +
	"_>\xff\xcc\xe5\xc3\x01\xce\x89u\x90G\x12\xe7\x1e\x9d" +
	"\x8f\xcb\xf8\xa4x\xe0\xf1\xf9\xf0\xb5\x12\x06\xb9\xdd\x97\x95" +
	"\x0d\xfb\xed\xce\xcb\xfe\xbd\x98X4\xf7\xd6F\x18\x035" +
	";\x1a\xe9\xc7\xf6F \xaa{\xf8\xdd_\xddh\x9c7" +
	"\xff\xbd\xd8R\xaby\xa3\x05\xde\xaay\xa7\x85>\xe0B" +
	"\x0b\xad\x06\xb7F\x01-\x8b`\x9d\xe7\x16\xc3\xfe\x9a\x97" +
	"\x16C/cs\xe7-\x81\xde\x00\x83\xdc\x81\xed\xbf\xfb" +
	"Y\xc7\xbd\xd6o\x90\x0b\x04\xf3\xc5\xf7\xb9\x13\xda\xe1\x06" +
	"\xa8\x99\xd3N=\x9a\xd5.6\xee\xafo\xb8}y\xd3" +
	"\x867~S\xa0\x91\xd2\x9c\xcd=\xb9\x1ci\xc3\x0b\xcb" +
	"\xe9\x89\xe7\x96\x8b'.|#U\xb9\x7f\xcb\x15\xe7\x87" +
	"l\xf5\xa3\x9d\xb8BOv\xd2\x07<\xde\x09\xbfGJ" +
	"\xf5\xd7\xbf\xfc\xb9\xf4\xf3{\xce\xb3\xd8\x15\xe0\x93\xb3\xa8" +
	"?\xb18\xd6W\xe2T\xff\xa68\x91\x86\x87\xf7=," +
	"\x1d\xfa\xd1\x7f\x9cg\xb1:\xf0\x99\x8c\xa8\xfeGq(" +
	"\x97jFwQ\xfd\x91]4@.\xa5\x8c\x95Ci" +
	"\xe1\xaa\x0e\xae\x8035\x91\x15P\xc3\xd8\xdcq+\xc4" +
	"\x0c$\xbfv\x97v\xcf\xb1\xbf\xbc0d\xef\xb6\xaf\xc2" +
	"o\xbdi\x15=\xb9z\x15\xed\x19wK\x15,h\x14" +
	"\x04jn]\x05\xf7\xd7l]\x05s\x19\x9b\xfb\xe8*" +
	" {\xe3\xd6[\x97o\xbf\xef\xa6\xb2\xb7\x0a7\x19-" +
	"\xd0q7\xc3\x99\x9a\xa97\xd3`N\xbeYl\xb2#" +
	"\xfd\x0f\xdd~\xeb}\x07\xdeB\x111\xe8\x890\x82\xf6" +
	"\x1cU`\x0b\xd4\x9cR\xe8\x89\x93\x0a\x90\xba\xe3\x0aD" +
	"\xf9\xfa'\xd1\x93\xd6$\xbcU\xb3\"I{l0)" +
	"6\xa5+\xee\x15X\x81P<\xa99\xcd\xe1\xad\x9a\x97" +
	"8=\xf0\x0e\x87\xff@\x09e\xf7\xc9s\xa7_>v" +
	"\xf0\xff\x14\xea\x10s\x1fM\xe1\x8a>\x95\x12\xa40\x05" +
	"\xdfe\xe0\x19%\xf2\x17(\xf5&\x92F\x12\x91\xc6\xe1" +
	"\xaf\x99\x9c\xa6\x0dyw\xcb?\xde\xf9\xab\xcd\x7f\xf9." +
	"\x8b]\x05\x15\x9e1W\xec\x98\xcdi\xe8\x84\x9a\xbdi" +
	"\xfa\xb1+\x0d$\xc3_u\xf5\xdf\xff\xe6\x86\xd5\x15\xef" +
	"\xb1\xd8d(\xcd\xed\xbe\xfd\x7f\xacy\xf9\x97\x9b>\xb4" +
	"\x9f\x80~h\x84\x9aH?\xfd\xa8\xec\x07RV\xbe\xf9" +
	"\xfa\xd5\xffx\xea\xe9\xed\xef\xa1>\x18\xf4\xf4A\xea\xd2" +
	"\xe3\x1b\xe0\xd5\x9a\xd3\x1b\xa8\xfe\xa9\x0d@\x8c\xfa\xdf\xb2" +
	"\x7f\xf5\xfa\xe9\x9b\xee|\xbf\xd8\x96\xd9\xfeu|\xc1\xbe" +
	"\xaf\xd3\x03{\xbf.f\xe0\xef\x0f\x9f.\xff\xcba\x17" +
	"\xdf/\x94q\xe6\xbe\xb3\x099\xe3\xc5M\x82Do\"" +
	"\xf6u\xf3c\xffx\xe8\xdf\xd7L\xf9\xbf8\xc1r\xbe" +
	"\x0e0w\xe4f\xdc\x90S7\x8b\x15\xb1Y\xcc\x97\xfb" +
	"\x89\xb1(\x04\x0a,\xdcs\xb3[\x90\x0cm\xddBK" +
	"z\xc7\x16\xb1!\xffq\xf3\x89\xf3/\\\xb7\xffwC" +
	"\xfa\xd3\xba\x15'l\xf5V\xea\xcf\x8a\xad\xd4\x9f\xdf\xed" +
	"\xfb\x9b\xef\xd4\x7f\xef\xdf~W(2\xcfMo\xc5\xce" +
	"l\x16\x95o\xddJ\xeb_\xfe\xc5O\x8eG\x12\xf3~" +
	"_\xa8@\xcd}`+N\xd5\xe3\xa2\xf21\xd1\xb2k" +
	"\x90)\x94\xd1\xaa\xa0\xe6\xb9\xad`\xd4\xbc\xb0\x95\x96\xc2" +
	"+[\xa1\x81\xb1\x9a9\xb7C\x8d\xa75\xc4FB\xa9" +
	"\xd7w\x1a\x9dY\xb7c\xef\x17\xddN\xdf\xda~;\x90" +
	"\xf8\xec*\xd6EV\x7f\xf6N\x14\x06\xee\x14cs\xa7" +
	"\xd8_\xdf\x19\xf3\xe2\xf7\xd7L\xdd\xffq1\xfbj\xcd" +
	"\x84o\xc135\xd3\xbfE#;\xf5[br\xcf\xac" +
	"\xfc\xf9\xde\xf7\xbe\xfb\xc4\xc7C>\xb9r\x17R\xabq" +
	"\xbb\xe8\x93G\xef\xa2\xf1Y\xbe\xadwF\xe6\xc4u\x7f" +
	",\xf0\x02Pob\xbb\xe0\xd5\x9a\x9bD\xf5\xd5\xbb\x88" +
	"X\xfd\xf8\xc1\x9bc\xffr\xcdc\x7fd\xb1+\xc1g" +
	"H\xa2\xaf]\xbb\x1b\x1e\x84\x9a\xed\xbb\xa9\xfe\xd6\xdd\xb4" +
	"[\\!\xbe\x88\xe5\xa6\xe6\xc2nx\xa2\xe6\xbd\xdd\xf4" +
	"\xb5\x17w\x8b\xa5|\xf2\xaay\x7fq\xe4{\x15\x9f\x14" +
	"\xb2\x0b\"?\x17\xf6\xc0\x1d5\xef\xed\xa1\x17\xbc\xb3\x87" +
	"\xa8\xed\x8b\x0d\x7f\xf9\xee\x9e\xaf\x95]\xc4\xadRZ\xb0" +
	"U\xf6\xed\x85\x87k\xee\xdbK\x83s\xcf^\xd1\xfe\xde" +
	"\xc5\xcdk\xdaw}\xf5\"n\x95Q\xdeVYQ\x12" +
	"\x82\x10,\x99\xab~\x17\xba\x81\xc1\xdc\xecw\xc5\xe0\xff" +
	"\xd3\x84\xccW{7<s\x91\x86\xc7\x1dK\xea\xcd\xdc" +
	"q\xfb\x90\xdcN\xdfG\xdd\x99\xba\x8f\xbe7\xd5X\xfb" +
	"\xc4K\xa3\xa7\xfe\x09\x97\xbe\xcf\x96\x1b\x1c\x89\x0f<\xba" +
	"\x0f&B\xcd\xa9}\x82\x18\xee\x830.\x87\x8e\xef\xed" +
	"x\xf3\x9e[f\xff)\x7f\xcdQ\xff[\xbe\x0f\xfbk" +
	"\xda\xbf\x0f!&\xe7\xfe\xf9\xad\x8f\xf5\xed\x87\xe7\xfc\xa9" +
	"\x18\x95\x9a\xfa}\xd8]3\xeb\xfbB\xbc\xfe>\xa0\x06" +
	"\xb1\x9a\xbf9\xe9\x81\xd8\x97\xffT\xa8\x80\xce\x8d}\x1f" +
	"\x092\x17\x95\x95\xef\xc3r\x96\xb3\xff{!\x97\xd2{" +
	"g$\x94\x8c&g\xe6\xc7\x12zz\x89f\x9a3\x9a" +
	"\x8dv\xae\x98Y\x83\xa7\xb9f5t\xf2\x8cnX\xb1" +
	"\x00\xf8\xe8`\x04\xc6\xc8\xf1\x95\xb1\x8c\x1c`,\x00\x8c" +
	"EA\x9e\xcfX\xfc\x13I\x86x\xa9,A\x04\xa0\x1a" +
	"\x10\x0f\"\xde)\xcb\x10\xaf@X\x92\xaaAb,Z" +
	"F\xd5\x03\x88W!.K\xd5 3\x16\xad$\xbc\x14" +
	"\xf1j\xc4\x03\xa3\xaa!\x80\xfa\x8f\xbc\x9e\xb1x\x15\xe2" +
	"c\x11\x0fJ\xd5\x10d,:\x9a\xeaW#>\x1e\xf1" +
	"\x12\xb9\x1aJ\x18\x8b\x8e\x93\xbb\x19\x8b\x8fE|\x0a\xe2" +
	"!\xa9\x9a\x94\xae\xc9\xb2\xc1X|\x12\xe23\x11/-" +
	"\xa9\x86R\xc6\xa2\xd3\xa9\xfd\xab\x11\xbf\x06\xf1\xb2P5" +
	"\x941\x16\x9d#\x9fa,~-\xe2K\x11//\xa9" +
	"\x86r\xc6\xea[\xe4r`,\xde\x81\x057b\xc1\xb0" +
	"P5\x0cc\xac~\xb5\xdc\x8d\x05}X`aAE" +
	"U5T0\x16]+72\x16O!>\x80xe" +
	"Y5T2\x16\xcd\xca[\x18\x8b[\x88oB|x" +
	"y5\x0cg,z+\xf5t\x03\xe2\xdb\x10\x0f\x0f\xab" +
	"\x860c\xd1\xad\xd4\xa3;\x11\xbf\x0b\xf1\xaa\x89\xd5P" +
	"\xc5Xt/}\xc1\x1e\xc4\xefE<\xf2\x85j\x880" +
	"\x16\xbdG\xde\xcfX\xfc^\xc4\x1fB|\xc4\xccj\x18" +
	"\xc1X\xf4\x01\x1a\xa1C\x88?\x82xtt5D\x19" +
	"\x8b\x1e\x95o`,~\x04\xf1\xe3\x88WWVC5" +
	"c\xd1c\xf2\xfd\x8c\xc5\x8f#\xfe4\xe2#\x87W\xc3" +
	"H\xc6\xa2\xa7\xa8\xffO\"\xfe<\xe2\x97\x85\xab\xe12" +
	"\xc6\xa2\xcf\xc9\xbff,\xfe\"\xe2\xaf#^SU\x0d" +
	"\xa4\xecR\x7f^G\xfcm\xc4GE\xaaa\x14c\xd1" +
	"\x0b\xf4]\xef\"\xfe\x09\xe2\xa3gU\xc3h\xc6\xa2\x1f" +
	"Q\xfb\x7f@<\x10\x90 2fR5\x8c\xc1\x05\x17" +
	"\xa0\x05\x87xi@\x02\xb8\xbc\x1a.\xc7\xf5\x16\x18\xc3" +
	"Xg\x00\xd7I@\x82\x06\x83+\xa6\xaeA\x09\x93\xa0" +
	"\x84A\x83\xc9\xd7~%\x9b\xf6\xfflW\x06\xdc\x9fF" +
	"O\x9bn\x9a\x10b\x12 \x0b7\x07M\x8b\xa7;-" +
	"\xd6\x90X\xa9\xa4\xd4$\x00\x93\x00\x184\xf44\xe9Y" +
	"\xcd\x82R&\x01j\x03\x89\x94\x9eX\xd3\xc9M\x16\xe2" +
	"\x96\xe9\xa2\xee\xd3\xb5\x89.5\xcd\xa1\x8cI\x80j^" +
	"o\xc6l\xe3J&\xce\x1axB\xd7\x92\xa6\xf3v\xb7" +
	"@\x12\xf8\x0a-\xc1\x0dKQ5\x0b\x06\xfdu\xba\xf4" +
	"%)]\xd6\x14\xd3\xc4f\x1bU\xc5lWS)\xd5" +
	"\x14O1\x06\xe5L\x82r_\xdd\xc0\xa5\xea:o\x08" +
	"i\xd6\xa0\xf3\xd4\xc6\xde\x8cy=\xe7k\xdcA\xe8\xcd" +
	"\x88g\xc0y\x81\xfb\x81\xd8>\xb6\xcaj\xb1]\xd3\x8f" +
	"7\xe1\x88HX\xea}\xc5`;\x0c\xad\xc3\x1a\xe2z" +
	"\xd6Hp\xef\x03S:v\xb7\x09\xb0\x14\xcb\xe4\xa1\x85" +
	"\xabY\x88+F!\xda\xccde\xd0\xeb\xb6\x00\xdb\xc1" +
	"\xf9\xde\x10\x0e\xb5\xfbzQ\xda\x05\xf6\xa8\xf8\x06\xcd~" +
	"\xbf\x84\xef\xf7\x7f\x80\x7f\x90\xc4\x8c/68\xac\xcdr" +
	"-1\xd8\xa8\xca\x8a9\xa4P\x12\x85y\xf3\xe8\xd4\xe9" +
	"18\x95\xc2\xa0\xf8~\xe6-I1\x1ea\xcf2\xc1" +
	"\x00\xc2\x0cd\xb3\x1f\x863\xe8\x90\x01\xaa<2\xcc\x00" +
	"A\x97\x86\x072\xf3\x91~\xfb\x88\xb79\xa3I\xd7L" +
	"\x8b\xa7R\x8a\xa5\xea\x9a\xdc\x9a\xec\x00\x88\x8dE\x1a\x1c" +
	"i\x9f\x88\xcfGZ\xa61\x06RdA#c G" +
	"\xe6\xccg\x0c\x02\x91\xe9\x08\x06#\x93\xeb\x18\x83\x92\xc8" +
	"\xb8F\xc6B\xbd\x193lv+\xe6\xc6^%\xa5\xa6" +
	"\xb8\xde\xd0\xcd\xd5\xa4\x9e\x0d\xabin\xd6\xae]\xaf\x99" +
	"\xe6F{\xf4\xdc\xfe@f\xfe\x8a\xee\x94>\xb0$\xa4" +
	"\x99fl\xac_\x93\x8a\xcc\xea\xf4$\x89\xc8\xac\xdd\x9e" +
	"\xbd$2\xa7\xd33{F\xe6,\xf38\x19\xfep\x05" +
	")\xac\xe6\x9a\xd5#s\xee\xc8\xc5\x15\x8b8\x15\x03+" +
	"\xe7\x8c\x00pM\x80`\xe5Z2}<\xcd\x0d\x95\x81" +
	"\x99k\xd55\xbdY\xb1\x14\xc6Xn\xe9\xba\xb8\xa5X" +
	"Y3\xefo\xa8\xcb-\x11\x1f\xd3\x02\xf6s&c\xb1" +
	"\xb1r\xa0\"\x97C\x86\x17yt7c\xb1\xc7d\x88" +
	"=)A%\xfc)G\xec.r\xb2\x93\xb1\xd8\x09\x19" +
	"b\xcfJP)]\xcc\x11\xb7\x8b\x9c^\xc6X\xeci" +
	"\x19b/JP)\x7f\x92#^\x17y\x01\xd1\xe7e" +
	"\x88\xbd&Ae\xe0\x8f9\xe2t\x91W\xb0\x85\x97e" +
	"\x88\xbd)Ae\xf0\xe3\x1c\xf1\xb9\xc8\x1bw0\x16{" +
	"S\x86\xd8\xbb\x12T\x96|\x94#.\x17y\x07\xeb\xbe" +
	"-C\xec\x0f\x12\xe4\xd2C\xbf\x19\xaa\xbc1f\x00U" +
	"\x0cr\xdc\x1b\x05\xa8\xf2\x06\xdd.U\xbdq\x81*o" +
	"\x16\xec\xd2>o\xa4\xa0\xca/`\xe4\x97B\x1dT\xf9" +
	"=IT\xda;t4\xa1\xca\x9b@\xbb\x96\xe9\xcd!" +
	"Ty\x8b\xc5.\xf5-\xf3v=\xc9S\xd8\xd3\x95u" +
	"3\x9aU\x93k\xbdJ/\xef0xRMX\xaa." +
	"k&-sG:\x89<:\x82\xb1\xd8\x111-\x8e" +
	"h\x129}?c\xb1ge\x88\x9d\xf7\x04\x93\xc89" +
	"\x9c\xd6\xf3\xc8l\x00\xc5\x12Y\x88%\x00\xc8\xb4\x02\x80" +
	"b\x06\xe2\x81\x00MV\xfd8\x18\x81\xdc~\x0a\x164" +
	"cA0H\xf3U\xbfH\x14\xb4aA\x1f\x16\x94\x94" +
	"\xd0\x94\xd5sQ\x90\xc1\x82;A\x02\xb0\x9cm\x8d\xb4" +
	"\x017s\xb7\xa1\xac\xe1\xcd\xaa\x09\xceG\x85\xf4n\xb3" +
	"\xb0R\xafb\xd2g\x83\xa8\xa2w\xc3\x90*\xa6\xc5\xb9" +
	"\xb1\xbc\x9f\x83a\xa8I\xac#\x0fm\x86\xdeU\xdf\xce" +
	"e\x8b\x1bf\x077\xe2D\xe4\xe3k\xb3\x8a\xc1\x93\xc5" +
	"\x9b\xa5Gf\xff\xe7\x1f\x99\xf3\x9fz\xc4'\x95\xb6+" +
	"\x9a\xd2\xcb\x0d\\\\|F\x87\xa1'\xb8i\xc6\xad\x90" +
	"bq\x9c\xe3jw\x8eo\x9d\xc6Xl@\x86\xd8m" +
	"\x128S\xbcy\"c\xb1\x0d2\xc4\xb6\xe1\x14\x8f\x17" +
	"S\xbc\xb5\x91\xb1\xd8&\x19bw\xe2L\x0a\xc13\xb2" +
	"\x1d7\xe36\x19b{p\xda'\x88\xbd\xb8k\x0bc" +
	"\xb1\x9d2\xc4\xee\x96 \xac)i\x0e\x15L\x82\x0a\x06" +
	"\xa1\x8c\x9a\x84\x00\x93 \xc0`\xa3\x91\xd54U\xebu" +
	"\xc4\x83\x1c\x1fP\xad&=\xc9q\x9b\xd8urf\x9f" +
	"\x9eM%\x1b9t\x8a\xca\xcc\xad\xed\xa3\x95M\x8a\xd6" +
	"\xacX\xa0\xe0wU\xb9\xdf\xa5`wo\x94!\xd6\x87" +
	"kW\x12\x1f\xc6\x11\xbcY\x86XJ\x02\xb0\x97\xae\x8a" +
	"\x1f\x9b\x94!\x96\xc1O(\x11\xdf\x95F\xb0O\x86\x98" +
	"%\xc1F%\x994\xb8\xe9\xf2\xc1\x8d\xddYb\xe1\x0e" +
	"\xd7\x0c%\x15\x0b*\x99\x04\x95\x0cB\xa6\x91pY\xac" +
	"\xaf\x8f-ZBO\xf2\xdaV-\xc9\x07H%\xf0\xdc" +
	"n0-\xdc5\x98\xe1\xb1)\xaeRP\x06\x8d\xce\xb6" +
	"\xa9\x02\xaf\xf7\xd1J\x98\x86R>\xe2\xd5\xe0\xd3\x0a\"" +
	"\xb0\x0c\xa5|\xc4\xc7\xfa\xb7\xdfh@\x99t\x14\xe2\x93" +
	"|\xdb/:\x01:\x19\x8b\x8fG\xfcj\xdf\xee\x8bN" +
	"\x85-\xce\xae\x9c\x0d>\xad`\x16\xdc\xc2X|&\xe2" +
	"\xd7\"\x1e\x0a\x08\xad`\x1e\xe1\xd7\xb8\xbb\xb8\xb4\\h" +
	"\x05\x8b\xa0\x0e\xa5\x7f\xc4\x97\"^6Lh\x05-0" +
	"\x91\xb1\xf8B\xc4\xdb@\x82\x8d=\x86\x92\xe6\xadIg" +
	"\\\xc3\xd6`\x06Y\xb8;4\x82\x85\xe78\x8d]k" +
	"\x12\x17\x86+&\xf2^\xe4\xd3_ar6\xed\xad\x16" +
	"\x01\xb62H\x16Vl\x85\xa4\x98\x02\xaf\x09\x0b9\xb0" +
	"\xa5\xa4Y8\x13\xd7{\\A\xd3\x07\xb7xpmO" +
	"J\xe9uW@(\xc55\xb7\x1dg\x96\xa5\xcc\xfc\x0e" +
	"EK*\xf6\x8eS\xb4\x86\xa4\x82\x13\x8b\xcbr\x0a\xad" +
	"\xb4\xb5\x8d$9\xa87\x90\xe4\xc0;IrPn " +
	"\xc9\xe1\xa6:\x92\x1cVL$\xc9\x81d\x8cP\xa4e" +
	"\x19~rd\x11V)\x8b,\x98\xc6\xd8\xc6\xac\xb6F" +
	"\xd3\xd7i\xb9u}\xaa\xc5;\x14\x8d\xc9I%\xd7k" +
	"\xf0A|7\x03%\xd7\x9dR\x12k\xec\x82\xda\x0cO" +
	"*\xa9PV\xd3CI\xdd\xcc!\xd9\xc0\x1e\"\xcbv" +
	"\xff\x96W\xd6\x85-\x83\x9b~6\xd1\xa6k\xbd\xaa\x95" +
	"M\xaa\x9a\x92\xeaH)\xda\x8c%\x19\xb3\xcbPn\xe1" +
	"\x09K7\x06\x19\xc3O*uw\xdaT\xe4\x12\x93d" +
	"\x88-\xf4q\x89\x05\x08^#C\xacK\x02\x18(\xa0" +
	"S0\xf8)\x84\xabM\xed\xe7mz\x82\x04\xaf?W" +
	"RiE\x9b\x11\xb7\x94\x90\x95%\xe6TA#9\xce" +
	"\xa0\x91\x1c}\x0b\x8d\xe4\xc8:\xc6rYM\xd5TK" +
	"UXmJ]\xcf\x93\xb9\xac\x96PRj\xb7\xc1\xc2" +
	"\x8a\xc5\x93\xb5\xfd\xa8\x8a\xb8\xaf\x09:\x12\x16\xaa\xed>" +
	"\xb9O\xe8\xec>\x04\x84\x02\xef\xda\xa9#\xb0>\xd7e" +
	"(\x895H\x8c\x1a\x04\xe7\x8e\xcdvw\xeeM\xb4C" +
	"W\xe1\x0aO\x82KO\xa3\x0a\xa0\x92y3\xc2)\xda" +
	"\xb8 6\xae\x0a\xa8L\xf6!n\x81O\x9d_\x0b\x86" +
	"\xc3\xec6\xd0\xc6\x05\xb1q\x07\x890X\x88o\xa2\x8d" +
	"\x0bb\xe3\xde\x0a\xa8\xd4\x0d ~\x1bm\\Il\xdc" +
	"\xcd\xf00c\xf1\xdb\x10\xdfI\x1b\xb7Bl\xdc\x1dD" +
	"0\xeeD\xfc.\xda\xb8\xb2\xd8\xb8{i\x83\xeeD\xfc" +
	"n\xf0\xa9\xf3\xfb\xe0\x0e\xc6\xe2w#~\x08\xf1\xf2R" +
	"R\xe7\xa3\x07a7*\xc3\x88?\x82\xf8\xb02\xd2\xe6" +
	"\xa3G\x890\x1cA\xfc8\xe2\x15c\x842\x7f\x8c\x08" +
	"\xc3#\x88\x9f\x00\x09\xc2f\x7fk\xd2\xa5\x96V\xc1\xb0" +
	"B\x957\xec\xb6$\x931y6\xa9\x1b\x0a\x0bi\xbd" +
	"\x1c\x861\x09\x86\xa1\xe6\xa0\x18\x86\xca\x8d&V;\x98" +
	"Hq\xd3\xc17&\xf5L&\xc5\x0dG{h\xe8\xd5" +
	"L\xd3\xf7>[\xb4Z\x0c\xb6R1(\xa8\xb3\x8fz" +
	"'\xd6 1@\xb2\xe3P\xfa\x84\xa6\xbb\xe5Ng@" +
	"\xeb\xe5q+\xc9\xfb}J\xa4\xdd\xa5\x0e\xe8SL*" +
	"\x84~\xb7\xcc\xeeV\x9c\x85\xf1!\x07\xae5\xd5^_" +
	"\xe7|\xac\x03\xf7C\x97\x11V\x12kh\x03|\x0a\x9b" +
	"\x80\xcfb\x13\x88W >\xca\xcf&F\x12\xee\xb1\x0f" +
	"\x87M\x8c&\xbc\xda\x95\xde\x1c61\x8e\xd8\xc7X\xc4" +
	"\xa7\xf8d\xb4\xe8dZ\x85\x1e[\x09\x85\xc4j\x9bJ" +
	"\xab\xdce+\x13JA\xac\xb6Y\xc4\x9e\\\xb62\xab" +
	"\x0c?\xa0\x8c\xf8\xca2?_\xd9H+\xa3\xd5\x95\x1c" +
	"\xc2\xc9N\x9er\xc6-<\xe8\xff\xd1\xef\xff\xa1\xf8~" +
	"\x10Y\x8f#Y\x87\x8c\xbb L\xb1\xce\xdcI\xcb\x1a" +
	"\x06\xd7\xac.\x16B\xe6\xee\xa0XI\xd55\x85\xc9\xc6" +
	"\xa0+}\xe8ZBO\xe3ZeC%\x92@f~" +
	"\x93\xaeY\x86\x9e2\x05+hS,n(\xa9\xb6X" +
	"'\xfdf\x052\xf6|[\xc6>\xee\xa3\x9e\xc7Po" +
	"9.C\xeci\x9f\x8c}j\x84\xa7$9\x93\x179" +
	"\x8d\x8f?)C\xecyo\xe6\"\xcfu\xda\"\xfa\xcb" +
	"\x1e\x91\x88\xbc\x84\xe0\x8b2\xc4^\xc79\x0b\x0aU\xe8" +
	"\xec\x13\x8c\xc5^\x97!\xf6\xb6\x04\x0dJ\xc2R\xfb\xb9" +
	"\xfbA$\x09\xa3\x84\xb6H\xebM\xf1f\xde\xeb-p" +
	"P\xddA\xd4\xb3V&k\xb9\xc3\x95Zk,G\x04" +
	"U\x11w\x08\x15+k\xe0\x97CrH\xe3\x92\xdd\xb8" +
	"\xa9\x1a<\x89\xef\xf0Z\xca\xdf\x02\xed\x99\xda\x04j." +
	"\x9fGC\x19a\x8f\xc9\xeb\xbe\xd1;;\xd1V\x10?" +
	"\xf0\x8d\xde{8&\xef\xca\x10\xaf@jm\xaf\xfb2" +
	"\xa2^\xde\xfeq\xa8l\x84\xc4#o\x9f8T\xb6`" +
	"\x9f|6\xb7\x0beL\xb5\x90\x01&\xb2F?\x0e\x13" +
	"\x03^X\xb46\xd3\x8a\x0b\xc8baU\xd7<kL" +
	"BI%\xb2)\xc5\x02U\xd7P\x1ce\x8e\xac\x12N" +
	"\xe8\xa6\xe5R\xc7\xcfZ\x96\xad_in\x15\xeb\x92\x16" +
	"\xa6\x9f\x97\xcd\xf7\xf3\xb2\x88\xc7\xcc\x90\x19$\x11\xcf\xf8" +
	"\xc9K\x9a\x86'\x85\xf8\x80\x9f\xbcd\xa9\xbe\xc7\x9c\x1c" +
	"\xf2\xb2\x99\x86y\x93\xa3\xd1\xb9\xe4e;1\xbfm\x88" +
	"\xef\xf1\x93\x97]D.<\xe6\xe4\x90\x97}T\xff." +
	"\xc4\x0f\x103+\x15\xe4\xe5>b6\x1e\xd3*+\x13" +
	"\xd4\xe5 }\xd7\xbd\x88?D\xcc\x0c\x043{\x80\xc8" +
	"\x9a\x8f\x99\x95;\xcc\xec\x09?\xd3\x8aT\x0c\x13\xcc\xec" +
	"q\xf8\x09c\xf1\x13\x88?\x0b\xff\xa9\xdd\xe3\x95u*" +
	"\x16\xcf[\xf4\xdeS\x89\x04O\xe5?\x85[(\xce\xad" +
	"\x0e\x16\xd6U\xcd\xdb]\x0a\xd6\x8cs\x8b\xd5v\x0c\xc5" +
	"[\x0c\x83\xc9\xba\xe11\x1f\x9eR\x06yr9\xab\xcd" +
	"\xdb\xb6\xb5I\x9e\xb2\x94K\xed\xe9\xff\xda\xfe-\xf8H" +
	"Sm\x105\x86lp[\xe6kW2\xb8\xbf\x9b[" +
	"::[\x9a\x16u\xb54\xd3zlv\xd7\xe3s\xb4" +
	"\xbe\x9e\xc5\xf1~\xd9\xbf\x1e_\xa2u\xf1\"\xe2\xaf\xd3" +
	"\xba\xb0\x85\xab\xb3$t\xbd\x86\xf8yZ\x17\xb6pu" +
	"\x8e\xe6\xf9M\xc4\xdf\xa5u!\x89\xf5\xf8\x0e\xad\x97\xf3" +
	"\x88\x7f\x80\xdb\xb8\\,\xc7\xf7\x08~\x1b\xe1R\x09\x97" +
	"\x05\x88\xe5\x18\x94\xea\x18\xeb\x94\x90\x18 \\a{J" +
	"FK\xc8\x94\xab\x11\x1f\x8fx\xa5-Z\x8d\x93\xb07" +
	"c\x11\xbf\x06\xf1\xe1\x01\xdbS\"\xe1\xea\x9d\x8dx\x07" +
	"\xe2aY\xac\xc6v\x09\xbf\xaa\x0d\xf1U\x88WIb" +
	"5\xae\x90\x907v!~3\xe2\x92,V\xe3M\xd2" +
	"~\x141\x11OI\xb6\"[\x89\"&\xb5\xdf\x87\xb8" +
	"%\xd9\xbbo8\x8a\x98\xd2\x83(J\"\xbe\x09\xf1`" +
	"H\xf8In\x95p\x947 \xbe\x0d\xf1\x92R\xe1'" +
	"\xd9*\xe1.\xd8\x86\xf8\x1eI\x82\x9c\x99\xe1<\xd9\xa6" +
	"\xa6A\xb5\xc8\xca\xef\xf1A\xa7\x84\xc9\xaa\xe5\xe7\xad\x82" +
	"\xbc5\xf0<\xa7@\x1e\xdds\x16\xe3:e\xb05\xe9" +
	"j^\x86\xae$W\x15\xd0D\x02W\x17\x80\x1bS\x8a" +
	"i-\xc9\xa0\xe0\xe8\x8b\xa8#\xc1\x11\xab7e\x8d~" +
	"\xd6\x80\xef\xe2\x85\xcdy\xe5\xb5T^X\x9cTM\xab" +
	"K\xef\xca2\xd9\xd0\xdcOJ+\x19\xf1\xe5\xac\xe0\xdb" +
	"\x17%\xfbA5ucp\xa5\x92\x92}\x9f\xea\x14\xb2" +
	"Z*\xf56\x8a7\x94\x8b\xfa\xb8\x92\\\x19\xce\x1b\xa1" +
	"\xc2b6\xe4A\xc9.iVMK\xd1\x12|(\x0f" +
	"\x95\xc4\x16k\"\x8d\x08\xe5\x99Z\x0d\xf7\x1a\xe96^" +
	"\xb4'\xcc\xf7i4Pfs\x81\x07\x1d\xd5e\x83\xbd" +
	"+\x804\x91\xfbq\x99 \xbc\xcd\xd9\x8c\xb8\xe9\xb6\x92" +
	"\xe8\xe6i\x1c\xa8\xe9\xc8\xa4q4\xe6\x11uG\xa3\xd9" +
	"E\x9bz\xa7K\x8c\x87\xd9\x0e\xca\x07Hsy\x08\xf1" +
	"\xa7\x89\xe8\xda\xa6\x88SD\x8c\x9fF\xfcMb\x1a\xb6" +
	")\xe2\x0dz\xef\xeb\x88\x7f\x02\xb6|\x83\xdb\xee#\"" +
	"\x02\x7f ^.\xd9\x1a\x16n\xbb\x88\x842i\x95\xbb" +
	"}C\xc2A\x19\x1d-\xdd\xef\xdf\xa6U v\xdd\x1c" +
	"\xa9\xd3\xd9\xa5\x0b\xb1ziH\xec\xba\x05\x12\xf2\x92k" +
	"\x10\xef\xc2]\xb1N12\xed\x8ae\x80: \xe8X" +
	"\x18\x09\xd9\x10^\xaf\xa4h\x9c\xc1\xb4\x89]\x08+I" +
	"L\x02I\x946\xa1\"\xe3\xb3\x83mL(\xa9\x0en" +
	"$\xdc:|\xc02T\xcdT!\x81oS\x07X\xe1" +
	"+|\x1d\xa9\xa3\x97\xd46\x15\xeb\x89SMR\x07\x1a" +
	"\xd5^\x1f\xe9\x1d\xb2A2\x83\xb4x\xb0S\x97*j" +
	"\x88g\x0c\xae$\x0b\xcbI\xf3nL\xe9,\x94Xc" +
	"\xba\xb6\x9auj\x92/6\xf444\xf3~5\xc1[" +
	"\xb2!T\xd5.1P\x0cL\x08{\x0bU\xd8\x85\x1a" +
	"\xfa\xb8\xda\xdbg]\xca\x92 \x15\xc8;,6\x05\xfc" +
	"\xb1\x9c\xad\xeb}G\xc4Z\xbb}\x91b\xad\x9d\xde!" +
	"\xc0H\xeb\x1d^\xc4P\xa4}\x8b\x17q\x17i\xdf\xef" +
	"\x9dC\x8c\xc4\xb6xg\xb2\"\xb1\xdd\xde\xb9\x9a\xc8\x8a" +
	"\x87\xbd\x03G\x91\xd5\xbbs\xcb3\\\xcb\xa8)\x9d5" +
	"X\xd4\xaf\xdc\xa2\x147\xf0O\x16\xb2\xb2\xa6\xfdK]" +
	"\xcf\x80\xe7\x1c\x09\x0d<\x11\xcd\xc1:\xe4\xd6f\x01\xd9" +
	"@\x97n\xac\xcd\xa2\x86#[\xee\x83m\xb2\xa3r\xd8" +
	"\x00\xf1jD\xbc\xc6\x9b\xc0&\xc0\xbcVt\xc7\xc6\x9b" +
	"\x81wg{E\xdd\xd8\xbbr\x00j\x89\x1cl.\xc1" +
	"\xfd\xb4\xa9\x04\x85\xb6\x12\x09\"\x13l&\xbc\x9d\xf0m" +
	"\x88\xef)\xb1\x99-\xd2\x83]%(\x1b\xdf\x89\xf8]" +
	"\x88\x97\xd9B\xe1\xde\x12\xdc\x7f{\x10\xbf\x17\xf1\x0a[" +
	"(\xbc\xa7\x04\xd9\xde\xdd\x88\x1fB\xbc\xd2\x16\x0a\x0f\x12" +
	"~\x00\xf1#\x88O\xb6\x85\xc2\xc3%\xbb\x19\x8b\x1fA" +
	"\xfc8\xe2W\xdaB\xe11\xea\xcfc\x88?\x89\xf8U" +
	"\xb6Px\x92\xea?\x89\xf8\xf3\x88O\xb1\x85\xc2\xe7\x08" +
	"\x7f\x1e\xf1\xd7\x10\x9fV.\xe8\xc1+%H\xfe^C" +
	"\xfc<\xe2_\x1c&\x08\xc29\xc2\xcf#\xfe\x01\xe2\xd7" +
	"T\x08\x82\xf0\x1e\xe1\x1f\x94\xc8\xd0\x19\x92 2\xa7R" +
	"p\xe1\x8b%\x0f3\xd6\x19BE\x03\xe1\x19\xc3\x05\x13" +
	".\x0b\xe1[+\x10\x1f\x85\xf8\xd8\xb0`\xc2#CH" +
	"\xcd\xaa\x11\x1f\x8f\xf8D\x9b\x09\x8f\x0b!U\x1c\x8f\xf8" +
	"\xd5\x88\x7f\xa1L\x04+L\x0d\xbd\x85\x9a4\xe2\xd7\"" +
	">\xa9\\\x04+\xcc\x0bao\xaeE|iH\x82Y" +
	"\x81\x13\x92\x88Vh\x09!9^\x88\x05mX0\xef" +
	"\xa4$\xc2\x15ZCH_\xdb\xb0`UH\x02\xf8\xb2" +
	"\x88VX\x11BYw\x15\xc2\x16\xbe\xa0\xbcFD+" +
	"\xac\xa5vR\x88\x0f`;W?!\x89p\x85,\xf5" +
	"t\x00\x0bn\xc3\x07\xaaA\x84+l\x0e\xe1<nB" +
	"\xfcN\xc4GJ\"\\a;\xe1\xdb\x10\xdf\x83\xf8\xec" +
	"Q\"\\aW\xe8\x0c\x0a\xf7\x88\x1f@|\xe6h\x11" +
	"\xafp_\xe8\x19\x14\xd6\x11\x7f\x04q\xa8\xac\x86\xb1(" +
	"\xac\x13\xfe\x18\xe2O\">\x7fl5\x8cc\xac\xfed" +
	"\x88\xfcG\xcfb\xc1\xcbX\x10\x9a^\x0dW\xa0\xf4\x18" +
	"B\xed\xe4e\xc4\xdfD\\\x9e_\x0d\xb5\xc8PB(" +
	"\xf6\xbd\x86\xf8y\xc4\xc7_Q\x0d\xe3q\xe2i\xca\xce" +
	"#\xfe\x01\xe2\xc3k\xaba\x02N<}\xc0\xbb\x88\x7f" +
	"\x82\xf8\xd4\xf1\xd50\x11\x19\x10\xd5\xff\x04\xf1\xd2R\x94" +
	"\xef&T\xc3\x17P|,md\xac\xb3\x14WD\xa9" +
	"\x04\xb3\x82?\x95\xaaa\x12.\x89R\x8a\xf0\xc1\x82\xaa" +
	"R;Ne2c\xd1\xcaR\xe4@\x15\x88\x8fB\xfc" +
	"\xb2/W\xc3\x95\xb8TJq#U#>\x1e\xf1\x9a" +
	"\xc5\xd5p\x15.\x15\xaa?\x16\xf1)\xf8\x82YOJ" +
	"\xd50\x85\xb1\xe8\xe4\xd2W\x19\x8b_\x8d\x05\xd7`\xc1" +
	"\xe5\xa7\xa4j\x98\x8a<\xae\x14\xbf`6\x16,\xc4\x96" +
	"FM\xaaF\xc56\xba\xa0\x14\xbf`!\xe2m\xf8\xc0" +
	"\xf4\x7f\x92\xaa\xe1\x8b\xb8VJq\xd5u`\xc1\x8d\xf8" +
	"\xc0h\xb9\x1a\xaef,\xba\x9a^\xbd\x0a\xf1$\xe2\x7f" +
	"\x16\xa8\x86\xe9\xa88\x96\xe2jL\"\x9eA\xfcK\x93" +
	"\xaba\x06*\x8e\x84g\x10\xdf\x80/\xa8{J\xaa\x86" +
	"?C!\xa3\x14W\xdd\x06,\xd8V*AU\xb4\x1a" +
	"f\xa2\x8cQ\x8a\"\xedm\x08\xef\xc4\xfas\x9f\x96\xaa" +
	"a\x16\x0a\x19\xa5(\x03\xef\xc4\x82\xbb\xf1\x05Ru5" +
	"\x0a\xef\xd1}\xa5\xc8\xd4\xefF\xfc\x10>\x10=-U" +
	"C=R\x15\xfa\xe4\x03Xp\xa4T\x02\xb8\x02|A" +
	"o\xd1\xc3\xa5\xf73iV\xfd3R5|\x09IS" +
	")n\x8d{\xb1\xf2C\xd8\xfa\x98\xaej\xb8\x06E\x15" +
	"j\xe4\x10\xe2\x8f >\xee\x8b\xd50\x0f\x97b)\x8a" +
	"6G\x10?\x8ex\xe4\xeajX\x80\xa4\xa9\x14W\xdc" +
	"q\xc4\x9fF|\xc4\xf4j\xb8\x0eE\x1b\x1a\x86\xa7\x11" +
	"\x7f\x11\xf1a3\xaa\xa1\x81\xb1\xe8\x0b\xa5H\xca\x9eG" +
	"\xfc5\xec}\xc9\xcf\xa4jX\x88\xb4\x89\x1az\x0d\x0b" +
	"\xce\x97J\x90\xebo\xe9\xd5\x91\x85\xb3\x06\xc1\xc4=M" +
	"\xf0\x12\x05\xe1\xfe\x0e5\xe9\xd6\xea\xefR\x8c^n\xb5" +
	"\xb1\x102q\x07\xcdfH\x13mbr\xda\x07\xaaE" +
	"\xc0\xc1E\x09+\x8b\x8c\xc3\x91\"\xc0\xeb\xc1`37" +
	"\x8bv-\x9b\x89\xa3\x9aX\xf4\xa1\xacz\xe92Et" +
	"\xb6\x1dT\xcd/h\x0d)V\x06\x8a\x15\xdf\xc2\x8d5" +
	"\x8b\x95\x84\x05\xbaQ\xf4i\xc1&9p\xc3\xf4\x0bO" +
	"Ny_6\xd9\x86\xe2\xb6\xbfc\x8e\\\x93\xc8\xa6\xdb" +
	"\x94\xdevr\xf6{\xd6`\xad]\xd7t\x8a\x9b\xf1\xb7" +
	"\xe7\xb8\x9c\x0c%\xa9\x18qK\x91,N\xf5\x9cjv" +
	"\xb7\x9cj\xe9\xa4(\x85\xa2\xc5\x1b\xb9\xa6t\xa7x\x81" +
	"\x86\xbe\xbc\x9fK\xe4\xc8\xf6\xcbv\xae\xee\xe5\xeb\x17}" +
	"\xa83;\xb6HUf\xebU\xfdMFV5=\x93" +
	"\xa8\xc1\x15c\xa5\xca\xd7A\x93\x92\xf6\x7f\x8f\xd3\xae\x82" +
	"2L\x17\x1f`\xb25\xcbq\xfd\xfa\xc1:\x0f\\\xa7" +
	"\x18\\\xe3\xa6d\x0a\xc5\xa3\xb9\xd8T\xe3l\xb4\xebI" +
	"\x89\xa7\x1aU\xc5\xf4}\x88_\xcf\x11\x0e+\xc9\xf1X" +
	"9\xe3\xc8\\\xab\x98k\x8f\x90\x0b,\x16\xc5\xde\x89\xed" +
	"\xa1\xf4\x08\x86\x9e\xb2%/\x08\xe7\xb6l\xd9y\xeb\xae" +
	"\xf9\xe17m\x01\xb4\xd6\xc4\x12\x08{B\xa5\xed\xb0\xc4" +
	"\x8d\xd8\xa9\xac+\xbe\xa8{\x8a\xed\xa7\x9eK\xae\xf4\x8d" +
	"\xf6Rvm3\x05f\xa6\"\xfa\xb3\x18jG\xa2\x84" +
	"\xb0'\xe7\xda\xfdS<\x19\x13\xc2\x9e\xe0k\x97\xf6f" +
	"L\x1cAM\xe2\xc6\"z\x973@\xb2o\x8aE\x90" +
	"\x85\xd2\xcd\xe4\x14\xcf\x9f\xf7\xc6\x94\x0a\xda\x1aU\xeb\xed" +
	"D\xd1\xd13<\x19j?7\xdauIS-\x1d\xa7" +
	"ay\xde\xc6\xcd_:\x83\x19\xecZ\xde\xca\x89\xebY" +
	"\xd0\x92\xfeG\x9c\xe2\xfe&1\x04`\xf0b\x9b9\xc9" +
	"\x13<\xb5X7\xa0+kh\xfeE\xee\xed\x13\xc5\xb0" +
	"\xdau\x8d\xd5\xeay\x11\x87\x8e~\x0f\xc5\xbe?e\x8b" +
	"\xe1\xe0\xac\xb5\x90\xff\xd1\x1e\xddH\xf0f\x9e`2O" +
	"\x15>\xd2\x04B+\x11\xb1\x18n\xf7$\x11\x9aSd" +
	"\x97:\x9f\xcfd-\x09\xe1\xdc_\xd7\x7feo\xea\xd7" +
	"\x07?t\xa6+\xa1h-\x86\xa1\x1b@\xd1\x95\xdc\xf0" +
	"\x1c\xdcI\xb1\xc4=\x09\xdf\xb7a\x86\x94\x85;q-" +
	"\xbb\xbc@\xec\xf8&\xd6\x90\xca\x9a\x96\xe7C\xcb\xf1\x81" +
	"\x0c7\xf0S5KI\xb5S\xb4F\xb1\x90\x8cN\xa2" +
	"ha\xdc\x1fdcp\x8f\x88G`Y\x8eh\xa7\x88" +
	"\x96\"CC\xa8\xa8\xa1\xa1\xd414<\x9cgh(" +
	"\x0b8\x86\x86\xfb\xf3\x0c\x0a\xb2mh\xd8E\x86\x06\xcf" +
	"\xb5\x19\xb0\xad{{\x09\xf7\xac\xc7N$\xf4>2\x1c" +
	"\xb8\xd6\xe3*\xdb\xa6\x7f\x1f\x19\x15=#q\x89,\xf4" +
	"\x8a\x07\xa8\x97d\x97x\x8c\x8c\xc7\xb6y\xefQ\x8at" +
	"z\x0c\xf1'\xc9\x8e\x11\x14z\xc5I\xf2\x90>\x89\xf8" +
	"\xf3\x8e\x1d\xa3\x9c\x8c\x99(\xda<\x8f\xf8\xdbd?\x09" +
	"\x08\xbd\xe2\x02\x19\xcb\xc9\xda\xf8\x07\xb2\x9f\x04\x84^\xf1" +
	"!\xf9\xd0> _\xdf\xe774\x10\xe9\\\xde\xd3\x03" +
	"&\xb7\x8a1\xb2O5DlLq%\xb9\\\xe3P" +
	"\xe5M\x9f0\xa7QI\xd7:}hIQ\xf6\xe7\xf0" +
	"-&\xfb\xb7\x88\xf5i\xcc\xcc5\x82\xe4m>\x97\xc7" +
	"\x0akH\x1e\xb9\xf4\xac'\x9f\x8b\xa7\xe5\x12\x8a\x08\x8d" +
	"\x82\"\x9c\x82\xf8q\x8ba\xb0\x90n\xb8!V\xe1\xdc" +
	"\xe1\xfe\x9f\xfcv\xb0\xe7\xd0\xf9\xc2\xf0Q93\xbfU" +
	"S-\\\xd23\x16iICW\x93q\xae\x99\xba!" +
	"<*\xd7\xb8\x16\xecATi<\xf7\xbdc\xc0\xbe\x95" +
	"\xfcG\x9e\x83\xc4\x89\x0e\xd8L\x8e\x0ao\xe9;K|" +
	"+-e\xcfq\xe2,\xf1\xedT\xdf\xb3\xbd\x05e\xb1" +
	"\xc4wP\xfb>\x87J\xc0q\xa8,\xcbw\xa8\x04\x1d" +
	"\x87\xca\x0d\xf9\x0e\x95\x92K8TB\x8eC\x05\xdb9" +
	"\x80\xf8\x11\x7ft\xc0aZ\xe3^\x14\x80\x13\x1dp\x8c" +
	"\xf6\xc4q\xcf\xb6'\x895~\x8a\xde\xeb\xed\x95\xcar" +
	"\xa1<?G\xed\xbb\x86\x7f\xd9\x8b!\xcb\x0b.k\xe8" +
	"\xe7ZR7\x9c\x9f\x1b\xfb\xb9a\xaa\xba\xe6\xd4m\xe8" +
	"S\xb4d\x8a\xbb\x8fR\xb0\x91\xb3\xa2\xd2\xca@\xa7\xa2" +
	"\xf5r\xff\xb25\xb8\xa9\xa7\xb2\x96\xcad\xdd5\xfa\xd6" +
	"f\xf4u>j\x98V\xb5f\x9eR\x06\xfd!k=" +
	"j\x8f\xde\xc9M\x0eF?O\xb6\xf4s\xad\xc1\xca\x8f" +
	"{\xc7\x0a\xed\xca@\x0b\xf4s\x8d\x8a\xc0+3-d" +
	"\x8d]\x83L\xcex\xfc/\xad\x0c\x0cyK\xb1\xb5\xd7" +
	"\xd4\xd7\xd3c\xd8\x0b\xb0%<`\x19\xe4+\x0d\xb8\xbe" +
	"\xd2\xcag\x18\x8bU\x8b\x88\xb8\x9c\x92J5)in" +
	"HJS\x9fb(\x09\x8b\x1b\xaai\xa9\x09\x11`\xea" +
	"\x1e\xeebl!D\xa06\x16\x90\xc0\x0fF\xe0\xaaX" +
	")\x00\x85\x01\x01\x85\xdd\x81\xdd])/\xe4\x142\xf3" +
	"\x97t\xc4\xbf\xd2\xdeR\xbb\xc8\xf1\xddV\xb8\xfdi\xe9" +
	"d,\xd6,C\xac\xc3\xe7\xbbm7\x18\x8b\xb5\xc9\x10" +
	"[\xe5E\xe8\xad\x98\xc6X\xacC\x86\xd8\x8d\x92/>" +
	"\x0b2\x10d\x12\x04E\xa8\x86\x92\xba^I\xb1\xda\x94" +
	"\x9f\x85\x87\xb54W\xdca\xf4\x0d\x99\xb09\x0a7\xe8" +
	"W\xb8\xb5N7\xd6\xb4j=\xa0c\xffF\xb9\xfd\xdb" +
	"w\x03c\xb1\xbbd\x88\x1d\xf0\xf5\xef\xbee\x8c\xc5\xee" +
	"\x95!\xf6\x90\xcf\xb7\xfc\x00v\xf0\x80\x0c\xb1#\x12\x80" +
	"\xedZ>\xdc\xc8X\xec\x90\x0c\xb1Gp\x8b\xca\xc21" +
	"\x7f\xb4\x8e\xb1\xd8C2\xc4\x1e\xb3m\xd7A\xc6\"\x8f" +
	"\xd6y\x11\x009\x8b'\xfa4=\xa53\xb9w\xd0\xed" +
	"\xba\x9e\xe1\x86b!Aa\x0e\x16\xeeV\xb4\xa4\xbb\xd6" +
	"\x13}\x8a\xa6\xf1\x94\x13\xa7R\xcbq\xf6\x9dR[N" +
	"-\x1c\x07\xc9\xb7th@j\xb9\x13\xaef\x07\xba\x8b" +
	"p\xb5\x96\x89\"\xd0\xfd\x16\x0aW\x9b\xb7\x8c\xc2\xd5\xe6" +
	"\x88@\xf7\xe9c(\\m\xb2/2-\xa4q=\x97" +
	"\xb0\x97\"\x0b\xe3b\x14?[u\xe4\x0aaKM\xa8" +
	"r&\x11\xb6\xd4\xf5\xaa\x7fN\xf2\x9d\xd3\x8eQ\xb4 " +
	"\xeck>\xf5h\xa4\x08\xa0\x8b,c\xacA\xd3\x8d\xb4" +
	"\x92\xcaeMnt\x18z\x9a\xc9\x19+\x970TK" +
	"M()\xc6\x98\xfb\x06\xd6\x90\x99\xdf\xa8\xebV\xc1\x14" +
	"\x1b\xde\x14#\x0b\xa6\x19\xde\xefM&\xf9\xfe\xf1\xcd\x87" +
	"\xf7\xfb\xa24\xec0\xad\xc8\xb1N/\x96=\x02\xf6\x14" +
	"\x9f\x9c/B7DL\x8e$\xe68ZI4\x8cb" +
	"on\x06\xe2\xdf)Z\xaa\xac\xf6+\x8a\xa6\x9b.\xeb" +
	"I)\xa6\xf5\xe7i\xb37\x8f\xef\xd9\xb1\xa5T\xd8q" +
	"\xe9\xc2\xac\x96\xe8k\xd3\x19\xf4\xba\x141cZ\xba\xc1" +
	"\xff\x1f\xf6s\xa5\xbd\x9f\x13z:\xad\xd09\x19\xf6\xdf" +
	"\xd0\x9ao\x05\xb6+\x99N\xae%\xed8e\xc10}" +
	"\x14\xe2\x0e\xc6bKE\x10\xa1\x1b\xc3\x1b\xbb\xc1\xa3\x06" +
	"\xe4\xfe\xc4\xf9Y\x8d\xbb\xadK\x86\xd8\xcd\x92 \x07\x16" +
	"\x92\xfeb\xbc\x9d\xdef\x0b#\x8e\x8eU\x10\x88\xea\xef" +
	"\xa0\xe0\xe4H\xc7-\x0a2\xc6\x0f\xf3\x12\xaaE\xca:" +
	"}Y\x07\xcan\xc9\x89\xea+9\x83\x84\xfdw\\g" +
	"\xe1\xac\x91\xe0\xb1\x85\xae\x1cp\x94\x18\xb8'D:\x82" +
	"\xc0\xa3\xc4\xc0=\x86\xe9DV\x1c#\x06\xeeE 8" +
	"a\x82\x8f\x93'\xdbe\xa4\x95\xc1\x9c8\x0c\x11=E" +
	"\xa1\x15.'\xad,\xf9\x938\x0fQ\xc8J+C\x17" +
	"\xc5\x91\x88\xe8K$_\xbaN\xf4\xca\xd2OrB\x18" +
	"8K\xef~\xd9u\xb8\x85CB\x18x\x83\xfa\xeaz" +
	"\xd7+\xcb\xfe\x98\x13\xd2\xc09z\x85\xe7^\x0f\x9c\x10" +
	"\xd2\xc0;$\x0d\xbc\xebx\xe8*\xcb?\xce\x09q\xe0" +
	"#\x12\xa9?q\x1c\xec\x95\xc3>\xca\x09y (\xa1" +
	",\\*\xd9\xbe\xbbq\x15\x7f\xc8\x85\x84D\x10!w" +
	"\x9c\xeb\xbd\x1bW\xf9{,\x19N\xfe\xbb:\xbf\xfb}" +
	"\xdc\xf0\xdf\xe5l\xc7\xf68\xf2\xf8\x91go\x8a$\x0d" +
	"\x15\x0fL\x9a\xad\xe2\xe2A1\x9eC\xe1\x15\xdcP\x90" +
	"\xa2\xe9\x1aTy\x8b\xc2\x16\x85\xd3J\xaf\xc6-5!" +
	"\xf6La\xa9n\xa8\\\xb3\x14\x8b\x85\x8a>\x1d\xee\x1d" +
	"4\xf4\xa1\xb0w\xce\xc9]u\xb6\x1a\x981\xb8i\x92" +
	"\x8eW\xecmN0,(\x16O\x16S\x82\x9d\xce\xc2" +
	"\x0a\xbb&E\xcd\x16i\x09\xfb\x85u@x\x92y\xb2" +
	"\xe8\xfb2\x86>\xa0\xa6U\x8by\x87\xb7jS\xe4\xad" +
	"s\xe3\xf1x\x9a\x98\x1a\x0be\x0d^,$$\xce5" +
	"K\xd5xj\x86\xf3\x072'\xa2\x0fU\xb4\xe3\xa7\xde" +
	"B\xbc`\xb2\xe0\x05\x13\xd6\x13w\x1aw\x0bc9\xae" +
	"%\x97\xf7\xc4y/\x0b\xa7\xb9f\x89\x9f\x9d\xa8?[" +
	"\\(\xfb\xcb{\xe2\xacA\xc4\x85;@'\x0b\xebY" +
	"\x8b\x7ff\xb4\x94\xcf\x83Vp\x8cb\xbew\x8c\xc2\x15" +
	"\x166#\xfd\xbaM\x86\xd8N\x9f\xb0\xb0c\xbe\xff\xc8" +
	"\x84\x90\xe9#\xbb:\xbd#\x13\xae\xb4\xb0\xef\x09\xc6b" +
	"w\xcb\x10;\xf4\x9f\x0a/\xfa\xef\x09\xdf\xc9\x9f\x0a\x1f" +
	"\x0dTf\x88\xdf\xa1\x95<q\xe9@p7\x0e|\xbe" +
	"\x1d\x07\xde,\x01\xf4\x17(\xa8N\x04\xa6\xa3\xbc\xf9\x8f" +
	"\xaf\xf8N*9\x06\x83\x95u\x82A\xf8\x0eyL\xf3" +
	"\x1f\xf2\xb0_\xc9G\x149\xe41\xcd>\xe4\xb1\xc97" +
	"\xe8\xb76\xdas\xb6G\x82p\xc6\xd0\xbb\xdd\xf0Fw" +
	"\xf0\xc2\x03\x83\xfdJa\x9c\x09bq+\xf9)\x9e\xe7" +
	"\xaf(\xfd\xad\x9ai\x19\xd9\x04\x12\x87\xda\x19m\x8a\xc6" +
	"\x0bX\xdb\x0d\xb6\xf0{\xb37V7\xe1X\xad\x92!" +
	"\x96\xf4\xb4\xc0\x88\xb2\xc5\xfb\x9a\\R586\xc9d" +
	"\xcd\xa7\x98\xba)<\x84bZ\xb8T\xc4\xcff\x15\xc4" +
	"\xb3\x1a+x$\x9c/\xb0\x0b\xe1Xx\x83c\xa3\xc0" +
	"M\x9a\x15\x99\xda\xedK\x009\xd5\xf0e\xc6\x9b\xda\xed" +
	"Kd4u\x8b\x97\xd3\x15K\xdc\x8c\x7f\x91\xa9\xb7\xe4" +
	"\xba\xfa8\xcak7\xb0\x90\xaeq\xe7W\x9c\xd5\xd2:" +
	"\xc8\xd9\xb2x\x17\x0b\x0df\xb8\xf3+.Y\x06\xd7z" +
	"\xad>\xe6\x88\xea!\xadGwKY\xd8R,3\xf6" +
	"\x88\x1c\x80\xb1\xc4]\xcf\x06(\xee+\x80\x9c) A" +
	"d\x9c\xcd]\xcf\x11\xfe&\xe2\xef\"~\x85\xcd]\xdf" +
	"!\xfcm\xc4\xff\x80x\xad\xed\xa2\xfe\x90\xf0\x0f\x022" +
	"t\x06%\x88\x8c\xb7=\xd4\x17\x03\x06\xb2+\xac^\x8a" +
	"\xf8\x04\xdbC\x1d\x0c\"\x1e\x08\xa2\xe4\x87\xf8D;b" +
	"\xa5\x92\xf0\x0a\xc4G!^jG\xac\x8c\x0c\"w\x1b" +
	"\x85\xf8$\xc4\xa7\xd8\x87g&\x04\x9fa,>\x05\xf1" +
	"\xd9A\x09`\xb2`\xab\xb3\x82O0\x16\x9f\x8d\xf0B" +
	"\xac>f\x98`\xab\x0b\x82\xc8V\x17\"\xde\x86x\xc9" +
	"\x09\xc1U[\x83(c4#\xde\x81\xf8\xd5'\x05S" +
	"m\x0f\xde\xcfX\xbc\x03\xf1\x1b\x83\xf6Y\x1ed\xa9\xab" +
	"\x83[\x18\x8b\xafB<\x89\xf8\xe8J\xc1P\x15\xea\xfe" +
	"\xcd\x88\xa7\x10\x9fj\xb3S\x95\xba\x99A|\x03\xe2W" +
	"\x96\x0b\x17\xf5 \xe1\x9b\x10\xbf\x13\xf1iO\x08\x17\xf5" +
	"v\xea\xff\x9d\x88\xdf\x85\xf8\x17\x7f*\\\xd4{\x83\xaf" +
	"2\x16\xbf\x1b\xf1C\x88\x97\xd9\xe7\xe9\x0f\x06\xf73\x16" +
	"?\x84\xf8#\x88O\xbaZ8\xa8\x8f\x06\xcf0\x16\x7f" +
	"\x0c\xf1'\x11\xffB\x8d\xf0P\x9f\xa4~\x9e@\xfc\xd9" +
	"\xa0\x04U\xa3\x84\x83\xfat\x10\xb9\xfe\xd3\x08\xbf\x88\xd5" +
	"+*\x85\x7f\xfa\x85 \x0a\x1d/\"\xfe:\xe2\xd2h" +
	"\xe1\x9f>K\xc3\xf0\x1a\xe2\xe7\x11\xaf\x1c.\xfc\xd3\xe7" +
	"\x82\x0f3\x16?\x8f\xf8\x07\x88W\x81\xf0O\xbf\x17D" +
	"i\xe7]\xc4+J$\x88D$\xe1\x9f.+A\xbc" +
	"\xb4\x04g\x17\xf1\x11a\xe1\x9f\x9e@q\x0f\xe3\x11\xbf" +
	"\x9a\xe2\x12\xaa\xc8?\x1d\x9dZ\x82\xd3x5\xe2\xd7 " +
	"\x1e\x8d\x08\xf7\xf4\x9c\x12\x94\xe4f#\xbe\xb0\xc4\xd62" +
	"jq\xda\xa9\x9dk\x11_\x8ax\xb0L\xb8\xa7[J" +
	"p\xd8\x96\"\xde\x85x\xf9t\xe1\x9e\x8e\x95\xe0wu" +
	" ~#\xe2\xc3\x02\xc2=\xbd\x9a\xf0U\x88[\x88W" +
	"\x07\x85{zm\x09JX\x197\xcecd\x89pO" +
	"o\xa78\x0c\x8a\xf38\x80\xf8\xe5\x1d\xc2=}_\xc9" +
	"\x13y\xf1\x19\xa3B\xc2=}\x98\xfa\xff\x10\xe2O#" +
	"~Y\xa9pO\x9f\xa2\xf6)\x0e\xe3u\xc4\x87\x8f\x14" +
	"\xde\xe9\xb3\xd4\xbe\x17o\x11xR8\xa7\xcfQ<\xc7" +
	"\x9b\x88\xbf\x8bx\xf82\xe1\x9c~\xa7\x04\xa7\xfdm\xc4" +
	"\xff\x80\xb8\\&|\xd3\x1f\xd2{\xdd8\x8c\x9a\x1a\xe1" +
	"\x9a\xbeH\xd3\xf2\x09V/\x0dI\x90Kd\xb23\xf3" +
	"\xfc\x92\xceA\xf8D&;\xebR\x05u\x97*\xa8/" +
	"Z\x90\xe6\xc2I\xc6j\xf3\xf1\xdeL\xb6(\xde\xadX" +
	"y\xb8k728\x8fg\x94\x04\xf0\x0en$\xb8f" +
	"\xf9lU\xdd\x8aeqc\xb0C\x12%y>2\x99" +
	"I {u\xe2R\xbe\xa7\xad\xd95)\xe4z\x14-" +
	"\x9e\xe1<\x09\xf6\x0b\x9a\x1b\x84\\\xe0tm#\x09K" +
	">\x17c\xd6\xec^\xae\xa5T\x0d\xb8\xdf~\x9c\xe7X" +
	"\xe1\xc9vp\xb40\xef\x8c]>\xdd\x87\xb0\xc7Xl" +
	"~dw\xb6I\x12g2\xf2>\xc8\x91\xca\xed:+" +
	"%=e)\xbd\xbch\x9dD\x9fb\xf4\xa2\x9cC>" +
	"\x92\xa2NP\xa7F\xb3j\x92\x03\xb5\x98\xbb'\xcd\xd3" +
	"\xba1\xb8\xc2\x04\xa5W\x8c\xbe\xacY\x9e\xc99\x93]" +
	"a*\xbd\\\xea(\x18}\x9fY:\xa3\xcc,:\xd9" +
	"\x9a\x9f\xe3A\xd8\xe3\xa9\xf68\xe8==\x86\xae$;" +
	"@_\xc7\x0d|K\x98\xafX\xd7\xe7\xae\x09\xfb\xf18" +
	"8,\x12\xc2\x1e'v\x1dDF#\x8e\x14\x18\x83M" +
	"JFI\xa8\xb5\xd6\xa0\xbf\x8dD&\xdb\xc5\xd3\x99\xa6" +
	"\"\xa1}\xbd\x97.\x12#\xd2\xc5Y(\x9di*\\" +
	"\x87]\x80O\xf9\xf5\x0c\xd75\x99\xeeV\xe9\x8cM\x98" +
	"\xfb\x9f\xb3\xbf\xa3\x95!kG}\xc2\x11 \x9c#\xec" +
	"\x8ai-\xb2\xfa8hJ\x87\xaa\xf5v\xa9r^j" +
	"\x101\xfe\xce\xb2eCf\xc6+\xb1\xbfB\xb2\xbfB" +
	"\xebOs\xfcB\x06MC>PO\xf2t\x17O3" +
	"93\xa4\xccL\x18\x9ck\x8d\x86\x84*\x8d\xc6Ms" +
	"\xc8\x9b-G\xce\x09\xeb\x1awE\xb5*G\x96\xb2=" +
	"\x08\x99\xb4\x9a\xb8\xc4\xeb\xc9\xd0\xdcl(L^w}" +
	"\xe10\xb5\xb3\x06nq\xc3\xef\xeb\xd7\xd3\x1d\xf8\x00\xab" +
	"m6\x94\xa1\x0f\xd8B\x12Ty\xc2\x98\xab\xa4\x0e\xb8" +
	"3\\\xe4\xe0M\xbb\x92\x99\xd1\xa2\x85,c\xb0@\xd2" +
	"\x9fhK\xfa3}r\xf7\xf4:\xc6bSd\x88\xcd" +
	"\x96 \xb4\x86\x0f\xc2\x08\xc83\x0b\xc1\x08\x06\xb5\xfdJ" +
	"*\xcbaDph\x91\xff\xbd_Q\xfa;\xf5\xac\xec" +
	"x\x0f\x9d$\xba\x11\xb8!\xd7\xa4\xebFR\xd5\x14F" +
	"\xa5\x9eq\xbb\x9b\xb1X\x85\x0c\xb1)H\xd6\x9d:!" +
	"\xcb7\xf8^;C\xf3\x7f\x14U\xf6\x9a\xbd\x10\xc8\x02" +
	"\xb5c~1\xb5\xe3\x0e\xef\xc8\xb8\xab\xec\xad\xc5\x9a)" +
	"\x19b\x03>\xbd#\x8b\xca\x9e%\x94\x91\xfff\xbd\xce" +
	"\xa7A\x15?\xe0Z+\xb2R\x95\x82/?Y\xa4l" +
	"\xbd\x97{1R\xd6\x9d\xeb\xe4\x09\xae\xf6s\xc39\x8a" +
	"\xe9&\x06a!\xaeY~\xfb)~\xde\x1e\x19b\xf7" +
	"\xda>L\x04\xefi\xf4\xd9\xcd\xa5\xa0\x18\x88\xfb\xba=" +
	"\xbb\xb9c\"\x7f`\xbd\xdfD^a\x9b\xc8\x1b\xfd&" +
	"r\xfb\xec\xda\xa3\xb70\x16{D\x9crk0\x12\xfd" +
	"]\xfa:\xf7\x98ga\xea\x9d\x14W2q\x9e\xd0\x19" +
	"\xe5\xaeqP\xa3\xe0\x93\xa0\xca\xfb~\xdb\xab\xa9e\xd3" +
	"\xf8\x9d\xee\x19L'3\x08\x0bs\xcd\xf2-#w\xa8" +
	"\x0a\x96\x118\x07\xc0\x85\xdf\xbb\x1a\xfc\xb9\x03't\xfb" +
	"\x92%O\xe8\xf4]\xce2\xa1\xd3\x97\xd2o\x82\xe1%" +
	"\xc9\xc3\x1f\x8b\x95l\xca\x0b\x0e\xa6_\":\"G\xaf" +
	"\xb2\xff^\xaa\x18H\x85\\=\x8a\xca\x9a\x14\x8d\xd9Z" +
	"\xdc\x1e9\x00\xe3H9\xbaH\xe9\xb4\xbc\xb4PW\xd8" +
	"\xca\x11\x04\x1a\xfdi\xa1\xaa\x16\x0a\xdd(\x18@1*" +
	"\x80\xcaN\x15V\xbfl\x91\x9do,\x80bc\x05\xe2" +
	"\xa3\x10\x87F\xa1\x1c\x8d\x0c\xa0\x18;\x0a\xf1I\xa4K" +
	"5\x89\xbc\x1e\x13\x02\x12%\xfc\xc0\x82\xd9X0\xbe\xd9" +
	"N-\x10@-h6\xe2\x0b\x03\xb6=\x17\xb5\xa3\x05" +
	"\x84/D\xbc\x0dq9 \xb4\xa3V\xc2\xdb\x10_\x85" +
	"x\xc0\xf6\xb3\xaf \xad\xac\x0b\xf1\x9b\x03\xf6a2T" +
	"\x8fn\x0a\xa0\x9cy#\xe2}\x88O\xa8\x10\xea\x11\x0f" +
	"\xa0<\xdf\x87\xb8\x85\xf8\xc4J;\xdd\x18}\x80\x85\xf8" +
	"&\xc4KZ\x84ztk\x00\xe5\xed\x0d\x88oC|" +
	"\xb4\x1d\xc1\xbb\x95\xf0\xdb\x10\xdf\x89x\xc8\x8e\xe0\xddA" +
	"\xf8\x9d\x88\xdf\x85x\xe9b;\xdd\x18\xf5\xff.\xc4\x0f" +
	" ^V*\xd4\xa3\xfb(-\xd7\xdd\x88\x1f\x0a\x88c" +
	"\x16\xa8\x1d\x1d$\xf8^\x84\x8fc\xf5\x9a2\xa1\x1d\x1d" +
	"\xa3\xf1\x7f\x0c\xf1'\x11\xffB\xb5\xd0\x8eN\xd2g=" +
	"\x89\xf8\xf3\x88W\x8d\x14\xda\xd1s4<\xcf\"\xfe2" +
	"\xe2\xc3\x96\x08\xf5\xe8%\xc2_D\xfcu\xc4/\xbf\xcc" +
	"\xce6F\xed\xbc\x8e\xf8\xdb\x88\x8f\xaa\xb0\xb3\x8d\xd1{" +
	"\xcf#\xfeA\xc0V\xa7P=z\x8f\xday\x17\xf1O" +
	"\x10\x9f4\\\xa8G\x1f\xd1pz\xca\xf2\x98\x1a;\xdd" +
	"\x18\xa9e\x9e\xb2\\Y&\xd4\xa3JR\xa7<e9" +
	"\x0aB=\x1a\x19\xc4i\xacF|<\xe2\xd5\x92P\x8f" +
	"\xc6\x11>\x16\xf1)\x88\x8f\xb4\xd5\xa3\xc9\x84OB|" +
	"fP\x82Yc_\x07\xa1\x1fM'=n&\x16\\" +
	"\x8b\x0f\x84\xed\xf0\xddy\x84_\x8b\xf8R\xc4\x87/\x10" +
	"\xfaQ\x0b\xa9\x95\x9e\x1a\x1d\xa9\x12\xfaQ;}@\x1b" +
	"\xe2\xab\x10\x1f\x11\x11\xfa\xd1\x0a\xc2\xbb\x10\xbf9(\xc1" +
	"\xc6~!\x9b\xba\xa9C\xec3\xc6\xae\xf0\xa5\xf6j*" +
	"\xd9d\xc2m\xaa\xe6\x8b\xea\xb2\xd9\x11,J\xa5\xf4u" +
	"\xdcw\xba\xaaW1[5\x8b\x1b\x90\xe0\x19K7\x9a" +
	"y\x83\xc5\x13V^\xd8\x1fI\xddqY\xed\xd5\x90\x85" +
	"\x89\xe2b\x92o\x9fb.\xc9\x98\xcd-\xe0\x93\x9b\x9d" +
	"2c\xa01\xdb\xd3\xc3\x0dX\xde\xcf\x8d\x9e\x94\xbe\xce" +
	"\x97{\xc3\xfa\x94\xb2\xdetJ\xd1\xe2\\c\xb5\xc9\x16" +
	"\xc3\xf0\x0e\xabf<j\x05a\x8f\xf8\xd9\"\xaa\xabx" +
	"tf\xf2\x02\x0a\x1d\xe2\x9d5\xbbI\xbc\x81v]D" +
	"2:be\xd8\xbbB\xc5n\xca\x1d\xd0P\x93\xa2y" +
	"\x83\xa2\xf4pk\xb0]g\xa1$Oa\x07>x\xf5" +
	"\x8a\xaf^\xb1b\xaf\xd7\x01\x1f\x99\x85\xb0G\xb7\x1d\xeb" +
	":\xbe=\xae\xf4\x03o\x11Q\x96\xdeP5d3\x96" +
	"\x9avg\xb8\x81\x9a\xf2\x19\xe7\\\xaaos\x0b\xd1\x95" +
	"\xce\x01h\xd5\xfa\xc5\xc19\xd7\xf9O%\x1d\x0a\x18\xf9" +
	"a\x95\x8e\x02\xd7\x97O\xe5!\xec\xf1\x0d\xbb\x9b}\\" +
	"1\xacn\xae\xb0Z\xabM7-_\x08\x99\xc5\x0dM" +
	"\xb1@\xed\xe7-\x03\x19n\xd4\xaa\\Kp\xb7e\xf1" +
	"\xe6\xae\x01hL\xe9\x895\xdc\xd7'\x15\xd7\x9a\x91\xcd" +
	"P\x8b\xbe\xb0`\x7f_\xeb\xfc3R\xf81,d(" +
	"iw\"{\x14M\xc8\xa9\xccM\xdd\x96K(\x9ap" +
	"\xfe\xc1L\xa8\xf2_,!<\x8fn\xe9\xacO-\xad" +
	"+R\xea\x0euS\x1fO\xac1[5\x91\x05\xc4w" +
	"\xb2N\xa5\x120\xb3i\xd2\x0fkE\xa4\x86\xaf\xb7q" +
	"KI\xa5\x98\x8d;=6\xbb\xb3\xb3V\xea)\x8b\x85" +
	"pk\xbbC\xd2\x9d\xad\x1b\x8a\xfa2\x8etpC\xcd" +
	"\xf4\xa1`)\xa4\xcc\x15\xf6\xaav\x16\xb5\xb3\x09}>" +
	"\x8ei\xe4\xe3\x980\x9f|\x1c\xa3'\x92\x8f#2\x91" +
	"\xb1\xb0\xa6k\xbc!\x91B]*\x94HfB\xc9D" +
	"\xe6R\xd6\xf3&]\xebQ\x938\xdf\xb5M)\xc5\xf4" +
	"\xbb\xd3E&\xbb\x91\xa2\xf9\xca:\xc6B\x06O6\x0c" +
	"r$:\xb5\xbd\xa8\xe3\x14\x08\xe5\xedz\xb2A4L" +
	"\x82\xb9w+\x09\xccoX\xb5\x9ap\xdf\xd9\xfcF\x9f" +
	"\xcf\\r2\x1b\xec\xf7e6\x90\x9d\xcc\x06wx\x89" +
	"\xdeP\x8a\xccK\xf3\xf6\xb6-\x07\xa2pxa\x99H" +
	"3F\x87\xf8KD\x08_\xe4=|\xfa\x03\x7f\xb2$" +
	"\xb2\xbbR$\x9d{Z\x7f\x88\x8f\x17\xf5\xbbT\xcb\x00" +
	"\x87D\xd6\xa2\x13\xf4>\x87p.ifZ\x06x\"" +
	"\x0b\x96s\xb8\xdeS\x8fz8\x05L\x9aE\x94\xe2\x8c" +
	"n\x0a\xe2#\xf2\xc09\xa3c/G\x11s\xd9a\x80" +
	"\x9dnM\x1b\xda\xc0\xa7y\xae?K[i\xca?\xc8" +
	"\x85\xd3<\xc9\x9d\x8bw\xe6\xfb\x06\xce\xd1X\xde\xdb\"" +
	"\xb2\x1f\xc4>\xf1i,\x1f\xe1h~\x82\x0c\xdb\x7f\x88" +
	"?\x08u\x8cu\x82\x9d)\xc1=\xc3_\x86R\x8a/" +
	"\x05\x89s\x86\xbf\x92p/\x85\x82s\x86?B\xb8\x97" +
	"\x82\xc49\xc3?\x92\xbc\xc9^j\x05'E\xc8h\xf2" +
	"p\xbb\x19\xac\x8ax6\xb2\xf8\xe1\xe0\x04\xb8^:\xbe" +
	"\xd5\x9b\xc0ZN\xe1\xb2\x8e\xab'34\xa7\x05\xf4\xfc" +
	"\x17U.\x7f\\\x91\xe3\xdb\xf0bX\xec=]Wl" +
	"O\xcfgLl8{\xf7\xd1FL*Z/7\xf2" +
	"\xf4\x0bCO\xb4\xe9\xd0\x1b\xab\x00\xdfMX\x91H\xa3" +
	"\x97\x06=R\xb9\xccK\xf4\x1c\xa9\x9c\xb8\xd1\xce\xfd\x96" +
	"k\xeaX\x81+\x0a\xd7m\xa8\x9d\xa7\xfd\xbe\xa8e\x9e" +
	"/\xca]\x1c7M\xf4;\xa3\xec\xc5\xa1\xd4\xd9\x8a\xef" +
	"\x800\x9e:\x0dz\xca\x91\xdb\x0f\xc1\xeeBi\x9e\x86" +
	"*\xafCb+\xd4f\x0c=\xe1\xd3\xa8\xdc/)\xd0" +
	"\xa8\xa4\xc2\xc4\x9c\xb2e\xc6F\x81/\xcdzd\xea\x16" +
	"/\xa9~d\xea\x83\xde%L\x91\xe9g|\xf7\x81\xce" +
	"\xd9\xe2\xbb=h\x8e\xe1\xcb\x8b>g\x8b\x9b\xe2R\xb6" +
	"O!\xb0&\xdd0Hl\xb2\xdf,\x1c\xc9N5\xc9" +
	"\x14\xd9G}v\xbe\x9c\x93.T\xa2\xed\xdb\x9adN" +
	"\xe5Z\xb3k0\xc3\xddg\xc1~\x96\xe5\xe5\xf1Y\x96" +
	"\xb7Yl=:\x1a\xa10\x11o\xb38\xe1 #)" +
	"\xe1\x85\x97o\xc4\xde\xa2\xe3(Rz\xbc\x9b\xa5\xcd\xa6" +
	"\x99\xd1y\x14\x9a\xecec\xb3\xc9f\xb4\x85\xf0\xa5\x88" +
	"w\xd1^\xb4\x1dV1\x0a\x1e\xe9@\xfcF\xf09\xac" +
	"V\x13\xee\xe5\x03)\xb3C\x9f\x0b\x93[9*\x99J" +
	"a\x9e)'|\x95\xd4\xe9.;\x9f\x92sf\xc5\xd1" +
	"\xdd\x1dA\xc4N\x8e\xbb\x9c\xd5\xf6\x10\xee\xa6x\xb2'" +
	"\x04\x9c\x19\xa9M\xe7\xeb\xe4\xee\x1a\xb0W\xd0\x1aJ\x1c" +
	"\xd6\xa1\x83 \xc8-Mr\xcbb\xa8\xf2\xae\xc6\xb2I" +
	"\xb2\xa8\xb6\x92CJO\xa8\xd6\xe0\xa5\xaa\xb9t=\xdc" +
	"\xd2T\xb4B?\x17\x0d\\\xb2\x02\x8a\x88]\xfab\x95" +
	"5\x18\xa6\xb5X\x1d\xf0\x02\xea\xbd\x85Ak\x8f\x83\xef" +
	"\xab\xdce>t_\x08J\xd0kgv\x04\xb30W" +
	"\xc6D\xe7\x98\xfc\x8b\xbeH\xe3\x17(\x98\xc7K\xa1!" +
	"\xd9\xc1\xf4/Qd/E\xa3\xbf\xe6\x0f0z\x85\xea" +
	"{\xa95\xec\xc0\x84\xe8YZ\x99/\xe7\x9d\xc2\x0fR" +
	"PP\xa7s\x0a\xffm\xf0\xb2\x0cE/\xd0)\x7f7" +
	"\xb5\x06\x9d\xb6\x0fQn\x8d\xddvT{\xa7d\xaf4" +
	"\\Q\x17iC\xb8\x11An\xa0qP\x9af\xa7\xdc" +
	"\xa8@\xb8\xdc>\xa3[F\xa92\xdc8\xa1\xc8\xb0\x12" +
	"\xa1\xe3\x17D\x09E*\xecC\xfb\xa3\xe9\xd0\xbe/E" +
	"G\xa9\xd0\xf1\xc7\x11>\x0a\xf1I\x94\xa2c\x98\xd0\xf1" +
	"'P;\xe3\x11\xbf\x9aRt\x80\xd0\xf1\xa7R\xaa\x8f" +
	"InR\x80*I\xe8\xf8\x0b\xa4\x89NR\x80fI" +
	"\xcaKz\x99\x17\xb0l\xc7e\xdaRe8\xe3O\x8e" +
	"I\x96k_\xa4q\"\x93\x8d\x0f\x9a\xc8x\xd2~\xac" +
	"\xa9OM%\xc1\xe0\x1aVfEK\xe81\xdfS\x19" +
	"C\xd5\x0d\\\xaa\x8c9\xb1LaMMx\xc1NZ" +
	"6\xdd\xd5gp\x85\xc9I\xef\xb8>i\x95]j\x1a" +
	"\xf57{S6\xa4yze\xda\x0d]\xc4\x9f\x9d\xa6" +
	"\x17\xc9\x98\x11lGg`x_\x95N\xa6P\xcd\xb5" +
	"\x17x\x85\x9d\x0e\x89\x0f\xf0bQ\xba\xbe\xbc\xfa\xf1\xfe" +
	"\x0e=5h\xa7\xe7\xc5\xa5\x9et\x97\xfaa\\\x14\xf1" +
	"C8\xda\x8fH\xbed\x99G)\xe1\xca\x11\xc4\x8fS" +
	"\xa2\x94Qv0\x1d\xc5\x81=\x86\xf8\x93\x94\x11b\xb4" +
	"X\xeb'i6\x8f#\xfe4%J\x19c\xc7\xd2Q" +
	"\xc2\x95'\x11\x7f\x9e\x12\xa5\\n\x87\xd2IH\x0e\x9f" +
	"E\xfceJ\x942\xd6\x8e\xa4#\xfcE\xc4_\xa7\xcc" +
	"\x12\xe3\xec@:z\xefk\x88\x9f\x97\xec\x13\xf2\xb8\xd8" +
	"\xcfQ\xff_G\xfcmZ\xecv\x12\xb4\x0b\xd2\x18\xc6" +
	"\xe2o\"\xfe\xae$,B\x14FG\xd5\xcf#\x1c\x90" +
	"\xedt4\xc3\xe8\"\x81i\xceE\x02\xa3d_P\xfd" +
	"H\xb9\xce\xb9\x01\xe0j\xca\x9fo\xfb\xfb\xa7R^z" +
	"/s\xff\xf0\xa0X\xecsd\xcat\x81\xf8B\xca\x9f" +
	"_\"\x16\xfb\x022\x1c^\x83x3\xe5\xcf\x0f\x89\xc5" +
	"\xbe\x88\xf2\xed/D\xbc\x8d\xf2\xe7\xdb\x06\xadV\xca\x93" +
	"\xbf\x14\xf1.\xca\x9f_&,Z1\xca\x93\xef]\x00" +
	"\x10-\x17\x16\xad\xd5\xf4\xdeU\x88')\x7f\xfe0a" +
	"\xd1Rd\x1c\xce\x9b\x11OQ\xfe\xfc\x0aa\xd1R\xe5" +
	"\x07\xf3\xee\x05\xb8L\x16\x16\xad,\xf5\x87\xee\x05\xd8I" +
	"\xf9\xf3ea\xd1\xdaA\xfd\xdf\x86\xf8\x1e\xd9vP\x8f" +
	"b,\xba\x8bnBp\xef\x05\x10)\x09]\x05\xd0N" +
	"\x0d\xc8\x1a\x06En@\xc7\xbd\xd3\xa7\x98\x1d\xc8\x13D" +
	"\xf4\x9e-\x09n\xecS\xccV]\xd3\xfd\x06\x96.C" +
	"\xcf\xe8\xfe\x0c1}\x8a\xd9\x92\xe2\xfdN\xd8\xa0\x03g" +
	"\xf4\xd4\xe0bCO\xb3\xf0*\xcbP\xfc\xb5\xe3\xdd\x8a" +
	"\xd9\xcaB\xbev\xc3\xaa\x9et\x93\xcf\xca\xd6LgC" +
	"\x86\x07\x06\xd7\xcft\xf6\xd60\xb1\xb7\x10\xfbJ\x01V" +
	"\xab[}Csm8<\x0e\x8a\xa6n\xa7\x0c\xd7<" +
	"\xa5\xf8\x02\xfa6\x12\xa6\xfb\x84\xe3n\xf1\xfd\xac\x96\x8e" +
	"+\x0c\xc5C\xfe\xda\x16\x8eL3OQ\xfey\x97\x1b" +
	"\xe2\xd0X\xaa\xce@\x1b\x8a\x855\xff\xf3\x0e\x0c\x9a\xdd" +
	"\xe1\xb0\xea\xef\xb0\xcb\x91k\x9bt\xde\xd3S0\x04\x85" +
	"N\x83\x06\xca\xfa\xbfnH\xd2\xb4`\x91\\\xa8\x85\x00" +
	"\x09tv8 \x09\xc9sD\x94\xfa\xf4:\x92\xf0)" +
	"\x17\xbc\x1c\x19WGq\xf3#'2\xd6\x90\xa0\xc3u" +
	"\xb5)\xae$g\xd2\xffg\xd1\xff\xebB\xbc./\x02" +
	"\xd1\xf3\xe08\x09\xd6mm\xbe\xd7N\xf1\xef{g'" +
	"\xbds\x96\x88\xd5\x9f*\xb4\x8a\x09\"\xb5\xec8\x91\x1e" +
	"5\xc9{T\x0d5\x97\x90\xa1\xa7C\xba\x95\xc9%\xa8" +
	"\xad\x8c\xcad\xcd\xac\xedI)f\x9f\x9f\xfc\xe6\xc7\xb0" +
	"\xcdhW4\x9e\xed\xe7`\x14\xc4\xb1-\xf3\x0eq\xb8" +
	"g8\xa6\xf9\xc2\xb6\x9d8\xb6\xd82\xdf!\x8e\xa4\x93" +
	"\xa9\xc8S\xcbD\xc4\xad{\xe6EO\xaa=*\xf7\x9f" +
	"x\xf0\xebA]}\xd9t\xb7\x16R\xd4TAo\x1a" +
	"\x19\x8b-\x94!\xd6\xe6\xd3dZo\xf1\xba\xe3\xc4\x03" +
	"\xc6:\xbd\xde\x0c1\x0d\x14O\x01\x9c\xb3\xe8\xa5\x8a\xca" +
	" \xe5E\xdd{\xb3U0^q;9\x93j\xc5\xd5" +
	"^M\xa4\xcc\xa5WG\x84\x02X\x86*_:k%" +
	"\x92\x0d\xfd*\xd74%O\x91\xa4\xd3\xb2\xa4H\x16\xe4" +
	"C\xebs\x19\xdfibX.c\x82Q\x82\xef=G" +
	"\x89\xbd\x9ew\xf9\xc9h\xfb4\xd9\x05J\x04F\x8c\xe3" +
	"\x03\xc9\xce\xc0\x84|\xef=J\xf8\xf5\xae\xe4\\5\x13" +
	"\xb4O\x93\x95\x11\xe1\xa5+e&\xc9>\xb5a\x82\x8c" +
	"\xfcp\xbc\xcbP\x1c\xb5a*\x11\xfc)\x88\xcf\x96}" +
	"j\xc3,jg&\xe2\xd7\xd2\x151vf\xa6yD" +
	"\xa8=\x86R^\"\xf8\xde\"\xba\x90\xc5c(5!" +
	"\xc1\xf8Z\xe9B\x13\x8f\xa1\x0c\x93\x05\xe3\x8b\xd1\xc5(" +
	"]\x88gd;\x93\x0c2\xbe4\xd5O\xb9\x17\xc18" +
	"R\xdeVj\xff6\x97A@\x99`|;\xa8\x9d\x9d" +
	"\x88\xdfMW\xeb\x04\x05\xe3\xdbG\xf5\xefB\xfc\x00]" +
	"\xc5c\x07\xba\xdd'\xdf\xc1X\xfc\x00\xe2Gd[Z" +
	"D\xc6w\x98\x18\xdcC\x88?F\x0c\xb4B0\xbeG" +
	"i|\x1eA\xfc\x041\xd0J\xc1\xf8\x1e\xa7\xf6\xbd\x0b" +
	"b\"\xc3\x05\xe3;E\xb8wA\xcc\x88\xb0\xed\xca\xa1" +
	"\xf6\x9fE\xfceb\xa0U\xb6+\x87\xe6\xc5\xbb8\xa6" +
	":\xe2\\\x1c\x83\xe3\xff\x1a\xe2\xe7e;\x92\x0b\x19\xdf" +
	"9b\xb8o\xca2t\x92g/$<9\x17\xa9:" +
	"9\x02G\x05\x8a\xec\x8d$7\x13\x86\x9a)L\x9d0" +
	"$\x89~2/\xdc\xc5\xb5\x9d)\x09\xbe\xdcP\xe9\xf8" +
	"\xb0\x08E-x\x10+ g\xb5\xd9c\xb1RC\xef" +
	"\xce\x8bV\xe0=V\xcb \xef`!_\x00o\xceP" +
	"{\xfb\x10f\xe1\x0e?\x8c\x95\x1bS\xaa\xc6j\xd7t" +
	"\x0c\xa9\xde\x98RY\x83\x96_\xa0\x1a\x1d\xeb\xf0C\xc1" +
	"\xf5\x9e\\\xeaS\xe2\xf2\xd0\x88`\xe7k\xc8\x8c\x18\xb7" +
	"\x92C>\xd7\xccj\xbd)\xc54Y\x037\xf3\xde\xfb" +
	"\xa9\xd6ICYGw6\xb0\x06\"5\xa6K\x8d>" +
	"\xcdl\x99\xd1uc\xa5j\xe6\x1dg\xcce\x14\xc3R" +
	"\x95\xd4b\x16R\x12>\xeb\xa7jZ\x86\x92\xb0X\x03" +
	"Ov\xe8f\xf1\x82\x96A\xee\xa5\xce\xe5\x83\xdc\\\xae" +
	"u\xeaL\xf6\xf9\x082}\xba\xc6W\x98y\x87*\xf5" +
	"D\"\x95M\xf2d\xc1\xbc\x18\\I\x0ev\x18:\x83" +
	"\xee\xc2!\xd2t\xab\x13K\xed'.\x9d7\xbc\xd9\xce" +
	"0\xe0$\x18\xf0\x92\xed.ui\xe6\x05\xb23\xbei" +
	"+\x9c\x8eZ|\x91,\x1b\x9e\xbe\xe9\x1c\xc0\x0d\x92(" +
	"\x1f\x90\xecC\xd7.\xc9\xac$\x92YA\xb26)\x84" +
	"6\xc9\x1cI\x87O<\x853b\x1f\xc0\x1dM$\xd9" +
	"=zB$\x96\x12&S;\xa4@\xce\x94|\x87\xcc" +
	"\xa7S\x12\xba\x99\x88_+\xd91\xbaD2\x89\x84\xbb" +
	"\x8ae\xa4\xd4\xb6\xb4,\x92P\x8dnvsH\x96\x95" +
	"\x14\xcf!Y\x1errHn\xc9\xcb!9\xac\xd4\xc9" +
	"!yG^\x0e\xc9\x8a\x80\x93CrY^\x0e\xc9\xca" +
	"2'\x87$\xb6\x9fA|\x03)\xc06\xc9\x1c\xa4\xfe" +
	"{9$\x87\x9789$q<oC|'\xa9^" +
	"\xe5\x82d\xee U\xedN\xc4\xef\x92$h\xe0\xfd\xf9" +
	"\xc6\x9d_\xcc\xffa\xdb\xff\xbd\xfe\xb2\xef9f\x10\xdc" +
	"V\xcd\xdc\xe2,\x9c\xe7\xf9T\xcdfZ\x9f\x05\xb0\x93" +
	"c\xc4\xb1\xb0x\x86`\xd5\xec\\\xea\xc5\xf8\x19}I" +
	"\xe1\x0d\xe2\xc9b\x99)2\xba\xc9;T+\x01}\xcb" +
	"{zLn\xf9w\x96SB\xf9\"\x9a\xf4\x90\xff\xb8" +
	"/\x96\xaeV\xd6-g\xb5\xf4X\xdeS\xab\x95u+" +
	"A<Sp\x0c\x98g\x9a\xfa\x14\x8d\xc9>O\x92\xf7" +
	"\x1d\"-\x07+R\xd2\xa1\x98&\x16ye\xaa\xd9\xa6" +
	"\xafC\xd2\xe3\xd7A\xd4\xb8\x85\xafd\xb2\xdf\x13mv" +
	"\x18\xbc_\xe5\xb0\xaeX,\xa7\xea\xbc4\xdc\x8e\xca\x87" +
	"\x03\xfb\x09B\x17\xcaoEN\xd0u\xda\xd9m,>" +
	"\xa3\x8d+\xb5I\xe7 \xb0\xff<\xdc\xb4K\x9c\x87\x9b" +
	"\xf6\xf9\xce\xc3\xc9\xcey\xb8iyI\x18\x1c/\xc5I" +
	"2oy\x07\xce\xc3\xb6\x97\xe2\x14\x99\xa5\xbc\x03\xe7A" +
	"\xdbK\xf1\x1c\xd5w\xadg\x91\x12\xdbKQh>\x0b" +
	"\xd9I\xe5^\"\xaa\xe2\x99\xcfJ\xed\xa4r\xaf\x10\xee" +
	"\x9a\xcff\x95-\xb4S\x0d\x9f%\xf3\x9ck?\x9bU" +
	"\xbe\xc8\xd6\xe2\x0bN\xd5E\x86\xd9\xb9\x86\x0b\x0f\xd5U" +
	"T\x88\x9d\xf9\x0e\x19\xdc\xdct\x11\xb3*\x1bAl\xcd" +
	"\x0f\xe9\x13\xdc\xd3v\x91\xe1\x95\xd5\x10\x06\x88~D\xa4" +
	"\x8e\xf2a\x06$\xe9\xbf\x94J\xbd\xb6\xbf\xcd\x9f J" +
	"\xa1\xd39E8dm\xb2C\xb1\xfa\xbc\xf6\xda\x14/" +
	"\x89\x0d5\xf1\xe7^N\x9b\xbc\x9f\xa1\x9e\xc4:\xd7\xbb" +
	"n\x9f\x10r73\xd6\xecR\xb2y\xf9%\x90W\xda" +
	"\xcc\xc3y7\xa5p\xf0\xb66\xfe\xea\"\xca`\xe7\x91" +
	"\x7f/\x90\xcb\xe5r\x9fy*\x9c\xf2)\x9a\x05\xb1\x8f" +
	"\xf3\x8b\xc5>\xce\xf7b\x1f\x1b\xd6\xadS\xb4\xae\x01\xc7" +
	"\xbaF?;\x07|\x87\xd5\x8b\x84\xe89\xb7fe\xfa" +
	"x:\xcc\x0d\x95\xdey\x9b\xbbCv\x90u\xc7\xb3^" +
	"8;d\x17\xe1\xde\xad\x86\xce\x0e\xd9K\xc2\x9dw\xab" +
	"\xa1\xb3C\xee\xa1\xfa\x9e0\xeb\xec\x90\xfb\xc8\x0ar7" +
	"\xe2\x87d_\xea\x88\x83\x84{\xb7 :)\xcf\x1f\x90" +
	"G\xe4\x09\xbf!\x9bs\x1d\xa6\xf6\xbd\xdb\x11\x1d\x8b\xee" +
	"Qj\xc7\x13\x8a\xcbl\xce\xf5(\xb5\xe3\xdd\x9ah\xdf" +
	"\x13\x19=F\xedx\xc2\xb2}Md\xf4qj\xe71" +
	"\xc4\x9f$a\xdf\xe6\\'\xa9\x1dO\x88vn\x89<" +
	"E\xed\x9c@\xfcY\xff-\x91\xa7\xa9\x1dO\xb8\x0e\x97" +
	"\x0b\xce\xf5\x1c\xe1O#\xfe\"\x09\xe9\x97\x09\xce\xf5\x02" +
	"Y\xd1<\xa1;b\x0b\xfb/\xc9\xb8\x91\x9fG\xfc5" +
	"\x12\xd2o\x14\xc2\xfe+$\x8c\xbf\x8c\xf8\x9b$\xa4\xff" +
	"\x99\x10\xf6\xdf \xe9\xda\xbb\xc5\xb1z\xa6\x10\xf6/\xc8" +
	"cla<\xfe.\x09\xe9\x95B\xd8\x7f\x87\xfa\x7f\x1e" +
	"\xf1\x0f\xc8\xca5\\\x08\xfb\xef\xd1\xfcz\xb7>\xd6\x84" +
	"\x85\xb0\xff\x11\xf5\xff\x03G\xa8\x1fu\x93\x90\xf5/R" +
	"\xf3^\xd4\xdf\xe8n!\xecC`\x8c?\xea/2&" +
	"!\xc2\xb6\xbc\xdb +(*,i\x1fj\xa1\xea^" +
	"4\xe0\xd8\xf1v\xd4V\x00\xe5\x8f*\xe7\xf6\xc8\xc88" +
	".\xa2\xb6FS\xfdj\xc4\xc7S\xb0a\xbd\x1d\xb5E" +
	"\xb8/J\xb0QDmM\xa0 \xc4\xb1\x88O\xa1 " +
	"\xc1\x89\"hk2\x05\xf1MB|f\xa0\xc0F\x17" +
	"\x1e\xe4\x8a\xe1\x1a\xec\x92\xca`\xab\xb6\x9a+\x0c\\," +
	"\xdc\xa7g\xdd\x1f\x0diU\xcbZ\xae\xf1\xacA\xdc\xce" +
	"\xe8\xfa}\x07<S\xdaJ\x9er\x0d\xdd\x03\x94\xb2\xcb" +
	"\xf9\x09\x83n\xadA\x7f\xad\xc1\xfcZ\xeb\xddZ\xeb\xfd" +
	"\xb5\xd6\xe7\xd5j0\xfb\x89m\xda>\x80Z\xb3\x7fE" +
	"\xe7\"\x97\x0e*\xbd\xde%\x8ef\xffR\xae\xa4\xac>" +
	"\x7f\xe4\x8c\xb5F\xb0j\x16\xf6GK\xc9V\xb7\xfb\xed" +
	"\x96\x92\xfd\x8ak\xd4\xa2\x1c\xefH;\xc1\xc5\x1az\x95" +
	"tZq\x7f\xca\x99YN\xe3r\xa6\xce\xfb\xb3\xde\xfb" +
	"s\xb6\xfb\xf6\x1e\x83n\x05\xcd\xcb\xc2c\xb3\x7fYs" +
	"\xab\xc9^<\xcdF\xfb\x09\xd7\xdbg\xad\x11W\x9a1" +
	"\xdf\x15\x97\xfe\x8c\xd5v\x8e\xad\x94\xa2\xcdh\xe6a\x0a" +
	"\x9e\xf0\x92S\x88\xd0\x18\xba!I\x8a,\x12w)-" +
	"XO\x06\xafy[(9\xc5\x9ce\x94\x9cbV\xa7" +
	"\x1d/\x93\xb3\xb2\x86\xd6\xc6{,\xc6\x18\xfd\xdd\xa9\xf6" +
	"\xf61\xb0r)E\xe3$n5\xf4r,w\x01\xa9" +
	"\x97c\x1d\x8b\xad\xe1<#\x9e\xcc\xe1\x9f\xee\x83^g" +
	"=R\x1eW\xdc(\xeb\x00\xf8\xae\xc4\x8f@\xe3\xc6\xb8" +
	"b\xb5j=\xba\x9f\x9bL\xf3\xb8\x89\xcbL&\xda\xcc" +
	"\xa4Y\x82\xb0\xda\xa5\xafs\xef\x9d2\xfb}b\xb1\xdb" +
	"\xf2\xd0|DEXY\xd7`\x06\x8a\x8c\x9f}\x8b\xe5" +
	"\xfc\xbc[,\xe7\x8b[,\xe7\x8b[,\x97\xd9\xe3\x17" +
	"^\xa7\xf6\xa8\x0d\x09\x9eJ\xd5-\xa1\x7f\xea\xc5?\xb3" +
	"\xc5?s\x96\xe4\xb8\xd5\xc7\x0d\x8d[\xfe\xc4\x1b\xc1\"" +
	"\x97k:\xde\xf0<G:-\xe2\x02s\xde\xb4b\xe6" +
	"\xbcF_\xda\x18\xc7\xba\xe8O\x1b\xe3\xdc#\xe6:\xfc" +
	"Et\xdcg:\x9b\x0bs\xeb\x042\xf3\x17\x1bJ\x9a" +
	"\xfb\x13;5)\x19+k\xf0NnfS\x16+\xbc" +
	"\xca\xa5\xdb\x8eR?\xe1\xeb\xee\xe3F\xb1\xab\\n\xf1" +
	"\xdd\xda\xe2\\F\xf2\xdc~\xefbK\xfb.\x92\xc8+" +
	"\xcf\xd8\xf7\xb3|\xe2\x8b\x86\xff\xe8A;Dg\x94?" +
	"\x9d\xd3H\x92f\xdd\xb0\x80\x9c\xc95S\xb5\xd4~\x16" +
	"R\xadA/=\x11}Q\xd6`\xb5\"\xd0\xc8\x91J" +
	"\xf8@F\xa7\xfc\x01a\xca\xa0\xe3\xc0\x86\x9eJ\xa1." +
	"\x0d}Y\xcb\xe2F|\x8d\xcc\xd7yI\xba\xf4\x94n" +
	"4\xe9\x86d\x1f,\xee2\x14\xcd\xec\xd1\x8d\xb4\x17\x10" +
	"\x12p\xd2m\xd9U\x9d3\xc8K\xc2\x8a\xaa\x99E\xf2" +
	"\xecgR\xca`'\xe8\x8ey\xa8\xf0d\xb8\xe4\x84\xa1" +
	"\x89(\xb4\x19\xabjW;\xfa\x84\xefx\xc6\x08/J" +
	"\xc5\x9d\x87,\x82\x19\xfb\xfaBg\x1e\xb6O\xb3\x0f\xe8" +
	"\xdf\xeb\x9b\x87{\xa6\xd9\xe7\x17\x1e\xf9<\x97\xb9\x84\x07" +
	"\x86\x1e\x05\x0f\x0f~\xca\xf1\xf0@\xd1+\xce|\xfbc" +
	"H\x16\x94:{\x17\xdc\xe8\xfb\x9c\xd5\x13\xed\x84'\x19" +
	"\xcf\xa8\x9d\xae\xf3N\xa0\xd8\x07m\xf2\xdd\x1e!\xd3\xeb" +
	"\x96\xe3\x0c\xca\x0f\x89\xf4\x8d\xb3\xb8/\x8f\xfc^3\xba" +
	"\x06e\x91\x19h\xbc\xc8\xb6\xb2\x9e\x88\xc7\x0a\x91\x0b(" +
	"\xf6 \x91\x8b\xd8\xabD.V\xbcJW\xd7\xad\xdeB" +
	"\x84eE7\x11\x96\xd8z\xc6r\xddjo\xa3>\xd0" +
	"\xa6\xb3\x06\xd3Lq\xd3\xcc\xf5dS\xa9\xa5-+\x9b" +
	"\x98[\xb8\xb4\x05V6\xf9\xc8\x81\x9bHH\xc2\xcd\xb7" +
	"\xb4\xeeK\xb3}\xa7\xf3\xe8\xf96\xdd4%l\xad)" +
	"\xa5f\xf2\x0a\x0d\x9d\x8e\xe2I\x8e^\xb26\xa1\xa4\xb9" +
	"\xa1,\x0d\xd5}iv.\xa5\xf6s\xd328kP" +
	"\xd2K\x09\xf0\xc5i\xe6\xdd\xe2G\x07)\x1c\xf55A" +
	"a\xa2tK\xa5o4D\x9e\xa4\x98\xc8D\xd1.X" +
	"Q\xab\x18\x9b\x96N\x1a\x1b\xe2O%\x91\x05\xcbhl" +
	"\xe6-cl\xa3\xa6S[9\xd3\xca\xf6\xf4\xd8\xd7\xb4" +
	"\xe4p\xf3 \xcc\xc0\xc8)\x895TC\x8c\x8e5\xcb" +
	"\xc1\xbbUk\xa6\xf3w\xc2H\xb8u4\x1dY\x16\xe5" +
	"0\xbbt*\x02\xc6bU\x00\xb9W\xe6\x1d8\xb1\xfd" +
	"\xb2\xe7\x0e\xb0\xc8\xe8i^.\x80\xc8\xc8\xce\\\xcf\xdd" +
	"\xcf\xf7\x1d,\xd7~\xcc\"#\xd7\xe7Z\xca\x7f\x9d\x1a" +
	"\xb3\xec\xed\x1f\xb1\xc8\xc8e\xe16E\xe3\xb9f'\x01" +
	"\x01h9\xc7\xc3\xc1\x1a\x84\x8f#g\xbb\x88\x0c;\xb1" +
	"\xa3{\x8f\xd0\xfdy\xf1A\x8e\xee\xa2R\xbc\x92{_" +
	"\x90\xbd\x88\x87\\\x17\xe4\xc4\xa2\x14^\x17\xe4\xc4\xa2l" +
	"\xa7\xfa^\xc2G\xe7\xb6\xa6\xbd\x14[\xe2e\xb1+q" +
	"3;\x1ay\x99\x1dC\x97\xc8\xec\xe8\xa8.\x8f\x92&" +
	"}\xc4\xb9\xe6'R\xb6I\xa8.\xa7I%\xf7\x8c\x04" +
	"\xe5\xf6\x89\x93\x17(\x8b\x9dg\x0cp\xb2\xde\xbdBa" +
	"R^\xccLEP\xa8.o\xd0w\xb97W\xe4\xd2" +
	"\xf6 B\x87\xa1\xa6\x15c\xb0+\xc4\x07,_.8" +
	"\xbbTHN\x8aQ;\xd8U\xb4\xdc\xbd\x0b\xc4\xa7'" +
	";\xd3C\xf7\x8d\x0e}\xa4\xdd\xf5\xb9\xb9e\x8e\x9f\x0e" +
	":yZQ5U\x83\xde\xbc\x1b\xd5\x10f\xb5*\xdd" +
	"\xe3Z\x88\x03\xc1]\x83\x99\xb0\x9aP<\xeb\x01\xcaV" +
	">!\xc6]\x89Nx|\x9f\xbenq6\x95\x1ar" +
	"\xabJ\xe1\x8d2f\xc1\xea\x83\xb0\xb7v\xdd<\xb7)" +
	"Z\x92,\xdc\xcf\x0d\xdf;\xdde] 8\x05\x8b\xb9" +
	"\\g,\xd2,\xaeiJ<\x9b\xe1F\xbfj\xea\x86" +
	"\xef\x16]\xe1{\x15\xa2\xd4t!\x8aN\x1d#|\xaf" +
	"\xc2\xdf;z\x1acaUS\xad\\R\xd7\xac5\x9a" +
	"\xbe\x8e1&\xebkj\xcd>\xdd\xb0\xc2z\xc6\x17b" +
	"\x1d\xf84I\x89\xb2\xdf\xf8C\xc3E\xec6\xe5\xbd\x91" +
	"\"\xe3\x1e\x14N\xe6i\x8c\x854\xa5?\xa7)\xa6\xb2" +
	"\"e\x19\xacA\xe9T2j\xd2\xb9\xec\xb0\x15\x94\x04" +
	"\xe2Jg\x18\xe1\xf0\xda\x84\x9e..\xc5\xb6\xea\x9a\x1e" +
	".r\xdf\xda\xb2b\"\xceD_\x1e4\x87\xb5\x9el" +
	"\xf4\xe4\x1e\xe7\xc0\xdf\xa9N\xdf\xc5l\xf6\x150\x91\xb3" +
	"\xd8\xe4k\xe26\xeeHp\xbc\x10q>\xec\x161\xdd" +
	"\x9d\xb4u'\x88\xcb\xea.n\xf1\x85&\xe7iD\x8e" +
	"|l\x159\x17\xe8\xa8?\xaa\xae\xe9\x8bR\x99>\x06" +
	"J\x01\x0f\xa4\xa2F.\xee\xef.(\xea\xa3w\xacT" +
	"X\xc8\xcf&\xf1\x81&\x9d\xf7@\x8fYp\xfb\x91\xcf" +
	"I\xbdj\xf5\x0d]\xcd\x8a\xfc\xffpe\xdd\x88bW" +
	"\xd6\x8d\x10\x97\x97\x8b\xf8l\xc7\x80\x13\x84iv|\xf6" +
	"X\x7f\x1c\xb6\xefj\xba\x99\xfe8\xec\xe9\x84\xbb\xf7o" +
	"\x7f\xb6\x94\x03\xeb\x0b\x01\xeb\xbf(\x07\x85\xd7\x7f\x8al" +
	"\x04\xce\xd1\x85Z:\xbb@\xb1\xbeS~\xf8\xcd\x09_" +
	"|\xa7\xf9\x00\x8bL\xbd!\xf7\xdb\x8d?\x7f~\xcc\xb6" +
	"\xbb\xfe\x85~<\xfe\xf1\x8d\x8f\xfc\xe8\x96\xe4\x0b,2" +
	"uY\xee\xc5\xb1\x7fs\xe6\x95%u\x0fRH\xf0\xe4" +
	"\x1d\xaf\x1d?{\xb0\xfcv\x0a\x09^\xbe\xadwF\xe6" +
	"\xc4u\x7fd\x91\xe9\xd3\xbc\xe4\xc3\xf2\xca:\xff\x8f\xfa" +
	"\\;\xb7\x14\xe7r{\xe7\xcc\x84\x9c\xe0tf\x82\x15" +
	"^\x96NW\xf1\x85;t\x93\xe7\x85\xa25\xe6\x85\xa2" +
	"\xd9g\x1e\xa2G\xc9\x7f\xe2\x85\xa2\xc9\x8e\x1d\x9b\xfc9" +
	"^(\x9a}\xa9v\xf4$\xf9IN \xfe\xac$R" +
	"!\x07\xc8\xe1O\x1c\x07\xe1\x17\x9dH1\x9c\xe4\x17(" +
	"\xb2\x8c<\xfe\xaf\x91\x9b\xc7\xe6t\xafP\xfd\x97\x11\x7f" +
	"S\xb2=\xe6tW\x12\xb9\x7f\xbc\x88\xb3J\x9b\xd3]" +
	"\xa08G/\xb4l\xb8m\xa4\x03\xd9`\xacS\xc6\xb5" +
	"E61\xe7\xaa$\xb2A\x8dr\x1d\xfe#l\x1b\xdd" +
	",\xb2\x95Qd\xd9R\xb2q\xd96\xba\x16\xb2ey" +
	"\x8e\xfd\xb0m\xa3k%\x9b\xd8R7\xf2+b\xdb\xe8" +
	"|\x91_\x1b\x1c\x9b$y\x97\xc8Q\xbf\xc1u\xec\x87" +
	"\x86\xd9\xde\xa5\x02\xc7>\xaeu\xf2.\x91\xa3\xdes\xec" +
	"Gm\x87\xfc>\x8a\x08\xdb\xe3\xda0+l\x87\xfca" +
	"z\xafg\xab\x84\x90\xb0\xd1=J\xb8g\x93\xbcl\xb8" +
	"\xb0\xd1=N\xb8k{\x9cP\x03\xc2Fw\x8a\x1c\xf5" +
	"\x9e\x8dq\xa4\xed\x90/t\xe0\x8f\x0a\x0a#\xddK\xd4" +
	"O\xd7f8\xc4\xf3N\xbf\x17\x89\x1c\xb5yX\xb3\xa1" +
	"\xb3\xda\x0c\xdd\x0f\xe5\xe7\xc1E\"X\xf2\xcf\xa7l\xfa" +
	"\xbb\xe0K\xb5\x7f\xf7\xb3\x9f^*%]a\xb9\x1bR" +
	"\xf5\xa9O\x83\xaak\x9dtDbh\x1d\xe4\xfdm\x14" +
	"\x84\xe4\xe3\xc6\xfeJ\xc3\xfd\x95j;\x8c\"W\xf8\x1b" +
	"\xba\x92lI\xf6~j\x1b\x14N\xe5?_\xe0\x90\x10" +
	"Q\x1cNsK\x81*\x8f~\x14v/\x1c\xb7\x92\x97" +
	"~q\xd1\xd2\xff\x9a\xc3\xbe7\x93\xbd\x94\xc3\x9e\x92l" +
	"\x9b+\xeb\xbd\xafpi\x9f=PC2\x10\x16\x0e\xb7" +
	"\xbd\x82Z\x18%\x03\xf6\xc2\x9bx:\xa3\x1bJ\x8a\x11" +
	"\xfd\x82*\x8f@\xda\xcfiJ?\x1dsd\xb2\xcf\x8d" +
	"\x9a\xb0I\"\x93)\xff\xa0Kn\xdd\x04b\x9f}r" +
	"Ir\x12;X|\x06\xa5q\xa8U5[\x92\xf2\x19" +
	"\xc4\x96y\x9e\x14\x97=\xceB\xc1a\xa6\x0c\xb1k%" +
	"J\xa4\xafZ\xd9$gE.\x80\xf0_\x83\xe0c*" +
	"M)=\xb1\xc6\x14\xf2\x93/g\x9f\xc1Xl\x83\x0c" +
	"\xb1m\xbeWm]_,g\xdfn_z>\x87\x13" +
	"\xfb\x93\xc7\xbaW\xef\xde\xb7\xdb\xcb\x1e\x9b\xeb\xd6u\xab" +
	"X\x96\xd7\xb4\xae\xe9\x96\xae\xe1z(^\x00\x89Ne" +
	"\x1d\x16\x81Wv\xa9\x94\xb1\x94\xa8dE\xc6\x025\xcd" +
	"\xdb\xd5TJ\xf5=S<\xa4le\xdd\x0c\xf1\xcb\x95" +
	"N\xfc\xda\x1a2\x87\x1b\xdd[\\\x1dm-K\xa7E" +
	"\x06\xdc$\xe2\x8e\xa7i\x17\xa9/\xde\x05~\x8e\xa7\xe9" +
	"\x01j\xe7\x90\xe3\x8b\x05\xd7\x15\xbb\xcc\x7fi\xaa\xab\xad" +
	"\x9d\xa6\xfc\xa3>\x97\xab\xcd\xc3^\xa0\xe6=m\xca\xd1" +
	"\xd6^!-\xce\xd3\xa6\x1cm\xed\x0d\xd2\xb2\xbc\x13\x08" +
	"\x8e\xa3\xe9\x02\xe1\xde\x09\x04\xc7\xd1\xf4\x1e\xb5\xef\xf9I" +
	"\x87\x05\x9c\xa4\xa4\x9dy\xf7\x06:\xdaZ\x84Xs\x95" +
	"s\x16\xe0\xf3\x054}\xde0\xa1O\x09z\xfa\xb4 " +
	"\xa2\xff\xef\xa3\xa2.\x19\xb6\xf4\xff\xaf\xf0\x1e\xc9w\x1a" +
	"\x80\xf6r\x83\xb8\xa9\x1f\xd7\xee\xb3\xee\xda\xddJ\xa7\xfe" +
	"o\x0b\xa2\x04\x10\xf4\xad\xdd\x1d\xc1\xf9\x8c\xc5\xb7!\xbe" +
	"'\xe8\x8b\xef\xd9\x15\xa4\x1b\x85\x11\xbf;\xe8K\xb0\xbf" +
	"\x8fr\xe7\xedA\xfc\xde\xa0/\xc1\xfe=\x94\x93\xee^" +
	"\xc4\x1f\x0a\xfa\xee\x90x\x80\x92\xc6y\xb9\xeaJ\xec\x90" +
	"\xc8\xa3\x94\x0c\xe0\x08\xe2\xc7\x9d\\{t9\x1d\xe5\xc2" +
	";\x8e\xf8\xd3A\xdfi\xc7SA\x0a\xf9C\xfc\xf9\xa0" +
	"}\xc2\x8a.\xa7#\xfcY\xc4_F\xbc\xbcZ,\xde" +
	"\x97\xa8}/\x89\x9d\xb3x\xcfR\xd2\x02/\x89\x9ds" +
	"c\xf19\xfa\xde7\x11\x7f7h_\xaeGQ\x04\x94" +
	"C\x90\x92\xd8}\x12\xb4\xe3uP\x02\xfb\x88r\x05~" +
	"\x82xi\x89\x9d\xfb\x17%\xb0 %\x8d\x0b\x94\xc8\x10" +
	"\xafB\xbc\xca\xbe\x9e\xae\xb2\xe4\xd7\xa8m >\x9e\x92" +
	"\xe1\x8d\x14\x12\xd88JJ\xe7%\xbd\x1b1BH`" +
	"SK\xe8\x00\x0d\xe23K|g\x01\xa6S\xfb^2" +
	"<\xe7,\xc0\x1cJz\xe7%\xc3s\xce\x02,\xa0\xe4" +
	"s\x0b\x11o\xa3$sW\x0a\x09\xac\x95\x92\xc6y\xc9" +
	"\xf0j\xc6\x08\x09,F\xefmC|\x15%\xab\x1b." +
	"$\xb0\x15\xf4\xde.\xc4oF|tX\xb8Io\xa2" +
	"\xf7\xde\x88x\x1f\xe2c\xaa\x84\x9b\x94\xd3{\xfb\xdc\xe4" +
	"y\x97_%\xfc\xa4k\xe9\xbd\x94<o\x03\xe2c#" +
	"\xc2O:H\xe3\xb0\x01\xf1m\x88\x8f\x1b!\xfc\xa4[" +
	"K\xce\xe4]\x92x\xc5\x97\x84\x9ft/\xf5\xc7\xbb$" +
	"\xb1v\xae\xf0\x93\xdeC\xed{\x97$\x8eo\x13~\xd2" +
	"\x83\xd4\x0e%\xdb{\x8c.gl\x17\xc9-\x1e\xa5K" +
	"\x09\xbd\xcb\x10'VSr\x8b\xfa\x93%\xe5t)\x1e" +
	"\x16\xbc\x8c\x05_\x18I\xd9-\xea_*\xe9\x86\xbct" +
	"{\x93.\x13\xe9-\xde)y\xcb\x9fVor\x0de" +
	"\xff\xab\xbfX\xd2\x88\xf5KCH.\xb1\xe0\xcaQ\"" +
	"\xfd_\x84.&\x1c\x85\xf8$\xc4\xaf\x1aM\xe9\xff\xea" +
	"'\x84\xe8\x81\xab\xb1\xe0\x1a,\x982F\xe4\xff\x9bC" +
	"\x0f\xb87\x16F\xa6^N\xf9\xff\xea[\xc4\x03\x1dX" +
	"p#\x16L\x1b+\x12\x00\xae\xa6\x07nF<\x85\xf8" +
	"\x17\xc7Q\x02\xc0zU<`a\xc1&,\xb8\xfa\x0a" +
	"\x91\x02\xf0Vz\xe06\xc4w\">\xbd\x96n\xa7\xab" +
	"\xdf!\x1e\xf0\xae\x1a\x9cQ\"\xae\xa7\xbb\x8fn\xf6\xbb" +
	"\x17\xf1\x87\x10\xff\xb3\xf1\xe2v\xba\x07BF\xde\x15\x84" +
	"3'\x88\xeb\xe9\x8e\x86\x90E\x1cA\xfc8\xe2\xb3&" +
	"\x8a\xdb\xe9\x8e\x85\xba\xf3\xae&\xac\xfb\x82\xb8\x9d\xee$" +
	"\xe1'\x10\x7f6$\xd1\x99\x8f\xc5MzVc\xe0&" +
	"ph\xe8\xc9\xbfBBd\xee\xb8\x9e3\x99\xafqO" +
	"\x9f\x14\xe6A\x12\x95\xdaUH\xa5T\xf2s\xcbI/" +
	"\x8e\xa6\x17KHV ;\xa2\xe9\xcb\xe0!\xbcb\x8d" +
	",\xa4*^\x80go\xc6$\xba+a\x99sBD" +
	"\xb3\x06\xd9\x90\x1a\xacA8\xf5\\?1\xf6#\xa5k" +
	"\x0ak0\xcd\xd5\xdc\x17\x95c\xdb\xa4V\xb3\x10\xa2C" +
	"\xaa\xd7\x9af\xb32XX\xbb\x99\xce\x8b\xf8\xbf\x11q" +
	"0\xc5\xe7\x98\x0d\xe2s\x0a\x9fj\x07\xd5\x1e\x05J\x0a" +
	"\xe5~\xab(\xa5\xcbb\x1aU\xc5\xf4}\x8d(i\x92" +
	"\xf0\x93\xfc\xdf\x9cw*\xc6\xa9\x05X\xcb>\x93\xe1|" +
	"\xc8\xc6\xeed\xfe|t'/5\xe4\xdd\xc9bC\xde" +
	"\x9d\xfc\xac!wj\x14\x0e\xf9\xc6^%\x95\xf7\xea^" +
	"%u\xa9\xd9VR\xc5f[I}\xd6l\xdb5\x86" +
	"\xccv\x02\xd1\xc5\x06\x07:85\xd8\xa8\xca\xbev\x9d" +
	"BI\x14z-{\xa7\x8a\xdc3W0h\x9f\x94v" +
	"\x9b\xee\xcd\x98m\\\xc9\xc4\x993\xc9\x85\x05\x92\xc0\xf3" +
	"\x9a-\xac\x03\xa2N\\\x0f\xe7u\x9b\xce\xff,I\xe9" +
	"2\xad\x07{9\xb4;\x8b\x86n>\xf0\xaft\xaa\x1b" +
	"\xb8T\xdd\xe2k\x05\x9fjL\x9aR\xe1\x13a\xfa\x96" +
	"\xc2j\x81Ok\xb8p\x15Pw>\xa3a\xa7\xda\xe7" +
	"oX|\xa7\x92\xfa<=^\xa2\xa4\xfe\x13\x0d+\xa9" +
	"\xcf\xd3c\xa7\xda\x7f\xb2\xe1\xcf1\xc6v\xb5\xcf\xdfp" +
	"\x9fbvZ\x09\xfb\xd6\x08\xd7-1hZ<\xddi" +
	"\xb1\xdaD\x97/\x03PN\x10\xeb\xe5=,L\x01\xbf" +
	"ndK&\xddi%\x9at\x96\x17\x1eL[\xa2\x93" +
	"\x9b,\xc4\xad\xa1Q0r\xe1\xbd\xed\x9aH\xc0n\x85" +
	"\x95\xfc\xa4\x12\xf9\xc9\xf0\x1b\xc9\x1b0\xda\xa0s_\"" +
	"\x9f?\xa3\x84\xfe\xb9\x84\xdd\x12\xaa\xf6\x1bU\x91\x81(" +
	"gp\xbbN\xadb\xa9Zo\xde1s\xcf\x17\xbaX" +
	"\xc96P\xf69R\xd8S$A/\x00\xca\xe1\x14]" +
	"\x00?\xc17G\x17\xc0n|\xb5\xfdo\xc0\xfe7h" +
	"\xff[\x12]\x80Z$\x84\xa2\x0b\xe0\x09\xc6\xa04\xba" +
	"\x00\xeeg\x0c\xcal\xbc\xdc\xfew\x98\xfdo\x85\xfdo" +
	"\xa5\xfd\xef\xf0\xe8\x02x\x901\x08\xdb\xef\xad\xb2\xdb\x8d" +
	"\xd8\xff\x8e\xb0\xff\x8d\xda\xfd\xa9\x8e.\x80g\x18\x83\x91" +
	"\xd1E\x84_f\xff[\x13]D\xcf\x8f\x8a.\xa2v" +
	"G\xdb\xbf\xc7D\x17\xc1\xc3\x8c\xe5\x0c\x9eR\x06\xdb\x95" +
	"\x14\xf4d5\xdbk\x9a\xcbjY\x93'[5\x10\xf9" +
	"\x90\xac\xa5\x0dt\x9dT\xd2\xcd\x90\x04V\xa7b\xf1&" +
	"E\x83YE\xb0\xba\"X}\x01\xd6\xa5$\xa0\xaf\x00" +
	"[\x92N\xc9\x8a\xe6\x82\x01\x02[\xed_\x96\xc9\x9c\x02" +
	"\xc2\xe3\x195\xd4\x9cV\x0a\x9a\x88gT\xb9\xc9,\x00" +
	"W(\x86l\xcd*\x06\xd6\x15\x03\xeb\x8b\x81s\x86\x82" +
	"ak\xe8\xfbW\x98\xdd\x8c\x15~\xaa\x9a\x1e2L\x88" +
	"\xd5\xe7\x0c\xde\xab\xd2\x8d\x83\xcdj?7z\xb9\x06V" +
	"A\xbd?O\xa9\x0d\x1ao\xd5T\xaf@\x12c\xeap" +
	"\xe1\x04/\xf2\xc2\x04\xac)\xc0Z\x06,P\x87\x0e\xd6" +
	"\x90g\xe9c\xe7\xe6L\xd5\xe0Z\xc1\xaap\x12n\x81" +
	"\xd5\xa6\xeb\x99\xeb\x15\xab6\xd1\x97\xd4\xf3wP^\xd6" +
	"'\x10\x19M\xdd\xace\x11\xf8In\xc5%\xb2\x9b\xf9" +
	"-U\x9d\xc5,U\x8d\x8c\xc56\x15F\xb44\xfa\xcc" +
	"WN\xc2\xd1\x1d\xdd\x8c\xc5\xee\x94!v\x17j\xb3%" +
	"\xc2R\xb5\xf7'\x9e\xf9\xea\xd3\xf3\xb3}f\x16;'" +
	"\x7f\x1b\x0buf\xd2\xff\x95\xacmy)g5\xa5\x97" +
	"7\x08K\x15\x0d\xd6[\xeam\x993]\xfbog\x11" +
	"\xb8%gg\xb3\x11\x19m\xf3\x12\xc0v\xfa\x12\xc0\xda" +
	"\xc9\x07\xf2\x8d\xc4n;C\xf3v\x8aX\x97p\x91P" +
	"\xa2\x89\xc52\xbdN\xf3\xaedp\x07^\x9do\xdf0" +
	"\x91\xf1\xfc\x9d\xe9\xfdv\xcc\xd1\x06\x09Bjr\x00\xaa" +
	"r\x9f\xcc\xa9\xe9\xfa\xb7=\xbf\xd8\xee\xdc\xf3\x92T," +
	"\xc51\x077\xf4q%\xc9\x0d\xd7:\x9c\xd5\xd4\x01\xe2" +
	",\xa6\xa5\xa43_Q4Y/n\xda\x1b\x9av\xe8" +
	"\x06]\x83B\xc3j\xb1H\xc3i\x9e\xb15/7E" +
	"\xd8\xe2\xe9\xcc\x10K\xaa\x94\x9fY\xac\x9d7\x08\x97\x19" +
	"\xc5\xc2\xb8/z\xa1\xdb\x17\xc7f\xbf\xe8\x95;\xfcN" +
	"^;h\xef\xc3\xb7\xfc\xa9\xa6J$'\xd5\xd4\xab\xf9" +
	"9\xa2\xec@\x8f\x91\xf0k\xc6\xe2c\x11\x9f\xe2\\\x93" +
	"\x18d,:\x99L\x87\x93\x10_\xe8\x04\x8c\x94\x10o" +
	"B\xadw!\xe2m\xe4*\xdd$\xac/\xadd\xc9l" +
	"C|\x15H\xceU\xb6\xc9\x02S\xd9\xe7H\xd6\xd5m" +
	"(kx\xb3jJ\x8egP\xef.v\x01m\xafb" +
	"\x92\xf7P\xca\xaf$\x12\x8c\xbb\x16\xb5\xbc\xcb\x9a}\xb5" +
	"B\xf9w\xd9b\xa7\xe2\x16\x0b)\x16/\x12<G\x1d" +
	"\x81<\x1f%Ty\xceP\xdb\xbc\xdf\xa7\x18\xc9FC" +
	"Y\xe3V\xf4\x9b\xf9\xfd\x9b\xa2\x9fk\x16\xeb\x00\x88\xbf" +
	"\x0b\xae\x8dms%\x8e\xf6\xa6J\x19\xe2wVJP" +
	")\xe5r\xc2\xc8\xb6\xbdr\x19c\xf1mX\xb0\x07\x0b" +
	"\xae\xfeS\xce\xb6\xb2Una,\xbe\xf3\xff\xc7\xdc\xdb" +
	"\x87IQ\x9dy\xc3\xe7t\xf5\xd0303\xdd=\xd3" +
	"\x18@\xb1\xc5`\x02<\xe8\x0b\x03$\x80\x98\x11f\x06" +
	"\x19\x1c`zz B$\xb1\xa6\xbb\xba\xa7\xa0\xbb\xaa" +
	"\xa9\xaa\x1ef\x0c.\xe8j\x82\xbe\xb8!\x06\x8d\x12x" +
	"V]\xcd\xa2\x91D\\\xcd\xaa\xab\xbb\xe8\xea\xae&\x92" +
	"h\xa2\x89$\xb0~D\x135\xfa\x04\xb31QW\xad" +
	"\xf7\xba\xefsN\x9d\xd3==\xb8\x9b}\xf7\xba\x9e\xbf" +
	"\x18\xee\xfb\xf4\xa9\xaf\xf3q\x9f\xfb\xe3\xf7\x03\xc5>P" +
	"\xd4}\xe8s7[\x13\xba\xd9@q3(6~\xc0" +
	"\xe9\xab\xf67\xdd\x03'nP\xdc\x05\x8aq\xff\xc1\xe9" +
	"\xab\xeeh:\x93\x90\xf4m\xa08\x0c\x8a%\xefs\xfa" +
	"\xaa\x87\xf1\xae\x1e\x02\xc5\x13\xa0\x88\xbc\xc7\xe9\xab\x1eo" +
	"\x82C\xfac\xa0x\x1a\x14_|\xd7g\xbe\xb6#M" +
	"\xb7\x12\x92~\x1a\x14o\x82\xe2\xf3\x7f\xe2\xfcU\xaf7" +
	"\xb5\x11\x92~\x05\x14'@1\xf4G\x9f#o4\xc1" +
	"\xb89\x01\x8a\x0f@\xf1\xe5w\x04\x81U\x13\x82\x9c\x82" +
	"bRs\x886\x8d\xfc\x81\x13XMl\x86\x118\xa9" +
	"Y\xa3\xe9\xe9\xa0h\xf9w\x9f9\xdc\xa65o $" +
	"}\x06(f\x83\xe2\xe2\xdf\xfb\xcc\xe36\xb3\xf9\x1aB" +
	"\xd2\xb3A\xb1\x10\x14\xff\xcf\xdb>s\xb9-h\x86\xe7" +
	"\x98\x0f\x8a\xf3A\xd1z\xc2\xe7`3\xd8\xd5\x12P\\" +
	"\x04\x8a\xc4\xef|\xe6t[\xdb\x0co\xb7\x17\x14\x05P" +
	"\x9c\xf7\x7f|\xe6u3\xf1\x17\x83\xa0\xf0@1\xf1-" +
	"\x9f\xb9\xdd\xb64\xc3\x87*\x81b\x1b(>\xfb\xa6\xcf" +
	"\xfcn#\xf8\x8baP\\\x09\x8a\xe4o}\xe6x\xbb" +
	"\xbc\x19\x07\x03(v\x81\xe2\x947|\xe6y\xbb\xba\x19" +
	"\x07\x03(\xf6\x80\xe2\x13\xaf\xfb\xcc\xf5\xf6u\xecj7" +
	"(\xf6\x81b\xd2k>\xf3\xbd\xdd\x84O\xbe\x0f\x14\x07" +
	"@\xf1\xa5\xdf\xf8\xcc\xf9v{3\xbc\xdd\x03\xa0\xb8\x17" +
	"\x14\x97\xfc\xdag\xde\xb7C\xa8\xb8\x17\x14O\x83\xc2z" +
	"\xd5g\xee\xb7#\xcd\xf8iAq\x0c\x14\xfa+>\xf3" +
	"\xbf\x1dm\x86/x\x0c\x14\xef\x82b\xe0W>s\xc0" +
	"\xbd\x83\x8awA\x91\x88\x86h\xd3\xe0\xcb>\xf3\xc0\xc5" +
	"\xa30\x12\x13Q\x8d\xa6\xcf\x00\xc5\xd4\x97|\xe6\x82\x9b" +
	"\x1a\x85\x07<\x0d\x143@a\xbe\xe8\xf3Z\x85(t" +
	"5\x03\x14\xf3A\xb1\xf8\x05\x9f9\xe1\xe6F\xe1{\xcc" +
	"\x06\xc5BP\x9c\xfao>\x83\x98]\x10E\xc4\x15P" +
	"\x9c\x0f\x8as\x8f\xfb\x0cc\xf6\xbc\xe8bB\xd2\x0bA" +
	"\xd1\x09\x8a\x8b\x8e\xf9\xcc\x0b\xb74\x8a\xf5\x9e\xa0\xe8\x05" +
	"\xc5\xfa_\xfa\x8c\x85cU\xf4\xf7\x84\xa4\xfbAq\x09" +
	"(6\xfd\xc2g~\xb8\x8dQ\xcc\xc1\x03E\x01\x14\xa7" +
	"\x1d\xf5\x19\x0f\x87\x89\xcf1\x08\x0a\x0f\x14\xc6\xf3>s" +
	"\xc4m\x89\xc2*<\x0c\x8a+A\x91\xfb\xb9\xcf\x988" +
	".\x8f\xfe\x00>-(\xf6\x80\"\xff3\x9fy\xe2\xbe" +
	"\x8e\xefj\x0f(n\x06\xc5\xe6\xe7|\xc6\xc5\xb1?\xfa" +
	"(LgP<\x04\x8a\xc2\xb3>s\xc5=\x10}\x83" +
	"\x90\xf4aP<\x05\x8a/\xfc\xd4G_\\\xeb\x93Q" +
	"X\xea\x9f\x06\xc51P\x14\x7f\xe2\xa3/n\xde\xd1(" +
	"\xe2H\xbf\x08\x9a7Ac?\xe33o\xdc\xebx[" +
	"'@\xd1\x18\x0b\xd1\xa6\xd3\x9f\xf6\x99;\xae!\x06\x8f" +
	"\xde\x18\x83\xd9\x09\x8a\xd2\x8f}\xe6\x8f\x9b\x18\x83/5" +
	"\x09\x14\xd3A\x91\xf9\x91\xcf\x1cr\xd3bp\xf5\x19\xa0" +
	"\x98\x0f\x8a\x0dG\xfc\x04\x9d\x07\x9f0\x06\xf7\xbb\x10\x14" +
	"\x9d\xa0\xe8z\xcaO\xd0\xf9\xf0Ab\x9b`\xab\x01E" +
	"\x0f(\xb6\xfc\xd0O\xd0\x05\xb0\xd7\xc4\xe0\x9d\xf4\x80\xe2" +
	"\"P8?\xf0\x13\xf430;Qq\x11(\xb2\xa0" +
	"p\x9f\xf4\x13\xf4\xb3\x84\xb4\xea1x\xef\x83\xa0\xf0@" +
	"\xe1=\xe1'\xe8B\xf8 \xf8\x0b\x0f\x14;@1\xfc" +
	"\xaf~\x82.\"\xa4\xf5\xb2\x18\xbc\xde\x1d\xa0\xd8\x05\x8a" +
	"\xf2\xbf\xf8\x09\xba\x18&!\xde\xeenP\xec\x03\xc5\xa5" +
	"\x8f\xfb\x09z.\xcc5\xecj\x1f(\x0e\x80\"\xfc\x98" +
	"\x9f\xa0K`\xae\xc5f\xc1\x97\x02\xc5]\xa0\x98\xf6\xcf" +
	"~\x82\x9e\x07\x0bo\xecR\x98\x84\xa0\xb8\x17\x14\xd9G" +
	"\xfd\x04\xfd\x1cLB\xec\xea^P\x1c\x06\xc5'\x1f\xf1" +
	"\x13\xb4\x1dVd\xfc\xc5C\xa0x\x02\x14\x93\x0f\xfb\x09" +
	"z>\xac\xc81X3\x1e\x03\xc5\xd3\xa0\xd8\xfaO~" +
	"\x82.\x85i\x1b\x83/\xf8,(^\x04\xc5\xf4\x7f\xf4" +
	"\x13t\x19!\xad\xc7c0A\x8e\x81\xe2\xb5\x18\x98a" +
	"\xbd\x09\xdaAi\xeb\xab1X\xa9_\x04\xf9\x9b\xf0\x83" +
	"\xb3\x1e\xf6\x13\xb4\x13\xc6\x02\xfe\xe05P\x84\xe3!\xda" +
	"\xf4\xa9\x87\xfc\x04\xed\"\xa4\x95\xc6\xfb\x08\xe9\x8b\xc3\x18" +
	"\x01\xf9\xd9\xff\xe0'\xe8r\x18#q\x98P\x8d\xa0\x98" +
	"\x04\x8aO?\xe8'\xe8\x050F\xe2\xf0x\x93@1" +
	"\x1d\x143\x1e\xf0\x13t\x05\x8c\x918\x0c\x9e\xe9\xa0\x98" +
	"\x03\x0a\xed~?A\xbb\x09i=;\x0e\x13j6(" +
	"\x16\x82\xe2\x9c\xbf\xf7\x13t%L\xf38\x8c\xc3\x85\xa0" +
	"\xe8\x04\xc5\xcc\xef\xfb\x09z!\x0c\x9e8,\x0cK@" +
	"\xb1\x02\x14s\xee\xf3\x13\xb4\x87\x90\xd6\xae8\xac\xc7\x9d" +
	"\xa0\xe8\x05\xc5\xdc{\xfd\x04]\x05\xd3\x1co\xb7\x17\x14" +
	"\x17\x83b\xe1\xdf\xf9\x09\xba\x9a\x90\xd6\xf5q\x84\xe8\x03" +
	"E\x16\x14\x8b\xee\xf1\x13t\x0d\x8c\xaa8\xb28\x81\xa2" +
	"\x00\x8a\xf8!?A{a\xfe\xe35\x06A\xe1\x81\"" +
	"v\xb7\x9f\xa0)\x18nq\xf8L%P\xec\x02E\xfb" +
	"\xf7\xfc\x04\xed\x83Q\x15\x87\x0f\xbb\x13\x14{@q\xfe" +
	"w\xfd\x04M\xc3\xfc\xc7'\xdf\x0d\x8a}\xa0Xz\xd0" +
	"O\xd0~\x18nxW7\x82\xe26P|\xee.?" +
	"A\xd7\x12\xd2z\x0b^\xfcfP\xdc\x05\x8a\xe5\xdf\xf1" +
	"\x13t\x1d\x0c7\xbc\xc6\x01P\xdc\x0b\x8a\x0b\xee\xf4\x13" +
	"\xf4\xf30\xdc\xe2\xb0K\xdc\x0b\x8a\xc3\xa0Xq\x87\x9f" +
	"\xa0\x17\xc1p\xc3\xefq\x18\x14O\x81\xa2\xfb\x80\x9f\xa0" +
	"\xeba)\xc1k<\x01\x8agA\xd1\xf6\xb7~\x82n" +
	" \xa4\xf5\x19\xbc\xc6\xd3\xa08\x06\x8a3\xbe\xed'\xe8" +
	"\x17`\x97\xc0k\x1c\x03\xc5k\xa0\x98u\xbb\x9f\xa0\x17" +
	"\x13\xd2\xfa*\xbe\xc4W@q\x02\x14\x1d\xb7\xf9\x09\xba" +
	"\x11,\x03|\xf27A\xf1.(\xce\xfc\x1b?A\xbf" +
	"\x08\xfbJ\x1c\x0c\x80wA\x11n\x09\xd1\xa6\xc6[\xfd" +
	"\x04\xfd\x12\x0c\xc4\x96M\x84\xf4\xb5\xc0@\x04y\xd3-" +
	"~\x82^\x02\x03\xb1\x05\xdez=(\x12\xa0h\xbe\xd9" +
	"OP\x1d6\xa2\x16\xf8\xe4\x09P\x9c\x01\x8a\xf1\x7f\xed" +
	"'\xc0\xeem\x9d\xda\x027u\x1a(f\x80\xa2\xfe\x7f" +
	"\xfb\x09\x9a\x81\x8d\xa8\x05\x8b\xe6@1\x07\x14\x0d\xfb\xfd" +
	"\x04\xcd\xc2\x08m\x81-x6(\x16\x82b\xc2>?" +
	"A\x0d\x18\xa1-\xf0F\xe6\x83\xe2|Pt~\xcbO" +
	"\xd0\x1clD-\x88\xfd\x05\x8aNP|f\xaf\x9f\xa0" +
	"y\x18\xba\xd8\xd5\xf9\xa0\xe8\x01\xc5\xff\xba\xc9O\xd0A" +
	"X\xf7Z\xe0\x8d\xac\x00E?(\x96\xdd\xe8'\xa8I" +
	"Hk\x0a\xaf\xd1\x0b\x8a\x8bA1\xe5\x9b~\x82n\x82" +
	"\xa1\xdb\x02\x9b]?(.\x01\xc5\xaa\x1b\xfc\x04\xdd\x0c" +
	"[W\x0b&$\x80b\x10\x14\xab\xaf\xf7\x13\xb4@H" +
	"\xab\x81\x8a,(J\xa0X\xb3\xc7O\xd0\"!\xadE" +
	"T\x14@1\x0c\x8a\xdeo\xf8\x09j\x11\xd2ZF\x85" +
	"\x07\x8a\x1d\xa0H]\xe7'\xa8\x0dK(*\xb6\x81b" +
	"'(\xfa\xbe\xee'h\x89\x90\xd6\xabPq%(v" +
	"\x83\"\xbd\xdbO\xd0-\x84\xb4^\x8b\x8a]\xa0\xb8\x11" +
	"\x14\xfd_\xf3\x13\xd4!\xa4\xf5zT\xec\x01\xc5\xcd\xa0" +
	"X\xfbW~\x82\xba\xb0\x0b\xa2b\x1f(\x0e\x80b\xdd" +
	"\xb5~\x82z\xb0\xe8\xa2\xe26P\xdc\x0d\x8ay\xbb\xfc" +
	"\x04-\x13\xd2z\xb0\x05\x16\xf6\xbbA\xf1\x10(\xe6\xff" +
	"\xbf~\x82\x0e\xc1\xbe\xd9\x02\x1b\xd4aP<\x05\x8a\x05" +
	"\xd7\xf8\x09\xba\x15\x06{\xcbO`L\x83\xe2\x18(V" +
	"^\xed'\xe80\x8c\xe9\x16X[_\x04\xc5\x9b\xa0\xb8" +
	"p\xa7\x9f\xa0#\xb0T\xb6\xc0\x1eq\x02\x14\x1f\x80\xa2" +
	"\xe7\xab~\x82^\x0aFm\xcb/\x08\xe9k\x85\x11\xda" +
	"\x1a\xa2M\xd1\xaf\xf8\x09\xfae\x18\xa1\xad0\xd1\x1aA" +
	"1\xa9\x15\xb9v\xf3\x98\xf1C\"\x0a\xf1\xb6orb" +
	"i\x96*v\xf1\xf7\xdb\x7f\xfb\x83\xfa\xd8o\xc4\x01\xc4" +
	"\xb1\xf5l\x07\x1c6\x1d\x9d\xa3w\xc7\xfcy\xe3\xbf{" +
	"\xfd\x1f\xbbBo\x082\x8e|\xc9]\xbd\xaak)\x8d" +
	"\xf9;W>\xd8:<uf\xc0\x05\xe4r6J*" +
	"\xa8\x968\xc6L\xcc\xbfef\xd7\xb3\xe6\xde{n\xe5" +
	"-#\x19\xdd\x92\xcc;\xeb\xb7\xf5\xdc\xb0\xf7\xaa\xaf\xf2" +
	"\xb3\x7f\x96\x1f\x99\xd9I*\xe6\xff\xf6\xba\xdbf}\xef" +
	"\xbe\xe7\x03\x02S\x01\xc0\xcf\x194h\xcc\x7f\xfb;\xf4" +
	"3\x8f\x9b\xfe7\x83d1s\xc8\x80\x13\x12\xf5\xd4\x93" +
	"Z\xe0l8\xbd\xed\xe2\xc6;\x1e\xfc\xfb=\"#\x0d" +
	"\xf3\xc3h\xcc\xbfc\xc6\xef\xfc\xd9?\xbb\xf3\xfe G" +
	"\x8b\xa3IWp:\xc7\xfcK\xbf\xf2F\xff=\x07_" +
	"\xf8Z\xad\x87vU_JpA\xf5\xe1\x9b\x05\xe2~" +
	"\xda\xd3\xa9\xa7\xd6\xd7\xc1\x9d\xad\x7f\xa5|\xd6\xff\xce\xfe" +
	"m\xf058>\x03\xd1\xf09\xbf\xf4\xf4\x87?\xbb:" +
	"=i\xaf\xfa\x9ck\xbb+Y\x02b\xfe[\x1f|\xf7" +
	"\x86\xf7\xce\xbf\xe2\xb0\xfaI\xbb\xac\x8cM\x92Y\xa3\xbb" +
	"\x96\xa3\x03\xfb\xe9w\xf4\x0c\xd16+>\x99\xd4\xa3\xff" +
	"\xd6vA\xf6N\xc1\xa5\xb2\xdd5\xac\xecI>\x1b\x8c" +
	"6\xc3uu\x04\xc6\x08p\xc1\xb8\x87\x9cr\x179\xdc" +
	"\xdfC\xbb\xffrU\xb9\xf4\xc2\x0d\xe2\xea:+\xdf\xeb" +
	"!\x9a\x9d\xa71\xff\xaa\xcb\xd6\\}\xcb\xc6\x867\x02" +
	"V\xdb\x92\x8b\xf5X\"\xf5\xb1\xf9\xb9\x83\xebW\xf4-" +
	"\x7f]\xe2\xcc\x0b\x82j\xe8|\xc9\xee\xbe\x17\x1b\xde\xbf" +
	"m\xbf\xa2EDn\xa2\xd9\xf0\x89\xbf\x97\xb8\x7fox" +
	"\xe6\xce?\x05O\xces\xd3\xa8@\x8c\xc3N\x0a_m" +
	"y\xf0s_\x98\xf0\xa2\xfa~\xe0\x1e0\xcdG\xfd\xc2" +
	"1\x7f\xc6\xe5\x7fq\xfb\xbf\xfe\xafo\x05\xa4M\xa2\xcc" +
	"\x92\xc2\x14\xab9\x18\xd6_\xf4\xe3y_\xd8\xbf\xf7\x0e" +
	"1\x18,}hm)\xab{\x95Dm1\xff\x87\x9b" +
	"R\x86\xf1\x8f7\xfe2x\x12\xa3P\xe8\xb6rv\xc5" +
	"h\x0cz\xfd\xd1\xd6G/\xcf\xad\xfb\xd3\x8fE\xaf[" +
	"\xcd\x9c\x99\x86\xafU\xb3\xf5\x84\x07\xaf\xf8\xe4\xe4\x0d/" +
	"<\x1b\xa4+\xb2Op\x01\xb5\\\xb7r\xde>|\xd5" +
	"c\xedO\xcfy\xe1\x05q\x17[x\xaa\x0f{\xdb\x8f" +
	"\xa4\xbe\x1b\xb90\xbf\xe7\xdf\xe4\x8b\xca\xeaN\xaf7j" +
	"\xc6|m\xff\xea\x8d\x83?\xfb\x95X@J\x0c \x97" +
	"\xc6\xfcq\x89\xc1\xf6//\xbc\xea{\x01\x192/r" +
	" \xd4\xa51\x7f\xe3\xfb?\xfa\xf5\xb6\xe3\xc7\xaf\x12\x0c" +
	"\xcb\x18\x90\x01\xc5\xa4\xe5\xc7\xbe\xbc\xf7\xde/=\xa9~" +
	"\xa0U\xa5LE\xbds\xcc\xbf\xb9\xedK\x07\xda~u" +
	"\xfbu\x95\x9f\xd1\xca\x87\x04D \xfc\xa4\xe2i_\xde" +
	"\xf0\x955\x1d\xdb^\xfa\x8d\x92m\x89\x95&\xd4\xad\xfc" +
	"6\x8d-3\x1aZ\xce\xdc\xf9p\xc5m\xf7\xe9[\xe1" +
	"\xad\xc8\xfcQ\x17\x06\x94\x152\x9c^\xdb\xe4K\x83|" +
	"'\xff\xfe\xde\xbb7\xdd\xf0x\xffw\x94a\x1e4/" +
	"\xe8V\x05c^\xcc\xdf|\xfc\x91#\xbb\xa7\x1e|'" +
	"\x983\xa5RA\xb7\xcca\xda\xa7oU\x1fA\\\xdc" +
	"s\xf4\\\xce\xcct\x85\x86\x0c\xe5\xca]\x9d\x0a\x1a\xf8" +
	"\xa7>\xf5\xeb=7{\xef\xdf\x15\xb8\\\xf9 \x0f\xf1" +
	"|W\xd3\xcaW.N\xd5C\xddv\x06\xdc\x82^\xec" +
	"\x081\x00h>5\xe4K\xba\xf3\xa5\x05\xdf:6\xef" +
	"\xc3k\xaag\x91\x06M\x03\x18o\xf5\xdej^c\xcd" +
	"\x80k8\xa1!]\xb9\x00{+\xc1\x93\xfc\xebG\x9b" +
	":V\x17\xdb\x02\x0c\"\xb1bP\xd3\xb6\xba\x86=\xc3" +
	"\x89Xz\xa1\xc6\xca\x11\xe4\xc5V~\x99\xea{(\x9b" +
	"\xab\xf5!3\xcf^\x0ccZ\xaex\xces\x8f\x1f\xfc" +
	"\\a\xd9\x13\xbb\xab\x9f3$KHO\xfe\"=\xc3" +
	"\xf5V\xda#.\x89zff3\x0c\xc3\x89\x9f\xfe+" +
	"\x83N\x7fE}\x0bY\xbbhP\xcf\x19\xa9\x1c\xb0C" +
	"_H\xbe\xb5\xbe\xbe\xf4s\xa5\xe5r\xd8\xb5\xa8cT" +
	"M\xe4\xdf\xad\xa7\xd7\xac<\xe5\x92#\xd5#($\x8a" +
	"]O\xfe\x12lg\xe0Bcd\xb9C\xf5\xa2Q\xd9" +
	"\xf1\xf4\xbfx\xb9K[\xf2\xc9'\xe4\xeb\xea\xd1G\xec" +
	"\xb2\x17\xaa\x86H\x84\x19y|\xe6\xc1\xfa\x1f\x1d\xdbY" +
	"}\xbb!\xc7p\xd3\xe5bQ\xe7\xcf'^\xd5?\xad" +
	"y_\xbb\xa8\xf1\xa7\xcf\x09\x96\x06\x9e'KE\xc7\xe2" +
	"&>\x1a\xff\xd67\x1e/,\xb9\x9f;\xee\x07l\xdb" +
	"\xa31\xbf\xfb\xacK\xaf+}\xe5\x9c[\xd4\x0f\xd3\xab" +
	";:i/\x1a\x9e\xe1\xc0B\x92\xfe\xf4\xb6\x1b~x" +
	"m\xdd\xd1\x8a\x85D/uR\xbez\xcb\xc7\xfcv\xfc" +
	"O\xdf\xf8\xda\xa7>\xb7Gn,E\xc3\xd1\xd7dI" +
	"\xbb]4<g\x84\xc6\xfc\x1b\xa6<\xfb\xd7\x9bg\xee" +
	"}_\xe6\xac3\x90\x04\x12)\xe8\xb0s\x9d~\xdfk" +
	"\xb3\xfej\xee\xeb/U\"\x9c\xaf\xc9\x86X\x0fUS" +
	"~\xf1\xc8\xc27\xfe\xfe\xd4\x97\x83\xd5K\x85\xb8\x8c\xf9" +
	"?\xfd\xd3\xf8\x96\xec\x8f\xbe\xf4}\x81\xda\x1f\x94\x0a\xd7" +
	"\xb1\x8cp\x9dq\x82W\x04Y\xaa\xb1\xba2\xba\x03\xaf" +
	"\xa3\xc8\x16\xdb_\xdcq\xe7\xee\xe9\x9f5w\x91\x8a\x97" +
	"\xdd\xa1SxN\x16\x1f\x1bm\x0b\xf2V\xabl*\xa0" +
	"\xdd\x02\xa3\xec\xca[\xa7\xael\xf8\xc5\x92\xfbkn\xa2" +
	"0-4|)3\x1f\xf9\xcd\xe9\xe7\x95\x1e\xff\xadb" +
	"M!\xa5<\xdb`\x16Z\xeft\xfe\xe4\x0a\xedwB" +
	"\xbb\xd5\xcc\x1a}\xb6\x9e\xa5\x1d:\xbb-n#V\x9b" +
	"\xa8h\xd2\xadk\xa31\xff\xf5\xef|\xa6is\xfb\x96" +
	"\xc7*o\xb8\xcb\xa2XA\x9d\x1d&5\xec\xa1\xe0*" +
	"\xbc\xce:KkYME\x8c\x869<\xdcEc\xfe" +
	"\x172\xe6\x94\xbf\xeb\xdf\xf2\xe3`&\x94\x0a\xb6\x9e5" +
	"\x1ci\xa8\x9e\xbe|\xf3\xdf/\xda\xfc\xa9`\xbf,\xf1" +
	"\x00$\xe5\xbc3p3;/\xbdj\xfe7\xffp\xff" +
	"\x8f\x826\xdcX\xac\"LTMEnF`-1" +
	"ig\xd5\xc4`\xec\x84\xbe\xb2\xfd\x9eS\xaexD\xd9" +
	"\xcd0\xc1\x9f\xbd\xda\x9f~\xb3\xa9\xf3\x8f}\x89o+" +
	"Z\x84n%QK7k\x0c1\x1f\xb99`\xdbF" +
	"3/o\xc8R\xd4\xc0\xc2l\xcf\"\"\x03\x8d\xf9'" +
	"\xae:\xbe\xf6\xef\xde\xd8\xfb\xe3\x9a\xaf\x9d\x1d?j\xb4" +
	"\xaaz\xf1\x98\x03_\xa3\xd9\x96>vA*\xfa:I" +
	"\x1b\xd2n\x8fe\xf6\xe6yE'\x15%\x9dxO\x0d" +
	"\xfb\x9b?\x7fJ\xe9\xd9\xef\x91\xaaE\x87$1=\x9f" +
	"\xc6\xfc\xbb3\xe5\xc4\xf9\x8d\xf4\x83\xe0;\xbb\x86\xb3\xbc" +
	"\xa0\xe7\xd9{\xed\xfd\xd6\xb5\xaf\xec\xdf4\xff\xa3\x0a\xe3" +
	"\xdav\xb6\xd02.>E#\xca\xd7\x9e\xebNi\x98" +
	"\xf0\xdb\xdd\xa7\xfcZ\x8e\xa7\xbcexv\x91Dau" +
	"\x1a}f\xf2\x0bf~\xd0K\x1b\x16\x89\xb8v-\xbd" +
	"g\x14K\x86\xa3{\xf0<i8\x94\xd0Z\xadxi" +
	"\x8aM\x92\xc51\xae\x93\x1fql7cc\xc0\xf9$" +
	"Z\xcdh;Y\xf7l\x91\xad\xd1d{\xd9D\xf6N" +
	"\x1a\xf3\x7f\xfc\xc6\xfb\xf6\xd5\x07\x17\x04\xef\xaahf\x1c" +
	"\xbb4h\x13\xcd\x82K\x7f\xf2\x12g\xf7\xd5\xad\xd3\x8f" +
	")C\x14c\x9c\xecE_Z\xf7\x8f\x9f}\xec\xd5\xf3" +
	"\xee\x92\xef\xaf\xd4gXY\x83\xf0\x005\x8d\xf9\xa7\x1e" +
	"x\xbfg\xd6\xf1\x8b\xc4\x0e\xd0^6{\xd9R\xfc\xc8" +
	"\xa7\x17}\xf1\xeeo5\x06\x9f0Sv=\xbb\xd8g" +
	"P\xd7p\x86\x8c\xec\x1c\xe8\xff{\x7f\xe8Y\xb4\xe1\xc4" +
	"\xa3\x97\x8f\xd1f.\xb4\xd9x\xdfo\xe6~\xed\xc3\x17" +
	"\xbe;F\x9b6h\xf3\xa8\xf5O\x13\xd6=v\xf1\xbf" +
	"\x8f\xd1f\x1e\xb4Y\xd0\xd3\xf9\x977~\xfe\x86_\x8c" +
	"\xd1f>\xb4\x89o^\xff\xb2\xe5}w\xc7\x18m\x16" +
	"@\x9b\xb5\xb7\xa5\x8e\xce\x1e:r\xfb\x18m>\x03m" +
	"\xfe&\\\xfa\xf0\xdc+\xaf}o\x8c6\x9f\x856O" +
	"\xd0\x9eif\xc6\xba\x7f\x8c6\x0b\xa1\xcd\xe4\xfd\xfb\xbb" +
	"\x1b\xde<\xe5\x0fc\xb4Y\x04m\xce\xfeeR\xeb\x8c" +
	"\x0cVl\xc1\xae\xe7\x18!\xbd\xc8\xe7\xe7\xd8\xab\xb0\xd2" +
	"\xf6\xf3|]`\xed#c\x9fby\xfbN\xbe\xda\x9c" +
	"d\xf5\xaey'c.Lc\xdeKt\x8c\xf5n\x8c" +
	"\x9b\x19kE\x1b5u\xb5Z3GM,\xb8\x80\x1b" +
	"\xb9A\xde\x19z!x\xca'\x12La\x1c\xdf`\x00" +
	"\x18\x1b\x19\xf8\xf8Z\x06>\xbe\x8a\x01`t3,\xa1" +
	"\xa5\x0c\x8b\xe9\xbc6\x04\xc0X\x00?\xa8\xc7\x8a\xf9\xed" +
	"\xfcX\x181\xd7\xa4#\x19\xdd\xc1*\xc3\xec\x88\x05\x1b" +
	"H{\xae\xec\x9a\xb6\xe5\x1b\xc3H_\x07S2\x89\xa7" +
	"\xa0\xed\x9ec\x16\x07\x0a\x06\x9e\x14\xb3&\xae\x8aj\xe4" +
	"\xba`\xe7\xd7\x19N\x14~\xdcK\x11\x84&\x1e\xae\xa2" +
	"j\xaa@q7\x1c\xd7\xb6\xf4\x82\xe9\xd1\x11\x85\x1dm" +
	"\x03>\xd5dV\xd6?q\x19!\xbe\x9e\xcf;\x86\xeb" +
	"\x9aD\x1b2|\xd7\x83M\xd3\xc9\x12B\xb6;FA" +
	"\x1f6\xb2cQ\xb0\x89:\xe3u\xf3X\x09\xda\xec " +
	"\x9c~\x16\x16b#i\xcfl\xb5\xdcj&\xd6Ia" +
	"\x81\xf6|\x05\x1cc.\xf2g\xcd\x0e\xb8|D\xc5J" +
	"\x17\xca\xcf\x0f8{D\xc5\xcaz\xec\xbe\x1f\xe4%\xaa" +
	"\xe0\xfa\x15\xb1\xfd`\x00\xb2!0\x84.\xc7\xf6\xdb\x02" +
	"0\x8dH\x1d\x0b\xa3_\x8f\xede\x95W\xfd8\x16E" +
	"\xbf\x03\xdb\xdf\x16 q\x0a\xa6\x96\x87\xb1\xfd\xfd\x12\x1c" +
	"\xa3^\x80c\x04\x08\x9a\xaf\xd1\x10\x8d\x96\xd4\x94\x0b\xf8" +
	"\x8f \x08\x12\x88l\xd5U\xe6\xa3*\xd5k\x95\x9d\x8f" +
	"\xc6\xe8\xa9Q\x87N\x87\xaa\x1b\x0d\xd5h\xa4W7\xd2" +
	"OR\xbd\xaer\x96((\x0e<\xd7X\xc1\xdeb\xd8" +
	"\x0d]\xcb*\xb0\xb7\xd8|\x99\xbb\x12\xe7\xcb\xd9l\xbe" +
	"\xcc\x9cEH$_r\xb7\xf3L\xf3\xf6\x01\xc3\xcc\xda" +
	"e\xbflm\xb6\xec\xad\xd6<\x82\x99\x89\xf8\xf7|\xe5" +
	"\xef\x05\x84\x90\xa8;\xa0\xbb\xea\xadI,\xab\xee\xa2\x9e" +
	"g+\x80C\x94\xf1\xbe\xac\x82\x0dp\x19!\xdbyw" +
	"\xed\xba3\xa7m\xde\xdc\xed\xf6\xf0\x9cy\x99\xb9sj" +
	"\x03Ft\x95\x06\x8ddQ@W\xde\x15\x8c\xf0\xdb\xc3" +
	"\xb3\x04\x85\xed]ae\x84\xdf\x81\xf2\xdb@~wX" +
	")(<\x18n#$}\x00\xe4\xf7\x86\x95\x82\xc2C" +
	"\xe13\x09I\xdf\x05\xf2\xfb\xc3\x0a\xf2\xc1}\xd8\xcf\xdd" +
	"\x01E\xae\x80>x\x00\xa9s\xef\x05\xf9\xe1\xb0R\x94" +
	"\xf50\xca%un$\xc4\x86\xf8#\xd8\xffC \x7f" +
	"\x02\x19{9\xbd\xd5\xe3(?\x0c\xf2\xa7\x90\xb17\xcc" +
	"\xf1_P.\xa9v\x05\xfe\xcb\x11\xbc\x9f'@\xfel" +
	"Xa#z\x06\xdbK\x0a^\xc1F\xf4\x1c\xde\xcf\xd3" +
	" ?\x16Vp\xea\x8f\"H\xa2\xa4\xe6m\xe6\xa0\xcb" +
	"\xc7\xb1\x9f\xe7A\xfeJX\x81\xae|\x09\xe5\xc7@\xfe" +
	"\x1aR\xff\xf2\xb2\xf8WQ.\xa9|\xe3\x8d,?\xe4" +
	"\xf50L\xd1W@~\x02\xe4-M,=\xe4-l" +
	"/)~[\x9bYv\xc8\xdb(\x7f\x13\xe4\xef\x82<" +
	"\x11e\xc9!\xef\xe0\xfdK\xea\xdf\x891\x96\x1b\xf2\x1e" +
	"\xb6\xffCX\xa3}u!\x1a?%\xce2C>\xc4" +
	"\xc7z\x17\x9a\x87A\xfe\x89\x16\x96\x18B\xeb\xce\xac`" +
	"\x0a\x9e\xd4\xca\xf2B\xea\xea\xda\x08\xe9\xab\xd3h\xba\x11" +
	"\xc4\x93\x13,+\xa4\x01\x89\x82\xebA\x9e@b\xe1\x89" +
	",)$^7\xab\x82@\xf8\xd4SXN\xc8D," +
	"\xe9\x8b\x81\xfc4\x90\x9f\xf6\x09\x96\x122\xb9\xee\xba\x0a" +
	"\x02\xe1\xa9\x93XF\xc8Yup\x9bg\x80|6\xc8" +
	"O\x9f\xcc\x12Bf\xc2\xedHb\xe1xr\x0a\xcb\x07" +
	"9\x1b\xefg6\xc8\x17\x82\xfc\x8cSY:\xc8\x02|" +
	",\xc97<\xed4\xc17\x0c\xf79\x1f\xe4\xe7\x83\xfc" +
	"\xcc\xa9,\x19\xe4\xbc:\xe4\xbd\x06y\x0f\xc8?y:" +
	"\xcb\x05\xe9\xc6R\xbf\x15 \xef\x07\xf9\xf4$K\x05I" +
	"a\xff\x01\x0f\xf1\xb4\xb3\xeaY&\xc8Z,I\x0cx" +
	"\x88\xe9\xa7x\x1e\x08VH^\x0c\xe2a\xe8\xe6\xd3\x94" +
	"\xa5\x81\x94\xf1\xf6\xbd\xa0rr\xc6R\x96\x05r-\xca" +
	"w\x81\xfcF\x90\xcf\xbc\x9c%\x81\\\x8f\xafSVN" +
	"\xce\xba\x92\xe5\x80TUN\x8e\x8d\xd4\x99,\xda\x967" +
	"(\xfe\x17\xc9\xca\x9a\x9e\xff\x02^gD\xcf\x05\xe47" +
	"\x11=7W\xf9\xbb-@\xdfD\xb2\x1c\xa1\xc88n" +
	"\x00}\x89p\x98\x12\xfa\xb2(\xbb\xca\x943\xc1\xdfF" +
	"&\xa3\xc8\x83_S=\x90z\xb6\xd2\xbf\x19\xb4n\xb7" +
	"\x8bF^W:5\x83\x1fk\xa6\"v\x82_$\xf1" +
	"\x17\x01^\x0d\xfe\xaf\xd3\xf6`;\x0c\x1e\xa6\xd3\xf6\x02" +
	"\x80\x1b\xb0\xf5\xdc\x9e\xe0I}^\x00V\xe1\xa0\x16W" +
	",\x04\xcd\x92\xee\xd0R\xf9L\x15(:\xc1\x13\xe5\xb3" +
	"\xea\xeb\x93\x8d=G\xb7\xdc\xa2\xe9RW\xc2\x15\x08]" +
	"\xce\xf40/\x9dD\x86\xf4\x82\xf2r2\x15\x00<\xb5" +
	"As\xfe<h\x1e\xcf\xde\x8a\x95\x16\x0a \xc6v\xcf" +
	"6\xd4\xca\xa7\xed\x9e\x9d\xa9\xa8\x84R\xe1E\xb9\xa7\x8e" +
	"\xf9\xe9\xa2\xb5`\xc9\xdb\xc6\x80%_Y\x01?.v" +
	"\xae\x87\xb1\xc6\\\xc2\x8c\x8b\x9d\xebq\x04:\x93\xb5\xed" +
	"b\xe7z\x06K\xe4em\xbb\xd8\xb9\x8e\"\x82\x98\xac" +
	"m\x1fG\xd9\xce\xf5\x12&\xba\xca\xda\xf6(g\xd1{" +
	"\x1d\x91\xce\x02\x10p$U\xadG\x0c\xf0M\x15\xecz" +
	"!\xb6qU\xb3\x1d4p\xdb\xac.\xb4\xb7\x82Fo" +
	"|\x83\xa0\xd1\xbb\xa7\x82.o\xc2x\xb6qM\xc5\xf6" +
	"\x92\x16\xafq\x02g\x16CT\x9b\x19 \x9f\x8f\xf02" +
	"\x8dl\xe3\x9a\x8b\xcce\xb3A\xbe0\x14\xa2\xb4\x99g" +
	"6\"z\xcd|\xc1\xa2W\x85G\x98\x1fql\xac\xcc" +
	"S\xea\xaft+_0\xd6\xe4r\xa4\xdd5\xbcN#" +
	"?JA]\xc3[:d8z2o\xa8z\xd73" +
	"s9\xc4\xc9_\xaeg<[!\xcc\xc3\xf4\xdb>\xdd" +
	"#\x9aiK!ZH\xd5\xd0O#\xfa\xd6>\xdd3" +
	"*f\x99\x8a\xe9o\x19^\x9aD\x91\xcd\xbcJ\xbc\x8e" +
	"D+\x9eM\xbd\xdd\xe5\xba\xeb!4\xc0\xc9\x9e%\xad" +
	"\xe8\xab\x9f\xa5\xe2\xc7\xc1\xe3$M[\xf9Q\xd4\xb1\x0b" +
	"\x05Yhg\x16<\xf49q\xf7f5e\xa5b:" +
	"v\xf3p\xfe9\xdd\xb6\xbb\xacl\x16\xb2\xddV\xce&" +
	"U\x99\xf2\x1bdR\xbc\xc8\xfa6WJ@\xca\x00\xaa" +
	"uK\x9fL\x8a\x17\xe8~\xf1\x91\x01BR\xc3\x1aM" +
	"]\x19\xc2\xb0\xc1:\xc3\xe1T%\xc2\xff\xa7\x97Jx" +
	"i\x15\xfe\xc6v\xb1\x1d\xd2\x85\x05\x90u\x18\xd9\x17T" +
	"\xef5h\x05+\xc9\x93\xd7\x94\x0c\xabd\x16\xecv/" +
	"`M\xe6\xa8n+\x19\xa3\x16+\xa9:\x9b\x95T\x9d" +
	"\xe5\xa0\x91>m\x03!~\xd6t9\x15<\xf1K\x8e" +
	"\x11 \xa6l7\x18E\xbc\xef\xda9\xaf\xd3tu\x92" +
	"\x1c(\x98V\xde\xb7\x87\x0c\xc71\xb3&\xd1\x94\x1a+" +
	"ZZ\xbc\x0a\x1dR\xd1A\xdb2\xaa^\xa9\xa3\xd6\x19" +
	"\x88w\xfa(!\xa9\x02\x077\xe5HRs\xcb!\xaa" +
	"\x16\x88\xf0\xf2\x83\xab\xee!$\xb5S\xa3\xa9=!\xea" +
	"\xbbv\xd9\xca\xf6:\x06I\xbap0\x91c\x85\xcbC" +
	"(\xfe\xbca\xe6\x07=#\xdb9@\xaa\x06\x8a\x91\xd5" +
	"\xd2\xbc\xe9\x98-E_T\xb4Hb\x93Qu\x04c" +
	"\x81\xed;I\xc3\xca{\x83\xcaG`g\x92\xb3\x19J" +
	"\xf1Y+\x19\xb4\xde,\x06\xad\xd7&O(\xd1\x92m" +
	";\x88\x84\xe2\xb0(}4o\xdb\xd9d\xde1\xf4\x0a" +
	"\x94fy\x06\x82\xbf\x92\x86\xa8f\xe3Ut\xecj\xd3" +
	"\x98\x1fc\xf2&\xbc\xdaD\xe52\x11\xcb\xb0\x03HR" +
	"\x12ul3\x9bD\x9c\xd1\x8a#\x11\xf7\xc8K\xfe\x19" +
	"\x05\xfbm\xaf\x82\x94'f\xc9#\xb7*`\xc0\xa2\x9c" +
	"\xe4\xc8&BROi4\xf5\xbc\x828\xf3\x1c\x0c\x88" +
	"g\x05~^\xb8\x0a?\xef5\xb9\x87\xc4_\x85I\xf6" +
	"\x8aFS'B\x942\xd0\xb7\xf8[\x9b\x18r\\\xea" +
	"\xdd\x10\xf5\xcdb\xd1\xc8\x9aX\x90T6\xcaF\xda\xd4" +
	".\x95\x15\x8cU\xca*F\x13G\xdf\x8ab\x12M\x9b" +
	"\xca\x8f\x02q\xb2\xb2X\xbd\xa0\xbb^\xd5\xb1\x1ee\xe9" +
	"\x92\x81<\xda\xaal\xb9Y0HE!\x8a:Q\xd8" +
	"\xe1Zs\xdd\xd4i\x94\xfa\xff\xe7o\x0f\xbe\xff\xfd\x96" +
	")?'\xf1\xb9\xd7\xf9\xaf\xffe\xa1i\xef\x15\xa7\xbf" +
	"F\xe2\x0b\xf6\xfa\xe7\xbe\xf6\x83S\x9b)}\x95\xc4\x17" +
	"]\xe7_\xf7\x95/o~\xfe\xe7;\xde!\xf1\xf3\xae" +
	"\xf3'\xac\xf9\xda\xf1\x95_\xbc\xe1\x07$\xbet\xc0\xbf" +
	"\xf8_\xff\xa5k\xcf?\xa7w\x90\xf8\xd2[\xfdR[" +
	"~\xca\xe5;\xfe\xe3\x10\x89w]\xea\x8b\xc3;\xc5\xd3" +
	";\xd2\xfb\xf9\xe9u\x18$\x1e\xa2\x0c\xc6\xc5\xd35\xcf" +
	"\xa8l\xc8\x82\xf8\x152\xceX\xeaw\xb0*\xcf\x12\x89" +
	"\xd8\x8e\xe7w:\xac\x0dE\xf7@\x9fQ\xe2R\xc6r" +
	"J8\xb6IjR0lnj#$\xb5\x87\xc1\x14" +
	"7Q^q\x11\xdf\x7f\x1d!\xa9\x9b5\x9a\xba+D" +
	"\x9bB\xbc\xdc\"~\x07\xac\xa4\x07\x18zq\x93\xc6k" +
	"-\xe2\x87n\x95\xb8\x8dMa^h\x11\x7fx\xa5\xc4" +
	"hl\xaa\xe3U\x16\xf1\xc7\x17\x13\x92:\xcc\x00\x0a\x93" +
	"\x05;\xdf\xaf`\x0d\x8d~6\x1a\x93\xafX8i\xd5" +
	"\xa7\xa51\xf9\xd6\x83hG\x8d\xe7\xa71\xf9A\x82v" +
	"\xfc\x8d\xa0\xbb4\xf8B\xdc\xcf\xee\xe8[{\xec\xfc(" +
	"&\xbeP5e\xa3\xa6[\xa9zJ\xfd3\xbe\x1ey" +
	"*\xfd\xb7s\xef!\xf1\x86\x07?\x8a\xcdy\xc7\xb9\xfb" +
	"\xa3]\xf1&\xc7\xef\xa9N\xcf\xe1\xfeM\xff\x82\x92\xdb" +
	"\xef\xe8\x9b\x0c\x92\x84\x0dv$\xb5G\x0b\xd3Ih\x19" +
	"~\xa8=\xa8\xf0#\xd0)\xcc.l\x08\x83=W\x1f" +
	"\xd0\x1a\x08\xe6\xbdia\xcc'\x07\xf9|<\xf9s\xa7" +
	"\xdd\\\xa4M\x98\x0f\xf2\xf3\x91\x82\x8d;\xed\xce\x0bc" +
	"\xe1\x12\xc8{\xc2\x9c\xc2\x14\xec\xc2n\x94\xf7\x80\xfc\"" +
	"<\x99s\xa7\xddZ\x94_\x04\xf2l\x983\xe0\x82]" +
	"\xa8#\x9d\xc2\xc5 \x1fD\x0f\x0b\xf7h\x18x2\xbf" +
	"\x04\xe4\x85p\x88\xc68\xca\x8c\x19\x06\xbbm\x10\xc4\x1e" +
	":\x04\xc2\xcc.\xdc\x12~\x83\x90\xf40\xc8\xafD6" +
	"\x88:f\x17^\x1e\xbe\x95\x90\xf4\x95 \xdf\x0d\xf2O" +
	"Rf\x17^\x1b~\x14\xce\x86 \xdf\x07\xf23C\xcc" +
	".\xbc)\x8c\x15\x1e\x81\x03\xa7\x89\xe3\xfc\xdd\x87\xed\xa5" +
	"CF\xe3\xf4\xca\x8f\x84\x1f\xact\xb0p\x87\xc6\x11|" +
	"m\xd2a2\x81;4\x8e\xa2\\:@\x9a\xb9C\xe3" +
	"U\x94K\x87\xc6\xf4\xb0ph\xfc\xa2\xc2\x13!\x88\xf7" +
	"h\xdd\xa5\xaa\xc7\xe14\xce\xbb\xd7Pwg\x85ga" +
	"j\x1dshLD\xf0\x9cI \x9f\x0e\xf2\xc48\xe6" +
	"\xd0\x98VwO\x85\xa7`\"'\x9c=\x1b\xdbK\x8f" +
	"\xc0\xe9\xf5\xcc\xa3\xb1\x08\xc1\x85\x96\x80|\x05\xc8\xa3\x1c" +
	"d\xa6\x0b=\x02\xf2\xe4\x1f\x8b3\x8fF\x0a\xe5\xc1\x09" +
	"?\x9el`\x1e\x8d\x8dx\x9f\x97\x80\xbc\x80\xe0E\x1c" +
	"d\xc6D\x8f\xc0 \xc8=\xf4P\x8cg\x1e\x8d-\x08" +
	"F\x84G\xff\x1d\xe8\xa1\x98\xc0<\x1a\x97!\xf8\xcf\x0e" +
	"\x90\xef\xaa\xe3\xae\xe33\x08i\xbd\x1a\xc1\x94\xae\x0c\xc0" +
	"\x91\xc6\x85\x99Gc?\xcao\x0c@\x90\"u\xcc\xa3" +
	"q\x08=&wI\xb0\xa3V\xe6\xd1x\x1c\xfb\x7f\x02" +
	"\xe4\xcf\"\xd8\xd1\x0c\xe6\xd1x\x06=\x1dO\x83\xfcX" +
	"](Hp`<Yj\xb2[\xc0A\x05KD\x05" +
	"\x01\xd1(\xf7,\x9b\xe0!\x98\xe0\xebD7\xd5\x0cW" +
	"C\xfd\xba\x937\xbc\x9av\xbd\xcet\xab\xa8i\xd5\xaa" +
	"\xf0\x0b\xd4\xfap-\xf5&\xc3\xd9\x0cFz\x15e\xa2" +
	"\xc0\xf9\x1b\xd4]$T\xe27\xa2\xb2\x1f1T\xc1U" +
	"\xb6E\x92\x88\xa9\x17\xac\xc3\"g3\xe4\x19\x02oO" +
	"\xed:\xa8\x11\xd5-\xe3\xf3f\xd6\xa3\x83\xb5\xaa\x09\xf3" +
	"|}\x0b\xe1\xf2V\x91D#\xd6G\x11\x95\xe7\x19^" +
	"\xb4VfTu\xc6\x07\x7f\x91\xcbCe\xaf\xecT\xe4" +
	"\xe6T\x83\xf5U\xaf\xb84*\x17i^\x18<\xd4\x81" +
	"\\\xb9\xb5\xbf\xca\xc9t'\xf9\x9aJ\x16\x1c#5S" +
	"\xb3\x92\x82\xe1\xb0\x8a}L\"\x86[@,\xdcQv" +
	"\x86X\xf6S\xad\x8f\x9d52Fa\xb9\xed\xd0\xfe\xb2" +
	"c\xd5\x1a\xae\xf8\xb9s^\x0f\xd5\xad\x8a\xfc\"E\x8f" +
	"\x9c#\xb4\x877\xa8\xee\xa0\xa8\x97p\x10\xd3\x9a\xb7\x9d" +
	"\xf6t\xc7\xab\xfcR\xc1;9\x89\x0e\x07\xd4:\xbd@" +
	"\xcd\xda\xe4w\xac\x9e\xda\xa4V\x1e\xb9\x9d\xab~\xd8\xa1" +
	"[!\xc4\xa1W\xbf\xb6\x04\x8e,\x16\xbb]\xb7\\\x99" +
	"{*\x90\x8d0\x94_\x8d\xa6\xd9\x8e\xe0\xde\xd5\xd2$" +
	"L\xa4Q\xc0\x9b\xae]\x182\x9c\xaeajp\xe4M" +
	"LD\x0f\x8e\xde<\xb4\xc7H0\xa2\xfeM\x97M\x9f" +
	"r\xde\xcb\xd7\xfd\xacF\xe19\xa3\x9bI\xe2\x80D\x90" +
	"\xfc\x7f\x99V\xfaB~\xdb\x0f>$\xf1\xc9\x03~\xd3" +
	"\xf6Y?n\xff]\xfa\x1fH|\xf2b\xff'\xeb~" +
	"t\xfd\xdb\xdf|\xf4}\x12\x9fx\x85\xaf\xfd\xf4\xc1\x87" +
	"\xe2\x99E\x7f\"\xf1\x89\xb7\xfai\xbc\x1b~\xa8n\xef" +
	"\xc4z]\xbf\x87\xd3\xc9hyv\xe0!B\x907\x18" +
	"\x9e~\xc4\xb4\xad\xd4N-L)\x9a\x17w 7{" +
	"\x80@KO\xe1~'d\xb4\xbd7\x00\x94\xfd\x04\xb7" +
	"/\x8e\xa0\xfc)\xc9\xf0\xca\xed\x8bWQ.I\xa5&" +
	"q\xfb\xe2-\x94\xbf\x19\xb0>\x858\x8c]\x1d\xda/" +
	"\x92\xdei2\x8f\x984\xa1\xbc1\xa0e\xd28\x06\xe3" +
	"Y(\x0fh\x99\xe2I\x8e\xc1x6n\xac\xd2\xae\x19" +
	"w330\xceC\x03@\xda5\xa7\xdf\xc2\x99}\xc3" +
	"\xf7T\xd85\xd3x\xc4dm\xf8\x07\x15\xf6\xcb\x94[" +
	"\x99\x81a\xa0\xbd#\x0d\x953\"\xcc\xc0\xd8\x12\xfeI" +
	"\x85\xa12\xf5o\x98\x81q9\xf6/\x0d\x95Soc" +
	"\x06\xc6\xb5h\xc0HC\xe5\xb4\xdb\x99\x81q\x13\x1a\x1e" +
	"h\xa8\x1c\x08s\x80\xe18F\xb2\x16WD\xb2\xeac" +
	"\xcc\xc0\xb8\x03\xdf\x83\x8cX5\xc4\x99\x81q\x08\xfb\x97" +
	"\x11(8\xb0%0\x025 \"M\x18\x09\xaak`" +
	"\x16\xc6s\xd8\x8f\x8c\xf8\xc4\xc73\x0b\xe38\xf6##" +
	"8-\x13\x98\x85\xf1:\x1aN2\"\xd3\xda\xc8,\x8c" +
	"w\xf0\xfe\xa5a\x93h\xe2l_u\xbf\xa8\x88\x99L" +
	"\xa8\x1b\x153\xc1\x18H\xe38fa\x9c\x85p\x81\xd3" +
	"\x83\x18ES\x84Y\x18\xe7!\x1c\xe1\x12\x11s\x88\x8f" +
	"\xff6\xb30\xd6\xd6m\xaa\xb0H\x9a\x9b\x99\x85\xb1\x11" +
	"w\xfa\xc0\"\x89\xd53\x03\xc3D\x94Bi\x90D\xa3" +
	"\xcc\xc0\xd8\x82\x97-\x81|[\x1dG\x17\x04\x03c\x04" +
	"\x0d\x83a\x90_\xc9\x0c\x83\x93mn\x1fk\x15d>" +
	"\xbe\x01\xab\xc2\x1fM\xfd[\xf8X\x8bc\xcc\x9f:\x1f" +
	"\xf7Sg\xcc\x9f\xa2S\xcf\xb4\xf2\xa1\xa5V\xbe`t" +
	"\x1a\xf9Z8\x02\xc5R&m\x17\xca\x98\x96\xcc\x9c\xec" +
	"r!.\xe9\x8e^t\xd7\xe9TX@U;\x8fp" +
	"9\x86\x98[\xb5\"U\xb4\x82kq\xec}\"\xb8G" +
	"t\x91*}(\xdb\xafp\xab\x8eu\x1b'\xdd/\x02" +
	"_\xeaX\xe6`;\xc3H\xa0Q\xb9b\x8b\xa5\x9e/" +
	"\xbaT\xac\xc24*\x17\xf2\xd1m\xe4\xcaL\xa3r\x8d" +
	"\xe7\xed\x90\xda\xb2\xd76ID!\xaa\x0d\x80\x18\xc6\xfc" +
	"\x84\x19f:8\x95\x8fV\xad\x0d\x19}UI\xcd\x0a" +
	"\x8e4Z\x1fTXV\xd5\xc6\x89h\x10B\x92*\xa5" +
	"\x17e\x8cDK\xae9\xea\x9e\xc5\xb5\x89f\x8c\xadk" +
	"\xc7.G\xe9\xcb\xae\x01\x1bZ\x0f\x89\x9a\x96!\xa1\xf7" +
	"N\xbe1\x8fe\xd9\xb2_u\xd8Ds\x15\xae\x0fu" +
	"W\xa51\xb93W\xb9\xaaii\xf1J{\xc4\xf5L" +
	"-\xb3y\x0c\xf0\x93\xf3\x15\xc7\xdby\xcb\x08I-\xd4" +
	"h\xaa?D\xa3\xfa\xf0\xa8'\xdb>P\xf6<[\xd2" +
	"T\xd1\xd1\xf9\x1ei^\x97eX^\xed\x0c\xa99\x01" +
	"*\x0f\xa5\xf1\xcb\x99gq\xa4\x0d=\x8b[X\xc6G" +
	"\x91eHa\x12\xd5\xb8\xf8\xc6\xc5\x98!\x85\xd4J\xf5" +
	"\xf1\x14\xfc\xaf\x01)\xcf\xe8\xf8\xf8\xd2\x0d\x84\xd0\x09\xf1" +
	"\xf3\xfa*\xd3\xa6\x929s\xc0\xa8L\x9c\x1a\xb0\xec9" +
	"\x0b\x16l/\xb8\xc5\xcfd\xddy\xed\x03\xc5R\xdb\xc2" +
	"9~\xb1\x98\x997\x7f\xeeg\x86\xb1Eq\x18Z8" +
	"%g\xce\x82\xb6\xb9>o\xe9\x11\xcd\xc9@\xbb\x05\x9f" +
	"\x993\xcf\"t\xd3\xc7\xe6\xb6H$2/\x08\x9cM" +
	"\xd5`\xc3=\x03\x0c\x8c\xd9*[\xe9L\xed:\xc1\x0c" +
	"\xb0Pe+]\xa0\xc1\x86\xbe\x10\xe4\x9d*[\xe9R" +
	"\xed\x17\x15\x94\xff\"p\x96B\xa4|\xa4\xfc\xbfDS" +
	"\x02g\x1b\xb1\x1fd\x0c(h\x0a\xdb\x85\x89\xcc\x00\x83" +
	" \xf74\x1e \x03\x03f\x0b\xde\x8f\x07\xf2\x1d\xc8V" +
	"\xca\xf9|/\xd3~P\xc1$\xd0\xc0\xf8|\xe7]\xab" +
	"!^\xaa\xa4O\x1d?\x1e-\x98y\xb7h-\xb4\x82" +
	"3`\xc2\x04f\xc2\xdc\x87w\xa4\xf0\x956\x0a\xbe\xd2" +
	";+\xb8\x01\x9a\x9a\x98\x09s\x04\x9fL\xf2\x89\xc2\x16" +
	"\xda\x8c|\xa2N\x05\x9f(\xec\x95\x98\xf4\x81oH\xf2" +
	"\x83\xc6b\xcc\x84y\x1b\xfb\x0fx@\xe3qf\xc1|" +
	"\x88\x0f&-<\x01\xc4\xdb\x14\xbeTXx\x93\xd0\x92" +
	"hE\x0bf\xde\xc4\xf0\x14x\xae3@1\x1b\x93>" +
	"\x12\xcc\x84\x99\x89&\xc9l\x90/\xc4\xa4\x8f\x89\xcc\x84" +
	"Y\x80\xf2\x85 \xefD\x97\xd6)\xcc\x84Y\x8a\xa6J" +
	"'\xc8{\xd1\xa5\xf5\x09f\xc2\xac\x0a\xef%$\xdd\x0b" +
	"\xf2\x8b\x91\xb0t\x123a\xd6c?\xd2\xf4\x9b<\x99" +
	"\x990\x06\x9a\x84\x05\x90\x0f\xa3I8\x85\x990e4" +
	"\xfd\xb6\x81|'\x9ax\xa72\x13\xe6*l\xbf\x0b\xe4" +
	"7\xa2\x89w\x1a3a\xaeGS\xf4F\x90\xdf\x16\x0e" +
	"Q\xdf-\x0f\xa8\x00\x99\xddnr]E\xa8\xce-\x0f" +
	",3\xbd~\x93\x16\x8dn\xf7B\xcb\xdeJ-\xa9\xd3" +
	"=\xa3P0=j\xc0B\xd6\xed^\x18\xb5\xec\xadR" +
	"=`z]\xd9\xbc\xd1\x11\xb2\xad\x9c\xe9\x14\x8d\xecr" +
	"\xc7.\xa6\xcd\xbc\xa5\xe9\x05y\xa6c3*K\xd7\x05" +
	"\x1c\x0b\x81.gZ\xc6\x1a\xa7\xc3\xa6\xba\xe3\x1a\xa0\x8f" +
	"B\x03\x05\xb0'\xb3\xb9\xd76-\xd2\xee\xad\xab\xa2r" +
	"c\x0a\xea\xf5\"\xed\xc3\x10\x95\xd0\x85\x05\xdd\xf5\xd6\x96" +
	"\xb2z\xc83\xe0v:\xcd\\\xcep\x0cF\x17U\xdd" +
	"Fcm\xc4\x9d\xd5l\xebz\x8em\xe5\xbb--k" +
	"\xb2t\xd15\xb9\x0e\xc7v\xdd\x0e\xdb1\x0a P\xde" +
	"\x97\x874\x11p;|\x1d\x89\xc2BR\xfd*\xd0\xc5" +
	"\xbc\xda\xf6\xd6\xbaQ}\xa0\xa0\x80.\x9a\x0eci\xef" +
	"vW\x1bF\xd6\xa80p\x1c{\x00.F\x92V\x05" +
	"K\xb9\x00\x81\x0d\x19\xba\x955\x9ce\xec\x8b\xac\xd3\x0b" +
	"\x9a\x1aiV\xb0`W\xe9\xce\xe6u\x95\xc1\xda|\xc9" +
	"\xed\xb3\xcbV6\xd4g\x0f\x98V\xdf0\xc2\xd3\xb9\x95" +
	"_\x0a\xda\x80\x82\xb43\x95\xaa\xe8\xb1\xb7.\xd35+" +
	"\xbb\xd5\xccz\x83\xca\xcf;\xec\xe2\x80i\xa9\x08L\xf9" +
	"\x92\xbb\xc2\xcc\x0f.\xa3:o\x1dY]\x9e\x7fR\xed" +
	"\xc2Q\xda\x90\xd0\xae\xb5L$d\x94\xaf\xb7\\\xf0\xcc" +
	"\x92\xee\xd1\xc1n\x0b?\x96fKD^\xb3\x98]\xa9" +
	"\x17\x8bp\xccg\xda\x88\xa7h\x0b\x9e\xb1l\xee\xbc\xfe" +
	"\xe1\x10\xb6\x11M<\xdbQ\x07\xabc\xb8\x83\xab\x0c=" +
	"$6\x08\xd1\x88:\xa3n!4\xd8\xe5zfQ\xf7" +
	"\x8cn\xb7\xdaV\xcdr\x9e9j\x8d\xd6U\x81c\xf6" +
	"\xdb\xce\x96\xb2\x92\xc9Q\x93\xd4\xa0O\x90\x1a\x0c\xaa\x99" +
	"\x1c\x06fN`\x1a\xac\xa7frlA\xb9\x07\xf2\x1d" +
	"j&\xc7e\xf4\xc1J\x0e\xba\xb0\xe0\xa0{\xb0\x92\x83" +
	"\xaeNp\xd0=X\xc9A7Np\xd0\xbd,\xc8\x11" +
	"\xee\xa5\xca\x86t\x08\xaf+3K\xc4\x86\xf40f\xa2" +
	"Hb{\xbe!\xb5>\x82\xcf\x15\xb0)P\xb6\x1d\xb5" +
	">\x89,\xf2\x8f\x05l\xf1\x13\xc6\xb3\xdd\xe8-\xba\xac" +
	"\x82\x04\xa1\x91{\xec\xdf\xc6n\x02\x12\x04\xcc+\x87\x97" +
	"N\xa8\xb2\x9a\xe8\x1ec.f\xe9\x06}:\xdd\xaaD" +
	"\xee\xb8nM.\xe7\x1a^\x85.\xe70\xf84\xdaa" +
	"\x1b\xb9\x9c\x991\xdb\x0d\xcb\xeb\xd3k\xfc\x98u\xbc\xdc" +
	"lg\xd1\xe6\xb1z\x1f\xdd@\\\"$.aX\xde" +
	"r\xb3\xe0\x19\x11\xb5\x95g{zaY9C7\x1b" +
	"\x1e\xd6\xcaRW2\xd5\x1b\x19}D\xe1\xc9\x1b\xee3" +
	"\\\x03\xeb\xda\x04C}\x09\xabk\x85!Xe&\xe2" +
	"T\xb6\xad\x80c\xb5\xec\x1aA\xcd[\x0db\xcd \x9b" +
	"\x02\xc1U\xa3\xddV\xce\xae\x8a\xfb\xaf\xfco\xa5Rl" +
	"PR)\x06u\x17\xaf\xa2\xd2\xe9em8\xe8uc" +
	"&\x85\x88\xb2\xba\xde\xe8L\x0a\xc3\xad\x91\x86\xa1\x98\xda" +
	"\xec94OG\x9a\xae\xfa\xdc\x81\xdf.t6\xeeG" +
	"f\xae\x83'^\xb8\xd8y\xcd\xfd5\x89\xcf\xec\xf3\x0b" +
	"\xcb\x92\x8f>7y\xe6G$>\xf3\x1a\xff\xc8/\xbf" +
	"z\xe0\x1b\xe7\xa6\xbeE\xe2g;\xfe\xed\x13\xffx[" +
	"z\xe3\x7f\xec#\xf1\xb3\xaf\xf3w\xac\xfd\xebO\xce8" +
	"\xf7/\x8e\x92\xf8\xdcM>K\x0f\xe8\x1f!Z\xc9\xf0" +
	"\xf1\x09\xba\xad\x1c\xa1\xb6\xcfyx\x97\xd1 \x0d\x85\x08" +
	"Y\x9a$\xd1\xfa\xf6;x\x84\x9e\x82\xb4k\xd8s\xa8" +
	"\xee\x8b\xcc\x15\x82\xef;\xd5\x1b\xac\x0d\xd3B\x1bD\x1a" +
	"\xd3\x92\x10\x98V|mX\x14\x02\x9bh!\xc8;U" +
	"\xd2\xae\xa5\xc8\xaau>\xc8{B\x8c\xd8\x04\x96\x86n" +
	"\xecf\x05\x88\xfbC<\\\x82\xb6*r\x82\xf5\x80\xfc" +
	"\"\x90\xc7\xc2liX\x1b\x02\x0b\xe4\"\x90gA\x1e" +
	"\xafcK\x83\x1e\x02\x8be\x10\xe4W\x82\xbc\x85'y" +
	"]\x1e\x82%c'\xc8\xf7`v\x16O\xf2\xfa:\x92" +
	"v\xed\x06\xf9>\xcc\xce\x8a\xb1\xa5\xe1\xa6\x10,\x19{" +
	"@~3\xc8\xc7\xf1,\xaf\xfd\xd8~\x1f\xc8\x0f\x80<" +
	"\xc2\xb3\xbcnG\xf9m \xbf\x1b\xb3\xb9\xe2lm\xa8" +
	"\xe64\xab\x1f\xcf,\xd5C\xd8^r\x9a\xb5N`\x96" +
	"\xea\x03!X\xf2\x1e\x02\xf9\x13 \xa7\x8d\xccR}\x1c" +
	"\xb3\xc2\x1e\x03\xf9\xd3\x98u\xd6\xc4\xa3y\xa1\xeb\x04y" +
	"\xd9t\xb4\x84\x9b\x99\xa9:\x0d\x99\xecO\x03\xcb\xb6\x84" +
	"g\x85(3U\x8b\xc8:V\x00\xf90Z\xc81\xe6" +
	"l+#\xe3\xbe'X\xb8\xfc\xcd\x86c\x19\x85\xa5\x0e" +
	"\xd1\xf2\xc1\xb4m\xe4\xe7\xb7|\xc6\xab\xf4\xed\x07\xb9C" +
	"5fFV\x19\x894*\x87\xb9\x80F\xe5s?H" +
	"S\x1a=>iLN\x81J8\x8at\x08\x07\xac[" +
	"\xbb\xe4<\x98*\xa2\x94V\xe5\xc2\x85a\xadW\xd6\x88" +
	"\x07\xb3I-\xead\xd3\x86\xc6\xe4\x94\xe4\xc5\xbcY\xd3" +
	"Q-\x14\xd3\xeb\xb0\x8bE\x93P\xc9%\x9a7\xbde" +
	"\x8ene\x08\x1d\x14\xb2\xed%\xddu\xcd!C\xfd]" +
	"\x9fQ\xb4=Be\xc6\x86\xc9\xa7\x1a\x85\xc7\xafD\xb2" +
	"\x08\xe6\xb8\xa8N\xc6\xaf\xb4\xce \xc9\x9ao\xb1\x97:" +
	"v\xc9p<\xd3\xc0\xea\xe1\x1b\xbe\xff\xb9I//9" +
	"\xf4.!\xe4|\x1a\xa7\xc9\x14\x98\xee\x8a0N?\x9d" +
	"\xaa\xa7\x14\x0f\xfe\x14WT\xca{\x0ca\xc6\x00s\x80" +
	"\xfd7:jb\x1d\xd5\xcc;\xcb\xd8\xc5\xa2\x8e@\xf1" +
	"\xe4\xff\x87+(\x9c\xa0\x95\xf9j\x9c\x14\x9f\x19=," +
	"\x0b\xa5\xba\xa2h\xf1\x18\x15Em\x02&u\x0eU\xd6" +
	"\xb3\xb3\xb1T'\xa84B^]\xad\xb2\xd4h!\xda" +
	"4\xdc\xd6Y\x80\xf29 _\x826\x0d\xb7u\x16\xa1" +
	"|~\x00\xc3\x1a\x19'`X\x11\xc5PPM\"\xd9" +
	"\x0d,hK\xd1\xe8\x90\xf0\xac!\xbe\xa0u\xa3|\x05" +
	"\xc8\xfb)OO\x85\x05-\x85\xb0\xadX\xcat\x09\xe5" +
	"\xe9\xa9\xe3G\xd3\x0b\xb7\xeb\x18\xd2\x13\x034\x89\x05\xc5" +
	"A9Q\x00iK\xcd\xe0\xaf\xc0D\xa0\xb9`\xbb\xb7" +
	"\xcb^\xa9\xac\xf8\x9ft\xaf\x8c\x89e\x8aA\x84\x1d\xf7" +
	"\xe9\x9e\xca8\xa6g\xbc\xb2^\xe8\xd1)~\xa3\xa5\x99" +
	"\x8cf\x14\xaa\xc0[\xb3=T\xe7\xdaHF\xd1V\x19" +
	"\xb5j\x0a\xcb\xaaR\xa6S\xf7\xa8>f\xe5\xd8\x12\xf5" +
	";/B9~\x87^\xd5\xa6]\x85r|\xafY\xd5" +
	"\xa6\xd5q\\H\xc2/a\xd3\x96Q^\x0al]a" +
	"\xd3^\x8d\xf2+A~3\x0d\x92\xcbZ\xf7cR\xf4" +
	">\x10\x1f\xc0\xcf\xcf?\xf3\xed\x98m\x8c\x15bwS" +
	"\x9e\x85\x0c\x9f\xf9 v#M\xe0\x06\x9e\x9d|\x08\x93" +
	"\xa2\x91n\xf9!\xfc\xcc\x1a\xfb\xcc\x0f\xe0\xed\x07\xa6q" +
	"t\xb8+o\x8f*\xe0\xaa!\xd3G\xcb\x92\xc3\x18o" +
	"\xaf\x12\x0e\xd5\x12\xea5\x84>\x0a\xfb\xf5\xb2\x9a\xd0\xb6" +
	"\xa5\xd4\x0d_\xd5#\x0ct\x97\xe7\xbe%\x8b\xa5\x8c\xc2" +
	"\xe0\x98\xd1\x0b\x99r\x81a\x86`F\x9c\xf0zF3" +
	"\xb6\x1b\xe4\xf5\xd7t\xb9\x89\xec3<\\'\x83T\xd5" +
	"\x19\xcc\x0cd\x04\xc4&\xab\xdc\xd2Y\xde\xe2\xc6e\xe8" +
	"]D\x02\xf6\xbax\xaa\x0d\xbd\x8b\xe8H\x8c\xc4\x97\x9e" +
	"\x89\xde\xc5E}\xe8]\\\xd0GH\xd4\xcc\x16\x8cv" +
	"\xd7\xd0\x9d\xcc\xa0\xcf\xfeYg\x90\xa8c\xe6F\xb6s" +
	"\x0f\x86\xef9zf\xf3:\xc3!\x1137\x92\xc4\xff" +
	"mw\x0c\xd7\xd3\x1d/\x92-\xd9p\x82\x9e;\xa7\xe8" +
	".#\xd4\x10\x7f/%\xd4S\x9fG\x96\x8b\xa5u\x96" +
	"@\xe6\x9d\x93\xd6\x93\x9e\xb0\x81\x15\xd2\xfbY\x9c\xf4\xbe" +
	"Gq\xd8v/&$\xd5\xa9\xd1T\xafb\x04\xafr" +
	"\x08I\xf5h4u\x91(8\xe1\xa4\x1e\xedy\xcbu" +
	"\xe5\x7f\xfd\\A\xcf\xbb\xcbL\x8f$s\xa6Q\xc8\x8e" +
	"\"[\x88\xa8\xf7\xa7\xf88\xf9}*\x92s\xfa\xe1\xe1" +
	"M+\xcf(\xa2Iu*\xf45\x12\x0a<\xb8\xf7\xe2" +
	"u\x8a\xad.\xb2<G.\x95\xb6z\x90\xe5y\xf9\xad" +
	"\x12\xc2\xdd/\xb9F9k;:\xb5\xd0cQq\x10" +
	"\xce\xe8\x8ec\x1aN/\x1d\xd4]T*\xcb\xd3\xa0^" +
	"\xc8u\x8cd\x0a\xa4\xdd\xa8t\x0b\x09\x055\xd2\xe5\x01" +
	"\xf8\x88\x11\xcf\xa8\xc9\xff_Y\xfcKu\xc4b\xcf\xac" +
	"p/\xfe\xfd\x88\xffS\xc4bg\xce\xee\xb4M\xb0\xbe" +
	"\xb1\xe2\xbc\x0d\x93\xfb\xa2`\xad\x11k\x93\x8e\x8b\x84\xa4" +
	"\x82\x17k\x93\x89k\xbe<\x87\x8b\xb5i\x0b\xb6\xc75" +
	"h\x1b\x95\x94\xd1\xad#\xd8\xbf<\x9f\xd7\xd5\xb3\xb5\xe9" +
	"2\xac\x9c\xc0\xf2\xd5\x9d\xb875\xb0\xc5\xe9*\xec\x07" +
	"\xd7\xac\xddjY\xeb\xb5\xb8w`Y\xeb>\xaa\x10\xb1" +
	"\xdd\x84{\xd6\x9e`\x8d\xe3\xc7\xed\xfd\xb8\x06\xdd\x18\xac" +
	"Y\xe3\x1b\xd9\xdat\x08)\xe8\xe5\xb1}B\x13\xb3\xa9" +
	"\x1f\xc6-K\x92\x1d663\x9b\xfaI$/\x0c\x0a" +
	"B\x9280e\x89\x8aBo)\x97\x04Io)d" +
	"zaT\xbb\xa4[Qw0`\xe8\x8ei\xe5;\x89" +
	"\xa6\x16Id2eG\xcf\x8c\xa8\xabW%\xd0\xfc*" +
	"\xb3\x10)\x98.\xad#!ZGh\xbb+\x92s\x82" +
	"\x8f\xcfl\xdf\xe8\xd0j\x89\xf7%\x16\xc7!0\xd72" +
	"z\x81.\x0d\xaeS}?K)Wu\xaa\xf7\x85\xb7" +
	"\xbe4\x93!I\xd4\xd5\xda\x18+-\xa1\xa5\x05\xc3\xf1" +
	"\xd2\xe6\xa5T\xcd\xe0f+!\x92\xaf\x87\xe2\x93Y%" +
	"z|\x16!Q\xcb\xb6\x8c\xa4[\xd4\x0b\x85H\xd1\xcc" +
	"Fs\xe5BA=\xcb\xb2\xc4\xf0\x88\xee\xe9\xa9FJ" +
	"\xfd\x91\x19\xb1\xd3O\x98\x87\x8e\x93x\xbc\xcf\xdf\xf7\xb3" +
	"\x8d\xa5\xdf\x1c\x8a=O\xe2\xf1\x01\x7f\xc5\x19S\x1f{" +
	"\xf0w\xff\xfc\x10\x89\xc7\xef\xf4\xf1W\x8c5\xc1\x17E" +
	"\xb5\x08\x9c!\x8e\xa4\x1dT/a(\xce\x88\xba\xe5\x82" +
	"\x97*\x05S\x84\"\xfb\xf0\x07p\xee\xa9Wc$u" +
	"x\x8e\x09\xc39&\xa6\xf1!\x0fS\xa4\x09Y\x86\x1b" +
	"A>\x09Y\x92\xf9\xb9s\"\xc6Z\x90\x85\x19\xcfO" +
	"0\xb4\xc3x~\xdaP\x11\x83\x81sd\x1d\xc6`\xee" +
	"Tc0\xb4\x99\xcd\x90\x05H\xda<\x07\xc4K0\x04" +
	"\xd3\xccf\xc8\"<n\xc9\xd0L\x1d\xcf\xf1X\x8a\xb7" +
	"#\xc9\x9c[)\x9b\"\xdd\xda\xfb\x84\xa4{A~1" +
	"\x1e\xe7Bl\x8a\xac\xc7~.\x0aB0\x09\xee\x92\xaa" +
	"\x0e\xc1L\xe4T\x85\x97\xa1|\x07\xc8w!\xd9r#" +
	";v^\x8d\xf2] \xbf\x11s`\x9a\xd8\xb1\xf3z" +
	"|\x0d22\xd3\xc0\xab\x8bnA\xd2\xe9} ?\x80" +
	"90\x1a;v\xde\x8e$\xd2\x07\x82\xc0\xcc\xe40;" +
	"v>\x82\xa97\x18\x98y\x11\xe4S\xea\xd8\xb1\xf38" +
	"FN^\x11\x01\x95S\xa3\xec\xd4Y\x99\x08\x1c\xaf?" +
	"\xc1\xc2#\x0d\x18\xd6\x90\xf1\x94\xf1\xbc&v\"f\xae" +
	"L\x0a2\x84'\xf0\xa2\xd8i\xd8^f\xd2\x8c\xe3E" +
	"\xb1gc\\F\x86Y\xa2\xe3Xxd\x01\xa6\xea\xce" +
	"\x0f\xc2)\xa1V\x16\x1eY\x85r\x99I\x13\x9b\xc1\xc2" +
	"#k1sE\x86Y\x1a'\xb2\xf0\xc8z\xbcn\x10" +
	"f\x19E9mpp\x0b\xb5\xe6f\x0cji\xfci" +
	"\x8fa\xd1\xbc7\xa8F\xf5\x85O\xcc\xb4<#\xdfc" +
	"Z\x18`\x16\xc2|\xc1\x1e\xd0\x0b\x17\xe8Uy\x95\\" +
	"\x9d4aJ\x05\x09\xde99\xd9hT\xceP\x1e\x91" +
	"Wn+\xad\xdc\x16?Hv\x84\xc4<\x84iXy" +
	"&\x0df\xb4\x80\xc9pt\xcb\xcd\xd9\x0e\xa1\xc5Qy" +
	"\x1d\x86\xe5\xf6\xdanEV\xa1x\x16\xd0\xa5\xf5|\xcd" +
	"\x8cC\xd0u9\xce\x98\xba~\xa7lP\xe8Xyq" +
	"\"Z\x9f\xd7MK\xba:\xedL\xd9]\xa7\x17j!" +
	".j\x82\x0e\x16\xdat\xd8\x16\xcd\xd5\x00&\x1d'\xb2" +
	"\xe6\x06u\xa7d\x19n\xc8Mg\xec\x8a,\xcd\xc0\x01" +
	"\x11\x11\x19)F\xc6\x1e2\x9c4\x15Pk\xe2\xd5\x89" +
	"'\x1f4\xf3\x83\x1d\xb65D\x99+\xe4\x02]3\xad" +
	"\xd1\x91\xad\x0b\x1ccd\xb9\xa3g\x18\xc7m\xe0\x95\xc5" +
	"4\xcd\x0b\x1c\xca\x94\x9e\xa9)J\x91uH\xda\xad|" +
	"\xbf\x9a< \x90L`\xaf0\xdc\x8eQ\x84\xb8l\x18" +
	"\x0b\x7f\xa0\x18\xba\xed,\xf3\x84F\xe5\x8a\xce\x07\x8f1" +
	"\\\xb2\xb1(j\x1d\x82\x81d\x0c\xcd\xf2j\x91\x9f\xf0" +
	"U\xbd\xc7\xcewY\x9e\xc3\xc0B\x94\xe2\x9e)\x84\xa4" +
	"\xee\xd6h\xea!\xc5\xec{`\x8a,\xbc\x08LV\xb5" +
	"\xee\" \xe9y\xfcLYv\x11\x14\xf7<y\xa6\xac" +
	"\x0d\xa2\xbc\xb6\xe7\x08\xc8\x9e\xd0h\xeaYY\x1c\x1a\x7f" +
	"f\x99\xac\x17\xd2\xcc\xc0\xe8\xd5<Y\xbcQrL\xdb" +
	"\xe1\xfc\xed\\\x1d)\x99Y\xf1\x1d#\x9e\xfa\xb7\x9e\x0f" +
	"|>E\x06\xc55\xca\x05\\WZ|\x01G\xb7\x12" +
	"\xe0V\xe7\x04\x90\x8b\x8a\x14\xad\xe3\x19\xc1\xce\xd7\x80'" +
	"\xbcz\xa4V\xa6\xbc\\\x01\xe4q\xb4\xae$\xefKH" +
	"c;\xdfD\xb4\xae&\x81|\xba\x8ay2\x0d\xcba" +
	"\xa5\xa3C`\x9e\xcc\xc42\\\xe9\xd0\x10\x98's\xf1" +
	"\xba\x8a\xe3\x82\x97O,B+m\x89\xc0T\xa1<\x16" +
	"\xd3\x856\xa0\x84T\x11\xb6\xe1z\x94KH\x15qp" +
	"-\xd2\x9f\xa86\xa9\x9f\xb1-\xd73\x0a\x05V/\xd4" +
	"\x9d%4\xeao\xad\xef:p\xce\xbe\xc8\x15\xc2\x80R" +
	"O+\"\x00\xb9\x9cr\x02D\xb0\x9cB$DCD" +
	"\x9e\x02H\xc4\xcaK\x0b0\x90\xb6[\xac8\xb4Z\x01" +
	"\x87\x06\xc6\xc5?\x96\x06\xcbFE\xc5\xba\xab{\xbd\xb6" +
	"[Uf\x0d\xd2uF\xa1\xba\xf8\xda(\x0d\x1aE\xc3" +
	"1C.\xcbu\xe9\xac@E\xbd\xea\xe0\xe1\xaf\xf6\xfe" +
	"\xee\xd1\x87\xaa\x13t*\x10CVl\xe5\xd9#X\x9e" +
	"\x93\xfe\xc2\xaa\xef\xcc\x88\x7f\xeeQ\x12ox\xd0_o" +
	"\xbc2\xfd\x8e\xd4\xb9\x1f\x91x\xd3^\x7f\xa9\xe5\x19\x96" +
	"\xa5\xa7i\xb9d8C\xa6ks\xec-\xa1\xe8\xa5\xf6" +
	"VVn\xa7\x95]\xb5jj\x83\xc2\xcf.\xe6\xe3-" +
	"p\x84\xdc\xa7\xd1\xd4\x01\xe5\x18v\xfb2YI\x15\x1c" +
	"\xc3\xeeX,\x99\xdc\xe3\xe1z6\x1f\x0f.\x96\xd5U" +
	"\x98\xb8\x09\x13\xf2P\x1b!\xa9\xbb4\x9a\xba?D}" +
	"\xcb6]\xa3\xd7p\x88\xb6*\x1d\xe0\x16\xe8\xf9L\x87" +
	"\xe5\x05U\xe9:;7\xd2\xa8|j6\"\xdau\xc6" +
	"\x98\x15\x95o\x80+6\xe9\xc5n+\x18,\xfc\xc8 " +
	"\x86NUU\xbb8\xb6]\xa8G\x0bE^\xfdD?" +
	"H]\xf8\xd4\x13\xab\xfe\x8a\xc4\x1b\x16\xcbR\xdfx\xdd" +
	"@;\xbb\x97\xa0l\x8dD\x0c\xcbK\x15\x82\xe9\xfa*" +
	"2\x9e\xbf\x02\x86\xea\x89\x90b\xa8\xbe\x85\x01\x8c\x13 " +
	"\xff \xa4\x9c\xe5\xde\xc3\xf6\xef\x82<\xac&\xf3Pm" +
	"\x80\x90>0\xac\x1a\xd5\\\x9e\x06\xcc\xcd\xa9\x07yB" +
	"\xcd\xe5\x89\xa3\x81\x96\x00\xf9\x19j.\xcfTL^\xc6" +
	"\xb8\xc0\x0c\xcc\xd9\xe1\xd3\xf5,\xecg:\xc8\xe7h\xdc" +
	"m\x88\xc9\xc8h\x18J\xc3v<?\xcb-B\x83N" +
	"\x1a\xb0\x13x\xec\xb4\x1b\xaf\xdb\x03\xf2\x8b4^\xd5\x8e" +
	"\xc9\xc8`\xe91\x036\xab\xf1\xaav0Tu\xed'" +
	"jn\x11\xd8\xd3\x98\x8b\x8c\xe6\xbd\x0cSD)\xb3S" +
	"\xcb\x98\xc8#\xed\xddX\x88\xd9\xa9\x97a\xb8c\x18\xe4" +
	"W\xa2y\x1fbv\xea\xe5h\x8f\xcaT\xa4\x969\x09" +
	"\xf8\x04\xad\xd7\xe21A\xda\xc1\xads\x13\xb4\x85\xd2\xd6" +
	"\xeb\xd1\xce\xde\x03\xf2\x9b\xd1\xcenK\xd0VJ[\xf7" +
	"\xa3}/\xed\xe3H\x13\xb3To\xc1\xdbG;\xf8^" +
	"\xb4\xbf\xe7%\xe8DJ[\x0fa?w\x83\xfc!\xb4" +
	"\xbf\xe7'\xe8)\x94\xb6>\x80v\xbfLh\xfa\x84\xc6" +
	",\xd5G\xf0\xf5\x1f\x06\xf9Shg/`\x96\xea\x93" +
	"\xf8\xb9\x9e\x00\xf9\xb3hg\xf3j\xa7g\xb0\xbdLt" +
	"\x9a\xd2\xcc,\xd5\xa30Jd\xa2\x93_\xc2\xd4\x15\xdb" +
	"\"\xd1\xae\x8e\xae\xe55\xaa\xd4E\x03z\x81ag\x0d" +
	"\xcf\xcc\xa0\xfb\xbd\xba\xd5\x90H\xab\x19\xab\x9b\xa0Ad" +
	"5\x1a\x85c\xea\xdbYd\xb2F\x13\x0eJ\xc8\x01\xbc" +
	"\x8d!S\xab\xd9\xccvLL\x80A\xe0\xe0\x8e\xae\xe5" +
	"\xe4$mH\xbbi[\xb5oH\xb7\xf2\xe5\x82\xee\xac" +
	"\xa3\"-'9\xd6}\x09\xca\xcf\x90\x91]\xc3\xfbe" +
	"\xbd\x9e\xf4MQ\xc19\xaa\x19\xd9\x8f{Xh\xda\x0e" +
	"mk7\xe5w\x1a\xe2=\x8b\x8e\x0dZ\xa3u\xc0b" +
	"\x1d\x1c\x11\x18\x1d\xf5\x1a\x92\xcc\xa1<\xd8\xab\xc4\x0a\x1a" +
	",l\xdc\x96;\xa9/\xc37\xadR\xd9s\xd7\\\xc8" +
	"\xe3\xe1ujN\xf1\x1aB/\x0c\x84\xc9|\xc9]s" +
	"\xa1\x0av[\xeb-vut\xd1Z\xc3\x89Y\x9an" +
	"E\x8f\x92s \xc8hbr8\xba\xa4M+C\xda" +
	"\x0d\xcc;\x086kc\x18\xcd\xdf!\xca\xe4\xae\xf4\xfc" +
	"\xc1O\xfa\xed\xe5&iw\\o\xb99\xfc\xe7\x80:" +
	"\xac\xe6`\xae\x0c\xca\xf5\x1c\x96\xef\x0c\xf67\x98k\x93" +
	"p_\\\xca\xdc)\x8bX\xf9\xfd\\\x96\xb6:\x93\xa5" +
	"\xad\"\xd7l]|\xda\x00w\xaeD\x0bF\xceK:" +
	"f~\xd0\xf3]\xcf\xd1\xe1\x0fB\x88\xef\"\xa2h\x8f" +
	"A\xb4\x9c\xc7\xff\xd3g\x92\x084S\xfc/iD\xe4" +
	"\xd5\x8c\x02z\x19\xa7h\x7f\xfa\xfe\xe9\xbf~\xfeV\xe1" +
	"ed`\xbd\xd1\xfe\x91\x921\x06\xa1a\xb0\xbf\x9f\xbd" +
	"Xa4\xf4F0f\x1bt\xc7\xf7R\xd7\xcc[z" +
	"A\x9e\xdcd\xac-\xf0\xb7\x8b\x12m\xd5\x01\x9c\xa6\xeb" +
	"\xe0\xd5\\\x19l\x8d\xd7\xa2sa',V{T\x1f" +
	"\xce\xd7q\xcf\x91\x8b07\xfb[\xf7cv\xe7\xcd " +
	"\xbf\x0b\xb7F\xee\xc3\xb9\x03\x17U\xb9\x08\x87\xb9\x0f\xe7" +
	"\x10\xb6\xc7\x82\x9f\xc3\xb87r\x1f\xce\xc3\xd8\xfe!\x11" +
	"\xeb\x8e\x8f\x8b\xb0\xbd\xf1qt\x8e\xc8\xc56R\xcf\xf6" +
	"\xc6\xea\xc5\xb6\xbe\x8e\xed\x8dGQ\x1e,\xb6\xc2\xcd\xf9" +
	"\x12v#\xeb\x86\xc6\x8f\xe3\x04xxY\xac\x1bz\x17" +
	"\xb7\xcc\x08\xdb\x1a\xdf\xc1\xbd\xeb\x04\xc8?\xc0-\xb3\x9e" +
	"m\x8d\xef\xe1\x1e\x18$\xa16\xd5\xb1\xad\xf1C\xed\xe5" +
	"\x8a$\xd4\xe6qlkl\xc22\xe9\x04\xc8\xcf@g" +
	"G\x84m\x8dS1wT\xe6\xa0\xc6\xea\xd9\xd68\x13" +
	"\x9d\x1d\xb2\xac:\xde\xc0\\8s1\xe7S\xe6\xa0\xb6" +
	"\x8cg.\x9c\xa5\xe1\xdf\x13\x92^\x01\xf2\xfe0\xcfX" +
	"h%\xa45\x85rY>\x9dhd[\xa3\x8e9\xa5" +
	"\xb2\xcchb\x13s\xe2l\xc12\x9d\x12\xc8\xb7a\x8e" +
	"k3s\xe2\x8c`\xd9\xd3\x0e\x90\xef\xc2\x1c\xd7(\xdb" +
	"\x1a\xaf\xc6\xfac\x99\x83:)\xc6\xb6\xc6\xeb\xb1<[" +
	"\x96\x1fM\x8e\xb3\xad\xf1\xa6p\x9f\x9a\x9b\x1a\x9f\xd2\xc2" +
	"\xb6\xc6[0'V\x02\xe6\x9d\xda\xca\x9c8\x07\xb1\xbd" +
	"\x04\xc6;-\xc1r\\\xefCg\x93\xac\xab\x9e:\x81" +
	"\x95\xe9<\x12\xdeT\x01hw\xfaDV\xa6\xf3$:" +
	"\x89d\xbdu\xb2\x81\xd5\xe9\x1c\xc1\\YYo}\xc6" +
	"\x0aV\xa7s4\xbcA\x05\xa2\xfb\x98\xc3L\xb2\xdb\xca" +
	"\x1a\xc3\xc1\x81\xc6\xe6\xd1,\xca\xb0\x14<\x83\xc0\xf9(" +
	"@q\xe0k\xb9h\xc5\xa3jA\xe7\xb6\x9d]3\xe0" +
	"\x1a\x94\xc7\xc3\\y\xa0\x95\x0b`T\xcf\x1b\xf2'%" +
	"\xc7\xc8\x1a\x9e\x91\xa1\x0c\xa4jH\xa7\x05IY?\x92" +
	")\x18\xe9\x82I\xdaK\x0c\xb9\"\xf8\x91\xedz\xf0+" +
	"\xd2\x8eK\xa4t\xd1\x17G\xc3>\xd0\x98\x84\x9d\x90\xb4" +
	" \x8ei8\xabI\x14\x8e\x04\xc1Y\xc0\xc9\xf5\xd8n" +
	"\xd0\xd7\xf6\x82\xee\xc1\xfbA\xf7\x8d\xa6\xa0\xad\x84\x94\x05" +
	"\x08]#\x11\xd5oR\xab\x15<Y>\xe2\xe8\x05\xc9" +
	"\xcb+Z\x8d\xc9\xe3/Z\x90d\xba\"t\x10\xfc\x12" +
	"\xc5\xeaO\xd5\xa8\x01k\x15\xaa8\xed/w\xf4d\xa6" +
	"\xc2\xc7S\xbb]\xb7\xe5%\x8d\xbcz\xb7J\xbb\xca\xfb" +
	"\xa5#\xa3\xfa\xa2F\x961\x0e\xd7\xbaJ\xe5=k\x0a" +
	"\x09\xbf\xcc~\xe5\xa9\xa7T\x92\x1a\xeb\x97\x9a\xc5\xb27" +
	"\x18\xb45\x0a\x06\x0e/B\xe5\xa3d\xedR\xa9`8" +
	"K)7\x7f\xaa?\x8aeT\xa3\x9a\x08\x19\x157\x14" +
	"\x85\xb7(k~x\x08\x8fD\x07u78\xd9\xb7\xe7" +
	"*!TJ\xbacz#]\x0eul\x87C\x9e\x05" +
	"c\x11&C\xaf\xee\x98D\xabH\x0a\x1f\xbd\xa5\xd5\xd8" +
	"\xd0\xd6\xa1kf0\xd8\xd0\x9eD\x88.\x99\xa4U\xc7" +
	"7\xb4#\x08\x01\x86IZ\xc7\xc4\x19\x106\xb4\xa3x" +
	"\x06<\x06\xf2\xd7\xf0\x0c\xc87\xb4\xea3\xa3\xc67\xb4" +
	"\xea3c\x98\xbbf\xde\x0b\xddZ\x11\x0c\x19W\xcf6" +
	"\xb4:<\xa4\xc9\xa0G\xa4\x81mh\x13q'\x92\x87" +
	"C\xb1\xa1ME\xb9<\x1c6\x8cc;\xdaY\xb8\x13" +
	"\xc9`\xc8\xf8f\xb6\xa3U\x17\xa4L\xa8g;\xda\x02" +
	"\xdc\x18\xe7\x83\xfc|\xdc\xd1\xea\xd8\x8ev\x9e\x06[E" +
	"'\xc8{\xf1\x108\x8emi\xabP.\x0bR\x9a#" +
	"lK\xdb\x88\xa7\xabl\x90\xc4\x16\xadg[Z\x11O" +
	"E\xf2t\x18k`[Z\x19\xcb9\xb6\x81|'l" +
	"\xc8\xbcl\xe3*\xbcMig\x88\x1d\xed\xeb(\x97v" +
	"\x86\xd8\xd1\xf6\xe3\xe3\xca\xc3\x9e\xd8\xd1n\xc1C\x9d\xb4" +
	"?\xc4\x8ev\x07^V9\xec5\xb0\x1d\xed\x01\x94\xcb" +
	"C\xdd'\x9a\xd9\x8e\xf6$\xf6#\xed\x8cIQ\xb6\xa3" +
	"=\x83\xb1\xa5g\x83\xe0\xc9\xe4(\xdb\xd1\x8e\xe3\xeb<" +
	"&\x0a\x94\xff/\xd9)\xf2%\x17\xe6\x8dGG\xb0t" +
	"\x9d\x83\x1c\x05\xd3\x8a\xdd\xd6\x8a\x90\x81\xb9\xee\xbc\x09\x9b" +
	"z\x1f\xb3\xd7\xd4^\xf7G-\xf4'\xdb\x92\xc6\xdcy" +
	"\xfe\x8c\xb5\xf4?\xbb6\xff\x8f\xad\xb9\xff\xa9\xcd\xf2\xbf" +
	"\xbb2\x8b\x854\x04\xebh\x07\xec\xe8.\xee\x87\x8e\xa6" +
	"X\xfa5\x1a\xc9\xa8\x83x\xc5\x7f\xce*>\x96\x05\xa1" +
	"8\xe6z\x19\x1f\xd59\x1d\xbdk\xfb\xcd\xa2f\xb8U" +
	"\xa4\xe9\x8b\x15\xbc/\xee\x12\x8f?7K2\xa9\x0b\x7f" +
	"x\xfc\xe8,\x05\x04\x8c\x1f!\xe2\xc7\xe1\xe7\xcfk4" +
	"\xf5\x8a<?\xc4_\x9a\xa5\"\x83\x8d\xe3\xc8`\xd0\xf2" +
	"E\x8d\xa6\xde\x94'\x87\xf8\xebgJ\xb80ql\x88" +
	"\xbf\xb5\x8c\x90\xd4k\x1aM\xfd!D\xdb3\xa5\xf2\xea" +
	"rQ\x9c\xa3\xa3e\xd7\x08\xb2\xea\xa2\x96\x99\x09b3" +
	"\xed\xee\x88\xeb\x19\xc5@gf\x0bRg\xda[u3" +
	"\x88\xacDLgK\x80\x82\xe2\xda9O\xf9\xff\xc7&" +
	"@\xf6vwJ\x8055\xb8\x00Fl\x98\xc2\xe1B" +
	"\xcd<i\xc2 B\x0c\xe4\xa7\xa9\x99'\x931(\xa0" +
	"\x04\x174\x11\\\xd8P\x19\\\x08\x8b\xe0BKE\x16" +
	"\xa5pWVgQ\x0aweu\x16\xa5\xa8\xf4X\x80" +
	"\xf7)\x83\x11\"\xba\xb0\x083ad\xb6\xa4\xc8~\\" +
	"J\xb1\x80Nd\xf5Ue9\x06u\xd7T\xd4\x86\x93" +
	"\xd1u\xe3\x94\xd7dW\x01iv9\x0e\xd1>&E" +
	"\xf2\xbf\x94\x18Y]\xa7\x8eY\x8f\x15\xd7U\x9c\x10\xbd" +
	"\x9cx\xc63\xceY\xae\x97\x0b\x9e\x9aP\xc5a\xc9\x99" +
	"\x0fbb\x1f\xfa \xe2}\xdc\xdd\xe0\xe7\xa0y\xbfQ" +
	"$\xb4\xc4\xfe\xee5\x1cB\x8b\xea\xc0\x19\x15\x9d\xea\xe2" +
	"A\x0b\x97\x07\x0b\xd0\xd3!\xe3\x05W\xa8\xf1\x02>\x05" +
	"o\x99U+^0\xebc\xe3\x05<~wp\x99\x1a" +
	"/\x08\xf1x\xc1\x99J\xbc\xe0\xbf\x1a'\x12N\x8do" +
	"\\{wx\xd2C7\x05\x91\x83 K\xe7\x8f7}" +
	"\xfb\x86y\xdf\xfa\xd5\x1fE\x86\xba\xf0\xa8\x09\xace\xcf" +
	"\xdez\xd2T\xc3\x0a;1\x8aHtaJ\xfdO\xcf" +
	"\xfe\x87\xdflX\xdf\xf86\x89\xd3)Zz\xdd\x7f*" +
	"\xe3xq\xc5\\\x11n\x90\xb3\xb1\x0cI\xce\x15\xad^" +
	"d\x1c\xef\xad\xc8 \x16n\x90\xf30KKf\x0a\x8b" +
	"\x80^7\xa6\x96\xcaLa\x11\xd0Ka\xb6Wo\x10" +
	"\xb9\x13\xd9^\xeb\xe9\x9d\x15U`\x82\xc4\xc0\xc0\xeb\xca" +
	"\xec3Ab\xb0\x05#z\xc3\x82$ATW]\x0e" +
	"\xa7q\xc9\x91 _|\x00H\xc8\xbfH\xa5\x11_\xfd" +
	"\x1d\x84\x85\xd1Aa\xf3X].\x0eh\x86Sm\x15" +
	"\xad\xa6\xe5\xe2\x80\xe1\xac\xc9uF\xf4\x11\xe5\xfci\x16" +
	"\x0a\xa6kdH\xd4\xb6\xb2nEjF5X.b" +
	"\xf1\xf5\x9bEj\xd4\xde\xb9@\xbd\xdc1(\xb3\xbd\x96" +
	"\x99\x9a\xee\x8eR\x86\x98\xb2\x96q\xa0\xb9C\xb2`!" +
	"\x18\"\x92\xad\xb3\xc6<_\xa1;\x96\xe1\xaaS\x90O" +
	"\xf4M\x8co\x83e\xb1\xc6\x97\x11\xe2[\xb6\xd7a[" +
	"\x96A\xa2\x19\xcf\xc8\xb6[\xb6S\xd4\x0b\xdbs\x05\xb3" +
	"TR\xc86N>\xd3\xed\xb2\xa3e\xd4\x141\x86\xeb" +
	"z\x16\xa3\xf5\x98\xc6|\x9a\x93\xe1jy\xcbu;\x06" +
	"\xcd\x12!\x04\xd3U\x1c\xcb\xf0\x08!\xc9\x8c\x9e\x194" +
	"\x04\x04\xa8zU\xb1\x15\x15t\xeb\x9cjH\x1f\xd3\xa6" +
	"\xd6\xe8E\x8c9R\x9b\xdaj\xf8LE\xbf$YZ" +
	"\xbcJ/\xe1\x9ck~\xc3ZY\x7f\xfc\x85\xdbI\x9c" +
	"\xb6%\xbb,\xcf\x19I\x85\x83\xe5\xaa\x09\x96\x96z\x8d" +
	"\xa6\x16\x86\xe8v\xc3\xf2\x1cS\xa5\xee\x0a~Z\xb3\x00" +
	"\x01\xe6'\xb4]ZO\xe3ug\xc6\xeb\xda\"\x17\x1a" +
	"#\xc9uz\xa1l\x8c\xf1\xd5\xf0\xcf\x0e\x9d\x03_\xe2" +
	"\xdd\xf9\x7f\xd9\xf6\xcc\xbd\xbd\xbf<\x8c^\xda\x1e#\x83" +
	"62\x89v\xd8Y#\x95\x0dV\x87\x83\xa1\xc5\x15\x05" +
	"Dbu\xa8. \x12\xab\xc3\x03xv\xbc\x1f\xe4\x8f" +
	"\x85dY[\xeb#(?\x0c\xf2\xa7BJ.\xe8\x93" +
	"\xd8\xcf\x13 \x7f6\xc43\xd4`ux&tE\xc5" +
	"\x99u\x1c/\xb0:\x8a\x85H\xcf\x83\xfc\x95\x10\xafS" +
	"\x80\xd5\xe1%<\x83\xca3\xab\xd8\x91\xdf\xc2~\xde\x04" +
	"\xf9\xbb!\x9eY\x06\xab\xc3;x\x96\x95q\xce\xf1\x1c" +
	".\x91j\x8e\x1a\xe7\x9c\xc0\xd1\x12\xab\xe3\x9c\x8d\xe3\xd8" +
	"\x912\x8e\xf2\x18\xc8O\xd38\xc8\x0e\x1c)'c\xfe" +
	"\x9e\xcc\xebk\xaegG\xca\xea\xbc\xbeh\x03;R\xce" +
	"\xc4\xc0\xd9\x0c\x90\xcf\xc7#e\x82\x1d)\xe7b\xa0P" +
	"\xc6?\xe3\x13\xd9\x99r\x11\x1e\x95eb_\x8b\xc6\xbd" +
	"\xa4\xd5\x89}\x1c-\xb1\x1b\xaf+\xb1\x18\x12u\xecL" +
	"\x99\xc2\xeb\xca\x84\xbf\x89\x13\xd8\x99r=\xf6#\xe3\xa5" +
	"\xa74\xb23\xa5\x8er\x89\xd1\xf0\x89&v\xa64Q" +
	".1\x1a&5\xb33\xe5\x16<*\x97@\xbeM\x0b" +
	"\xd1\xf6\x81\xb2\xbb&\x97\x93\xd5\xf5\xf8\xdf\x0e\x8bP\xe9" +
	"-\xc1\xca\x8c\xcf\xeb\x0e\x89Z`\xf6T\x14l\xf4\xea" +
	".\x89VT0\x15t\xd7\x83\x91K\xa8C\xa3rL" +
	"\x07\x800\xae\x97\xf6l8\xfb\xb0\xe1=F\x1b$u" +
	"Jb\x93\x93\xb4\xa0\xd0\x15\xf4\x14\xa9\xdd\xce12\x86" +
	"9dtQ<mZ\x9e<jr\xe4}\x8fv\x09" +
	"\x95\xa2\xb3=\xbd\x00f\\\x125r;\x00y\xffp" +
	"\x0fi\xb7]o\x94\xa2o,E\xffp\x07\xd1F\xb7" +
	"\xae!\\\xbe5K\"\xea\xef3\xba\xc5N\x88\x8a\x7f" +
	"*\xa3#w\x94\xc0DW\xc4\xb9l\x97\xa5\x93\xe8@" +
	"A\xc9?\x1fp\xdc\x00H[\xc9s\xb7r\xd9\xd5\xb6" +
	"E\"\xdd\xae-\x8b\xd5\x9d-s:\xf4B\x81D\xc1" +
	"\xb0\x95\xd8\xc5\xce\x96\xb9\xb5\xc5m5\xc4\x19\xdd\xea\xb0" +
	"\x1d\xa3\x8f\x1a\xae\xe1\xe1\x1b\xaf\xae\x0a\x18\x95\xb2\x92\x04" +
	"\x0b\xb5\x0dW\xc0\x07\xbey\xda}_\xbc\xf1\xe9{p" +
	"\x05\xec\xb0\xad\x9c\x99\x0f\xb2\xe1\x95\xbc\xb0Y\xb5\xf2\xc2" +
	"f\xa9ya\xdc\xae|x\x96\x02\x0f-\xec\xcaGf" +
	")\xc9b<\xc9)\xfex\x9f\x82\x19-\xec\xca#}" +
	"\xca\x19\x92\xf3\xdd\xc4\x9f\xdb \x8f\x8bQ;\xe7v\x0b" +
	"\xcfJ\xb4\xa8\xe7\xbb\x03\xab\xd2\xce\xb9)U\x93\x92\xee" +
	"\x8c\\\x1eS|X\xdee\xf0\xc8\x01\x80\xde\xd6\x1ec" +
	"\xa8#Gh^\xba+m\x17\x0dy\xa2\x95\xddZ\xef" +
	"\xb3\x83\xd3\x9a2JR\"\x8ep4\xc4\x8fpm\xe2" +
	"\x08w\x86\xc8\xf7BT\x19z\xa68\xaa\xcd\x17\xf9^" +
	"\x8c\x13k\xa58J\x05\xe6!V\xe4\xa2\xf9\xd9)\x0a" +
	"\xc6\x08a\xfb\xc5F\xb4>+k\x13\xea\xb06aS" +
	"Em\x82\xb0&M\xb4>\x0bAM\x81\xb0&\xaf\xc2" +
	"\xda\xfe\x9dAm\xbf\xb0&oAk\xb2\x16%\xd6=" +
	"\xa2\x18\xe0\x18\x0d\xd1$\xce\xe8\xaa\xcc\xc5\x88cW\x13" +
	"^\xb1\x99\x9f\xf6\xb2\x0a\x01\x86@Itlo4\x1b" +
	"\xd5\xa8$\xde1\x12v\xb7\x9aY\xc4\xf5\xa0,\xa1\xa1" +
	"\xab\x1c)\x18N\xf5\xc5G5j/\x18N\x0d\x06," +
	"\xc7\xd6\xb3\xfd\x8enQ7g;\xc5~G\xd7F=" +
	"\xdb\xe86I|\xae\x93\x90i\xd5\xb6\xafd\xf5\x137" +
	"\xe8\x18\x9b\xd64\x07m\xab\xa9{\xd1\xa0\x9bz+!" +
	"\x11;\x97\xf3K\x0e\x82Su\x90$\xfe\xb8\x0a\x05\xcc" +
	"\xf1L\x04\xe3\x97\xc2\xe5\xa6e\xba\x83\x11S\x81\xe8\x0f" +
	"U\x92\xb9\xf5\xda\x9a[\x0d\xd4\xdfFH\xeab\x8e\xc9" +
	"/fx\xf9L^\xf0\xb3K\x99\xe1W\xaf\xe4\x90\xfc" +
	"\xb7)3<\xc8I\xbb\xff\x7fp\\\xa8i\x9b'+" +
	"s\xeac{\x90\xa3 ;)!\xf7M2\xba\x1e<" +
	"\xe8\\x\xa69\x1aM-\x09Q\xbf`\xe8\xa5\xb4\x91" +
	"\xa9\xe6\xba\xc8\x1463L\x85\x1a8\x1e\xa1\xd2\xe2N" +
	"\xce\x7f\x8a\xec\xa7\x04\xd7\xd6M\xd7\xfc\xfe\xc8\xa1s\xff" +
	"\xf4$\x89\xd3\x0d>\xd3w\xeaD\xf3t\xd5i\xb6L" +
	"u\x9a\xf1\xdbyn\xaf\xe2\x0a\x13\xef\xfd\xa5k\x14<" +
	"|\xfe\xda\xdf\xbaT\xe2\xe1c(\x02\x16\xd6w@\xf8" +
	"\x07\x8d\xf6QiK\xc6?\xbc\x86\x90>\x98\xb9\x8d*" +
	"\x1fK\x03&\x9a\xcaDV\xc1$\x16G\x9fR\xe0k" +
	"\x1a5!\x11\xfa\xack\xd8\xa0\x1c\x17\xcd\xd4\x94\xd4\xe6" +
	"\xac[\xea\x1a62e\xeaI\x8a\x1d\x05\xdd\xad\xd71" +
	"\xb2f\xe0\x15\x16\xa9\xf1%\xdbv\xd6\x99\xaeI\xdam" +
	"\xabW\xa5\xd4\xdb:h\x18\x855V\x1f\x85#\x06h" +
	"T\x0c~#\xe7\xc1{%\xed\xf0f\x9112x\xe7" +
	"\xdc)\x8b'\x93N\xc7\xa4C\xac\x09\xa9\xd1FI\xe2" +
	"X\x8b\xcc\xa7\xdcy#\xd0L\xe3]+\xab\x8a\xf6@" +
	"\xb8\x0af\xcc\x0a\x8d\xa6\xb2le\x86o\xa4/\xe3\xb3" +
	"hPM\xfc\xc2,\xa5\x1d\xdf\xad{.\xf9\xdd\x1f\xfe" +
	"\xb3(^\xc7\xf4\xa3\x8f[\xf8\x94;c\xce\xd7d\xfe" +
	"\x9cUF\xb1\xca\xef\xdaVk\x08U\xf8]\xf9\x10:" +
	"\xda\xa7\x8c+1u_Z\xa6\xb8X\x85\xd3\xa7\xc2\xc5" +
	"*\x18\x19^_\xac\xb8X\xc7\x09J\x86\x95\xca\x10\xe4" +
	"\xbe\xc1\xf8;\xd0\xf2\x84FS\x1f\xc0r\x00\x86VP" +
	"'\x9as\x0c\x09\x95\xa7\x0f\xe9f\x01l%\x1a\xc8\xb6" +
	"\x0f\x94s9\xc3\x09r\xbe\xdb\xf1\xec\x9a\x0d\xfe\xcb\xdd" +
	"\x86\xa2\x07\xd3b\x02x\xc9\xa2\x89;\xa8;\xf2\x17c" +
	"\xfba9.7\x172\x92l0zN\xf3\xfd\xba\x04" +
	"\x9d\x0fvO\x9f4q\xa6\xd2\x8f@\xbc\xa0*\xf9}" +
	"\xea\xb8\x0fA\xfcY\xb0h\xf6\xca\xac\xf6\xa9\xa1\x0f@" +
	"\xbc\x18\xbe\xcf\x06\xf9)\xa6j\xff\x01\xe2s\xe1cl" +
	"\x90\x1fcj\xf8}\x10/\x81\xcf1 \xdf\xfc\xd4\xba" +
	"\xf7@\xbc\x14\xde\xfd\xa5\xd2\x93\xed\x9bV\xd6D\xeb\x04" +
	"\x99\x87\xbf\xf8\xd9\xb6\xaf\xcc\xcf\xec\xf9F\x90Ohf" +
	"y\x94\x09\xc6\xdd\xaf\xca\xdfx\xf1\xc9\x8d\xbb~\x1f\x0c" +
	"\xf6-\x9c\xf6\xb7\x92\xc8\xfe\xdff=\xb1\xfb\xe7/O" +
	"\xdf\xad\xa4\xbc\x15`{!\x1a&a\xbd\xbd\xe3\xa6\xbb" +
	"v\xbe\xf1J\xc0\xb0\x9a5\x06\xcay\xa9>\xfb[;" +
	"\x7f\x7fb\xf9\xe2\x80$\xdb\xe3\xb5\xfd\"\x87\xeb\xb6\xab" +
	"\xff\xf8\xc3\xde\x9b\xbd\xdfH\x0e\xdc\x00\x8fQp\x10\xeb" +
	"\xdb\xec\xc3\xd7\xef\xd8\x7f\xb0F\x9a\x97\xba\x89\x0atb" +
	"\xddcEs\xca\xc2\xde\xc2s\xa9z\x95i\xb0\xaaE" +
	"NRI\xbcY\xc5\x90Y>\xc9\x06\x1e \xdd\x08\xd4" +
	"\x16\x04\xc5\x88\xf0b\xdf\x8b\x03\x1fA\x19\xc1JJp" +
	"\x96\xde\xa6\xfa\x08F\x10Te8\x00C\x11^\xfb\xcb" +
	"\xb1\xfd6\x90\xef\x0c)^\xfb\xab\xd0\xd7\xb0\x03\xe4\xbb" +
	"B*>\x13\x82\x98\\\x09\xf2\xdd!\xc5k\x7f-r" +
	"O\xed\x02\xf9\x8d!\xc5k\x7f=b\xbcH\xf0\x14\xe1" +
	"\xb5\xdf\x8f\xf1\xf1\x1bA~[H\xc1g\xba%4\xa5" +
	"\x02TE\xe03\xdd\x8e>\x0b\x09\xaa\xc2\xf1\x02[\x0f" +
	"\xe2\xfdK\x9f\x88\x80\x0b<\x84\xf7y\x17\xc8\xef\x0f)" +
	"p\x81\xf7a?\xf7\x82\xfcpH\x81\x0b|\x18\x9fW" +
	"\xfaJ\x04\\\xe0#\xe8\xe38\x1c\xf8>\x04\\\xe0Q" +
	"\xbc\xffgA\xfeb(D)G\x0b<\x8eb\xe9\x12" +
	"\x89\xc7\x98\x8f\xe0%\x94\xcb\xf0~K\x9c3*\xa0\xfc" +
	"E\x90\xbf\x89\xd8/-\xccG\xf0:\xbaJ^\x03\xf9" +
	"\x1f@\x9ehe>\x82\xb7\x11JG\x86\xfd'\x868" +
	"E$~^\xe9B9%\xc1|\x04\x14\xe3\xc8A\x0d" +
	"dr\xc0\xd6\x9dlP~2`\xdb^\xc1\xd6\xb3D" +
	"3\x1c!L\x0e8\xba\x154ig\x99\x96A\x01K" +
	"\xd6tK\x05}$\xe8!gZy\xc3)9$b" +
	"Z\x12\xeedPw\xb2[u\xc7P\xc0_\xa2\x83\xb6" +
	"\x1b4\xd0Ly\x0fE\xdd*\xe7\xf4\x8c\x07g=\xe5" +
	".pg\x97X)\x8e\x9d-g\xe4\x05\x1c=k\xda" +
	"\xeb\x0c\x87DU\xac\x93v\xd7pL]2U\xb9\xe5" +
	"\x12\xd8a\x06If\x97\x0e\x98\xd5\xd85QO\xcf\xbb" +
	"\xc1\xed\x81i\x1f\x84\xe40. 4\x18\x9f\x13]r" +
	"\x8c\x9a\x0ejg\x0dK/*\xa4\xfa\\\xd3G\xda\x8d" +
	"\x82\xa1\xbbF\xb5\"M\xb4\xac\xcc\xc5\x15Bjd\xca" +
	"\x8e\xe9\x8d\xf4Fu/3X\x0b\x1aj-\xb2\xd5k" +
	"z\xbe\x97V\xca\xbb;\x8d\x812\x05\xb1\xea\xc9\x84\xe5" +
	"\xb9Q\xa3\xa9I!\xeag\x1d}+\xda=\xed\x88\xc8" +
	"\xe8\x8e\x8a\x1a\xd5U\x1f\xc8\xc1L=G\xd4\x82\x88R" +
	"\x90\xb2\xab\xc6\x90\xd8\x11a\xe2\x14\xe6~]\xc9\xce\x06" +
	"\x9am\xf9Y\xdb\xf26[\xf6VB\xc8\xff\x17\x00\x00" +
	"\xff\xff\xce\x16\xe1\xd3"

func RegisterLogSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f3b1f17e25a4285b,
		Nodes: []uint64{
			0x8053c39445c6c75c,
			0x82079c2ea8450877,
			0x85dddd7ce6cefa5d,
			0x860aa5ddbcdc8d25,
			0x869a54d2708469ea,
			0x8785009a964c7c59,
			0x89d394e3541735fc,
			0x8a58adf93e5b3751,
			0x8cfeb072f5301000,
			0x8e4dc8cc4b51fc01,
			0x8f8a655f5e326401,
			0x8faa644732dec251,
			0x9024e2d790c82ade,
			0x92a5e332a85f32a0,
			0x939463348632375e,
			0x943e268f93f711a6,
			0x96df70754d8390bc,
			0x97ff69c53601abf1,
			0x9a185389d6fdd05f,
			0x9b513b93a887dbcd,
			0x9cfb5d53a4f615a5,
			0x9d291d7813ba4a88,
			0x9d57532d82c04afc,
			0x9d5d7238eba86608,
			0xa0d0dcd113193c62,
			0xa12e8670927a2549,
			0xa158dd2a4cfaa81b,
			0xa2b29a69d44529a1,
			0xa2d8e61eb6f7031a,
			0xa2e4ea88ac9980f1,
			0xa43429bd2bfc24fc,
			0xa444ed2b2187af28,
			0xa4cd1689c0a439d9,
			0xa4d8b5af2aa492eb,
			0xa5dfdd084a6eea0e,
			0xa61452f6440d97d3,
			0xa63a46f0f2889b2d,
			0xa73ba546a29820f4,
			0xa7649e2575e4591e,
			0xa8883583b32c9877,
			0xaa3247d9d2a61cd4,
			0xac3de5c437be057a,
			0xad9d8095c06f7c61,
			0xaf0f7110c254f77e,
			0xaf85387b3f681406,
			0xafd47016570e9d09,
			0xb0b85613f19e6d28,
			0xb1fb80811a673270,
			0xb231a753cc079120,
			0xb2d0985eb51c97b9,
			0xb3ec4a1a6ce20a45,
			0xb65fce64120af7d3,
			0xb66e0aa568d09c66,
			0xb83c6cc593ed0a00,
			0xb83cda094a1da284,
			0xb96f3ad9170cf085,
			0xb98c64ea27898ea0,
			0xb9c5911198388e0c,
			0xbb53ef3fcf2a7f0d,
			0xbb642aff76688f53,
			0xbbc79cc958d1049d,
			0xbcc2ef5087c0ad85,
			0xbcc3efbac41d2048,
			0xbe09e615b2507e26,
			0xbf23f9ed66dace1c,
			0xc0ad259ec157ccd3,
			0xc0db50b4d13283ff,
			0xc18216b27f8602af,
			0xc23e1128ab4d5b53,
			0xc299bc1804b08d93,
			0xc3a3a8de519a4a26,
			0xc3cbae1fd505ae80,
			0xc4713f6b0d36abe9,
			0xc4c96f53ad1e7485,
			0xc95fb49a7bdc4618,
			0xc9f73bb1cdf28a6a,
			0xca965e4add8f4f0b,
			0xcaaa029466ad394d,
			0xcd55c07f69249798,
			0xceb8f49734857a88,
			0xcf7154b31a69635b,
			0xcf9aeab355dd85f0,
			0xd0790029853df66f,
			0xd1646ab3b45cfabd,
			0xd314cfd957229c11,
			0xd3ff79f25c734863,
			0xd578fb3372ed5043,
			0xd692e23d1a247d99,
			0xd698881ad0ce7feb,
			0xd71a12b6faada7ee,
			0xd810b1e7705dd69c,
			0xd8418c788118f85c,
			0xd9058dcb967c2753,
			0xd97e3b28239f5580,
			0xdbe58b96d2d1ac61,
			0xdc24138990726023,
			0xdd308c8a13203e13,
			0xddb169f01e102879,
			0xde266b39b76b461e,
			0xde94674b07ae51c1,
			0xe00b5b3eba12876c,
			0xe1e9318e2ae8b51e,
			0xe42401658e2715e2,
			0xe49b3ce8f7f48d0d,
			0xe501010e1bcae83b,
			0xe61690eb0b091692,
			0xe673e8725cdff0ad,
			0xe71008caeb3fb65c,
			0xe774a050cbf689a4,
			0xe7e17c434f865ae2,
			0xe81e829a0d6c83e9,
			0xe89dce02ced79e43,
			0xe8efb3a802b299b2,
			0xe946524859add50e,
			0xe98bb99d6e985f64,
			0xea0245f695ae0a33,
			0xea095da1894f7d85,
			0xeaa4a17d86ac76b0,
			0xebb036b114275aa8,
			0xebc5703d1ee7c129,
			0xeea5b9d8c9e5c192,
			0xef0382d244f56e38,
			0xf08b81df8cbf459c,
			0xf10c595ae7bb2c27,
			0xf189c8c5bf2ce087,
			0xf28c5dc9e09375e3,
			0xf2fd0b8b0ac9adbb,
			0xf3286be6a8bfb860,
			0xf580d7d86b7b8692,
			0xf69a3ed1e8c081bf,
			0xf6e39b3396a699f6,
			0xf7396311bcbad303,
			0xf8b13ce2183eb696,
			0xf8d2972deb0cd45c,
			0xf919b410b90e53c6,
			0xfa9a296b9fd41a96,
			0xfac297f195ce56d2,
			0xfb3ec0702e67884f,
			0xfbb838d65160aab6,
			0xfc010c40147563b0,
			0xfc0c9bb05e3927c1,
			0xfd095f94f08b3fd4,
			0xfd5b914d6b444695,
			0xfdca7c675b7021c6,
			0xfe2919d5c21f426c,
			0xfe346a9de48d9b50,
			0xfe35ad896ffaeacf,
			0xfe3b51a924e46559,
		},
		Compressed: true,
	})
}
