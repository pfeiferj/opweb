// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type LogRotate capnp.Struct

// LogRotate_TypeID is the unique identifier for the type LogRotate.
const LogRotate_TypeID = 0x9811e1f38f62f2d1

func NewLogRotate(s *capnp.Segment) (LogRotate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LogRotate(st), err
}

func NewRootLogRotate(s *capnp.Segment) (LogRotate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LogRotate(st), err
}

func ReadRootLogRotate(msg *capnp.Message) (LogRotate, error) {
	root, err := msg.Root()
	return LogRotate(root.Struct()), err
}

func (s LogRotate) String() string {
	str, _ := text.Marshal(0x9811e1f38f62f2d1, capnp.Struct(s))
	return str
}

func (s LogRotate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LogRotate) DecodeFromPtr(p capnp.Ptr) LogRotate {
	return LogRotate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LogRotate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LogRotate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LogRotate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LogRotate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LogRotate) SegmentNum() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LogRotate) SetSegmentNum(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s LogRotate) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LogRotate) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LogRotate) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LogRotate) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// LogRotate_List is a list of LogRotate.
type LogRotate_List = capnp.StructList[LogRotate]

// NewLogRotate creates a new list of LogRotate.
func NewLogRotate_List(s *capnp.Segment, sz int32) (LogRotate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[LogRotate](l), err
}

// LogRotate_Future is a wrapper for a LogRotate promised by a client call.
type LogRotate_Future struct{ *capnp.Future }

func (f LogRotate_Future) Struct() (LogRotate, error) {
	p, err := f.Future.Ptr()
	return LogRotate(p.Struct()), err
}

type LiveUI capnp.Struct

// LiveUI_TypeID is the unique identifier for the type LiveUI.
const LiveUI_TypeID = 0xc08240f996aefced

func NewLiveUI(s *capnp.Segment) (LiveUI, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LiveUI(st), err
}

func NewRootLiveUI(s *capnp.Segment) (LiveUI, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return LiveUI(st), err
}

func ReadRootLiveUI(msg *capnp.Message) (LiveUI, error) {
	root, err := msg.Root()
	return LiveUI(root.Struct()), err
}

func (s LiveUI) String() string {
	str, _ := text.Marshal(0xc08240f996aefced, capnp.Struct(s))
	return str
}

func (s LiveUI) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveUI) DecodeFromPtr(p capnp.Ptr) LiveUI {
	return LiveUI(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveUI) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveUI) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveUI) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveUI) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveUI) RearViewCam() bool {
	return capnp.Struct(s).Bit(0)
}

func (s LiveUI) SetRearViewCam(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s LiveUI) AlertText1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LiveUI) HasAlertText1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveUI) AlertText1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LiveUI) SetAlertText1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LiveUI) AlertText2() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s LiveUI) HasAlertText2() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveUI) AlertText2Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s LiveUI) SetAlertText2(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s LiveUI) AwarenessStatus() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveUI) SetAwarenessStatus(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// LiveUI_List is a list of LiveUI.
type LiveUI_List = capnp.StructList[LiveUI]

// NewLiveUI creates a new list of LiveUI.
func NewLiveUI_List(s *capnp.Segment, sz int32) (LiveUI_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[LiveUI](l), err
}

// LiveUI_Future is a wrapper for a LiveUI promised by a client call.
type LiveUI_Future struct{ *capnp.Future }

func (f LiveUI_Future) Struct() (LiveUI, error) {
	p, err := f.Future.Ptr()
	return LiveUI(p.Struct()), err
}

type UiLayoutState capnp.Struct

// UiLayoutState_TypeID is the unique identifier for the type UiLayoutState.
const UiLayoutState_TypeID = 0x88dcce08ad29dda0

func NewUiLayoutState(s *capnp.Segment) (UiLayoutState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UiLayoutState(st), err
}

func NewRootUiLayoutState(s *capnp.Segment) (UiLayoutState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return UiLayoutState(st), err
}

func ReadRootUiLayoutState(msg *capnp.Message) (UiLayoutState, error) {
	root, err := msg.Root()
	return UiLayoutState(root.Struct()), err
}

func (s UiLayoutState) String() string {
	str, _ := text.Marshal(0x88dcce08ad29dda0, capnp.Struct(s))
	return str
}

func (s UiLayoutState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiLayoutState) DecodeFromPtr(p capnp.Ptr) UiLayoutState {
	return UiLayoutState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiLayoutState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiLayoutState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiLayoutState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiLayoutState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiLayoutState) ActiveApp() UiLayoutState_App {
	return UiLayoutState_App(capnp.Struct(s).Uint16(0))
}

func (s UiLayoutState) SetActiveApp(v UiLayoutState_App) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s UiLayoutState) SidebarCollapsed() bool {
	return capnp.Struct(s).Bit(16)
}

func (s UiLayoutState) SetSidebarCollapsed(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s UiLayoutState) MapEnabled() bool {
	return capnp.Struct(s).Bit(17)
}

func (s UiLayoutState) SetMapEnabled(v bool) {
	capnp.Struct(s).SetBit(17, v)
}

func (s UiLayoutState) MockEngaged() bool {
	return capnp.Struct(s).Bit(18)
}

func (s UiLayoutState) SetMockEngaged(v bool) {
	capnp.Struct(s).SetBit(18, v)
}

// UiLayoutState_List is a list of UiLayoutState.
type UiLayoutState_List = capnp.StructList[UiLayoutState]

// NewUiLayoutState creates a new list of UiLayoutState.
func NewUiLayoutState_List(s *capnp.Segment, sz int32) (UiLayoutState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[UiLayoutState](l), err
}

// UiLayoutState_Future is a wrapper for a UiLayoutState promised by a client call.
type UiLayoutState_Future struct{ *capnp.Future }

func (f UiLayoutState_Future) Struct() (UiLayoutState, error) {
	p, err := f.Future.Ptr()
	return UiLayoutState(p.Struct()), err
}

type UiLayoutState_App uint16

// UiLayoutState_App_TypeID is the unique identifier for the type UiLayoutState_App.
const UiLayoutState_App_TypeID = 0x9917470acf94d285

// Values of UiLayoutState_App.
const (
	UiLayoutState_App_home     UiLayoutState_App = 0
	UiLayoutState_App_music    UiLayoutState_App = 1
	UiLayoutState_App_nav      UiLayoutState_App = 2
	UiLayoutState_App_settings UiLayoutState_App = 3
	UiLayoutState_App_none     UiLayoutState_App = 4
)

// String returns the enum's constant name.
func (c UiLayoutState_App) String() string {
	switch c {
	case UiLayoutState_App_home:
		return "home"
	case UiLayoutState_App_music:
		return "music"
	case UiLayoutState_App_nav:
		return "nav"
	case UiLayoutState_App_settings:
		return "settings"
	case UiLayoutState_App_none:
		return "none"

	default:
		return ""
	}
}

// UiLayoutState_AppFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UiLayoutState_AppFromString(c string) UiLayoutState_App {
	switch c {
	case "home":
		return UiLayoutState_App_home
	case "music":
		return UiLayoutState_App_music
	case "nav":
		return UiLayoutState_App_nav
	case "settings":
		return UiLayoutState_App_settings
	case "none":
		return UiLayoutState_App_none

	default:
		return 0
	}
}

type UiLayoutState_App_List = capnp.EnumList[UiLayoutState_App]

func NewUiLayoutState_App_List(s *capnp.Segment, sz int32) (UiLayoutState_App_List, error) {
	return capnp.NewEnumList[UiLayoutState_App](s, sz)
}

type OrbslamCorrection capnp.Struct

// OrbslamCorrection_TypeID is the unique identifier for the type OrbslamCorrection.
const OrbslamCorrection_TypeID = 0x8afd33dc9b35e1aa

func NewOrbslamCorrection(s *capnp.Segment) (OrbslamCorrection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return OrbslamCorrection(st), err
}

func NewRootOrbslamCorrection(s *capnp.Segment) (OrbslamCorrection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return OrbslamCorrection(st), err
}

func ReadRootOrbslamCorrection(msg *capnp.Message) (OrbslamCorrection, error) {
	root, err := msg.Root()
	return OrbslamCorrection(root.Struct()), err
}

func (s OrbslamCorrection) String() string {
	str, _ := text.Marshal(0x8afd33dc9b35e1aa, capnp.Struct(s))
	return str
}

func (s OrbslamCorrection) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbslamCorrection) DecodeFromPtr(p capnp.Ptr) OrbslamCorrection {
	return OrbslamCorrection(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbslamCorrection) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbslamCorrection) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbslamCorrection) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbslamCorrection) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbslamCorrection) CorrectionMonoTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbslamCorrection) SetCorrectionMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbslamCorrection) PrePositionECEF() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s OrbslamCorrection) HasPrePositionECEF() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrbslamCorrection) SetPrePositionECEF(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPrePositionECEF sets the prePositionECEF field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s OrbslamCorrection) NewPrePositionECEF(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s OrbslamCorrection) PostPositionECEF() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s OrbslamCorrection) HasPostPositionECEF() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OrbslamCorrection) SetPostPositionECEF(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPostPositionECEF sets the postPositionECEF field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s OrbslamCorrection) NewPostPositionECEF(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s OrbslamCorrection) PrePoseQuatECEF() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s OrbslamCorrection) HasPrePoseQuatECEF() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s OrbslamCorrection) SetPrePoseQuatECEF(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPrePoseQuatECEF sets the prePoseQuatECEF field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s OrbslamCorrection) NewPrePoseQuatECEF(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s OrbslamCorrection) PostPoseQuatECEF() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s OrbslamCorrection) HasPostPoseQuatECEF() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s OrbslamCorrection) SetPostPoseQuatECEF(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPostPoseQuatECEF sets the postPoseQuatECEF field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s OrbslamCorrection) NewPostPoseQuatECEF(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s OrbslamCorrection) NumInliers() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s OrbslamCorrection) SetNumInliers(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// OrbslamCorrection_List is a list of OrbslamCorrection.
type OrbslamCorrection_List = capnp.StructList[OrbslamCorrection]

// NewOrbslamCorrection creates a new list of OrbslamCorrection.
func NewOrbslamCorrection_List(s *capnp.Segment, sz int32) (OrbslamCorrection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[OrbslamCorrection](l), err
}

// OrbslamCorrection_Future is a wrapper for a OrbslamCorrection promised by a client call.
type OrbslamCorrection_Future struct{ *capnp.Future }

func (f OrbslamCorrection_Future) Struct() (OrbslamCorrection, error) {
	p, err := f.Future.Ptr()
	return OrbslamCorrection(p.Struct()), err
}

type EthernetPacket capnp.Struct

// EthernetPacket_TypeID is the unique identifier for the type EthernetPacket.
const EthernetPacket_TypeID = 0xa99a9d5b33cf5859

func NewEthernetPacket(s *capnp.Segment) (EthernetPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EthernetPacket(st), err
}

func NewRootEthernetPacket(s *capnp.Segment) (EthernetPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return EthernetPacket(st), err
}

func ReadRootEthernetPacket(msg *capnp.Message) (EthernetPacket, error) {
	root, err := msg.Root()
	return EthernetPacket(root.Struct()), err
}

func (s EthernetPacket) String() string {
	str, _ := text.Marshal(0xa99a9d5b33cf5859, capnp.Struct(s))
	return str
}

func (s EthernetPacket) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EthernetPacket) DecodeFromPtr(p capnp.Ptr) EthernetPacket {
	return EthernetPacket(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EthernetPacket) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EthernetPacket) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EthernetPacket) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EthernetPacket) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EthernetPacket) Pkt() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s EthernetPacket) HasPkt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EthernetPacket) SetPkt(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s EthernetPacket) Ts() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s EthernetPacket) SetTs(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// EthernetPacket_List is a list of EthernetPacket.
type EthernetPacket_List = capnp.StructList[EthernetPacket]

// NewEthernetPacket creates a new list of EthernetPacket.
func NewEthernetPacket_List(s *capnp.Segment, sz int32) (EthernetPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[EthernetPacket](l), err
}

// EthernetPacket_Future is a wrapper for a EthernetPacket promised by a client call.
type EthernetPacket_Future struct{ *capnp.Future }

func (f EthernetPacket_Future) Struct() (EthernetPacket, error) {
	p, err := f.Future.Ptr()
	return EthernetPacket(p.Struct()), err
}

type CellInfo capnp.Struct

// CellInfo_TypeID is the unique identifier for the type CellInfo.
const CellInfo_TypeID = 0xcff7566681c277ce

func NewCellInfo(s *capnp.Segment) (CellInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CellInfo(st), err
}

func NewRootCellInfo(s *capnp.Segment) (CellInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CellInfo(st), err
}

func ReadRootCellInfo(msg *capnp.Message) (CellInfo, error) {
	root, err := msg.Root()
	return CellInfo(root.Struct()), err
}

func (s CellInfo) String() string {
	str, _ := text.Marshal(0xcff7566681c277ce, capnp.Struct(s))
	return str
}

func (s CellInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CellInfo) DecodeFromPtr(p capnp.Ptr) CellInfo {
	return CellInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CellInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CellInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CellInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CellInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CellInfo) Timestamp() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s CellInfo) SetTimestamp(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s CellInfo) Repr() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CellInfo) HasRepr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CellInfo) ReprBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CellInfo) SetRepr(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// CellInfo_List is a list of CellInfo.
type CellInfo_List = capnp.StructList[CellInfo]

// NewCellInfo creates a new list of CellInfo.
func NewCellInfo_List(s *capnp.Segment, sz int32) (CellInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CellInfo](l), err
}

// CellInfo_Future is a wrapper for a CellInfo promised by a client call.
type CellInfo_Future struct{ *capnp.Future }

func (f CellInfo_Future) Struct() (CellInfo, error) {
	p, err := f.Future.Ptr()
	return CellInfo(p.Struct()), err
}

type WifiScan capnp.Struct

// WifiScan_TypeID is the unique identifier for the type WifiScan.
const WifiScan_TypeID = 0xd4df5a192382ba0b

func NewWifiScan(s *capnp.Segment) (WifiScan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return WifiScan(st), err
}

func NewRootWifiScan(s *capnp.Segment) (WifiScan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5})
	return WifiScan(st), err
}

func ReadRootWifiScan(msg *capnp.Message) (WifiScan, error) {
	root, err := msg.Root()
	return WifiScan(root.Struct()), err
}

func (s WifiScan) String() string {
	str, _ := text.Marshal(0xd4df5a192382ba0b, capnp.Struct(s))
	return str
}

func (s WifiScan) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WifiScan) DecodeFromPtr(p capnp.Ptr) WifiScan {
	return WifiScan(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WifiScan) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WifiScan) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WifiScan) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WifiScan) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WifiScan) Bssid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WifiScan) HasBssid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WifiScan) BssidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WifiScan) SetBssid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WifiScan) Ssid() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WifiScan) HasSsid() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WifiScan) SsidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WifiScan) SetSsid(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WifiScan) Capabilities() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WifiScan) HasCapabilities() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WifiScan) CapabilitiesBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WifiScan) SetCapabilities(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s WifiScan) Frequency() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s WifiScan) SetFrequency(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s WifiScan) Level() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s WifiScan) SetLevel(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s WifiScan) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s WifiScan) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s WifiScan) CenterFreq0() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s WifiScan) SetCenterFreq0(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s WifiScan) CenterFreq1() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s WifiScan) SetCenterFreq1(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s WifiScan) ChannelWidth() WifiScan_ChannelWidth {
	return WifiScan_ChannelWidth(capnp.Struct(s).Uint16(24))
}

func (s WifiScan) SetChannelWidth(v WifiScan_ChannelWidth) {
	capnp.Struct(s).SetUint16(24, uint16(v))
}

func (s WifiScan) OperatorFriendlyName() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s WifiScan) HasOperatorFriendlyName() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s WifiScan) OperatorFriendlyNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s WifiScan) SetOperatorFriendlyName(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s WifiScan) VenueName() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s WifiScan) HasVenueName() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s WifiScan) VenueNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s WifiScan) SetVenueName(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s WifiScan) Is80211mcResponder() bool {
	return capnp.Struct(s).Bit(208)
}

func (s WifiScan) SetIs80211mcResponder(v bool) {
	capnp.Struct(s).SetBit(208, v)
}

func (s WifiScan) Passpoint() bool {
	return capnp.Struct(s).Bit(209)
}

func (s WifiScan) SetPasspoint(v bool) {
	capnp.Struct(s).SetBit(209, v)
}

func (s WifiScan) DistanceCm() int32 {
	return int32(capnp.Struct(s).Uint32(28))
}

func (s WifiScan) SetDistanceCm(v int32) {
	capnp.Struct(s).SetUint32(28, uint32(v))
}

func (s WifiScan) DistanceSdCm() int32 {
	return int32(capnp.Struct(s).Uint32(32))
}

func (s WifiScan) SetDistanceSdCm(v int32) {
	capnp.Struct(s).SetUint32(32, uint32(v))
}

// WifiScan_List is a list of WifiScan.
type WifiScan_List = capnp.StructList[WifiScan]

// NewWifiScan creates a new list of WifiScan.
func NewWifiScan_List(s *capnp.Segment, sz int32) (WifiScan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 5}, sz)
	return capnp.StructList[WifiScan](l), err
}

// WifiScan_Future is a wrapper for a WifiScan promised by a client call.
type WifiScan_Future struct{ *capnp.Future }

func (f WifiScan_Future) Struct() (WifiScan, error) {
	p, err := f.Future.Ptr()
	return WifiScan(p.Struct()), err
}

type WifiScan_ChannelWidth uint16

// WifiScan_ChannelWidth_TypeID is the unique identifier for the type WifiScan_ChannelWidth.
const WifiScan_ChannelWidth_TypeID = 0xcb6a279f015f6b51

// Values of WifiScan_ChannelWidth.
const (
	WifiScan_ChannelWidth_w20Mhz       WifiScan_ChannelWidth = 0
	WifiScan_ChannelWidth_w40Mhz       WifiScan_ChannelWidth = 1
	WifiScan_ChannelWidth_w80Mhz       WifiScan_ChannelWidth = 2
	WifiScan_ChannelWidth_w160Mhz      WifiScan_ChannelWidth = 3
	WifiScan_ChannelWidth_w80Plus80Mhz WifiScan_ChannelWidth = 4
)

// String returns the enum's constant name.
func (c WifiScan_ChannelWidth) String() string {
	switch c {
	case WifiScan_ChannelWidth_w20Mhz:
		return "w20Mhz"
	case WifiScan_ChannelWidth_w40Mhz:
		return "w40Mhz"
	case WifiScan_ChannelWidth_w80Mhz:
		return "w80Mhz"
	case WifiScan_ChannelWidth_w160Mhz:
		return "w160Mhz"
	case WifiScan_ChannelWidth_w80Plus80Mhz:
		return "w80Plus80Mhz"

	default:
		return ""
	}
}

// WifiScan_ChannelWidthFromString returns the enum value with a name,
// or the zero value if there's no such value.
func WifiScan_ChannelWidthFromString(c string) WifiScan_ChannelWidth {
	switch c {
	case "w20Mhz":
		return WifiScan_ChannelWidth_w20Mhz
	case "w40Mhz":
		return WifiScan_ChannelWidth_w40Mhz
	case "w80Mhz":
		return WifiScan_ChannelWidth_w80Mhz
	case "w160Mhz":
		return WifiScan_ChannelWidth_w160Mhz
	case "w80Plus80Mhz":
		return WifiScan_ChannelWidth_w80Plus80Mhz

	default:
		return 0
	}
}

type WifiScan_ChannelWidth_List = capnp.EnumList[WifiScan_ChannelWidth]

func NewWifiScan_ChannelWidth_List(s *capnp.Segment, sz int32) (WifiScan_ChannelWidth_List, error) {
	return capnp.NewEnumList[WifiScan_ChannelWidth](s, sz)
}

type LiveEventData capnp.Struct

// LiveEventData_TypeID is the unique identifier for the type LiveEventData.
const LiveEventData_TypeID = 0x94b7baa90c5c321e

func NewLiveEventData(s *capnp.Segment) (LiveEventData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LiveEventData(st), err
}

func NewRootLiveEventData(s *capnp.Segment) (LiveEventData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return LiveEventData(st), err
}

func ReadRootLiveEventData(msg *capnp.Message) (LiveEventData, error) {
	root, err := msg.Root()
	return LiveEventData(root.Struct()), err
}

func (s LiveEventData) String() string {
	str, _ := text.Marshal(0x94b7baa90c5c321e, capnp.Struct(s))
	return str
}

func (s LiveEventData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveEventData) DecodeFromPtr(p capnp.Ptr) LiveEventData {
	return LiveEventData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveEventData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveEventData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveEventData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveEventData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveEventData) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s LiveEventData) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveEventData) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s LiveEventData) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s LiveEventData) Value() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s LiveEventData) SetValue(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// LiveEventData_List is a list of LiveEventData.
type LiveEventData_List = capnp.StructList[LiveEventData]

// NewLiveEventData creates a new list of LiveEventData.
func NewLiveEventData_List(s *capnp.Segment, sz int32) (LiveEventData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[LiveEventData](l), err
}

// LiveEventData_Future is a wrapper for a LiveEventData promised by a client call.
type LiveEventData_Future struct{ *capnp.Future }

func (f LiveEventData_Future) Struct() (LiveEventData, error) {
	p, err := f.Future.Ptr()
	return LiveEventData(p.Struct()), err
}

type ModelData capnp.Struct

// ModelData_TypeID is the unique identifier for the type ModelData.
const ModelData_TypeID = 0xb8aad62cffef28a9

func NewModelData(s *capnp.Segment) (ModelData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 11})
	return ModelData(st), err
}

func NewRootModelData(s *capnp.Segment) (ModelData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 11})
	return ModelData(st), err
}

func ReadRootModelData(msg *capnp.Message) (ModelData, error) {
	root, err := msg.Root()
	return ModelData(root.Struct()), err
}

func (s ModelData) String() string {
	str, _ := text.Marshal(0xb8aad62cffef28a9, capnp.Struct(s))
	return str
}

func (s ModelData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData) DecodeFromPtr(p capnp.Ptr) ModelData {
	return ModelData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s ModelData) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s ModelData) FrameAge() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s ModelData) SetFrameAge(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s ModelData) FrameDropPerc() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ModelData) SetFrameDropPerc(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ModelData) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s ModelData) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s ModelData) ModelExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ModelData) SetModelExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ModelData) GpuExecutionTime() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ModelData) SetGpuExecutionTime(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ModelData) RawPred() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return []byte(p.Data()), err
}

func (s ModelData) HasRawPred() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s ModelData) SetRawPred(v []byte) error {
	return capnp.Struct(s).SetData(10, v)
}

func (s ModelData) Path() (ModelData_PathData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ModelData_PathData(p.Struct()), err
}

func (s ModelData) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelData) SetPath(v ModelData_PathData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPath sets the path field to a newly
// allocated ModelData_PathData struct, preferring placement in s's segment.
func (s ModelData) NewPath() (ModelData_PathData, error) {
	ss, err := NewModelData_PathData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_PathData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) LeftLane() (ModelData_PathData, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ModelData_PathData(p.Struct()), err
}

func (s ModelData) HasLeftLane() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelData) SetLeftLane(v ModelData_PathData) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLeftLane sets the leftLane field to a newly
// allocated ModelData_PathData struct, preferring placement in s's segment.
func (s ModelData) NewLeftLane() (ModelData_PathData, error) {
	ss, err := NewModelData_PathData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_PathData{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) RightLane() (ModelData_PathData, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ModelData_PathData(p.Struct()), err
}

func (s ModelData) HasRightLane() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelData) SetRightLane(v ModelData_PathData) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewRightLane sets the rightLane field to a newly
// allocated ModelData_PathData struct, preferring placement in s's segment.
func (s ModelData) NewRightLane() (ModelData_PathData, error) {
	ss, err := NewModelData_PathData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_PathData{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) Lead() (ModelData_LeadData, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ModelData_LeadData(p.Struct()), err
}

func (s ModelData) HasLead() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ModelData) SetLead(v ModelData_LeadData) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewLead sets the lead field to a newly
// allocated ModelData_LeadData struct, preferring placement in s's segment.
func (s ModelData) NewLead() (ModelData_LeadData, error) {
	ss, err := NewModelData_LeadData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_LeadData{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) FreePath() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s ModelData) HasFreePath() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ModelData) SetFreePath(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewFreePath sets the freePath field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData) NewFreePath(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s ModelData) Settings() (ModelData_ModelSettings, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ModelData_ModelSettings(p.Struct()), err
}

func (s ModelData) HasSettings() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ModelData) SetSettings(v ModelData_ModelSettings) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewSettings sets the settings field to a newly
// allocated ModelData_ModelSettings struct, preferring placement in s's segment.
func (s ModelData) NewSettings() (ModelData_ModelSettings, error) {
	ss, err := NewModelData_ModelSettings(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_ModelSettings{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) LeadFuture() (ModelData_LeadData, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return ModelData_LeadData(p.Struct()), err
}

func (s ModelData) HasLeadFuture() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s ModelData) SetLeadFuture(v ModelData_LeadData) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewLeadFuture sets the leadFuture field to a newly
// allocated ModelData_LeadData struct, preferring placement in s's segment.
func (s ModelData) NewLeadFuture() (ModelData_LeadData, error) {
	ss, err := NewModelData_LeadData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_LeadData{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) Speed() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s ModelData) HasSpeed() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s ModelData) SetSpeed(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewSpeed sets the speed field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData) NewSpeed(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s ModelData) Meta() (ModelData_MetaData, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return ModelData_MetaData(p.Struct()), err
}

func (s ModelData) HasMeta() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s ModelData) SetMeta(v ModelData_MetaData) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated ModelData_MetaData struct, preferring placement in s's segment.
func (s ModelData) NewMeta() (ModelData_MetaData, error) {
	ss, err := NewModelData_MetaData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_MetaData{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ModelData) Longitudinal() (ModelData_LongitudinalData, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return ModelData_LongitudinalData(p.Struct()), err
}

func (s ModelData) HasLongitudinal() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s ModelData) SetLongitudinal(v ModelData_LongitudinalData) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewLongitudinal sets the longitudinal field to a newly
// allocated ModelData_LongitudinalData struct, preferring placement in s's segment.
func (s ModelData) NewLongitudinal() (ModelData_LongitudinalData, error) {
	ss, err := NewModelData_LongitudinalData(capnp.Struct(s).Segment())
	if err != nil {
		return ModelData_LongitudinalData{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ModelData_List is a list of ModelData.
type ModelData_List = capnp.StructList[ModelData]

// NewModelData creates a new list of ModelData.
func NewModelData_List(s *capnp.Segment, sz int32) (ModelData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 11}, sz)
	return capnp.StructList[ModelData](l), err
}

// ModelData_Future is a wrapper for a ModelData promised by a client call.
type ModelData_Future struct{ *capnp.Future }

func (f ModelData_Future) Struct() (ModelData, error) {
	p, err := f.Future.Ptr()
	return ModelData(p.Struct()), err
}
func (p ModelData_Future) Path() ModelData_PathData_Future {
	return ModelData_PathData_Future{Future: p.Future.Field(0, nil)}
}
func (p ModelData_Future) LeftLane() ModelData_PathData_Future {
	return ModelData_PathData_Future{Future: p.Future.Field(1, nil)}
}
func (p ModelData_Future) RightLane() ModelData_PathData_Future {
	return ModelData_PathData_Future{Future: p.Future.Field(2, nil)}
}
func (p ModelData_Future) Lead() ModelData_LeadData_Future {
	return ModelData_LeadData_Future{Future: p.Future.Field(3, nil)}
}
func (p ModelData_Future) Settings() ModelData_ModelSettings_Future {
	return ModelData_ModelSettings_Future{Future: p.Future.Field(4, nil)}
}
func (p ModelData_Future) LeadFuture() ModelData_LeadData_Future {
	return ModelData_LeadData_Future{Future: p.Future.Field(6, nil)}
}
func (p ModelData_Future) Meta() ModelData_MetaData_Future {
	return ModelData_MetaData_Future{Future: p.Future.Field(8, nil)}
}
func (p ModelData_Future) Longitudinal() ModelData_LongitudinalData_Future {
	return ModelData_LongitudinalData_Future{Future: p.Future.Field(9, nil)}
}

type ModelData_PathData capnp.Struct

// ModelData_PathData_TypeID is the unique identifier for the type ModelData_PathData.
const ModelData_PathData_TypeID = 0x8817eeea389e9f08

func NewModelData_PathData(s *capnp.Segment) (ModelData_PathData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ModelData_PathData(st), err
}

func NewRootModelData_PathData(s *capnp.Segment) (ModelData_PathData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return ModelData_PathData(st), err
}

func ReadRootModelData_PathData(msg *capnp.Message) (ModelData_PathData, error) {
	root, err := msg.Root()
	return ModelData_PathData(root.Struct()), err
}

func (s ModelData_PathData) String() string {
	str, _ := text.Marshal(0x8817eeea389e9f08, capnp.Struct(s))
	return str
}

func (s ModelData_PathData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData_PathData) DecodeFromPtr(p capnp.Ptr) ModelData_PathData {
	return ModelData_PathData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData_PathData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData_PathData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData_PathData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData_PathData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData_PathData) Points() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_PathData) HasPoints() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelData_PathData) SetPoints(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPoints sets the points field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_PathData) NewPoints(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelData_PathData) Prob() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelData_PathData) SetProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelData_PathData) Std() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelData_PathData) SetStd(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelData_PathData) Stds() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_PathData) HasStds() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelData_PathData) SetStds(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewStds sets the stds field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_PathData) NewStds(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelData_PathData) Poly() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_PathData) HasPoly() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelData_PathData) SetPoly(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPoly sets the poly field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_PathData) NewPoly(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ModelData_PathData) ValidLen() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ModelData_PathData) SetValidLen(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// ModelData_PathData_List is a list of ModelData_PathData.
type ModelData_PathData_List = capnp.StructList[ModelData_PathData]

// NewModelData_PathData creates a new list of ModelData_PathData.
func NewModelData_PathData_List(s *capnp.Segment, sz int32) (ModelData_PathData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[ModelData_PathData](l), err
}

// ModelData_PathData_Future is a wrapper for a ModelData_PathData promised by a client call.
type ModelData_PathData_Future struct{ *capnp.Future }

func (f ModelData_PathData_Future) Struct() (ModelData_PathData, error) {
	p, err := f.Future.Ptr()
	return ModelData_PathData(p.Struct()), err
}

type ModelData_LeadData capnp.Struct

// ModelData_LeadData_TypeID is the unique identifier for the type ModelData_LeadData.
const ModelData_LeadData_TypeID = 0xd1c9bef96d26fa91

func NewModelData_LeadData(s *capnp.Segment) (ModelData_LeadData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ModelData_LeadData(st), err
}

func NewRootModelData_LeadData(s *capnp.Segment) (ModelData_LeadData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return ModelData_LeadData(st), err
}

func ReadRootModelData_LeadData(msg *capnp.Message) (ModelData_LeadData, error) {
	root, err := msg.Root()
	return ModelData_LeadData(root.Struct()), err
}

func (s ModelData_LeadData) String() string {
	str, _ := text.Marshal(0xd1c9bef96d26fa91, capnp.Struct(s))
	return str
}

func (s ModelData_LeadData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData_LeadData) DecodeFromPtr(p capnp.Ptr) ModelData_LeadData {
	return ModelData_LeadData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData_LeadData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData_LeadData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData_LeadData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData_LeadData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData_LeadData) Dist() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelData_LeadData) SetDist(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelData_LeadData) Prob() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelData_LeadData) SetProb(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelData_LeadData) Std() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ModelData_LeadData) SetStd(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ModelData_LeadData) RelVel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ModelData_LeadData) SetRelVel(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ModelData_LeadData) RelVelStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s ModelData_LeadData) SetRelVelStd(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s ModelData_LeadData) RelY() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s ModelData_LeadData) SetRelY(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s ModelData_LeadData) RelYStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s ModelData_LeadData) SetRelYStd(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s ModelData_LeadData) RelA() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s ModelData_LeadData) SetRelA(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s ModelData_LeadData) RelAStd() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s ModelData_LeadData) SetRelAStd(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

// ModelData_LeadData_List is a list of ModelData_LeadData.
type ModelData_LeadData_List = capnp.StructList[ModelData_LeadData]

// NewModelData_LeadData creates a new list of ModelData_LeadData.
func NewModelData_LeadData_List(s *capnp.Segment, sz int32) (ModelData_LeadData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[ModelData_LeadData](l), err
}

// ModelData_LeadData_Future is a wrapper for a ModelData_LeadData promised by a client call.
type ModelData_LeadData_Future struct{ *capnp.Future }

func (f ModelData_LeadData_Future) Struct() (ModelData_LeadData, error) {
	p, err := f.Future.Ptr()
	return ModelData_LeadData(p.Struct()), err
}

type ModelData_ModelSettings capnp.Struct

// ModelData_ModelSettings_TypeID is the unique identifier for the type ModelData_ModelSettings.
const ModelData_ModelSettings_TypeID = 0xa26e3710efd3e914

func NewModelData_ModelSettings(s *capnp.Segment) (ModelData_ModelSettings, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ModelData_ModelSettings(st), err
}

func NewRootModelData_ModelSettings(s *capnp.Segment) (ModelData_ModelSettings, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ModelData_ModelSettings(st), err
}

func ReadRootModelData_ModelSettings(msg *capnp.Message) (ModelData_ModelSettings, error) {
	root, err := msg.Root()
	return ModelData_ModelSettings(root.Struct()), err
}

func (s ModelData_ModelSettings) String() string {
	str, _ := text.Marshal(0xa26e3710efd3e914, capnp.Struct(s))
	return str
}

func (s ModelData_ModelSettings) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData_ModelSettings) DecodeFromPtr(p capnp.Ptr) ModelData_ModelSettings {
	return ModelData_ModelSettings(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData_ModelSettings) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData_ModelSettings) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData_ModelSettings) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData_ModelSettings) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData_ModelSettings) BigBoxX() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s ModelData_ModelSettings) SetBigBoxX(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s ModelData_ModelSettings) BigBoxY() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s ModelData_ModelSettings) SetBigBoxY(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s ModelData_ModelSettings) BigBoxWidth() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s ModelData_ModelSettings) SetBigBoxWidth(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s ModelData_ModelSettings) BigBoxHeight() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s ModelData_ModelSettings) SetBigBoxHeight(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s ModelData_ModelSettings) BoxProjection() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_ModelSettings) HasBoxProjection() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelData_ModelSettings) SetBoxProjection(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewBoxProjection sets the boxProjection field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_ModelSettings) NewBoxProjection(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelData_ModelSettings) YuvCorrection() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_ModelSettings) HasYuvCorrection() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelData_ModelSettings) SetYuvCorrection(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewYuvCorrection sets the yuvCorrection field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_ModelSettings) NewYuvCorrection(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ModelData_ModelSettings) InputTransform() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_ModelSettings) HasInputTransform() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelData_ModelSettings) SetInputTransform(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewInputTransform sets the inputTransform field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_ModelSettings) NewInputTransform(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// ModelData_ModelSettings_List is a list of ModelData_ModelSettings.
type ModelData_ModelSettings_List = capnp.StructList[ModelData_ModelSettings]

// NewModelData_ModelSettings creates a new list of ModelData_ModelSettings.
func NewModelData_ModelSettings_List(s *capnp.Segment, sz int32) (ModelData_ModelSettings_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ModelData_ModelSettings](l), err
}

// ModelData_ModelSettings_Future is a wrapper for a ModelData_ModelSettings promised by a client call.
type ModelData_ModelSettings_Future struct{ *capnp.Future }

func (f ModelData_ModelSettings_Future) Struct() (ModelData_ModelSettings, error) {
	p, err := f.Future.Ptr()
	return ModelData_ModelSettings(p.Struct()), err
}

type ModelData_MetaData capnp.Struct

// ModelData_MetaData_TypeID is the unique identifier for the type ModelData_MetaData.
const ModelData_MetaData_TypeID = 0x9744f25fb60f2bf8

func NewModelData_MetaData(s *capnp.Segment) (ModelData_MetaData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ModelData_MetaData(st), err
}

func NewRootModelData_MetaData(s *capnp.Segment) (ModelData_MetaData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ModelData_MetaData(st), err
}

func ReadRootModelData_MetaData(msg *capnp.Message) (ModelData_MetaData, error) {
	root, err := msg.Root()
	return ModelData_MetaData(root.Struct()), err
}

func (s ModelData_MetaData) String() string {
	str, _ := text.Marshal(0x9744f25fb60f2bf8, capnp.Struct(s))
	return str
}

func (s ModelData_MetaData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData_MetaData) DecodeFromPtr(p capnp.Ptr) ModelData_MetaData {
	return ModelData_MetaData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData_MetaData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData_MetaData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData_MetaData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData_MetaData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData_MetaData) EngagedProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ModelData_MetaData) SetEngagedProb(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ModelData_MetaData) DesirePrediction() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_MetaData) HasDesirePrediction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelData_MetaData) SetDesirePrediction(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDesirePrediction sets the desirePrediction field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_MetaData) NewDesirePrediction(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelData_MetaData) BrakeDisengageProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ModelData_MetaData) SetBrakeDisengageProb(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ModelData_MetaData) GasDisengageProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ModelData_MetaData) SetGasDisengageProb(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s ModelData_MetaData) SteerOverrideProb() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s ModelData_MetaData) SetSteerOverrideProb(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s ModelData_MetaData) DesireState() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_MetaData) HasDesireState() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelData_MetaData) SetDesireState(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewDesireState sets the desireState field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_MetaData) NewDesireState(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ModelData_MetaData_List is a list of ModelData_MetaData.
type ModelData_MetaData_List = capnp.StructList[ModelData_MetaData]

// NewModelData_MetaData creates a new list of ModelData_MetaData.
func NewModelData_MetaData_List(s *capnp.Segment, sz int32) (ModelData_MetaData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[ModelData_MetaData](l), err
}

// ModelData_MetaData_Future is a wrapper for a ModelData_MetaData promised by a client call.
type ModelData_MetaData_Future struct{ *capnp.Future }

func (f ModelData_MetaData_Future) Struct() (ModelData_MetaData, error) {
	p, err := f.Future.Ptr()
	return ModelData_MetaData(p.Struct()), err
}

type ModelData_LongitudinalData capnp.Struct

// ModelData_LongitudinalData_TypeID is the unique identifier for the type ModelData_LongitudinalData.
const ModelData_LongitudinalData_TypeID = 0xf98f999c6a071122

func NewModelData_LongitudinalData(s *capnp.Segment) (ModelData_LongitudinalData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ModelData_LongitudinalData(st), err
}

func NewRootModelData_LongitudinalData(s *capnp.Segment) (ModelData_LongitudinalData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ModelData_LongitudinalData(st), err
}

func ReadRootModelData_LongitudinalData(msg *capnp.Message) (ModelData_LongitudinalData, error) {
	root, err := msg.Root()
	return ModelData_LongitudinalData(root.Struct()), err
}

func (s ModelData_LongitudinalData) String() string {
	str, _ := text.Marshal(0xf98f999c6a071122, capnp.Struct(s))
	return str
}

func (s ModelData_LongitudinalData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ModelData_LongitudinalData) DecodeFromPtr(p capnp.Ptr) ModelData_LongitudinalData {
	return ModelData_LongitudinalData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ModelData_LongitudinalData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ModelData_LongitudinalData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ModelData_LongitudinalData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ModelData_LongitudinalData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ModelData_LongitudinalData) Distances() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_LongitudinalData) HasDistances() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ModelData_LongitudinalData) SetDistances(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDistances sets the distances field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_LongitudinalData) NewDistances(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ModelData_LongitudinalData) Speeds() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_LongitudinalData) HasSpeeds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ModelData_LongitudinalData) SetSpeeds(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpeeds sets the speeds field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_LongitudinalData) NewSpeeds(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ModelData_LongitudinalData) Accelerations() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s ModelData_LongitudinalData) HasAccelerations() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ModelData_LongitudinalData) SetAccelerations(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAccelerations sets the accelerations field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s ModelData_LongitudinalData) NewAccelerations(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ModelData_LongitudinalData_List is a list of ModelData_LongitudinalData.
type ModelData_LongitudinalData_List = capnp.StructList[ModelData_LongitudinalData]

// NewModelData_LongitudinalData creates a new list of ModelData_LongitudinalData.
func NewModelData_LongitudinalData_List(s *capnp.Segment, sz int32) (ModelData_LongitudinalData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ModelData_LongitudinalData](l), err
}

// ModelData_LongitudinalData_Future is a wrapper for a ModelData_LongitudinalData promised by a client call.
type ModelData_LongitudinalData_Future struct{ *capnp.Future }

func (f ModelData_LongitudinalData_Future) Struct() (ModelData_LongitudinalData, error) {
	p, err := f.Future.Ptr()
	return ModelData_LongitudinalData(p.Struct()), err
}

type ECEFPoint capnp.Struct

// ECEFPoint_TypeID is the unique identifier for the type ECEFPoint.
const ECEFPoint_TypeID = 0xc25bbbd524983447

func NewECEFPoint(s *capnp.Segment) (ECEFPoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return ECEFPoint(st), err
}

func NewRootECEFPoint(s *capnp.Segment) (ECEFPoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return ECEFPoint(st), err
}

func ReadRootECEFPoint(msg *capnp.Message) (ECEFPoint, error) {
	root, err := msg.Root()
	return ECEFPoint(root.Struct()), err
}

func (s ECEFPoint) String() string {
	str, _ := text.Marshal(0xc25bbbd524983447, capnp.Struct(s))
	return str
}

func (s ECEFPoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ECEFPoint) DecodeFromPtr(p capnp.Ptr) ECEFPoint {
	return ECEFPoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ECEFPoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ECEFPoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ECEFPoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ECEFPoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ECEFPoint) X() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s ECEFPoint) SetX(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s ECEFPoint) Y() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ECEFPoint) SetY(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ECEFPoint) Z() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s ECEFPoint) SetZ(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// ECEFPoint_List is a list of ECEFPoint.
type ECEFPoint_List = capnp.StructList[ECEFPoint]

// NewECEFPoint creates a new list of ECEFPoint.
func NewECEFPoint_List(s *capnp.Segment, sz int32) (ECEFPoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[ECEFPoint](l), err
}

// ECEFPoint_Future is a wrapper for a ECEFPoint promised by a client call.
type ECEFPoint_Future struct{ *capnp.Future }

func (f ECEFPoint_Future) Struct() (ECEFPoint, error) {
	p, err := f.Future.Ptr()
	return ECEFPoint(p.Struct()), err
}

type ECEFPointDEPRECATED capnp.Struct

// ECEFPointDEPRECATED_TypeID is the unique identifier for the type ECEFPointDEPRECATED.
const ECEFPointDEPRECATED_TypeID = 0xe10e21168db0c7f7

func NewECEFPointDEPRECATED(s *capnp.Segment) (ECEFPointDEPRECATED, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ECEFPointDEPRECATED(st), err
}

func NewRootECEFPointDEPRECATED(s *capnp.Segment) (ECEFPointDEPRECATED, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ECEFPointDEPRECATED(st), err
}

func ReadRootECEFPointDEPRECATED(msg *capnp.Message) (ECEFPointDEPRECATED, error) {
	root, err := msg.Root()
	return ECEFPointDEPRECATED(root.Struct()), err
}

func (s ECEFPointDEPRECATED) String() string {
	str, _ := text.Marshal(0xe10e21168db0c7f7, capnp.Struct(s))
	return str
}

func (s ECEFPointDEPRECATED) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ECEFPointDEPRECATED) DecodeFromPtr(p capnp.Ptr) ECEFPointDEPRECATED {
	return ECEFPointDEPRECATED(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ECEFPointDEPRECATED) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ECEFPointDEPRECATED) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ECEFPointDEPRECATED) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ECEFPointDEPRECATED) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ECEFPointDEPRECATED) X() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s ECEFPointDEPRECATED) SetX(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s ECEFPointDEPRECATED) Y() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s ECEFPointDEPRECATED) SetY(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s ECEFPointDEPRECATED) Z() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s ECEFPointDEPRECATED) SetZ(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// ECEFPointDEPRECATED_List is a list of ECEFPointDEPRECATED.
type ECEFPointDEPRECATED_List = capnp.StructList[ECEFPointDEPRECATED]

// NewECEFPointDEPRECATED creates a new list of ECEFPointDEPRECATED.
func NewECEFPointDEPRECATED_List(s *capnp.Segment, sz int32) (ECEFPointDEPRECATED_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ECEFPointDEPRECATED](l), err
}

// ECEFPointDEPRECATED_Future is a wrapper for a ECEFPointDEPRECATED promised by a client call.
type ECEFPointDEPRECATED_Future struct{ *capnp.Future }

func (f ECEFPointDEPRECATED_Future) Struct() (ECEFPointDEPRECATED, error) {
	p, err := f.Future.Ptr()
	return ECEFPointDEPRECATED(p.Struct()), err
}

type GPSPlannerPoints capnp.Struct

// GPSPlannerPoints_TypeID is the unique identifier for the type GPSPlannerPoints.
const GPSPlannerPoints_TypeID = 0xab54c59699f8f9f3

func NewGPSPlannerPoints(s *capnp.Segment) (GPSPlannerPoints, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return GPSPlannerPoints(st), err
}

func NewRootGPSPlannerPoints(s *capnp.Segment) (GPSPlannerPoints, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return GPSPlannerPoints(st), err
}

func ReadRootGPSPlannerPoints(msg *capnp.Message) (GPSPlannerPoints, error) {
	root, err := msg.Root()
	return GPSPlannerPoints(root.Struct()), err
}

func (s GPSPlannerPoints) String() string {
	str, _ := text.Marshal(0xab54c59699f8f9f3, capnp.Struct(s))
	return str
}

func (s GPSPlannerPoints) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GPSPlannerPoints) DecodeFromPtr(p capnp.Ptr) GPSPlannerPoints {
	return GPSPlannerPoints(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GPSPlannerPoints) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GPSPlannerPoints) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GPSPlannerPoints) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GPSPlannerPoints) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GPSPlannerPoints) CurPosDEPRECATED() (ECEFPointDEPRECATED, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ECEFPointDEPRECATED(p.Struct()), err
}

func (s GPSPlannerPoints) HasCurPosDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GPSPlannerPoints) SetCurPosDEPRECATED(v ECEFPointDEPRECATED) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCurPosDEPRECATED sets the curPosDEPRECATED field to a newly
// allocated ECEFPointDEPRECATED struct, preferring placement in s's segment.
func (s GPSPlannerPoints) NewCurPosDEPRECATED() (ECEFPointDEPRECATED, error) {
	ss, err := NewECEFPointDEPRECATED(capnp.Struct(s).Segment())
	if err != nil {
		return ECEFPointDEPRECATED{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSPlannerPoints) PointsDEPRECATED() (ECEFPointDEPRECATED_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ECEFPointDEPRECATED_List(p.List()), err
}

func (s GPSPlannerPoints) HasPointsDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GPSPlannerPoints) SetPointsDEPRECATED(v ECEFPointDEPRECATED_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPointsDEPRECATED sets the pointsDEPRECATED field to a newly
// allocated ECEFPointDEPRECATED_List, preferring placement in s's segment.
func (s GPSPlannerPoints) NewPointsDEPRECATED(n int32) (ECEFPointDEPRECATED_List, error) {
	l, err := NewECEFPointDEPRECATED_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ECEFPointDEPRECATED_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s GPSPlannerPoints) CurPos() (ECEFPoint, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ECEFPoint(p.Struct()), err
}

func (s GPSPlannerPoints) HasCurPos() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GPSPlannerPoints) SetCurPos(v ECEFPoint) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewCurPos sets the curPos field to a newly
// allocated ECEFPoint struct, preferring placement in s's segment.
func (s GPSPlannerPoints) NewCurPos() (ECEFPoint, error) {
	ss, err := NewECEFPoint(capnp.Struct(s).Segment())
	if err != nil {
		return ECEFPoint{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s GPSPlannerPoints) Points() (ECEFPoint_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ECEFPoint_List(p.List()), err
}

func (s GPSPlannerPoints) HasPoints() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s GPSPlannerPoints) SetPoints(v ECEFPoint_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPoints sets the points field to a newly
// allocated ECEFPoint_List, preferring placement in s's segment.
func (s GPSPlannerPoints) NewPoints(n int32) (ECEFPoint_List, error) {
	l, err := NewECEFPoint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ECEFPoint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s GPSPlannerPoints) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s GPSPlannerPoints) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s GPSPlannerPoints) TrackName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s GPSPlannerPoints) HasTrackName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GPSPlannerPoints) TrackNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s GPSPlannerPoints) SetTrackName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s GPSPlannerPoints) SpeedLimit() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GPSPlannerPoints) SetSpeedLimit(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GPSPlannerPoints) AccelTarget() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GPSPlannerPoints) SetAccelTarget(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// GPSPlannerPoints_List is a list of GPSPlannerPoints.
type GPSPlannerPoints_List = capnp.StructList[GPSPlannerPoints]

// NewGPSPlannerPoints creates a new list of GPSPlannerPoints.
func NewGPSPlannerPoints_List(s *capnp.Segment, sz int32) (GPSPlannerPoints_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[GPSPlannerPoints](l), err
}

// GPSPlannerPoints_Future is a wrapper for a GPSPlannerPoints promised by a client call.
type GPSPlannerPoints_Future struct{ *capnp.Future }

func (f GPSPlannerPoints_Future) Struct() (GPSPlannerPoints, error) {
	p, err := f.Future.Ptr()
	return GPSPlannerPoints(p.Struct()), err
}
func (p GPSPlannerPoints_Future) CurPosDEPRECATED() ECEFPointDEPRECATED_Future {
	return ECEFPointDEPRECATED_Future{Future: p.Future.Field(0, nil)}
}
func (p GPSPlannerPoints_Future) CurPos() ECEFPoint_Future {
	return ECEFPoint_Future{Future: p.Future.Field(3, nil)}
}

type GPSPlannerPlan capnp.Struct

// GPSPlannerPlan_TypeID is the unique identifier for the type GPSPlannerPlan.
const GPSPlannerPlan_TypeID = 0xf5ad1d90cdc1dd6b

func NewGPSPlannerPlan(s *capnp.Segment) (GPSPlannerPlan, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GPSPlannerPlan(st), err
}

func NewRootGPSPlannerPlan(s *capnp.Segment) (GPSPlannerPlan, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return GPSPlannerPlan(st), err
}

func ReadRootGPSPlannerPlan(msg *capnp.Message) (GPSPlannerPlan, error) {
	root, err := msg.Root()
	return GPSPlannerPlan(root.Struct()), err
}

func (s GPSPlannerPlan) String() string {
	str, _ := text.Marshal(0xf5ad1d90cdc1dd6b, capnp.Struct(s))
	return str
}

func (s GPSPlannerPlan) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (GPSPlannerPlan) DecodeFromPtr(p capnp.Ptr) GPSPlannerPlan {
	return GPSPlannerPlan(capnp.Struct{}.DecodeFromPtr(p))
}

func (s GPSPlannerPlan) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s GPSPlannerPlan) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s GPSPlannerPlan) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s GPSPlannerPlan) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s GPSPlannerPlan) Valid() bool {
	return capnp.Struct(s).Bit(0)
}

func (s GPSPlannerPlan) SetValid(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s GPSPlannerPlan) Poly() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s GPSPlannerPlan) HasPoly() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s GPSPlannerPlan) SetPoly(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPoly sets the poly field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s GPSPlannerPlan) NewPoly(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s GPSPlannerPlan) TrackName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s GPSPlannerPlan) HasTrackName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s GPSPlannerPlan) TrackNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s GPSPlannerPlan) SetTrackName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s GPSPlannerPlan) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s GPSPlannerPlan) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s GPSPlannerPlan) Acceleration() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s GPSPlannerPlan) SetAcceleration(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s GPSPlannerPlan) PointsDEPRECATED() (ECEFPointDEPRECATED_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ECEFPointDEPRECATED_List(p.List()), err
}

func (s GPSPlannerPlan) HasPointsDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s GPSPlannerPlan) SetPointsDEPRECATED(v ECEFPointDEPRECATED_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPointsDEPRECATED sets the pointsDEPRECATED field to a newly
// allocated ECEFPointDEPRECATED_List, preferring placement in s's segment.
func (s GPSPlannerPlan) NewPointsDEPRECATED(n int32) (ECEFPointDEPRECATED_List, error) {
	l, err := NewECEFPointDEPRECATED_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ECEFPointDEPRECATED_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s GPSPlannerPlan) Points() (ECEFPoint_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ECEFPoint_List(p.List()), err
}

func (s GPSPlannerPlan) HasPoints() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s GPSPlannerPlan) SetPoints(v ECEFPoint_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPoints sets the points field to a newly
// allocated ECEFPoint_List, preferring placement in s's segment.
func (s GPSPlannerPlan) NewPoints(n int32) (ECEFPoint_List, error) {
	l, err := NewECEFPoint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ECEFPoint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s GPSPlannerPlan) XLookahead() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s GPSPlannerPlan) SetXLookahead(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// GPSPlannerPlan_List is a list of GPSPlannerPlan.
type GPSPlannerPlan_List = capnp.StructList[GPSPlannerPlan]

// NewGPSPlannerPlan creates a new list of GPSPlannerPlan.
func NewGPSPlannerPlan_List(s *capnp.Segment, sz int32) (GPSPlannerPlan_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return capnp.StructList[GPSPlannerPlan](l), err
}

// GPSPlannerPlan_Future is a wrapper for a GPSPlannerPlan promised by a client call.
type GPSPlannerPlan_Future struct{ *capnp.Future }

func (f GPSPlannerPlan_Future) Struct() (GPSPlannerPlan, error) {
	p, err := f.Future.Ptr()
	return GPSPlannerPlan(p.Struct()), err
}

type UiNavigationEvent capnp.Struct

// UiNavigationEvent_TypeID is the unique identifier for the type UiNavigationEvent.
const UiNavigationEvent_TypeID = 0x90c8426c3eaddd3b

func NewUiNavigationEvent(s *capnp.Segment) (UiNavigationEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UiNavigationEvent(st), err
}

func NewRootUiNavigationEvent(s *capnp.Segment) (UiNavigationEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UiNavigationEvent(st), err
}

func ReadRootUiNavigationEvent(msg *capnp.Message) (UiNavigationEvent, error) {
	root, err := msg.Root()
	return UiNavigationEvent(root.Struct()), err
}

func (s UiNavigationEvent) String() string {
	str, _ := text.Marshal(0x90c8426c3eaddd3b, capnp.Struct(s))
	return str
}

func (s UiNavigationEvent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UiNavigationEvent) DecodeFromPtr(p capnp.Ptr) UiNavigationEvent {
	return UiNavigationEvent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UiNavigationEvent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UiNavigationEvent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UiNavigationEvent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UiNavigationEvent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UiNavigationEvent) Type() UiNavigationEvent_Type {
	return UiNavigationEvent_Type(capnp.Struct(s).Uint16(0))
}

func (s UiNavigationEvent) SetType(v UiNavigationEvent_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s UiNavigationEvent) Status() UiNavigationEvent_Status {
	return UiNavigationEvent_Status(capnp.Struct(s).Uint16(2))
}

func (s UiNavigationEvent) SetStatus(v UiNavigationEvent_Status) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s UiNavigationEvent) DistanceTo() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s UiNavigationEvent) SetDistanceTo(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s UiNavigationEvent) EndRoadPointDEPRECATED() (ECEFPointDEPRECATED, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ECEFPointDEPRECATED(p.Struct()), err
}

func (s UiNavigationEvent) HasEndRoadPointDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UiNavigationEvent) SetEndRoadPointDEPRECATED(v ECEFPointDEPRECATED) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEndRoadPointDEPRECATED sets the endRoadPointDEPRECATED field to a newly
// allocated ECEFPointDEPRECATED struct, preferring placement in s's segment.
func (s UiNavigationEvent) NewEndRoadPointDEPRECATED() (ECEFPointDEPRECATED, error) {
	ss, err := NewECEFPointDEPRECATED(capnp.Struct(s).Segment())
	if err != nil {
		return ECEFPointDEPRECATED{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s UiNavigationEvent) EndRoadPoint() (ECEFPoint, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ECEFPoint(p.Struct()), err
}

func (s UiNavigationEvent) HasEndRoadPoint() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UiNavigationEvent) SetEndRoadPoint(v ECEFPoint) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndRoadPoint sets the endRoadPoint field to a newly
// allocated ECEFPoint struct, preferring placement in s's segment.
func (s UiNavigationEvent) NewEndRoadPoint() (ECEFPoint, error) {
	ss, err := NewECEFPoint(capnp.Struct(s).Segment())
	if err != nil {
		return ECEFPoint{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// UiNavigationEvent_List is a list of UiNavigationEvent.
type UiNavigationEvent_List = capnp.StructList[UiNavigationEvent]

// NewUiNavigationEvent creates a new list of UiNavigationEvent.
func NewUiNavigationEvent_List(s *capnp.Segment, sz int32) (UiNavigationEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[UiNavigationEvent](l), err
}

// UiNavigationEvent_Future is a wrapper for a UiNavigationEvent promised by a client call.
type UiNavigationEvent_Future struct{ *capnp.Future }

func (f UiNavigationEvent_Future) Struct() (UiNavigationEvent, error) {
	p, err := f.Future.Ptr()
	return UiNavigationEvent(p.Struct()), err
}
func (p UiNavigationEvent_Future) EndRoadPointDEPRECATED() ECEFPointDEPRECATED_Future {
	return ECEFPointDEPRECATED_Future{Future: p.Future.Field(0, nil)}
}
func (p UiNavigationEvent_Future) EndRoadPoint() ECEFPoint_Future {
	return ECEFPoint_Future{Future: p.Future.Field(1, nil)}
}

type UiNavigationEvent_Type uint16

// UiNavigationEvent_Type_TypeID is the unique identifier for the type UiNavigationEvent_Type.
const UiNavigationEvent_Type_TypeID = 0xe8db07dcf8fcea05

// Values of UiNavigationEvent_Type.
const (
	UiNavigationEvent_Type_none            UiNavigationEvent_Type = 0
	UiNavigationEvent_Type_laneChangeLeft  UiNavigationEvent_Type = 1
	UiNavigationEvent_Type_laneChangeRight UiNavigationEvent_Type = 2
	UiNavigationEvent_Type_mergeLeft       UiNavigationEvent_Type = 3
	UiNavigationEvent_Type_mergeRight      UiNavigationEvent_Type = 4
	UiNavigationEvent_Type_turnLeft        UiNavigationEvent_Type = 5
	UiNavigationEvent_Type_turnRight       UiNavigationEvent_Type = 6
)

// String returns the enum's constant name.
func (c UiNavigationEvent_Type) String() string {
	switch c {
	case UiNavigationEvent_Type_none:
		return "none"
	case UiNavigationEvent_Type_laneChangeLeft:
		return "laneChangeLeft"
	case UiNavigationEvent_Type_laneChangeRight:
		return "laneChangeRight"
	case UiNavigationEvent_Type_mergeLeft:
		return "mergeLeft"
	case UiNavigationEvent_Type_mergeRight:
		return "mergeRight"
	case UiNavigationEvent_Type_turnLeft:
		return "turnLeft"
	case UiNavigationEvent_Type_turnRight:
		return "turnRight"

	default:
		return ""
	}
}

// UiNavigationEvent_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UiNavigationEvent_TypeFromString(c string) UiNavigationEvent_Type {
	switch c {
	case "none":
		return UiNavigationEvent_Type_none
	case "laneChangeLeft":
		return UiNavigationEvent_Type_laneChangeLeft
	case "laneChangeRight":
		return UiNavigationEvent_Type_laneChangeRight
	case "mergeLeft":
		return UiNavigationEvent_Type_mergeLeft
	case "mergeRight":
		return UiNavigationEvent_Type_mergeRight
	case "turnLeft":
		return UiNavigationEvent_Type_turnLeft
	case "turnRight":
		return UiNavigationEvent_Type_turnRight

	default:
		return 0
	}
}

type UiNavigationEvent_Type_List = capnp.EnumList[UiNavigationEvent_Type]

func NewUiNavigationEvent_Type_List(s *capnp.Segment, sz int32) (UiNavigationEvent_Type_List, error) {
	return capnp.NewEnumList[UiNavigationEvent_Type](s, sz)
}

type UiNavigationEvent_Status uint16

// UiNavigationEvent_Status_TypeID is the unique identifier for the type UiNavigationEvent_Status.
const UiNavigationEvent_Status_TypeID = 0xb9aa88c75ef99a1f

// Values of UiNavigationEvent_Status.
const (
	UiNavigationEvent_Status_none        UiNavigationEvent_Status = 0
	UiNavigationEvent_Status_passive     UiNavigationEvent_Status = 1
	UiNavigationEvent_Status_approaching UiNavigationEvent_Status = 2
	UiNavigationEvent_Status_active      UiNavigationEvent_Status = 3
)

// String returns the enum's constant name.
func (c UiNavigationEvent_Status) String() string {
	switch c {
	case UiNavigationEvent_Status_none:
		return "none"
	case UiNavigationEvent_Status_passive:
		return "passive"
	case UiNavigationEvent_Status_approaching:
		return "approaching"
	case UiNavigationEvent_Status_active:
		return "active"

	default:
		return ""
	}
}

// UiNavigationEvent_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UiNavigationEvent_StatusFromString(c string) UiNavigationEvent_Status {
	switch c {
	case "none":
		return UiNavigationEvent_Status_none
	case "passive":
		return UiNavigationEvent_Status_passive
	case "approaching":
		return UiNavigationEvent_Status_approaching
	case "active":
		return UiNavigationEvent_Status_active

	default:
		return 0
	}
}

type UiNavigationEvent_Status_List = capnp.EnumList[UiNavigationEvent_Status]

func NewUiNavigationEvent_Status_List(s *capnp.Segment, sz int32) (UiNavigationEvent_Status_List, error) {
	return capnp.NewEnumList[UiNavigationEvent_Status](s, sz)
}

type LiveLocationData capnp.Struct

// LiveLocationData_TypeID is the unique identifier for the type LiveLocationData.
const LiveLocationData_TypeID = 0xb99b2bc7a57e8128

func NewLiveLocationData(s *capnp.Segment) (LiveLocationData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 7})
	return LiveLocationData(st), err
}

func NewRootLiveLocationData(s *capnp.Segment) (LiveLocationData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 7})
	return LiveLocationData(st), err
}

func ReadRootLiveLocationData(msg *capnp.Message) (LiveLocationData, error) {
	root, err := msg.Root()
	return LiveLocationData(root.Struct()), err
}

func (s LiveLocationData) String() string {
	str, _ := text.Marshal(0xb99b2bc7a57e8128, capnp.Struct(s))
	return str
}

func (s LiveLocationData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveLocationData) DecodeFromPtr(p capnp.Ptr) LiveLocationData {
	return LiveLocationData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveLocationData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveLocationData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveLocationData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveLocationData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveLocationData) Status() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s LiveLocationData) SetStatus(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s LiveLocationData) Lat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s LiveLocationData) SetLat(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s LiveLocationData) Lon() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s LiveLocationData) SetLon(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s LiveLocationData) Alt() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveLocationData) SetAlt(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveLocationData) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s LiveLocationData) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s LiveLocationData) VNED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData) HasVNED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveLocationData) SetVNED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVNED sets the vNED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData) NewVNED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveLocationData) Roll() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s LiveLocationData) SetRoll(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s LiveLocationData) Pitch() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s LiveLocationData) SetPitch(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s LiveLocationData) Heading() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s LiveLocationData) SetHeading(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s LiveLocationData) WanderAngle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s LiveLocationData) SetWanderAngle(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s LiveLocationData) TrackAngle() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s LiveLocationData) SetTrackAngle(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s LiveLocationData) Gyro() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData) HasGyro() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveLocationData) SetGyro(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewGyro sets the gyro field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData) NewGyro(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveLocationData) Accel() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData) HasAccel() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LiveLocationData) SetAccel(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAccel sets the accel field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData) NewAccel(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LiveLocationData) Accuracy() (LiveLocationData_Accuracy, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return LiveLocationData_Accuracy(p.Struct()), err
}

func (s LiveLocationData) HasAccuracy() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LiveLocationData) SetAccuracy(v LiveLocationData_Accuracy) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewAccuracy sets the accuracy field to a newly
// allocated LiveLocationData_Accuracy struct, preferring placement in s's segment.
func (s LiveLocationData) NewAccuracy() (LiveLocationData_Accuracy, error) {
	ss, err := NewLiveLocationData_Accuracy(capnp.Struct(s).Segment())
	if err != nil {
		return LiveLocationData_Accuracy{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s LiveLocationData) Source() LiveLocationData_SensorSource {
	return LiveLocationData_SensorSource(capnp.Struct(s).Uint16(2))
}

func (s LiveLocationData) SetSource(v LiveLocationData_SensorSource) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s LiveLocationData) FixMonoTime() uint64 {
	return capnp.Struct(s).Uint64(48)
}

func (s LiveLocationData) SetFixMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(48, v)
}

func (s LiveLocationData) GpsWeek() int32 {
	return int32(capnp.Struct(s).Uint32(56))
}

func (s LiveLocationData) SetGpsWeek(v int32) {
	capnp.Struct(s).SetUint32(56, uint32(v))
}

func (s LiveLocationData) TimeOfWeek() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s LiveLocationData) SetTimeOfWeek(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s LiveLocationData) PositionECEF() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s LiveLocationData) HasPositionECEF() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s LiveLocationData) SetPositionECEF(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPositionECEF sets the positionECEF field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s LiveLocationData) NewPositionECEF(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s LiveLocationData) PoseQuatECEF() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData) HasPoseQuatECEF() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s LiveLocationData) SetPoseQuatECEF(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewPoseQuatECEF sets the poseQuatECEF field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData) NewPoseQuatECEF(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s LiveLocationData) PitchCalibration() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s LiveLocationData) SetPitchCalibration(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s LiveLocationData) YawCalibration() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72))
}

func (s LiveLocationData) SetYawCalibration(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v))
}

func (s LiveLocationData) ImuFrame() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData) HasImuFrame() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s LiveLocationData) SetImuFrame(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewImuFrame sets the imuFrame field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData) NewImuFrame(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}

// LiveLocationData_List is a list of LiveLocationData.
type LiveLocationData_List = capnp.StructList[LiveLocationData]

// NewLiveLocationData creates a new list of LiveLocationData.
func NewLiveLocationData_List(s *capnp.Segment, sz int32) (LiveLocationData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 7}, sz)
	return capnp.StructList[LiveLocationData](l), err
}

// LiveLocationData_Future is a wrapper for a LiveLocationData promised by a client call.
type LiveLocationData_Future struct{ *capnp.Future }

func (f LiveLocationData_Future) Struct() (LiveLocationData, error) {
	p, err := f.Future.Ptr()
	return LiveLocationData(p.Struct()), err
}
func (p LiveLocationData_Future) Accuracy() LiveLocationData_Accuracy_Future {
	return LiveLocationData_Accuracy_Future{Future: p.Future.Field(3, nil)}
}

type LiveLocationData_Accuracy capnp.Struct

// LiveLocationData_Accuracy_TypeID is the unique identifier for the type LiveLocationData_Accuracy.
const LiveLocationData_Accuracy_TypeID = 0x943dc4625473b03f

func NewLiveLocationData_Accuracy(s *capnp.Segment) (LiveLocationData_Accuracy, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return LiveLocationData_Accuracy(st), err
}

func NewRootLiveLocationData_Accuracy(s *capnp.Segment) (LiveLocationData_Accuracy, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return LiveLocationData_Accuracy(st), err
}

func ReadRootLiveLocationData_Accuracy(msg *capnp.Message) (LiveLocationData_Accuracy, error) {
	root, err := msg.Root()
	return LiveLocationData_Accuracy(root.Struct()), err
}

func (s LiveLocationData_Accuracy) String() string {
	str, _ := text.Marshal(0x943dc4625473b03f, capnp.Struct(s))
	return str
}

func (s LiveLocationData_Accuracy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LiveLocationData_Accuracy) DecodeFromPtr(p capnp.Ptr) LiveLocationData_Accuracy {
	return LiveLocationData_Accuracy(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LiveLocationData_Accuracy) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LiveLocationData_Accuracy) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LiveLocationData_Accuracy) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LiveLocationData_Accuracy) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LiveLocationData_Accuracy) PNEDError() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData_Accuracy) HasPNEDError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LiveLocationData_Accuracy) SetPNEDError(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPNEDError sets the pNEDError field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData_Accuracy) NewPNEDError(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LiveLocationData_Accuracy) VNEDError() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s LiveLocationData_Accuracy) HasVNEDError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LiveLocationData_Accuracy) SetVNEDError(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVNEDError sets the vNEDError field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s LiveLocationData_Accuracy) NewVNEDError(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LiveLocationData_Accuracy) RollError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s LiveLocationData_Accuracy) SetRollError(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s LiveLocationData_Accuracy) PitchError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s LiveLocationData_Accuracy) SetPitchError(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s LiveLocationData_Accuracy) HeadingError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s LiveLocationData_Accuracy) SetHeadingError(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s LiveLocationData_Accuracy) EllipsoidSemiMajorError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s LiveLocationData_Accuracy) SetEllipsoidSemiMajorError(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s LiveLocationData_Accuracy) EllipsoidSemiMinorError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s LiveLocationData_Accuracy) SetEllipsoidSemiMinorError(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s LiveLocationData_Accuracy) EllipsoidOrientationError() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s LiveLocationData_Accuracy) SetEllipsoidOrientationError(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

// LiveLocationData_Accuracy_List is a list of LiveLocationData_Accuracy.
type LiveLocationData_Accuracy_List = capnp.StructList[LiveLocationData_Accuracy]

// NewLiveLocationData_Accuracy creates a new list of LiveLocationData_Accuracy.
func NewLiveLocationData_Accuracy_List(s *capnp.Segment, sz int32) (LiveLocationData_Accuracy_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[LiveLocationData_Accuracy](l), err
}

// LiveLocationData_Accuracy_Future is a wrapper for a LiveLocationData_Accuracy promised by a client call.
type LiveLocationData_Accuracy_Future struct{ *capnp.Future }

func (f LiveLocationData_Accuracy_Future) Struct() (LiveLocationData_Accuracy, error) {
	p, err := f.Future.Ptr()
	return LiveLocationData_Accuracy(p.Struct()), err
}

type LiveLocationData_SensorSource uint16

// LiveLocationData_SensorSource_TypeID is the unique identifier for the type LiveLocationData_SensorSource.
const LiveLocationData_SensorSource_TypeID = 0xc871d3cc252af657

// Values of LiveLocationData_SensorSource.
const (
	LiveLocationData_SensorSource_applanix LiveLocationData_SensorSource = 0
	LiveLocationData_SensorSource_kalman   LiveLocationData_SensorSource = 1
	LiveLocationData_SensorSource_orbslam  LiveLocationData_SensorSource = 2
	LiveLocationData_SensorSource_timing   LiveLocationData_SensorSource = 3
	LiveLocationData_SensorSource_dummy    LiveLocationData_SensorSource = 4
)

// String returns the enum's constant name.
func (c LiveLocationData_SensorSource) String() string {
	switch c {
	case LiveLocationData_SensorSource_applanix:
		return "applanix"
	case LiveLocationData_SensorSource_kalman:
		return "kalman"
	case LiveLocationData_SensorSource_orbslam:
		return "orbslam"
	case LiveLocationData_SensorSource_timing:
		return "timing"
	case LiveLocationData_SensorSource_dummy:
		return "dummy"

	default:
		return ""
	}
}

// LiveLocationData_SensorSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func LiveLocationData_SensorSourceFromString(c string) LiveLocationData_SensorSource {
	switch c {
	case "applanix":
		return LiveLocationData_SensorSource_applanix
	case "kalman":
		return LiveLocationData_SensorSource_kalman
	case "orbslam":
		return LiveLocationData_SensorSource_orbslam
	case "timing":
		return LiveLocationData_SensorSource_timing
	case "dummy":
		return LiveLocationData_SensorSource_dummy

	default:
		return 0
	}
}

type LiveLocationData_SensorSource_List = capnp.EnumList[LiveLocationData_SensorSource]

func NewLiveLocationData_SensorSource_List(s *capnp.Segment, sz int32) (LiveLocationData_SensorSource_List, error) {
	return capnp.NewEnumList[LiveLocationData_SensorSource](s, sz)
}

type OrbOdometry capnp.Struct

// OrbOdometry_TypeID is the unique identifier for the type OrbOdometry.
const OrbOdometry_TypeID = 0xd7700859ed1f5b76

func NewOrbOdometry(s *capnp.Segment) (OrbOdometry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return OrbOdometry(st), err
}

func NewRootOrbOdometry(s *capnp.Segment) (OrbOdometry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2})
	return OrbOdometry(st), err
}

func ReadRootOrbOdometry(msg *capnp.Message) (OrbOdometry, error) {
	root, err := msg.Root()
	return OrbOdometry(root.Struct()), err
}

func (s OrbOdometry) String() string {
	str, _ := text.Marshal(0xd7700859ed1f5b76, capnp.Struct(s))
	return str
}

func (s OrbOdometry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbOdometry) DecodeFromPtr(p capnp.Ptr) OrbOdometry {
	return OrbOdometry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbOdometry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbOdometry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbOdometry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbOdometry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbOdometry) StartMonoTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbOdometry) SetStartMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbOdometry) EndMonoTime() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s OrbOdometry) SetEndMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s OrbOdometry) F() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s OrbOdometry) HasF() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrbOdometry) SetF(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewF sets the f field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s OrbOdometry) NewF(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s OrbOdometry) Err() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s OrbOdometry) SetErr(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s OrbOdometry) Inliers() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s OrbOdometry) SetInliers(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s OrbOdometry) Matches() (capnp.Int16List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int16List(p.List()), err
}

func (s OrbOdometry) HasMatches() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OrbOdometry) SetMatches(v capnp.Int16List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMatches sets the matches field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s OrbOdometry) NewMatches(n int32) (capnp.Int16List, error) {
	l, err := capnp.NewInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// OrbOdometry_List is a list of OrbOdometry.
type OrbOdometry_List = capnp.StructList[OrbOdometry]

// NewOrbOdometry creates a new list of OrbOdometry.
func NewOrbOdometry_List(s *capnp.Segment, sz int32) (OrbOdometry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 2}, sz)
	return capnp.StructList[OrbOdometry](l), err
}

// OrbOdometry_Future is a wrapper for a OrbOdometry promised by a client call.
type OrbOdometry_Future struct{ *capnp.Future }

func (f OrbOdometry_Future) Struct() (OrbOdometry, error) {
	p, err := f.Future.Ptr()
	return OrbOdometry(p.Struct()), err
}

type OrbFeatures capnp.Struct

// OrbFeatures_TypeID is the unique identifier for the type OrbFeatures.
const OrbFeatures_TypeID = 0xcd60164a8a0159ef

func NewOrbFeatures(s *capnp.Segment) (OrbFeatures, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return OrbFeatures(st), err
}

func NewRootOrbFeatures(s *capnp.Segment) (OrbFeatures, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return OrbFeatures(st), err
}

func ReadRootOrbFeatures(msg *capnp.Message) (OrbFeatures, error) {
	root, err := msg.Root()
	return OrbFeatures(root.Struct()), err
}

func (s OrbFeatures) String() string {
	str, _ := text.Marshal(0xcd60164a8a0159ef, capnp.Struct(s))
	return str
}

func (s OrbFeatures) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbFeatures) DecodeFromPtr(p capnp.Ptr) OrbFeatures {
	return OrbFeatures(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbFeatures) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbFeatures) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbFeatures) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbFeatures) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbFeatures) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbFeatures) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbFeatures) Xs() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s OrbFeatures) HasXs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrbFeatures) SetXs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s OrbFeatures) NewXs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s OrbFeatures) Ys() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s OrbFeatures) HasYs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OrbFeatures) SetYs(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s OrbFeatures) NewYs(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s OrbFeatures) Descriptors() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s OrbFeatures) HasDescriptors() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s OrbFeatures) SetDescriptors(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s OrbFeatures) Octaves() (capnp.Int8List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Int8List(p.List()), err
}

func (s OrbFeatures) HasOctaves() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s OrbFeatures) SetOctaves(v capnp.Int8List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOctaves sets the octaves field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s OrbFeatures) NewOctaves(n int32) (capnp.Int8List, error) {
	l, err := capnp.NewInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s OrbFeatures) TimestampLastEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s OrbFeatures) SetTimestampLastEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s OrbFeatures) Matches() (capnp.Int16List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Int16List(p.List()), err
}

func (s OrbFeatures) HasMatches() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s OrbFeatures) SetMatches(v capnp.Int16List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewMatches sets the matches field to a newly
// allocated capnp.Int16List, preferring placement in s's segment.
func (s OrbFeatures) NewMatches(n int32) (capnp.Int16List, error) {
	l, err := capnp.NewInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int16List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// OrbFeatures_List is a list of OrbFeatures.
type OrbFeatures_List = capnp.StructList[OrbFeatures]

// NewOrbFeatures creates a new list of OrbFeatures.
func NewOrbFeatures_List(s *capnp.Segment, sz int32) (OrbFeatures_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[OrbFeatures](l), err
}

// OrbFeatures_Future is a wrapper for a OrbFeatures promised by a client call.
type OrbFeatures_Future struct{ *capnp.Future }

func (f OrbFeatures_Future) Struct() (OrbFeatures, error) {
	p, err := f.Future.Ptr()
	return OrbFeatures(p.Struct()), err
}

type OrbFeaturesSummary capnp.Struct

// OrbFeaturesSummary_TypeID is the unique identifier for the type OrbFeaturesSummary.
const OrbFeaturesSummary_TypeID = 0xd500d30c5803fa4f

func NewOrbFeaturesSummary(s *capnp.Segment) (OrbFeaturesSummary, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return OrbFeaturesSummary(st), err
}

func NewRootOrbFeaturesSummary(s *capnp.Segment) (OrbFeaturesSummary, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return OrbFeaturesSummary(st), err
}

func ReadRootOrbFeaturesSummary(msg *capnp.Message) (OrbFeaturesSummary, error) {
	root, err := msg.Root()
	return OrbFeaturesSummary(root.Struct()), err
}

func (s OrbFeaturesSummary) String() string {
	str, _ := text.Marshal(0xd500d30c5803fa4f, capnp.Struct(s))
	return str
}

func (s OrbFeaturesSummary) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbFeaturesSummary) DecodeFromPtr(p capnp.Ptr) OrbFeaturesSummary {
	return OrbFeaturesSummary(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbFeaturesSummary) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbFeaturesSummary) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbFeaturesSummary) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbFeaturesSummary) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbFeaturesSummary) TimestampEof() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbFeaturesSummary) SetTimestampEof(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbFeaturesSummary) TimestampLastEof() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s OrbFeaturesSummary) SetTimestampLastEof(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s OrbFeaturesSummary) FeatureCount() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s OrbFeaturesSummary) SetFeatureCount(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s OrbFeaturesSummary) MatchCount() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s OrbFeaturesSummary) SetMatchCount(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s OrbFeaturesSummary) ComputeNs() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s OrbFeaturesSummary) SetComputeNs(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

// OrbFeaturesSummary_List is a list of OrbFeaturesSummary.
type OrbFeaturesSummary_List = capnp.StructList[OrbFeaturesSummary]

// NewOrbFeaturesSummary creates a new list of OrbFeaturesSummary.
func NewOrbFeaturesSummary_List(s *capnp.Segment, sz int32) (OrbFeaturesSummary_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[OrbFeaturesSummary](l), err
}

// OrbFeaturesSummary_Future is a wrapper for a OrbFeaturesSummary promised by a client call.
type OrbFeaturesSummary_Future struct{ *capnp.Future }

func (f OrbFeaturesSummary_Future) Struct() (OrbFeaturesSummary, error) {
	p, err := f.Future.Ptr()
	return OrbFeaturesSummary(p.Struct()), err
}

type OrbKeyFrame capnp.Struct

// OrbKeyFrame_TypeID is the unique identifier for the type OrbKeyFrame.
const OrbKeyFrame_TypeID = 0xc8233c0345e27e24

func NewOrbKeyFrame(s *capnp.Segment) (OrbKeyFrame, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OrbKeyFrame(st), err
}

func NewRootOrbKeyFrame(s *capnp.Segment) (OrbKeyFrame, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OrbKeyFrame(st), err
}

func ReadRootOrbKeyFrame(msg *capnp.Message) (OrbKeyFrame, error) {
	root, err := msg.Root()
	return OrbKeyFrame(root.Struct()), err
}

func (s OrbKeyFrame) String() string {
	str, _ := text.Marshal(0xc8233c0345e27e24, capnp.Struct(s))
	return str
}

func (s OrbKeyFrame) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbKeyFrame) DecodeFromPtr(p capnp.Ptr) OrbKeyFrame {
	return OrbKeyFrame(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbKeyFrame) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbKeyFrame) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbKeyFrame) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbKeyFrame) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbKeyFrame) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbKeyFrame) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbKeyFrame) Pos() (ECEFPoint, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ECEFPoint(p.Struct()), err
}

func (s OrbKeyFrame) HasPos() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrbKeyFrame) SetPos(v ECEFPoint) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPos sets the pos field to a newly
// allocated ECEFPoint struct, preferring placement in s's segment.
func (s OrbKeyFrame) NewPos() (ECEFPoint, error) {
	ss, err := NewECEFPoint(capnp.Struct(s).Segment())
	if err != nil {
		return ECEFPoint{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s OrbKeyFrame) Dpos() (ECEFPoint_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return ECEFPoint_List(p.List()), err
}

func (s OrbKeyFrame) HasDpos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OrbKeyFrame) SetDpos(v ECEFPoint_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewDpos sets the dpos field to a newly
// allocated ECEFPoint_List, preferring placement in s's segment.
func (s OrbKeyFrame) NewDpos(n int32) (ECEFPoint_List, error) {
	l, err := NewECEFPoint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ECEFPoint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s OrbKeyFrame) Descriptors() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s OrbKeyFrame) HasDescriptors() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s OrbKeyFrame) SetDescriptors(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

// OrbKeyFrame_List is a list of OrbKeyFrame.
type OrbKeyFrame_List = capnp.StructList[OrbKeyFrame]

// NewOrbKeyFrame creates a new list of OrbKeyFrame.
func NewOrbKeyFrame_List(s *capnp.Segment, sz int32) (OrbKeyFrame_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[OrbKeyFrame](l), err
}

// OrbKeyFrame_Future is a wrapper for a OrbKeyFrame promised by a client call.
type OrbKeyFrame_Future struct{ *capnp.Future }

func (f OrbKeyFrame_Future) Struct() (OrbKeyFrame, error) {
	p, err := f.Future.Ptr()
	return OrbKeyFrame(p.Struct()), err
}
func (p OrbKeyFrame_Future) Pos() ECEFPoint_Future {
	return ECEFPoint_Future{Future: p.Future.Field(0, nil)}
}

type KalmanOdometry capnp.Struct

// KalmanOdometry_TypeID is the unique identifier for the type KalmanOdometry.
const KalmanOdometry_TypeID = 0x92e21bb7ea38793a

func NewKalmanOdometry(s *capnp.Segment) (KalmanOdometry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return KalmanOdometry(st), err
}

func NewRootKalmanOdometry(s *capnp.Segment) (KalmanOdometry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return KalmanOdometry(st), err
}

func ReadRootKalmanOdometry(msg *capnp.Message) (KalmanOdometry, error) {
	root, err := msg.Root()
	return KalmanOdometry(root.Struct()), err
}

func (s KalmanOdometry) String() string {
	str, _ := text.Marshal(0x92e21bb7ea38793a, capnp.Struct(s))
	return str
}

func (s KalmanOdometry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (KalmanOdometry) DecodeFromPtr(p capnp.Ptr) KalmanOdometry {
	return KalmanOdometry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s KalmanOdometry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s KalmanOdometry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s KalmanOdometry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s KalmanOdometry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s KalmanOdometry) Trans() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s KalmanOdometry) HasTrans() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s KalmanOdometry) SetTrans(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTrans sets the trans field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s KalmanOdometry) NewTrans(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s KalmanOdometry) Rot() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s KalmanOdometry) HasRot() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s KalmanOdometry) SetRot(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRot sets the rot field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s KalmanOdometry) NewRot(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s KalmanOdometry) TransStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s KalmanOdometry) HasTransStd() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s KalmanOdometry) SetTransStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTransStd sets the transStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s KalmanOdometry) NewTransStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s KalmanOdometry) RotStd() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s KalmanOdometry) HasRotStd() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s KalmanOdometry) SetRotStd(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewRotStd sets the rotStd field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s KalmanOdometry) NewRotStd(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// KalmanOdometry_List is a list of KalmanOdometry.
type KalmanOdometry_List = capnp.StructList[KalmanOdometry]

// NewKalmanOdometry creates a new list of KalmanOdometry.
func NewKalmanOdometry_List(s *capnp.Segment, sz int32) (KalmanOdometry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[KalmanOdometry](l), err
}

// KalmanOdometry_Future is a wrapper for a KalmanOdometry promised by a client call.
type KalmanOdometry_Future struct{ *capnp.Future }

func (f KalmanOdometry_Future) Struct() (KalmanOdometry, error) {
	p, err := f.Future.Ptr()
	return KalmanOdometry(p.Struct()), err
}

type OrbObservation capnp.Struct

// OrbObservation_TypeID is the unique identifier for the type OrbObservation.
const OrbObservation_TypeID = 0x9b326d4e436afec7

func NewOrbObservation(s *capnp.Segment) (OrbObservation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OrbObservation(st), err
}

func NewRootOrbObservation(s *capnp.Segment) (OrbObservation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return OrbObservation(st), err
}

func ReadRootOrbObservation(msg *capnp.Message) (OrbObservation, error) {
	root, err := msg.Root()
	return OrbObservation(root.Struct()), err
}

func (s OrbObservation) String() string {
	str, _ := text.Marshal(0x9b326d4e436afec7, capnp.Struct(s))
	return str
}

func (s OrbObservation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (OrbObservation) DecodeFromPtr(p capnp.Ptr) OrbObservation {
	return OrbObservation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s OrbObservation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s OrbObservation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s OrbObservation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s OrbObservation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s OrbObservation) ObservationMonoTime() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s OrbObservation) SetObservationMonoTime(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s OrbObservation) NormalizedCoordinates() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s OrbObservation) HasNormalizedCoordinates() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s OrbObservation) SetNormalizedCoordinates(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNormalizedCoordinates sets the normalizedCoordinates field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s OrbObservation) NewNormalizedCoordinates(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s OrbObservation) LocationECEF() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s OrbObservation) HasLocationECEF() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s OrbObservation) SetLocationECEF(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewLocationECEF sets the locationECEF field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s OrbObservation) NewLocationECEF(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s OrbObservation) MatchDistance() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s OrbObservation) SetMatchDistance(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

// OrbObservation_List is a list of OrbObservation.
type OrbObservation_List = capnp.StructList[OrbObservation]

// NewOrbObservation creates a new list of OrbObservation.
func NewOrbObservation_List(s *capnp.Segment, sz int32) (OrbObservation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[OrbObservation](l), err
}

// OrbObservation_Future is a wrapper for a OrbObservation promised by a client call.
type OrbObservation_Future struct{ *capnp.Future }

func (f OrbObservation_Future) Struct() (OrbObservation, error) {
	p, err := f.Future.Ptr()
	return OrbObservation(p.Struct()), err
}

type CalibrationFeatures capnp.Struct

// CalibrationFeatures_TypeID is the unique identifier for the type CalibrationFeatures.
const CalibrationFeatures_TypeID = 0x8fdfadb254ea867a

func NewCalibrationFeatures(s *capnp.Segment) (CalibrationFeatures, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CalibrationFeatures(st), err
}

func NewRootCalibrationFeatures(s *capnp.Segment) (CalibrationFeatures, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return CalibrationFeatures(st), err
}

func ReadRootCalibrationFeatures(msg *capnp.Message) (CalibrationFeatures, error) {
	root, err := msg.Root()
	return CalibrationFeatures(root.Struct()), err
}

func (s CalibrationFeatures) String() string {
	str, _ := text.Marshal(0x8fdfadb254ea867a, capnp.Struct(s))
	return str
}

func (s CalibrationFeatures) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CalibrationFeatures) DecodeFromPtr(p capnp.Ptr) CalibrationFeatures {
	return CalibrationFeatures(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CalibrationFeatures) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CalibrationFeatures) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CalibrationFeatures) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CalibrationFeatures) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CalibrationFeatures) FrameId() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s CalibrationFeatures) SetFrameId(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s CalibrationFeatures) P0() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CalibrationFeatures) HasP0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CalibrationFeatures) SetP0(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewP0 sets the p0 field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CalibrationFeatures) NewP0(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CalibrationFeatures) P1() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CalibrationFeatures) HasP1() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CalibrationFeatures) SetP1(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewP1 sets the p1 field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CalibrationFeatures) NewP1(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CalibrationFeatures) Status() (capnp.Int8List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Int8List(p.List()), err
}

func (s CalibrationFeatures) HasStatus() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CalibrationFeatures) SetStatus(v capnp.Int8List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewStatus sets the status field to a newly
// allocated capnp.Int8List, preferring placement in s's segment.
func (s CalibrationFeatures) NewStatus(n int32) (capnp.Int8List, error) {
	l, err := capnp.NewInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int8List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// CalibrationFeatures_List is a list of CalibrationFeatures.
type CalibrationFeatures_List = capnp.StructList[CalibrationFeatures]

// NewCalibrationFeatures creates a new list of CalibrationFeatures.
func NewCalibrationFeatures_List(s *capnp.Segment, sz int32) (CalibrationFeatures_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[CalibrationFeatures](l), err
}

// CalibrationFeatures_Future is a wrapper for a CalibrationFeatures promised by a client call.
type CalibrationFeatures_Future struct{ *capnp.Future }

func (f CalibrationFeatures_Future) Struct() (CalibrationFeatures, error) {
	p, err := f.Future.Ptr()
	return CalibrationFeatures(p.Struct()), err
}

type NavStatus capnp.Struct

// NavStatus_TypeID is the unique identifier for the type NavStatus.
const NavStatus_TypeID = 0xbd8822120928120c

func NewNavStatus(s *capnp.Segment) (NavStatus, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavStatus(st), err
}

func NewRootNavStatus(s *capnp.Segment) (NavStatus, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavStatus(st), err
}

func ReadRootNavStatus(msg *capnp.Message) (NavStatus, error) {
	root, err := msg.Root()
	return NavStatus(root.Struct()), err
}

func (s NavStatus) String() string {
	str, _ := text.Marshal(0xbd8822120928120c, capnp.Struct(s))
	return str
}

func (s NavStatus) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavStatus) DecodeFromPtr(p capnp.Ptr) NavStatus {
	return NavStatus(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavStatus) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavStatus) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavStatus) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavStatus) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavStatus) IsNavigating() bool {
	return capnp.Struct(s).Bit(0)
}

func (s NavStatus) SetIsNavigating(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s NavStatus) CurrentAddress() (NavStatus_Address, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NavStatus_Address(p.Struct()), err
}

func (s NavStatus) HasCurrentAddress() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavStatus) SetCurrentAddress(v NavStatus_Address) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCurrentAddress sets the currentAddress field to a newly
// allocated NavStatus_Address struct, preferring placement in s's segment.
func (s NavStatus) NewCurrentAddress() (NavStatus_Address, error) {
	ss, err := NewNavStatus_Address(capnp.Struct(s).Segment())
	if err != nil {
		return NavStatus_Address{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// NavStatus_List is a list of NavStatus.
type NavStatus_List = capnp.StructList[NavStatus]

// NewNavStatus creates a new list of NavStatus.
func NewNavStatus_List(s *capnp.Segment, sz int32) (NavStatus_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NavStatus](l), err
}

// NavStatus_Future is a wrapper for a NavStatus promised by a client call.
type NavStatus_Future struct{ *capnp.Future }

func (f NavStatus_Future) Struct() (NavStatus, error) {
	p, err := f.Future.Ptr()
	return NavStatus(p.Struct()), err
}
func (p NavStatus_Future) CurrentAddress() NavStatus_Address_Future {
	return NavStatus_Address_Future{Future: p.Future.Field(0, nil)}
}

type NavStatus_Address capnp.Struct

// NavStatus_Address_TypeID is the unique identifier for the type NavStatus_Address.
const NavStatus_Address_TypeID = 0xce7cd672cacc7814

func NewNavStatus_Address(s *capnp.Segment) (NavStatus_Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return NavStatus_Address(st), err
}

func NewRootNavStatus_Address(s *capnp.Segment) (NavStatus_Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return NavStatus_Address(st), err
}

func ReadRootNavStatus_Address(msg *capnp.Message) (NavStatus_Address, error) {
	root, err := msg.Root()
	return NavStatus_Address(root.Struct()), err
}

func (s NavStatus_Address) String() string {
	str, _ := text.Marshal(0xce7cd672cacc7814, capnp.Struct(s))
	return str
}

func (s NavStatus_Address) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavStatus_Address) DecodeFromPtr(p capnp.Ptr) NavStatus_Address {
	return NavStatus_Address(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavStatus_Address) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavStatus_Address) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavStatus_Address) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavStatus_Address) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavStatus_Address) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s NavStatus_Address) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavStatus_Address) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s NavStatus_Address) Lat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NavStatus_Address) SetLat(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NavStatus_Address) Lng() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NavStatus_Address) SetLng(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NavStatus_Address) House() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s NavStatus_Address) HasHouse() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavStatus_Address) HouseBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetHouse(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s NavStatus_Address) Address() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s NavStatus_Address) HasAddress() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NavStatus_Address) AddressBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetAddress(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s NavStatus_Address) Street() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s NavStatus_Address) HasStreet() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s NavStatus_Address) StreetBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetStreet(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s NavStatus_Address) City() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s NavStatus_Address) HasCity() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s NavStatus_Address) CityBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetCity(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s NavStatus_Address) State() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s NavStatus_Address) HasState() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s NavStatus_Address) StateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetState(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s NavStatus_Address) Country() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s NavStatus_Address) HasCountry() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s NavStatus_Address) CountryBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s NavStatus_Address) SetCountry(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

// NavStatus_Address_List is a list of NavStatus_Address.
type NavStatus_Address_List = capnp.StructList[NavStatus_Address]

// NewNavStatus_Address creates a new list of NavStatus_Address.
func NewNavStatus_Address_List(s *capnp.Segment, sz int32) (NavStatus_Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return capnp.StructList[NavStatus_Address](l), err
}

// NavStatus_Address_Future is a wrapper for a NavStatus_Address promised by a client call.
type NavStatus_Address_Future struct{ *capnp.Future }

func (f NavStatus_Address_Future) Struct() (NavStatus_Address, error) {
	p, err := f.Future.Ptr()
	return NavStatus_Address(p.Struct()), err
}

type NavUpdate capnp.Struct

// NavUpdate_TypeID is the unique identifier for the type NavUpdate.
const NavUpdate_TypeID = 0xdb98be6565516acb

func NewNavUpdate(s *capnp.Segment) (NavUpdate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavUpdate(st), err
}

func NewRootNavUpdate(s *capnp.Segment) (NavUpdate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NavUpdate(st), err
}

func ReadRootNavUpdate(msg *capnp.Message) (NavUpdate, error) {
	root, err := msg.Root()
	return NavUpdate(root.Struct()), err
}

func (s NavUpdate) String() string {
	str, _ := text.Marshal(0xdb98be6565516acb, capnp.Struct(s))
	return str
}

func (s NavUpdate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavUpdate) DecodeFromPtr(p capnp.Ptr) NavUpdate {
	return NavUpdate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavUpdate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavUpdate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavUpdate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavUpdate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavUpdate) IsNavigating() bool {
	return capnp.Struct(s).Bit(0)
}

func (s NavUpdate) SetIsNavigating(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s NavUpdate) CurSegment() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NavUpdate) SetCurSegment(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NavUpdate) Segments() (NavUpdate_Segment_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NavUpdate_Segment_List(p.List()), err
}

func (s NavUpdate) HasSegments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavUpdate) SetSegments(v NavUpdate_Segment_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSegments sets the segments field to a newly
// allocated NavUpdate_Segment_List, preferring placement in s's segment.
func (s NavUpdate) NewSegments(n int32) (NavUpdate_Segment_List, error) {
	l, err := NewNavUpdate_Segment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavUpdate_Segment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// NavUpdate_List is a list of NavUpdate.
type NavUpdate_List = capnp.StructList[NavUpdate]

// NewNavUpdate creates a new list of NavUpdate.
func NewNavUpdate_List(s *capnp.Segment, sz int32) (NavUpdate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NavUpdate](l), err
}

// NavUpdate_Future is a wrapper for a NavUpdate promised by a client call.
type NavUpdate_Future struct{ *capnp.Future }

func (f NavUpdate_Future) Struct() (NavUpdate, error) {
	p, err := f.Future.Ptr()
	return NavUpdate(p.Struct()), err
}

type NavUpdate_LatLng capnp.Struct

// NavUpdate_LatLng_TypeID is the unique identifier for the type NavUpdate_LatLng.
const NavUpdate_LatLng_TypeID = 0x9eaef9187cadbb9b

func NewNavUpdate_LatLng(s *capnp.Segment) (NavUpdate_LatLng, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return NavUpdate_LatLng(st), err
}

func NewRootNavUpdate_LatLng(s *capnp.Segment) (NavUpdate_LatLng, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return NavUpdate_LatLng(st), err
}

func ReadRootNavUpdate_LatLng(msg *capnp.Message) (NavUpdate_LatLng, error) {
	root, err := msg.Root()
	return NavUpdate_LatLng(root.Struct()), err
}

func (s NavUpdate_LatLng) String() string {
	str, _ := text.Marshal(0x9eaef9187cadbb9b, capnp.Struct(s))
	return str
}

func (s NavUpdate_LatLng) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavUpdate_LatLng) DecodeFromPtr(p capnp.Ptr) NavUpdate_LatLng {
	return NavUpdate_LatLng(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavUpdate_LatLng) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavUpdate_LatLng) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavUpdate_LatLng) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavUpdate_LatLng) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavUpdate_LatLng) Lat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NavUpdate_LatLng) SetLat(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NavUpdate_LatLng) Lng() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NavUpdate_LatLng) SetLng(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// NavUpdate_LatLng_List is a list of NavUpdate_LatLng.
type NavUpdate_LatLng_List = capnp.StructList[NavUpdate_LatLng]

// NewNavUpdate_LatLng creates a new list of NavUpdate_LatLng.
func NewNavUpdate_LatLng_List(s *capnp.Segment, sz int32) (NavUpdate_LatLng_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[NavUpdate_LatLng](l), err
}

// NavUpdate_LatLng_Future is a wrapper for a NavUpdate_LatLng promised by a client call.
type NavUpdate_LatLng_Future struct{ *capnp.Future }

func (f NavUpdate_LatLng_Future) Struct() (NavUpdate_LatLng, error) {
	p, err := f.Future.Ptr()
	return NavUpdate_LatLng(p.Struct()), err
}

type NavUpdate_Segment capnp.Struct

// NavUpdate_Segment_TypeID is the unique identifier for the type NavUpdate_Segment.
const NavUpdate_Segment_TypeID = 0xa5b39b4fc4d7da3f

func NewNavUpdate_Segment(s *capnp.Segment) (NavUpdate_Segment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return NavUpdate_Segment(st), err
}

func NewRootNavUpdate_Segment(s *capnp.Segment) (NavUpdate_Segment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3})
	return NavUpdate_Segment(st), err
}

func ReadRootNavUpdate_Segment(msg *capnp.Message) (NavUpdate_Segment, error) {
	root, err := msg.Root()
	return NavUpdate_Segment(root.Struct()), err
}

func (s NavUpdate_Segment) String() string {
	str, _ := text.Marshal(0xa5b39b4fc4d7da3f, capnp.Struct(s))
	return str
}

func (s NavUpdate_Segment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NavUpdate_Segment) DecodeFromPtr(p capnp.Ptr) NavUpdate_Segment {
	return NavUpdate_Segment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NavUpdate_Segment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NavUpdate_Segment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NavUpdate_Segment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NavUpdate_Segment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NavUpdate_Segment) From() (NavUpdate_LatLng, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NavUpdate_LatLng(p.Struct()), err
}

func (s NavUpdate_Segment) HasFrom() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NavUpdate_Segment) SetFrom(v NavUpdate_LatLng) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrom sets the from field to a newly
// allocated NavUpdate_LatLng struct, preferring placement in s's segment.
func (s NavUpdate_Segment) NewFrom() (NavUpdate_LatLng, error) {
	ss, err := NewNavUpdate_LatLng(capnp.Struct(s).Segment())
	if err != nil {
		return NavUpdate_LatLng{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s NavUpdate_Segment) To() (NavUpdate_LatLng, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return NavUpdate_LatLng(p.Struct()), err
}

func (s NavUpdate_Segment) HasTo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s NavUpdate_Segment) SetTo(v NavUpdate_LatLng) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewTo sets the to field to a newly
// allocated NavUpdate_LatLng struct, preferring placement in s's segment.
func (s NavUpdate_Segment) NewTo() (NavUpdate_LatLng, error) {
	ss, err := NewNavUpdate_LatLng(capnp.Struct(s).Segment())
	if err != nil {
		return NavUpdate_LatLng{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s NavUpdate_Segment) UpdateTime() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s NavUpdate_Segment) SetUpdateTime(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s NavUpdate_Segment) Distance() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s NavUpdate_Segment) SetDistance(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s NavUpdate_Segment) CrossTime() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s NavUpdate_Segment) SetCrossTime(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s NavUpdate_Segment) ExitNo() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s NavUpdate_Segment) SetExitNo(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s NavUpdate_Segment) Instruction() NavUpdate_Segment_Instruction {
	return NavUpdate_Segment_Instruction(capnp.Struct(s).Uint16(16))
}

func (s NavUpdate_Segment) SetInstruction(v NavUpdate_Segment_Instruction) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

func (s NavUpdate_Segment) Parts() (NavUpdate_LatLng_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return NavUpdate_LatLng_List(p.List()), err
}

func (s NavUpdate_Segment) HasParts() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s NavUpdate_Segment) SetParts(v NavUpdate_LatLng_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewParts sets the parts field to a newly
// allocated NavUpdate_LatLng_List, preferring placement in s's segment.
func (s NavUpdate_Segment) NewParts(n int32) (NavUpdate_LatLng_List, error) {
	l, err := NewNavUpdate_LatLng_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return NavUpdate_LatLng_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// NavUpdate_Segment_List is a list of NavUpdate_Segment.
type NavUpdate_Segment_List = capnp.StructList[NavUpdate_Segment]

// NewNavUpdate_Segment creates a new list of NavUpdate_Segment.
func NewNavUpdate_Segment_List(s *capnp.Segment, sz int32) (NavUpdate_Segment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 3}, sz)
	return capnp.StructList[NavUpdate_Segment](l), err
}

// NavUpdate_Segment_Future is a wrapper for a NavUpdate_Segment promised by a client call.
type NavUpdate_Segment_Future struct{ *capnp.Future }

func (f NavUpdate_Segment_Future) Struct() (NavUpdate_Segment, error) {
	p, err := f.Future.Ptr()
	return NavUpdate_Segment(p.Struct()), err
}
func (p NavUpdate_Segment_Future) From() NavUpdate_LatLng_Future {
	return NavUpdate_LatLng_Future{Future: p.Future.Field(0, nil)}
}
func (p NavUpdate_Segment_Future) To() NavUpdate_LatLng_Future {
	return NavUpdate_LatLng_Future{Future: p.Future.Field(1, nil)}
}

type NavUpdate_Segment_Instruction uint16

// NavUpdate_Segment_Instruction_TypeID is the unique identifier for the type NavUpdate_Segment_Instruction.
const NavUpdate_Segment_Instruction_TypeID = 0xc5417a637451246f

// Values of NavUpdate_Segment_Instruction.
const (
	NavUpdate_Segment_Instruction_turnLeft             NavUpdate_Segment_Instruction = 0
	NavUpdate_Segment_Instruction_turnRight            NavUpdate_Segment_Instruction = 1
	NavUpdate_Segment_Instruction_keepLeft             NavUpdate_Segment_Instruction = 2
	NavUpdate_Segment_Instruction_keepRight            NavUpdate_Segment_Instruction = 3
	NavUpdate_Segment_Instruction_straight             NavUpdate_Segment_Instruction = 4
	NavUpdate_Segment_Instruction_roundaboutExitNumber NavUpdate_Segment_Instruction = 5
	NavUpdate_Segment_Instruction_roundaboutExit       NavUpdate_Segment_Instruction = 6
	NavUpdate_Segment_Instruction_roundaboutTurnLeft   NavUpdate_Segment_Instruction = 7
	NavUpdate_Segment_Instruction_unkn8                NavUpdate_Segment_Instruction = 8
	NavUpdate_Segment_Instruction_roundaboutStraight   NavUpdate_Segment_Instruction = 9
	NavUpdate_Segment_Instruction_unkn10               NavUpdate_Segment_Instruction = 10
	NavUpdate_Segment_Instruction_roundaboutTurnRight  NavUpdate_Segment_Instruction = 11
	NavUpdate_Segment_Instruction_unkn12               NavUpdate_Segment_Instruction = 12
	NavUpdate_Segment_Instruction_roundaboutUturn      NavUpdate_Segment_Instruction = 13
	NavUpdate_Segment_Instruction_unkn14               NavUpdate_Segment_Instruction = 14
	NavUpdate_Segment_Instruction_arrive               NavUpdate_Segment_Instruction = 15
	NavUpdate_Segment_Instruction_exitLeft             NavUpdate_Segment_Instruction = 16
	NavUpdate_Segment_Instruction_exitRight            NavUpdate_Segment_Instruction = 17
	NavUpdate_Segment_Instruction_unkn18               NavUpdate_Segment_Instruction = 18
	NavUpdate_Segment_Instruction_uturn                NavUpdate_Segment_Instruction = 19
)

// String returns the enum's constant name.
func (c NavUpdate_Segment_Instruction) String() string {
	switch c {
	case NavUpdate_Segment_Instruction_turnLeft:
		return "turnLeft"
	case NavUpdate_Segment_Instruction_turnRight:
		return "turnRight"
	case NavUpdate_Segment_Instruction_keepLeft:
		return "keepLeft"
	case NavUpdate_Segment_Instruction_keepRight:
		return "keepRight"
	case NavUpdate_Segment_Instruction_straight:
		return "straight"
	case NavUpdate_Segment_Instruction_roundaboutExitNumber:
		return "roundaboutExitNumber"
	case NavUpdate_Segment_Instruction_roundaboutExit:
		return "roundaboutExit"
	case NavUpdate_Segment_Instruction_roundaboutTurnLeft:
		return "roundaboutTurnLeft"
	case NavUpdate_Segment_Instruction_unkn8:
		return "unkn8"
	case NavUpdate_Segment_Instruction_roundaboutStraight:
		return "roundaboutStraight"
	case NavUpdate_Segment_Instruction_unkn10:
		return "unkn10"
	case NavUpdate_Segment_Instruction_roundaboutTurnRight:
		return "roundaboutTurnRight"
	case NavUpdate_Segment_Instruction_unkn12:
		return "unkn12"
	case NavUpdate_Segment_Instruction_roundaboutUturn:
		return "roundaboutUturn"
	case NavUpdate_Segment_Instruction_unkn14:
		return "unkn14"
	case NavUpdate_Segment_Instruction_arrive:
		return "arrive"
	case NavUpdate_Segment_Instruction_exitLeft:
		return "exitLeft"
	case NavUpdate_Segment_Instruction_exitRight:
		return "exitRight"
	case NavUpdate_Segment_Instruction_unkn18:
		return "unkn18"
	case NavUpdate_Segment_Instruction_uturn:
		return "uturn"

	default:
		return ""
	}
}

// NavUpdate_Segment_InstructionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NavUpdate_Segment_InstructionFromString(c string) NavUpdate_Segment_Instruction {
	switch c {
	case "turnLeft":
		return NavUpdate_Segment_Instruction_turnLeft
	case "turnRight":
		return NavUpdate_Segment_Instruction_turnRight
	case "keepLeft":
		return NavUpdate_Segment_Instruction_keepLeft
	case "keepRight":
		return NavUpdate_Segment_Instruction_keepRight
	case "straight":
		return NavUpdate_Segment_Instruction_straight
	case "roundaboutExitNumber":
		return NavUpdate_Segment_Instruction_roundaboutExitNumber
	case "roundaboutExit":
		return NavUpdate_Segment_Instruction_roundaboutExit
	case "roundaboutTurnLeft":
		return NavUpdate_Segment_Instruction_roundaboutTurnLeft
	case "unkn8":
		return NavUpdate_Segment_Instruction_unkn8
	case "roundaboutStraight":
		return NavUpdate_Segment_Instruction_roundaboutStraight
	case "unkn10":
		return NavUpdate_Segment_Instruction_unkn10
	case "roundaboutTurnRight":
		return NavUpdate_Segment_Instruction_roundaboutTurnRight
	case "unkn12":
		return NavUpdate_Segment_Instruction_unkn12
	case "roundaboutUturn":
		return NavUpdate_Segment_Instruction_roundaboutUturn
	case "unkn14":
		return NavUpdate_Segment_Instruction_unkn14
	case "arrive":
		return NavUpdate_Segment_Instruction_arrive
	case "exitLeft":
		return NavUpdate_Segment_Instruction_exitLeft
	case "exitRight":
		return NavUpdate_Segment_Instruction_exitRight
	case "unkn18":
		return NavUpdate_Segment_Instruction_unkn18
	case "uturn":
		return NavUpdate_Segment_Instruction_uturn

	default:
		return 0
	}
}

type NavUpdate_Segment_Instruction_List = capnp.EnumList[NavUpdate_Segment_Instruction]

func NewNavUpdate_Segment_Instruction_List(s *capnp.Segment, sz int32) (NavUpdate_Segment_Instruction_List, error) {
	return capnp.NewEnumList[NavUpdate_Segment_Instruction](s, sz)
}

type TrafficEvent capnp.Struct

// TrafficEvent_TypeID is the unique identifier for the type TrafficEvent.
const TrafficEvent_TypeID = 0xacfa74a094e62626

func NewTrafficEvent(s *capnp.Segment) (TrafficEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TrafficEvent(st), err
}

func NewRootTrafficEvent(s *capnp.Segment) (TrafficEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return TrafficEvent(st), err
}

func ReadRootTrafficEvent(msg *capnp.Message) (TrafficEvent, error) {
	root, err := msg.Root()
	return TrafficEvent(root.Struct()), err
}

func (s TrafficEvent) String() string {
	str, _ := text.Marshal(0xacfa74a094e62626, capnp.Struct(s))
	return str
}

func (s TrafficEvent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TrafficEvent) DecodeFromPtr(p capnp.Ptr) TrafficEvent {
	return TrafficEvent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TrafficEvent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TrafficEvent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TrafficEvent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TrafficEvent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TrafficEvent) Type() TrafficEvent_Type {
	return TrafficEvent_Type(capnp.Struct(s).Uint16(0))
}

func (s TrafficEvent) SetType(v TrafficEvent_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s TrafficEvent) Distance() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s TrafficEvent) SetDistance(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s TrafficEvent) Action() TrafficEvent_Action {
	return TrafficEvent_Action(capnp.Struct(s).Uint16(2))
}

func (s TrafficEvent) SetAction(v TrafficEvent_Action) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s TrafficEvent) Resuming() bool {
	return capnp.Struct(s).Bit(64)
}

func (s TrafficEvent) SetResuming(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// TrafficEvent_List is a list of TrafficEvent.
type TrafficEvent_List = capnp.StructList[TrafficEvent]

// NewTrafficEvent creates a new list of TrafficEvent.
func NewTrafficEvent_List(s *capnp.Segment, sz int32) (TrafficEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[TrafficEvent](l), err
}

// TrafficEvent_Future is a wrapper for a TrafficEvent promised by a client call.
type TrafficEvent_Future struct{ *capnp.Future }

func (f TrafficEvent_Future) Struct() (TrafficEvent, error) {
	p, err := f.Future.Ptr()
	return TrafficEvent(p.Struct()), err
}

type TrafficEvent_Type uint16

// TrafficEvent_Type_TypeID is the unique identifier for the type TrafficEvent_Type.
const TrafficEvent_Type_TypeID = 0xd85d75253435bf4b

// Values of TrafficEvent_Type.
const (
	TrafficEvent_Type_stopSign    TrafficEvent_Type = 0
	TrafficEvent_Type_lightRed    TrafficEvent_Type = 1
	TrafficEvent_Type_lightYellow TrafficEvent_Type = 2
	TrafficEvent_Type_lightGreen  TrafficEvent_Type = 3
	TrafficEvent_Type_stopLight   TrafficEvent_Type = 4
)

// String returns the enum's constant name.
func (c TrafficEvent_Type) String() string {
	switch c {
	case TrafficEvent_Type_stopSign:
		return "stopSign"
	case TrafficEvent_Type_lightRed:
		return "lightRed"
	case TrafficEvent_Type_lightYellow:
		return "lightYellow"
	case TrafficEvent_Type_lightGreen:
		return "lightGreen"
	case TrafficEvent_Type_stopLight:
		return "stopLight"

	default:
		return ""
	}
}

// TrafficEvent_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TrafficEvent_TypeFromString(c string) TrafficEvent_Type {
	switch c {
	case "stopSign":
		return TrafficEvent_Type_stopSign
	case "lightRed":
		return TrafficEvent_Type_lightRed
	case "lightYellow":
		return TrafficEvent_Type_lightYellow
	case "lightGreen":
		return TrafficEvent_Type_lightGreen
	case "stopLight":
		return TrafficEvent_Type_stopLight

	default:
		return 0
	}
}

type TrafficEvent_Type_List = capnp.EnumList[TrafficEvent_Type]

func NewTrafficEvent_Type_List(s *capnp.Segment, sz int32) (TrafficEvent_Type_List, error) {
	return capnp.NewEnumList[TrafficEvent_Type](s, sz)
}

type TrafficEvent_Action uint16

// TrafficEvent_Action_TypeID is the unique identifier for the type TrafficEvent_Action.
const TrafficEvent_Action_TypeID = 0xa6f6ce72165ccb49

// Values of TrafficEvent_Action.
const (
	TrafficEvent_Action_none        TrafficEvent_Action = 0
	TrafficEvent_Action_yield       TrafficEvent_Action = 1
	TrafficEvent_Action_stop        TrafficEvent_Action = 2
	TrafficEvent_Action_resumeReady TrafficEvent_Action = 3
)

// String returns the enum's constant name.
func (c TrafficEvent_Action) String() string {
	switch c {
	case TrafficEvent_Action_none:
		return "none"
	case TrafficEvent_Action_yield:
		return "yield"
	case TrafficEvent_Action_stop:
		return "stop"
	case TrafficEvent_Action_resumeReady:
		return "resumeReady"

	default:
		return ""
	}
}

// TrafficEvent_ActionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TrafficEvent_ActionFromString(c string) TrafficEvent_Action {
	switch c {
	case "none":
		return TrafficEvent_Action_none
	case "yield":
		return TrafficEvent_Action_yield
	case "stop":
		return TrafficEvent_Action_stop
	case "resumeReady":
		return TrafficEvent_Action_resumeReady

	default:
		return 0
	}
}

type TrafficEvent_Action_List = capnp.EnumList[TrafficEvent_Action]

func NewTrafficEvent_Action_List(s *capnp.Segment, sz int32) (TrafficEvent_Action_List, error) {
	return capnp.NewEnumList[TrafficEvent_Action](s, sz)
}

type AndroidGnss capnp.Struct
type AndroidGnss_Which uint16

const (
	AndroidGnss_Which_measurements      AndroidGnss_Which = 0
	AndroidGnss_Which_navigationMessage AndroidGnss_Which = 1
)

func (w AndroidGnss_Which) String() string {
	const s = "measurementsnavigationMessage"
	switch w {
	case AndroidGnss_Which_measurements:
		return s[0:12]
	case AndroidGnss_Which_navigationMessage:
		return s[12:29]

	}
	return "AndroidGnss_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// AndroidGnss_TypeID is the unique identifier for the type AndroidGnss.
const AndroidGnss_TypeID = 0xdfdf30d03fc485bd

func NewAndroidGnss(s *capnp.Segment) (AndroidGnss, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AndroidGnss(st), err
}

func NewRootAndroidGnss(s *capnp.Segment) (AndroidGnss, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AndroidGnss(st), err
}

func ReadRootAndroidGnss(msg *capnp.Message) (AndroidGnss, error) {
	root, err := msg.Root()
	return AndroidGnss(root.Struct()), err
}

func (s AndroidGnss) String() string {
	str, _ := text.Marshal(0xdfdf30d03fc485bd, capnp.Struct(s))
	return str
}

func (s AndroidGnss) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidGnss) DecodeFromPtr(p capnp.Ptr) AndroidGnss {
	return AndroidGnss(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidGnss) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s AndroidGnss) Which() AndroidGnss_Which {
	return AndroidGnss_Which(capnp.Struct(s).Uint16(0))
}
func (s AndroidGnss) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidGnss) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidGnss) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidGnss) Measurements() (AndroidGnss_Measurements, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != measurements")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AndroidGnss_Measurements(p.Struct()), err
}

func (s AndroidGnss) HasMeasurements() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s AndroidGnss) SetMeasurements(v AndroidGnss_Measurements) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeasurements sets the measurements field to a newly
// allocated AndroidGnss_Measurements struct, preferring placement in s's segment.
func (s AndroidGnss) NewMeasurements() (AndroidGnss_Measurements, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := NewAndroidGnss_Measurements(capnp.Struct(s).Segment())
	if err != nil {
		return AndroidGnss_Measurements{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AndroidGnss) NavigationMessage() (AndroidGnss_NavigationMessage, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != navigationMessage")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return AndroidGnss_NavigationMessage(p.Struct()), err
}

func (s AndroidGnss) HasNavigationMessage() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s AndroidGnss) SetNavigationMessage(v AndroidGnss_NavigationMessage) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNavigationMessage sets the navigationMessage field to a newly
// allocated AndroidGnss_NavigationMessage struct, preferring placement in s's segment.
func (s AndroidGnss) NewNavigationMessage() (AndroidGnss_NavigationMessage, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := NewAndroidGnss_NavigationMessage(capnp.Struct(s).Segment())
	if err != nil {
		return AndroidGnss_NavigationMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AndroidGnss_List is a list of AndroidGnss.
type AndroidGnss_List = capnp.StructList[AndroidGnss]

// NewAndroidGnss creates a new list of AndroidGnss.
func NewAndroidGnss_List(s *capnp.Segment, sz int32) (AndroidGnss_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AndroidGnss](l), err
}

// AndroidGnss_Future is a wrapper for a AndroidGnss promised by a client call.
type AndroidGnss_Future struct{ *capnp.Future }

func (f AndroidGnss_Future) Struct() (AndroidGnss, error) {
	p, err := f.Future.Ptr()
	return AndroidGnss(p.Struct()), err
}
func (p AndroidGnss_Future) Measurements() AndroidGnss_Measurements_Future {
	return AndroidGnss_Measurements_Future{Future: p.Future.Field(0, nil)}
}
func (p AndroidGnss_Future) NavigationMessage() AndroidGnss_NavigationMessage_Future {
	return AndroidGnss_NavigationMessage_Future{Future: p.Future.Field(0, nil)}
}

type AndroidGnss_Measurements capnp.Struct

// AndroidGnss_Measurements_TypeID is the unique identifier for the type AndroidGnss_Measurements.
const AndroidGnss_Measurements_TypeID = 0xa20710d4f428d6cd

func NewAndroidGnss_Measurements(s *capnp.Segment) (AndroidGnss_Measurements, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AndroidGnss_Measurements(st), err
}

func NewRootAndroidGnss_Measurements(s *capnp.Segment) (AndroidGnss_Measurements, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AndroidGnss_Measurements(st), err
}

func ReadRootAndroidGnss_Measurements(msg *capnp.Message) (AndroidGnss_Measurements, error) {
	root, err := msg.Root()
	return AndroidGnss_Measurements(root.Struct()), err
}

func (s AndroidGnss_Measurements) String() string {
	str, _ := text.Marshal(0xa20710d4f428d6cd, capnp.Struct(s))
	return str
}

func (s AndroidGnss_Measurements) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidGnss_Measurements) DecodeFromPtr(p capnp.Ptr) AndroidGnss_Measurements {
	return AndroidGnss_Measurements(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidGnss_Measurements) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AndroidGnss_Measurements) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidGnss_Measurements) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidGnss_Measurements) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidGnss_Measurements) Clock() (AndroidGnss_Measurements_Clock, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AndroidGnss_Measurements_Clock(p.Struct()), err
}

func (s AndroidGnss_Measurements) HasClock() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AndroidGnss_Measurements) SetClock(v AndroidGnss_Measurements_Clock) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewClock sets the clock field to a newly
// allocated AndroidGnss_Measurements_Clock struct, preferring placement in s's segment.
func (s AndroidGnss_Measurements) NewClock() (AndroidGnss_Measurements_Clock, error) {
	ss, err := NewAndroidGnss_Measurements_Clock(capnp.Struct(s).Segment())
	if err != nil {
		return AndroidGnss_Measurements_Clock{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AndroidGnss_Measurements) Measurements() (AndroidGnss_Measurements_Measurement_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return AndroidGnss_Measurements_Measurement_List(p.List()), err
}

func (s AndroidGnss_Measurements) HasMeasurements() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AndroidGnss_Measurements) SetMeasurements(v AndroidGnss_Measurements_Measurement_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMeasurements sets the measurements field to a newly
// allocated AndroidGnss_Measurements_Measurement_List, preferring placement in s's segment.
func (s AndroidGnss_Measurements) NewMeasurements(n int32) (AndroidGnss_Measurements_Measurement_List, error) {
	l, err := NewAndroidGnss_Measurements_Measurement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AndroidGnss_Measurements_Measurement_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// AndroidGnss_Measurements_List is a list of AndroidGnss_Measurements.
type AndroidGnss_Measurements_List = capnp.StructList[AndroidGnss_Measurements]

// NewAndroidGnss_Measurements creates a new list of AndroidGnss_Measurements.
func NewAndroidGnss_Measurements_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AndroidGnss_Measurements](l), err
}

// AndroidGnss_Measurements_Future is a wrapper for a AndroidGnss_Measurements promised by a client call.
type AndroidGnss_Measurements_Future struct{ *capnp.Future }

func (f AndroidGnss_Measurements_Future) Struct() (AndroidGnss_Measurements, error) {
	p, err := f.Future.Ptr()
	return AndroidGnss_Measurements(p.Struct()), err
}
func (p AndroidGnss_Measurements_Future) Clock() AndroidGnss_Measurements_Clock_Future {
	return AndroidGnss_Measurements_Clock_Future{Future: p.Future.Field(0, nil)}
}

type AndroidGnss_Measurements_Clock capnp.Struct

// AndroidGnss_Measurements_Clock_TypeID is the unique identifier for the type AndroidGnss_Measurements_Clock.
const AndroidGnss_Measurements_Clock_TypeID = 0xa0e27b453a38f450

func NewAndroidGnss_Measurements_Clock(s *capnp.Segment) (AndroidGnss_Measurements_Clock, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return AndroidGnss_Measurements_Clock(st), err
}

func NewRootAndroidGnss_Measurements_Clock(s *capnp.Segment) (AndroidGnss_Measurements_Clock, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return AndroidGnss_Measurements_Clock(st), err
}

func ReadRootAndroidGnss_Measurements_Clock(msg *capnp.Message) (AndroidGnss_Measurements_Clock, error) {
	root, err := msg.Root()
	return AndroidGnss_Measurements_Clock(root.Struct()), err
}

func (s AndroidGnss_Measurements_Clock) String() string {
	str, _ := text.Marshal(0xa0e27b453a38f450, capnp.Struct(s))
	return str
}

func (s AndroidGnss_Measurements_Clock) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidGnss_Measurements_Clock) DecodeFromPtr(p capnp.Ptr) AndroidGnss_Measurements_Clock {
	return AndroidGnss_Measurements_Clock(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidGnss_Measurements_Clock) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AndroidGnss_Measurements_Clock) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidGnss_Measurements_Clock) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidGnss_Measurements_Clock) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidGnss_Measurements_Clock) TimeNanos() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s AndroidGnss_Measurements_Clock) SetTimeNanos(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s AndroidGnss_Measurements_Clock) HardwareClockDiscontinuityCount() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AndroidGnss_Measurements_Clock) SetHardwareClockDiscontinuityCount(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AndroidGnss_Measurements_Clock) HasTimeUncertaintyNanos() bool {
	return capnp.Struct(s).Bit(96)
}

func (s AndroidGnss_Measurements_Clock) SetHasTimeUncertaintyNanos(v bool) {
	capnp.Struct(s).SetBit(96, v)
}

func (s AndroidGnss_Measurements_Clock) TimeUncertaintyNanos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s AndroidGnss_Measurements_Clock) SetTimeUncertaintyNanos(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Clock) HasLeapSecond() bool {
	return capnp.Struct(s).Bit(97)
}

func (s AndroidGnss_Measurements_Clock) SetHasLeapSecond(v bool) {
	capnp.Struct(s).SetBit(97, v)
}

func (s AndroidGnss_Measurements_Clock) LeapSecond() int32 {
	return int32(capnp.Struct(s).Uint32(24))
}

func (s AndroidGnss_Measurements_Clock) SetLeapSecond(v int32) {
	capnp.Struct(s).SetUint32(24, uint32(v))
}

func (s AndroidGnss_Measurements_Clock) HasFullBiasNanos() bool {
	return capnp.Struct(s).Bit(98)
}

func (s AndroidGnss_Measurements_Clock) SetHasFullBiasNanos(v bool) {
	capnp.Struct(s).SetBit(98, v)
}

func (s AndroidGnss_Measurements_Clock) FullBiasNanos() int64 {
	return int64(capnp.Struct(s).Uint64(32))
}

func (s AndroidGnss_Measurements_Clock) SetFullBiasNanos(v int64) {
	capnp.Struct(s).SetUint64(32, uint64(v))
}

func (s AndroidGnss_Measurements_Clock) HasBiasNanos() bool {
	return capnp.Struct(s).Bit(99)
}

func (s AndroidGnss_Measurements_Clock) SetHasBiasNanos(v bool) {
	capnp.Struct(s).SetBit(99, v)
}

func (s AndroidGnss_Measurements_Clock) BiasNanos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AndroidGnss_Measurements_Clock) SetBiasNanos(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Clock) HasBiasUncertaintyNanos() bool {
	return capnp.Struct(s).Bit(100)
}

func (s AndroidGnss_Measurements_Clock) SetHasBiasUncertaintyNanos(v bool) {
	capnp.Struct(s).SetBit(100, v)
}

func (s AndroidGnss_Measurements_Clock) BiasUncertaintyNanos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AndroidGnss_Measurements_Clock) SetBiasUncertaintyNanos(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Clock) HasDriftNanosPerSecond() bool {
	return capnp.Struct(s).Bit(101)
}

func (s AndroidGnss_Measurements_Clock) SetHasDriftNanosPerSecond(v bool) {
	capnp.Struct(s).SetBit(101, v)
}

func (s AndroidGnss_Measurements_Clock) DriftNanosPerSecond() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AndroidGnss_Measurements_Clock) SetDriftNanosPerSecond(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Clock) HasDriftUncertaintyNanosPerSecond() bool {
	return capnp.Struct(s).Bit(102)
}

func (s AndroidGnss_Measurements_Clock) SetHasDriftUncertaintyNanosPerSecond(v bool) {
	capnp.Struct(s).SetBit(102, v)
}

func (s AndroidGnss_Measurements_Clock) DriftUncertaintyNanosPerSecond() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s AndroidGnss_Measurements_Clock) SetDriftUncertaintyNanosPerSecond(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

// AndroidGnss_Measurements_Clock_List is a list of AndroidGnss_Measurements_Clock.
type AndroidGnss_Measurements_Clock_List = capnp.StructList[AndroidGnss_Measurements_Clock]

// NewAndroidGnss_Measurements_Clock creates a new list of AndroidGnss_Measurements_Clock.
func NewAndroidGnss_Measurements_Clock_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_Clock_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0}, sz)
	return capnp.StructList[AndroidGnss_Measurements_Clock](l), err
}

// AndroidGnss_Measurements_Clock_Future is a wrapper for a AndroidGnss_Measurements_Clock promised by a client call.
type AndroidGnss_Measurements_Clock_Future struct{ *capnp.Future }

func (f AndroidGnss_Measurements_Clock_Future) Struct() (AndroidGnss_Measurements_Clock, error) {
	p, err := f.Future.Ptr()
	return AndroidGnss_Measurements_Clock(p.Struct()), err
}

type AndroidGnss_Measurements_Measurement capnp.Struct

// AndroidGnss_Measurements_Measurement_TypeID is the unique identifier for the type AndroidGnss_Measurements_Measurement.
const AndroidGnss_Measurements_Measurement_TypeID = 0xd949bf717d77614d

func NewAndroidGnss_Measurements_Measurement(s *capnp.Segment) (AndroidGnss_Measurements_Measurement, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 120, PointerCount: 0})
	return AndroidGnss_Measurements_Measurement(st), err
}

func NewRootAndroidGnss_Measurements_Measurement(s *capnp.Segment) (AndroidGnss_Measurements_Measurement, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 120, PointerCount: 0})
	return AndroidGnss_Measurements_Measurement(st), err
}

func ReadRootAndroidGnss_Measurements_Measurement(msg *capnp.Message) (AndroidGnss_Measurements_Measurement, error) {
	root, err := msg.Root()
	return AndroidGnss_Measurements_Measurement(root.Struct()), err
}

func (s AndroidGnss_Measurements_Measurement) String() string {
	str, _ := text.Marshal(0xd949bf717d77614d, capnp.Struct(s))
	return str
}

func (s AndroidGnss_Measurements_Measurement) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidGnss_Measurements_Measurement) DecodeFromPtr(p capnp.Ptr) AndroidGnss_Measurements_Measurement {
	return AndroidGnss_Measurements_Measurement(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidGnss_Measurements_Measurement) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AndroidGnss_Measurements_Measurement) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidGnss_Measurements_Measurement) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidGnss_Measurements_Measurement) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidGnss_Measurements_Measurement) SvId() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AndroidGnss_Measurements_Measurement) SetSvId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AndroidGnss_Measurements_Measurement) Constellation() AndroidGnss_Measurements_Measurement_Constellation {
	return AndroidGnss_Measurements_Measurement_Constellation(capnp.Struct(s).Uint16(4))
}

func (s AndroidGnss_Measurements_Measurement) SetConstellation(v AndroidGnss_Measurements_Measurement_Constellation) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s AndroidGnss_Measurements_Measurement) TimeOffsetNanos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s AndroidGnss_Measurements_Measurement) SetTimeOffsetNanos(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) State() int32 {
	return int32(capnp.Struct(s).Uint32(16))
}

func (s AndroidGnss_Measurements_Measurement) SetState(v int32) {
	capnp.Struct(s).SetUint32(16, uint32(v))
}

func (s AndroidGnss_Measurements_Measurement) ReceivedSvTimeNanos() int64 {
	return int64(capnp.Struct(s).Uint64(24))
}

func (s AndroidGnss_Measurements_Measurement) SetReceivedSvTimeNanos(v int64) {
	capnp.Struct(s).SetUint64(24, uint64(v))
}

func (s AndroidGnss_Measurements_Measurement) ReceivedSvTimeUncertaintyNanos() int64 {
	return int64(capnp.Struct(s).Uint64(32))
}

func (s AndroidGnss_Measurements_Measurement) SetReceivedSvTimeUncertaintyNanos(v int64) {
	capnp.Struct(s).SetUint64(32, uint64(v))
}

func (s AndroidGnss_Measurements_Measurement) Cn0DbHz() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AndroidGnss_Measurements_Measurement) SetCn0DbHz(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) PseudorangeRateMetersPerSecond() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AndroidGnss_Measurements_Measurement) SetPseudorangeRateMetersPerSecond(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) PseudorangeRateUncertaintyMetersPerSecond() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AndroidGnss_Measurements_Measurement) SetPseudorangeRateUncertaintyMetersPerSecond(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) AccumulatedDeltaRangeState() int32 {
	return int32(capnp.Struct(s).Uint32(20))
}

func (s AndroidGnss_Measurements_Measurement) SetAccumulatedDeltaRangeState(v int32) {
	capnp.Struct(s).SetUint32(20, uint32(v))
}

func (s AndroidGnss_Measurements_Measurement) AccumulatedDeltaRangeMeters() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s AndroidGnss_Measurements_Measurement) SetAccumulatedDeltaRangeMeters(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) AccumulatedDeltaRangeUncertaintyMeters() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s AndroidGnss_Measurements_Measurement) SetAccumulatedDeltaRangeUncertaintyMeters(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) HasCarrierFrequencyHz() bool {
	return capnp.Struct(s).Bit(48)
}

func (s AndroidGnss_Measurements_Measurement) SetHasCarrierFrequencyHz(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

func (s AndroidGnss_Measurements_Measurement) CarrierFrequencyHz() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(80))
}

func (s AndroidGnss_Measurements_Measurement) SetCarrierFrequencyHz(v float32) {
	capnp.Struct(s).SetUint32(80, math.Float32bits(v))
}

func (s AndroidGnss_Measurements_Measurement) HasCarrierCycles() bool {
	return capnp.Struct(s).Bit(49)
}

func (s AndroidGnss_Measurements_Measurement) SetHasCarrierCycles(v bool) {
	capnp.Struct(s).SetBit(49, v)
}

func (s AndroidGnss_Measurements_Measurement) CarrierCycles() int64 {
	return int64(capnp.Struct(s).Uint64(88))
}

func (s AndroidGnss_Measurements_Measurement) SetCarrierCycles(v int64) {
	capnp.Struct(s).SetUint64(88, uint64(v))
}

func (s AndroidGnss_Measurements_Measurement) HasCarrierPhase() bool {
	return capnp.Struct(s).Bit(50)
}

func (s AndroidGnss_Measurements_Measurement) SetHasCarrierPhase(v bool) {
	capnp.Struct(s).SetBit(50, v)
}

func (s AndroidGnss_Measurements_Measurement) CarrierPhase() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s AndroidGnss_Measurements_Measurement) SetCarrierPhase(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) HasCarrierPhaseUncertainty() bool {
	return capnp.Struct(s).Bit(51)
}

func (s AndroidGnss_Measurements_Measurement) SetHasCarrierPhaseUncertainty(v bool) {
	capnp.Struct(s).SetBit(51, v)
}

func (s AndroidGnss_Measurements_Measurement) CarrierPhaseUncertainty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s AndroidGnss_Measurements_Measurement) SetCarrierPhaseUncertainty(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) HasSnrInDb() bool {
	return capnp.Struct(s).Bit(52)
}

func (s AndroidGnss_Measurements_Measurement) SetHasSnrInDb(v bool) {
	capnp.Struct(s).SetBit(52, v)
}

func (s AndroidGnss_Measurements_Measurement) SnrInDb() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s AndroidGnss_Measurements_Measurement) SetSnrInDb(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s AndroidGnss_Measurements_Measurement) MultipathIndicator() AndroidGnss_Measurements_Measurement_MultipathIndicator {
	return AndroidGnss_Measurements_Measurement_MultipathIndicator(capnp.Struct(s).Uint16(84))
}

func (s AndroidGnss_Measurements_Measurement) SetMultipathIndicator(v AndroidGnss_Measurements_Measurement_MultipathIndicator) {
	capnp.Struct(s).SetUint16(84, uint16(v))
}

// AndroidGnss_Measurements_Measurement_List is a list of AndroidGnss_Measurements_Measurement.
type AndroidGnss_Measurements_Measurement_List = capnp.StructList[AndroidGnss_Measurements_Measurement]

// NewAndroidGnss_Measurements_Measurement creates a new list of AndroidGnss_Measurements_Measurement.
func NewAndroidGnss_Measurements_Measurement_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_Measurement_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 120, PointerCount: 0}, sz)
	return capnp.StructList[AndroidGnss_Measurements_Measurement](l), err
}

// AndroidGnss_Measurements_Measurement_Future is a wrapper for a AndroidGnss_Measurements_Measurement promised by a client call.
type AndroidGnss_Measurements_Measurement_Future struct{ *capnp.Future }

func (f AndroidGnss_Measurements_Measurement_Future) Struct() (AndroidGnss_Measurements_Measurement, error) {
	p, err := f.Future.Ptr()
	return AndroidGnss_Measurements_Measurement(p.Struct()), err
}

type AndroidGnss_Measurements_Measurement_Constellation uint16

// AndroidGnss_Measurements_Measurement_Constellation_TypeID is the unique identifier for the type AndroidGnss_Measurements_Measurement_Constellation.
const AndroidGnss_Measurements_Measurement_Constellation_TypeID = 0x9ef1f3ff0deb5ffb

// Values of AndroidGnss_Measurements_Measurement_Constellation.
const (
	AndroidGnss_Measurements_Measurement_Constellation_unknown AndroidGnss_Measurements_Measurement_Constellation = 0
	AndroidGnss_Measurements_Measurement_Constellation_gps     AndroidGnss_Measurements_Measurement_Constellation = 1
	AndroidGnss_Measurements_Measurement_Constellation_sbas    AndroidGnss_Measurements_Measurement_Constellation = 2
	AndroidGnss_Measurements_Measurement_Constellation_glonass AndroidGnss_Measurements_Measurement_Constellation = 3
	AndroidGnss_Measurements_Measurement_Constellation_qzss    AndroidGnss_Measurements_Measurement_Constellation = 4
	AndroidGnss_Measurements_Measurement_Constellation_beidou  AndroidGnss_Measurements_Measurement_Constellation = 5
	AndroidGnss_Measurements_Measurement_Constellation_galileo AndroidGnss_Measurements_Measurement_Constellation = 6
)

// String returns the enum's constant name.
func (c AndroidGnss_Measurements_Measurement_Constellation) String() string {
	switch c {
	case AndroidGnss_Measurements_Measurement_Constellation_unknown:
		return "unknown"
	case AndroidGnss_Measurements_Measurement_Constellation_gps:
		return "gps"
	case AndroidGnss_Measurements_Measurement_Constellation_sbas:
		return "sbas"
	case AndroidGnss_Measurements_Measurement_Constellation_glonass:
		return "glonass"
	case AndroidGnss_Measurements_Measurement_Constellation_qzss:
		return "qzss"
	case AndroidGnss_Measurements_Measurement_Constellation_beidou:
		return "beidou"
	case AndroidGnss_Measurements_Measurement_Constellation_galileo:
		return "galileo"

	default:
		return ""
	}
}

// AndroidGnss_Measurements_Measurement_ConstellationFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AndroidGnss_Measurements_Measurement_ConstellationFromString(c string) AndroidGnss_Measurements_Measurement_Constellation {
	switch c {
	case "unknown":
		return AndroidGnss_Measurements_Measurement_Constellation_unknown
	case "gps":
		return AndroidGnss_Measurements_Measurement_Constellation_gps
	case "sbas":
		return AndroidGnss_Measurements_Measurement_Constellation_sbas
	case "glonass":
		return AndroidGnss_Measurements_Measurement_Constellation_glonass
	case "qzss":
		return AndroidGnss_Measurements_Measurement_Constellation_qzss
	case "beidou":
		return AndroidGnss_Measurements_Measurement_Constellation_beidou
	case "galileo":
		return AndroidGnss_Measurements_Measurement_Constellation_galileo

	default:
		return 0
	}
}

type AndroidGnss_Measurements_Measurement_Constellation_List = capnp.EnumList[AndroidGnss_Measurements_Measurement_Constellation]

func NewAndroidGnss_Measurements_Measurement_Constellation_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_Measurement_Constellation_List, error) {
	return capnp.NewEnumList[AndroidGnss_Measurements_Measurement_Constellation](s, sz)
}

type AndroidGnss_Measurements_Measurement_State uint16

// AndroidGnss_Measurements_Measurement_State_TypeID is the unique identifier for the type AndroidGnss_Measurements_Measurement_State.
const AndroidGnss_Measurements_Measurement_State_TypeID = 0xcbb9490adce12d72

// Values of AndroidGnss_Measurements_Measurement_State.
const (
	AndroidGnss_Measurements_Measurement_State_unknown           AndroidGnss_Measurements_Measurement_State = 0
	AndroidGnss_Measurements_Measurement_State_codeLock          AndroidGnss_Measurements_Measurement_State = 1
	AndroidGnss_Measurements_Measurement_State_bitSync           AndroidGnss_Measurements_Measurement_State = 2
	AndroidGnss_Measurements_Measurement_State_subframeSync      AndroidGnss_Measurements_Measurement_State = 3
	AndroidGnss_Measurements_Measurement_State_towDecoded        AndroidGnss_Measurements_Measurement_State = 4
	AndroidGnss_Measurements_Measurement_State_msecAmbiguous     AndroidGnss_Measurements_Measurement_State = 5
	AndroidGnss_Measurements_Measurement_State_symbolSync        AndroidGnss_Measurements_Measurement_State = 6
	AndroidGnss_Measurements_Measurement_State_gloStringSync     AndroidGnss_Measurements_Measurement_State = 7
	AndroidGnss_Measurements_Measurement_State_gloTodDecoded     AndroidGnss_Measurements_Measurement_State = 8
	AndroidGnss_Measurements_Measurement_State_bdsD2BitSync      AndroidGnss_Measurements_Measurement_State = 9
	AndroidGnss_Measurements_Measurement_State_bdsD2SubframeSync AndroidGnss_Measurements_Measurement_State = 10
	AndroidGnss_Measurements_Measurement_State_galE1bcCodeLock   AndroidGnss_Measurements_Measurement_State = 11
	AndroidGnss_Measurements_Measurement_State_galE1c2ndCodeLock AndroidGnss_Measurements_Measurement_State = 12
	AndroidGnss_Measurements_Measurement_State_galE1bPageSync    AndroidGnss_Measurements_Measurement_State = 13
	AndroidGnss_Measurements_Measurement_State_sbasSync          AndroidGnss_Measurements_Measurement_State = 14
)

// String returns the enum's constant name.
func (c AndroidGnss_Measurements_Measurement_State) String() string {
	switch c {
	case AndroidGnss_Measurements_Measurement_State_unknown:
		return "unknown"
	case AndroidGnss_Measurements_Measurement_State_codeLock:
		return "codeLock"
	case AndroidGnss_Measurements_Measurement_State_bitSync:
		return "bitSync"
	case AndroidGnss_Measurements_Measurement_State_subframeSync:
		return "subframeSync"
	case AndroidGnss_Measurements_Measurement_State_towDecoded:
		return "towDecoded"
	case AndroidGnss_Measurements_Measurement_State_msecAmbiguous:
		return "msecAmbiguous"
	case AndroidGnss_Measurements_Measurement_State_symbolSync:
		return "symbolSync"
	case AndroidGnss_Measurements_Measurement_State_gloStringSync:
		return "gloStringSync"
	case AndroidGnss_Measurements_Measurement_State_gloTodDecoded:
		return "gloTodDecoded"
	case AndroidGnss_Measurements_Measurement_State_bdsD2BitSync:
		return "bdsD2BitSync"
	case AndroidGnss_Measurements_Measurement_State_bdsD2SubframeSync:
		return "bdsD2SubframeSync"
	case AndroidGnss_Measurements_Measurement_State_galE1bcCodeLock:
		return "galE1bcCodeLock"
	case AndroidGnss_Measurements_Measurement_State_galE1c2ndCodeLock:
		return "galE1c2ndCodeLock"
	case AndroidGnss_Measurements_Measurement_State_galE1bPageSync:
		return "galE1bPageSync"
	case AndroidGnss_Measurements_Measurement_State_sbasSync:
		return "sbasSync"

	default:
		return ""
	}
}

// AndroidGnss_Measurements_Measurement_StateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AndroidGnss_Measurements_Measurement_StateFromString(c string) AndroidGnss_Measurements_Measurement_State {
	switch c {
	case "unknown":
		return AndroidGnss_Measurements_Measurement_State_unknown
	case "codeLock":
		return AndroidGnss_Measurements_Measurement_State_codeLock
	case "bitSync":
		return AndroidGnss_Measurements_Measurement_State_bitSync
	case "subframeSync":
		return AndroidGnss_Measurements_Measurement_State_subframeSync
	case "towDecoded":
		return AndroidGnss_Measurements_Measurement_State_towDecoded
	case "msecAmbiguous":
		return AndroidGnss_Measurements_Measurement_State_msecAmbiguous
	case "symbolSync":
		return AndroidGnss_Measurements_Measurement_State_symbolSync
	case "gloStringSync":
		return AndroidGnss_Measurements_Measurement_State_gloStringSync
	case "gloTodDecoded":
		return AndroidGnss_Measurements_Measurement_State_gloTodDecoded
	case "bdsD2BitSync":
		return AndroidGnss_Measurements_Measurement_State_bdsD2BitSync
	case "bdsD2SubframeSync":
		return AndroidGnss_Measurements_Measurement_State_bdsD2SubframeSync
	case "galE1bcCodeLock":
		return AndroidGnss_Measurements_Measurement_State_galE1bcCodeLock
	case "galE1c2ndCodeLock":
		return AndroidGnss_Measurements_Measurement_State_galE1c2ndCodeLock
	case "galE1bPageSync":
		return AndroidGnss_Measurements_Measurement_State_galE1bPageSync
	case "sbasSync":
		return AndroidGnss_Measurements_Measurement_State_sbasSync

	default:
		return 0
	}
}

type AndroidGnss_Measurements_Measurement_State_List = capnp.EnumList[AndroidGnss_Measurements_Measurement_State]

func NewAndroidGnss_Measurements_Measurement_State_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_Measurement_State_List, error) {
	return capnp.NewEnumList[AndroidGnss_Measurements_Measurement_State](s, sz)
}

type AndroidGnss_Measurements_Measurement_MultipathIndicator uint16

// AndroidGnss_Measurements_Measurement_MultipathIndicator_TypeID is the unique identifier for the type AndroidGnss_Measurements_Measurement_MultipathIndicator.
const AndroidGnss_Measurements_Measurement_MultipathIndicator_TypeID = 0xc04e7b6231d4caa8

// Values of AndroidGnss_Measurements_Measurement_MultipathIndicator.
const (
	AndroidGnss_Measurements_Measurement_MultipathIndicator_unknown     AndroidGnss_Measurements_Measurement_MultipathIndicator = 0
	AndroidGnss_Measurements_Measurement_MultipathIndicator_detected    AndroidGnss_Measurements_Measurement_MultipathIndicator = 1
	AndroidGnss_Measurements_Measurement_MultipathIndicator_notDetected AndroidGnss_Measurements_Measurement_MultipathIndicator = 2
)

// String returns the enum's constant name.
func (c AndroidGnss_Measurements_Measurement_MultipathIndicator) String() string {
	switch c {
	case AndroidGnss_Measurements_Measurement_MultipathIndicator_unknown:
		return "unknown"
	case AndroidGnss_Measurements_Measurement_MultipathIndicator_detected:
		return "detected"
	case AndroidGnss_Measurements_Measurement_MultipathIndicator_notDetected:
		return "notDetected"

	default:
		return ""
	}
}

// AndroidGnss_Measurements_Measurement_MultipathIndicatorFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AndroidGnss_Measurements_Measurement_MultipathIndicatorFromString(c string) AndroidGnss_Measurements_Measurement_MultipathIndicator {
	switch c {
	case "unknown":
		return AndroidGnss_Measurements_Measurement_MultipathIndicator_unknown
	case "detected":
		return AndroidGnss_Measurements_Measurement_MultipathIndicator_detected
	case "notDetected":
		return AndroidGnss_Measurements_Measurement_MultipathIndicator_notDetected

	default:
		return 0
	}
}

type AndroidGnss_Measurements_Measurement_MultipathIndicator_List = capnp.EnumList[AndroidGnss_Measurements_Measurement_MultipathIndicator]

func NewAndroidGnss_Measurements_Measurement_MultipathIndicator_List(s *capnp.Segment, sz int32) (AndroidGnss_Measurements_Measurement_MultipathIndicator_List, error) {
	return capnp.NewEnumList[AndroidGnss_Measurements_Measurement_MultipathIndicator](s, sz)
}

type AndroidGnss_NavigationMessage capnp.Struct

// AndroidGnss_NavigationMessage_TypeID is the unique identifier for the type AndroidGnss_NavigationMessage.
const AndroidGnss_NavigationMessage_TypeID = 0xe2517b083095fd4e

func NewAndroidGnss_NavigationMessage(s *capnp.Segment) (AndroidGnss_NavigationMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AndroidGnss_NavigationMessage(st), err
}

func NewRootAndroidGnss_NavigationMessage(s *capnp.Segment) (AndroidGnss_NavigationMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return AndroidGnss_NavigationMessage(st), err
}

func ReadRootAndroidGnss_NavigationMessage(msg *capnp.Message) (AndroidGnss_NavigationMessage, error) {
	root, err := msg.Root()
	return AndroidGnss_NavigationMessage(root.Struct()), err
}

func (s AndroidGnss_NavigationMessage) String() string {
	str, _ := text.Marshal(0xe2517b083095fd4e, capnp.Struct(s))
	return str
}

func (s AndroidGnss_NavigationMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AndroidGnss_NavigationMessage) DecodeFromPtr(p capnp.Ptr) AndroidGnss_NavigationMessage {
	return AndroidGnss_NavigationMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AndroidGnss_NavigationMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AndroidGnss_NavigationMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AndroidGnss_NavigationMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AndroidGnss_NavigationMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AndroidGnss_NavigationMessage) Type() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s AndroidGnss_NavigationMessage) SetType(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s AndroidGnss_NavigationMessage) SvId() int32 {
	return int32(capnp.Struct(s).Uint32(4))
}

func (s AndroidGnss_NavigationMessage) SetSvId(v int32) {
	capnp.Struct(s).SetUint32(4, uint32(v))
}

func (s AndroidGnss_NavigationMessage) MessageId() int32 {
	return int32(capnp.Struct(s).Uint32(8))
}

func (s AndroidGnss_NavigationMessage) SetMessageId(v int32) {
	capnp.Struct(s).SetUint32(8, uint32(v))
}

func (s AndroidGnss_NavigationMessage) SubmessageId() int32 {
	return int32(capnp.Struct(s).Uint32(12))
}

func (s AndroidGnss_NavigationMessage) SetSubmessageId(v int32) {
	capnp.Struct(s).SetUint32(12, uint32(v))
}

func (s AndroidGnss_NavigationMessage) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s AndroidGnss_NavigationMessage) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AndroidGnss_NavigationMessage) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s AndroidGnss_NavigationMessage) Status() AndroidGnss_NavigationMessage_Status {
	return AndroidGnss_NavigationMessage_Status(capnp.Struct(s).Uint16(16))
}

func (s AndroidGnss_NavigationMessage) SetStatus(v AndroidGnss_NavigationMessage_Status) {
	capnp.Struct(s).SetUint16(16, uint16(v))
}

// AndroidGnss_NavigationMessage_List is a list of AndroidGnss_NavigationMessage.
type AndroidGnss_NavigationMessage_List = capnp.StructList[AndroidGnss_NavigationMessage]

// NewAndroidGnss_NavigationMessage creates a new list of AndroidGnss_NavigationMessage.
func NewAndroidGnss_NavigationMessage_List(s *capnp.Segment, sz int32) (AndroidGnss_NavigationMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[AndroidGnss_NavigationMessage](l), err
}

// AndroidGnss_NavigationMessage_Future is a wrapper for a AndroidGnss_NavigationMessage promised by a client call.
type AndroidGnss_NavigationMessage_Future struct{ *capnp.Future }

func (f AndroidGnss_NavigationMessage_Future) Struct() (AndroidGnss_NavigationMessage, error) {
	p, err := f.Future.Ptr()
	return AndroidGnss_NavigationMessage(p.Struct()), err
}

type AndroidGnss_NavigationMessage_Status uint16

// AndroidGnss_NavigationMessage_Status_TypeID is the unique identifier for the type AndroidGnss_NavigationMessage_Status.
const AndroidGnss_NavigationMessage_Status_TypeID = 0xec1ff7996b35366f

// Values of AndroidGnss_NavigationMessage_Status.
const (
	AndroidGnss_NavigationMessage_Status_unknown       AndroidGnss_NavigationMessage_Status = 0
	AndroidGnss_NavigationMessage_Status_parityPassed  AndroidGnss_NavigationMessage_Status = 1
	AndroidGnss_NavigationMessage_Status_parityRebuilt AndroidGnss_NavigationMessage_Status = 2
)

// String returns the enum's constant name.
func (c AndroidGnss_NavigationMessage_Status) String() string {
	switch c {
	case AndroidGnss_NavigationMessage_Status_unknown:
		return "unknown"
	case AndroidGnss_NavigationMessage_Status_parityPassed:
		return "parityPassed"
	case AndroidGnss_NavigationMessage_Status_parityRebuilt:
		return "parityRebuilt"

	default:
		return ""
	}
}

// AndroidGnss_NavigationMessage_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AndroidGnss_NavigationMessage_StatusFromString(c string) AndroidGnss_NavigationMessage_Status {
	switch c {
	case "unknown":
		return AndroidGnss_NavigationMessage_Status_unknown
	case "parityPassed":
		return AndroidGnss_NavigationMessage_Status_parityPassed
	case "parityRebuilt":
		return AndroidGnss_NavigationMessage_Status_parityRebuilt

	default:
		return 0
	}
}

type AndroidGnss_NavigationMessage_Status_List = capnp.EnumList[AndroidGnss_NavigationMessage_Status]

func NewAndroidGnss_NavigationMessage_Status_List(s *capnp.Segment, sz int32) (AndroidGnss_NavigationMessage_Status_List, error) {
	return capnp.NewEnumList[AndroidGnss_NavigationMessage_Status](s, sz)
}

type LidarPts capnp.Struct

// LidarPts_TypeID is the unique identifier for the type LidarPts.
const LidarPts_TypeID = 0xe3d6685d4e9d8f7a

func NewLidarPts(s *capnp.Segment) (LidarPts, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return LidarPts(st), err
}

func NewRootLidarPts(s *capnp.Segment) (LidarPts, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return LidarPts(st), err
}

func ReadRootLidarPts(msg *capnp.Message) (LidarPts, error) {
	root, err := msg.Root()
	return LidarPts(root.Struct()), err
}

func (s LidarPts) String() string {
	str, _ := text.Marshal(0xe3d6685d4e9d8f7a, capnp.Struct(s))
	return str
}

func (s LidarPts) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LidarPts) DecodeFromPtr(p capnp.Ptr) LidarPts {
	return LidarPts(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LidarPts) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LidarPts) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LidarPts) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LidarPts) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LidarPts) R() (capnp.UInt16List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.UInt16List(p.List()), err
}

func (s LidarPts) HasR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LidarPts) SetR(v capnp.UInt16List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewR sets the r field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s LidarPts) NewR(n int32) (capnp.UInt16List, error) {
	l, err := capnp.NewUInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s LidarPts) Theta() (capnp.UInt16List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.UInt16List(p.List()), err
}

func (s LidarPts) HasTheta() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s LidarPts) SetTheta(v capnp.UInt16List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTheta sets the theta field to a newly
// allocated capnp.UInt16List, preferring placement in s's segment.
func (s LidarPts) NewTheta(n int32) (capnp.UInt16List, error) {
	l, err := capnp.NewUInt16List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt16List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s LidarPts) Reflect() (capnp.UInt8List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.UInt8List(p.List()), err
}

func (s LidarPts) HasReflect() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s LidarPts) SetReflect(v capnp.UInt8List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewReflect sets the reflect field to a newly
// allocated capnp.UInt8List, preferring placement in s's segment.
func (s LidarPts) NewReflect(n int32) (capnp.UInt8List, error) {
	l, err := capnp.NewUInt8List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt8List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s LidarPts) Idx() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s LidarPts) SetIdx(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s LidarPts) Pkt() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s LidarPts) HasPkt() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s LidarPts) SetPkt(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// LidarPts_List is a list of LidarPts.
type LidarPts_List = capnp.StructList[LidarPts]

// NewLidarPts creates a new list of LidarPts.
func NewLidarPts_List(s *capnp.Segment, sz int32) (LidarPts_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[LidarPts](l), err
}

// LidarPts_Future is a wrapper for a LidarPts promised by a client call.
type LidarPts_Future struct{ *capnp.Future }

func (f LidarPts_Future) Struct() (LidarPts, error) {
	p, err := f.Future.Ptr()
	return LidarPts(p.Struct()), err
}

const schema_80ef1ec4889c2a63 = "x\xda\xac\xbb{t\x1c\xd5\x95/\xbcw\x95\xa4\x96l" +
	"\xc9\xadv\xc9/\x06\xd3\xb1c\x12\xa3\xc4F\x0f{b" +
	"\x14\xf2\xb5\xf5\"\xb6\"\xc9*\xb5\x1c\xb0C\xbeP\xdd" +
	"u\xd4*\xb9\xbb\xaa]U-\xbb\x1d\x18\x05V\x98K" +
	"Xa\x85\xb0\xc8\xdc\x98@\x06\xb2\xc2]\xc0\x8dg\x80" +
	"\x0bw0\x03\x13`\xc1\xe2\x11\x9c\xe0\x04g \x83W" +
	"0\x17\xee@.\xdc\x00\x81\x09\xf6\x85\xe9\xbb\xf69\xf5" +
	"\xean\x89d\xd6\xba\x7fu\xf5>\xa7\xcec\x9f\xbd\xf7" +
	"\xd9\xfb\xb7wu\xfd\xf5\xca\xed\x0d\xddm\x7fT@R" +
	"_ol\xaa4\xff\xed\x0f\xb7\xfd\xee\x7f\xaf\xba\x06\xd4" +
	"U(U\xee\xdc\xf8\xfb\xcag\x7f}\xd7\x03\xd0(\xc7" +
	"\x00zO\xb5H\xa8\xbc\xd5B\x8fo\xb4\\\x8c\x80\x95" +
	"[O\x9ew\xa4\xf9\xe7/]\x03j\x1bb%\xdby" +
	"\xf35\x8f\x9f\xf3\xfbo@C\x0c@1\x96\xfeF)" +
	"-]\x05\xa0\\\xb1\xf4_\x01+w\x9d\xda\xfa\x83\x97" +
	"z?\xba\x96\xfaJa\xdfF\xde\x99\xb5\x9eQ\xf6\xb7" +
	"\xd2\xc8\x85V>\xf2\xa1\xbf\xfe\xdd\xd4\xbdG~\xfb\x9d" +
	"\x9a\x91\xc5B\xd6.[\x82\xca\xa6e\xf4\xe2y\xcbh" +
	"\xec\xcf\x9f<\xf2\xff\xe5\x07\x9e\xba\xbe\xb6\xb7D]6" +
	"\xc5\xcf(\x17\xc4?\x0d\xd0;\x16O\xd2\xd8}\xe5m" +
	"\xbf\xfb\x87\xbfx\xe5\x06H\xb4a\xedB\x0a\xed\xaf(" +
	"\xe5vz*\xb5\xd3\xc8\xa9\xbb\x9d\xa9\xcc\xe3_\xb8\x11" +
	"\xd4sP\xael\xbc\xf2\xafn\x7f\xf23?8*F" +
	"\xee\xbd.\xd1\x87\xca-\x09z<\x9cx\x92\x86>\xa7" +
	"\xe7\xd2\xd6;\x1f\xfc\x87\x1bk\x17\x824\xe2\x11\xe57" +
	"\xcaQ\x85\x9e\xeeW\x0e\x00V>\xf8L\xfc\xbf\x7f\xed" +
	"\xdd\xa1\xff\\\xcbl>v\xa2CBem\x07=\xae" +
	"\xe9\xe0,9\xfen\xe6;\x7f8\x95\xf8\xfe\xc2c\xaf" +
	"xP\xb9\x7f\x05=\xdd\xb3\x82\xc6\xbe\xfa\x977\xfeb" +
	"\xc9\x17W\x1d\x86\xc4_H\xe11\x01*\x89\x95g\x94" +
	"\xb5+\xa9\xe3\x9a\x95\xf3\x80\x95'\xff}vp\xbc\xd0" +
	"\xf3\x83\xdac\xe1\xacSW\xbe\xa2|\x95w\xde\xb3\x92" +
	"\xb8\xf1\x83\x7f<r\xf9\xea\xd3\x7f\xf7C\xb1\xe2\x9f\xcd" +
	"\xaa\x8c\xfd\xd3\xf7\xffE\x9c7[\xf5\xae\xb2\x7f\x15\xe7" +
	"\xe1*Z\xc1\xff\xf9\xda\xffj\xab\xfc\xe1\x9d\x1fB\xa2" +
	"G\xaa\x8ci\x07\xae\xd8\xff\xd3\x9d/\x02`\xef\xd3\xab" +
	"$Iy\x8d\xf7<\xb5\xea\xef\x01+\x13\xefm\xeb\x1b" +
	"\xfe\xfa+\xb7\x82\xfa)l\xa9\x1c\xfb\xf5\xc6\xf7\x9eo" +
	"\x8f\xfd\x88\x8f\xda\xbbuu\x06\x95\x9d\xab\xe9qx\xf5" +
	"\x7f\x92\x01\xc3\xf6\xc4\x1a\xac<|\xf5\xe3\xa9\xe7\xba~" +
	"\xfb[\x8fi\xda\xd9=\xa8\xec?\xfb\xd3\x00\xca\xb7\xce" +
	"\xa6Et\xbc\xf1\xab\xdf\xb7\x7f\xce\xfc\x11-\x18k\xe5" +
	"\xf9\xf4\xd9\x9d\xa8\xb4\xac\xa5\xc7\xc6\xb5\xdf!\x16\xa7~" +
	"\xf3\xcf\x8f\xef\xfa\xc1\x7f\xbb\x9d\xba\xcb\xe1\xfexw\xe5" +
	"\xf89g\x94\x93\xe7\xac\"\xe9?\x87\x1f\xf6\xce\x9f]" +
	"\xba\xd2\xfe\xf9\xbf\xfd\x17H\x9c%U>\xf5\xa9\xffy" +
	"\xe3\xad\xee\x99\x9f\xd0\x0e\x8f}b\x09*'?A/" +
	"\xbd\xf8\x89\x1c`e\xcf%\xbf\xe8\xfd\xca-7\xdd\xb9" +
	"\xe0\xd1\xe1\xbaW\x94\xb6u\xf4\xd4\xb2\x8e\xd6\xfc\x87\xd3" +
	"\x1f\x1c\xfe\x9b'\xa6\xfek\xed\x894r.\xaf{W" +
	"\xd9\xbf\x8e+\xca:\xbe\x88`\xde\xea\xdeB\x98?\xf9" +
	"K\xa5\xfcI\xe2\xc6u\x9f\xa4\xe3\x0b\xf6\xaf\xb6aC" +
	"d\xe4\xa5\\_7<\xa8\xec\xdfp1@\xef\xa3\x1b" +
	"~J\x8c\x0e\x84]m\xc3%\x91\xde1\xea\xfd\xfe\xc6" +
	"w\x15<\x8f\x94j\xedy\xf1F\xc0J\xf2\xa6\xd3\xff" +
	"\xff\x93\xd7\xdcu\x14\x12I)\xd4G\xc0\xdew6\xf7" +
	"\xa0\x82\xe7\xd3K\x1fm&f\xb4.\xdf\xd8\xb2|\xfd" +
	"5\x0f/\xc8\x8cs\xcf\x7fP\xd9t>Y\x8d\xad\xe7" +
	"\x133\xeex\xe6\xf9\xee\xcc\xd7\xc7\x1f\xa9\x93\xa2\xc3\xe7" +
	"wJ\xcaQ>\xec\xfd\xe7\xef\x02\xac\xbc\xf5\xe1\xdf\xfd" +
	"\xcd\xe9\xedW=\xb2\xa0\x0d8~\xfe\x8f\x94\x17y\xe7" +
	"\x13\xe7\x13'\xbe\xb8\xe5\xfb\x1bN\xfc\xe3W\x1e\xa3\xce" +
	"r\x0d\xd7\x8ev=\xa8<\xdaEO\x0fw\x91xZ" +
	"\x1bT7{\xa8\xff\x09\xbe\xb3@B\x00{ww\xef" +
	"E\xc5\xe8\xa6\xc3`\xdd\xffJ\x87\xb1\xe1\xaf^\x19\x96" +
	"/\xfc\xe4S\x0bY-\xe5X\xcf3\xca\x8b=|\x0d" +
	"=\xb4\x86\x8b\xff\xad\xf3\xdcg\x7f\xb5\xff)H\x9c#" +
	"\x85\xcc\x06\xec}\xb8w/*\xc7{\xf9;\xbd\xa4\xa3" +
	"\xea\xbe\xaf\xe1\xdf~z\xf6g\x90X)U\x96>x" +
	"\xd5'\xd7\xec\xfd\xed\xf3\xd4\xb3q\xcbY\xa8\xac\xd8B" +
	"=\x13[\xa8\xa7\xbd\xe9\xd4KKv\x1e\xfdY\x1d\xbb" +
	"vny\x0c\x15\x8dz\xf6~u\x8bEk\xfd\xfd\x1e" +
	"\xbcvd\xe5e\xc7\x16\x14\xb3\xc2\xd6g\x94\xf2V\xea" +
	"]\xda\xca5\xa3\xe3\xe0\xb3\xcf\xd8\xbf\xbe\xfc\xe7B\xf3" +
	"\x83#\x14\xc20\xf6\xb93\xca\x9e\xcfQ\xef\xdd\x9f\xab" +
	"P\xef\x9f\x1fx\xec\xca\xe9/\xff\xf1\x17\x0b\x1e\xf1\xee" +
	"\x0b\xeeU\xbez\x017*\x17\xd0\x11\x7f\xf7\xcc\xa7\x0a" +
	"\xa7\xff\xe9\xe9\xe34tc(\xa3\\\xfd\x8f^ \xa1" +
	"\xf2\x04u\xee}\xf4\x02>t\xb0}\xb5\x0d\x1bk\x97" +
	"\xfd\xc4\xe7\xefU\x8e}\x9eT\xf4\xc5\xcf\xef\x92\x01\x7f" +
	"\xba\xeb\x8c|I\xeb\xafNT\xcb;\x1f\xb9\x9c\x92P" +
	"\xb9:E\x8fW\xa6\xf8\xb50\xf7\x95\xe4[{\x9a\x8b" +
	"\xff\\\xab\x1d\\\x80\xee\xdc\xfe\x8cr\xffv\xea}\xcf" +
	"vn\x8d\xbf\xf4\xd3\xad[\xce-}\xf5\x85Z\xe5W" +
	"\xce\x1d8\xa3t\x0f\xf0\x8bg\x80\x8e$8\x05\xf5S" +
	"\x18\xaf\xb1n\xa5\x81\x1bP\xb9n\xe0s\xb4\xd3\x01\xae" +
	"F\x81\xcdY\x88sw\xeexP\xb9g\x07\xe9\xf3\x13" +
	";H2\x03\xebW\xddy\x18c\x12\x80R\xde\xf9\x8c" +
	"r\xf5N\xea}\xfbN\xe2\xf3\x1f\x9f\xbc\xfb\xba\x95\xeb" +
	"\x96\x9dZ\xc0R\xf4\xb6\x8d,Ae\xed\x08\xbf\x16F" +
	"h\xe8\xf1\x8f\xbe\xd7\xd5\xfcu\xf5\x15P\xd7\xa0\x1c1" +
	"\xb3\xc8Y0\xb2\x17\x95'F\x88\xcf\xc7F\xc4u\xfd" +
	"\x9d[\xc6\xbf:\xf3\xeb\xffQ\xbbl\xaeP\xebF\xef" +
	"U\xce\x1b\xa5\x17\xcf\x1d\xe5\x9cn\xfc\xdd\x87\x1f\xbc\x14" +
	"\xfb\x97\xd7\xebl\x05\x1b[\x8fJi\x8c^\xda?\xc6" +
	"u\xef/\xb7\xee;\xfc\xc7\xe4\x9b\x90\xf8\x8c\x14\xae\x09" +
	"\xb0\xf7\xe4\xd8\x0d\xa8\xbc\xcf{\xbe3F\xea\xbf\xef\xe4" +
	"\xa3\xc7\xae_{\xe4\xfd\x05\xdd\x8b\xb6\xf1W\x945\xe3" +
	"\xb4\x82\x15\xe3\xdcj\xaeO\xc4fo>\xfc\x9d\xd3\x90" +
	"XUw-\xac\x9d\x18@e\xd3\x04\xf7.&\xfe\x1e" +
	"\x06+y\x96\xd3\xb2\xe5\xcdYY+\x9a\xc5\xbe1K" +
	"g\xf9!\xcd\xd56Oh\xee\x0c=\xc0\x04\xa2\xbaZ" +
	"n\x00h@\x80\xc4\xe1>\x00\xf5F\x19\xd5\xbb%D" +
	"\xec@\xa2\x1d\xe9\x04P\xef\x90Q\xbdO\xc2\x84\x84\x1d" +
	"(\x01$\xeeY\x0f\xa0\xfeDF\xf5\x01\x09\x132v" +
	"\xa0\x0c\x90\xb8\x9fz\xde-\xa3\xfa\xac\x84\x89\x06\xa9\x03" +
	"\x1b\x00\x12O\x13\xf1q\x19\xd5\x97%L4J\x1d\xd8" +
	"\x08\x9089\x02\xa0\xbe$\xa3\xfa\xba\x84\xa9\xa2e\x98" +
	"\xae\x83\xcb\x00'd\xc4% \xd1c\xbch[\x19\xfe" +
	"g\x09`\xccqu\xff9\xee\xb8z}g+_\xae" +
	"\xa1U\xe6\xb4\xbc\xa1\x8f2\x13\x00\xfcw\x03vH\x9c" +
	"\x1d\xbb\x8dQ\xadl\x95\xdc\xb4\xab\xc9.S\x1b0\xea" +
	"{\xe0\xfaX\x7f\xb1\xa8\xb6\x07\xbc\xd1&\x01\xd4\xcbd" +
	"T\xf3\x12&\xb0]0\xc7\xb8\x16@\xcd\xcb\xa8\x1e$" +
	"\xe6$\x04sJ{\x01TWF\xf5\x1b\xc4\x9c\xe5\x82" +
	"9Wd\x00\xd4\xcbeT\xaf\x91\xb0\xa2e]c\x8e" +
	"\xf5\x17\x01\x8b\x18\x0f'\x05\xc48`\xc51t\x96\xd1" +
	"\xecA\xb4\xf2y\xad\xe80\x9d\x1a@B:\xfd\x82V" +
	"\x1c6\xb5L\x1ed\xa6\x87D+\xbbo\xd8\xcci\x10" +
	"\xcbE\xa8\xd5\x9b\xddeg\x9c\xbcV\x18\xb4l;\xc5" +
	"\xb2\xaea\x995G\x7f\x13\x80z\xb3\x8c\xea\x1d\xe1\xd1" +
	"\xdf~\x15\x80\xfac\x19\xd5G\"G\xff0m\xf9\x11" +
	"\x19\xd5\x97hw\x92\xd8\xdd\x8b\xd4\xf3\x05\x19\xd5\xf7\xe8" +
	"\xe8eq\xf4\xefP\xcf\xf7dL\xb7cx\xf6J\x1b" +
	"\xee\x05H\xb7\xa2\x8c\xe9\xd5(a%k\xd96-\x08" +
	"-s\xcc2\xad)C.0l\x01\x09[\x00+E" +
	"\x9bMX\x8e\xe1\xa2a\x99\xc3\x83\xc3\x17\x81\x7f\xcaK" +
	"\xbdS.Z\x8eK=\xd0\xf5{\xd4w\xe1c0\x15" +
	"K\x9a[5\xc6\x92\xea1\x18\xaa~\x8f\xba.f\xa9" +
	"\xb0\xd3\xcc\x1b\x0cd\xdb\xc1f\x90\xb09\xc2`\xa1\\" +
	"\x83Z\xde\xc8\xd8\x1a\xad\xe3\"\xa6\xb9%\x9b9\xc0\xd5" +
	"+\"B\x03\x00\xea\xa52\xaa3!\x8f\xd9Y\x9eX" +
	"]\x1e\xe1q\xf9,O\x82\xae\x8f\xf0\xf8:R\xcek" +
	"dT\x7f,\xe1\xfc\xb4\xad\x15\xd8N\xdd_\x8b\\\xec" +
	"\xaaY\xb2\\\xec\xae\xa1\xa4\x1cWsK\x81\xeeH\xde" +
	"\xd6jub\\\x9b3r\xb4\x8d\x949<\xc7LW" +
	"m\xc6\xa8\xd9k\xe9\x8c\xf8K\x8d}\xf1\xa9r\x91\xa5" +
	"\xd2|d\xb5#\xd8\xe9\x15\xa4\xf5\x07eT\xbfI\xca" +
	"\xe2m\xf5\xca\xbeP\x05\x82\xad^M\xca\xf2M\xb1U" +
	"\x94\xbd\x9d>\x08\xa0^/\xa3z3I\x13\x0ai:" +
	"<\x0b\xa0~_l?\xee\x96\x8b\x0c\xe3\xe1\xb2\x84\xe6" +
	"\xf8;\x8c\x87K\xf4TJ7\x1cW3\xb3\x0c\xe4)" +
	"+\xb0\x06\xcc\xd4'-M\x9f@2@C\xc3\x13\x93" +
	"\xa9\xe1\xc1\xfe\xa9\xe1!l\x0f/\x1c@l\x8ft\x85" +
	"8\xf5\xc5\xf6\xd0\x0b\xf3:Ts\xf1KZ\xbe\xa0\x99" +
	"\xbbt\xab\xc0b\xae]\xae\x91\x82\x1eO\x0a\x0eFx" +
	"S\"\x83Z\x94Q\xfd6\xf1F\x12\xbc\xf9\xd6Hx" +
	"\xe2\x09\xd9c\xcem}\x9e\xa2> a\xd2\xb55\xb3" +
	"\xd6\x1a\xc6l\xcb\xad\x95_\xde/\xed\xeaP'\xda)" +
	"\xdbr\xd3\xae^\xfbB\xb5l\x8f\x1asl\xd4\xcar" +
	"\xe1\xe6\xf7G\x7f6\x95-\xd9Z\x96o\xed\x13\xc1\xd6" +
	"\x8e\x93\x8d|NF\xf5\xcd\xc8\xd6\xde \xe2\xeb2\xa6" +
	"\x1bPB\x14[S\x10'\x01&\xc9\x08\xb4bx\x85" +
	"(-\xdc84\x13\xbd\x03\xc3[DI\xe0,@\xba" +
	"\x9d\xe8gsc\"\x0bc\xb2\x06\x1f\x03H\x9fM\xf4" +
	"\x8dDoj\xe8\xc0&\xf2\xc59}#\xd1\xb7\x10=" +
	"\xd6\xd8\xc1\xdd\x90n\xfc%@z\x1b\xd1\x87\xc8\xf8\x14" +
	"\xc7\x87\x87\x86m\xdb\x02\xb4\xeb\xee\x8f\xc5\x9bl+\x9f" +
	"\xf7\x9b|a*\x1anvf\xd8\xb6A\xb6B\xe2\x0c" +
	"\xd3t\xc3\xcc\x0dC\xdc\xb6#d\x96\xcf\x1bE\xc72" +
	"$=\xcd\x0a\xc6\x986k\xd94\x9c\x0d\x8b\xf50\xcc" +
	"\x8f\xe9\xb1\xcb6\x98\xe9\xf2\xb3\xa1>\x915U\x0b%" +
	"\x1d\"\xd7\xe8!Mv5:\xb8\xe6\xe0\xe0\xce#}" +
	"\xdd \xa3\xda\x15Z\xa6M$\xa7\x1beT\xb7H\x18" +
	"7\xb5\x02\xc3V\x90\xb0\x1509\xa7\xe5K\x0c\x1b@" +
	"\xc2\x86:Q\x09}\x8c1\xe6j\x0b\xf9\x18\x99P\x8f" +
	"\xfd\xa9n\xbbv\xa1\x8b\xe6&\xef\xa2y6b\x04\x9f" +
	"\xa6\x9e\xcf\xca\xa8\xbe\x10\xb9hN\xdc\xe0\xdd>\xaf\x92" +
	"h\xa0\xf01N\xd1</\xcb\xa8~(\x91\xfe\xe6\xb4" +
	"\x1c\xd3' \x16q+*:s\x0c\x9bM\xd8\xc8t" +
	"\x83_\x89\xf5\x86?ck\xfb\xd8\x90\xe1\xa0\x18a\xc2" +
	"\x96#\xef\xe74g\xc8p\x98\x89\xa2\xc9\xcaD\\\x0d" +
	"\xc7e\xcc\xde5\xc7\xd0\xb6\x0d\x9d\x1a\xb1v\xde\xb4\x0b" +
	"1\xcde\x8bi\x1e\x8aC\xb3r\xa9I\xcb\xd5\\V" +
	"s`{\xc3\xc3\xf1\xb9\xd8M\x87\xf8Y\x19\xd5m\x12" +
	"V\x1c\x96+0\xd3\x1d\x07\xb9T\xf0\x8f*^\xd4\xdc" +
	"\x19\xff\x14\x17w\x86R.\xdb\xdc_,\xd2\x84\xe2$" +
	"\xb6v\x92\x99\xe3\x02\x81R\xe2\xdc\xf5\x00('\xd6\x8e" +
	"\x00`CbM'@|\xc6*\xb0d\xa1\xe4\x18\xd9" +
	"\x98\xa9\xcdU\x1c\xe6\xba\x86\x99s\x00 nZ&\xab" +
	"wEve\x1cf\xcfin\xcc\xf3C\"\xd6\xf1G" +
	"\x00\xaa.\xa3Z\x0c7V\xb87j\x1c=\xf1\xf8\xd6" +
	"l\xd48z\xe2q\x9b\x0d\xa0\xde*\xa3\xfa\x13\x09+" +
	"\x967\x099\x0f\xdc\xb5\x88\x19\x11\xd7\xc2\xb4\xec\x82\x96" +
	"7\x0e!\xd3\x07-\xcb\xd6\x8d\xa4\xa9\xb9\xcc\xa9;\x0e" +
	"\xcf\xecA\x9c<\x83Z\xdf\xa2\xa0\xb9\xd9\x99!\xc3\x81" +
	"$\xbf^\xea\\\x03\xb1\xe1qmnwQ\xd7\\\xb6" +
	"y4\xa9\xb9\xa3f\xae\xe6,\xd7\x87\xca\x17X\xcdM" +
	"\xeb\xc3\x03\x8e\xe55\x97O\xb9\x140\x967s\xfes" +
	"0M\x8cO\xd3o\xea\xb6e\xe8_4\x1dg\xf3\x18" +
	"\xd3\x9c\x92\xcdH\x04\xaa\xfel\x1e\xb4L\xc7e\xf9\xbc" +
	"\xd8\x14-\xe4l\xce\xce\xb1\x01~\xc6\xc3\xeb\xf9\x19\x7f" +
	"\xa1\x93\x9f\xf1\xd6\x01~\xc6\x9b\xe8_c\xe2\xdc>\x00" +
	"lJ\xac\x1d\x00\x98/\x99\xfbL\xeb\x80\x19\xcb\x15\x9d" +
	"\xb8\x93\xd1\x9c\xf9\\\xde25\xc7\x89\xef?\xe48\xa9" +
	"\x0c3t\xab4\x9f\xd3\xf2F\x9eY\xc12\x1b>~" +
	"\x99\x83\xf9\x98\x95\xddGK\xda\xee\xf3F\xb9\x87\xee\x89" +
	"\xf4\xddd\xb0\x1f\"CN\xf7\x07R\xcc\x89\x12\x02\xa4" +
	"\x1f\xa1\x86g\xa9A\xbaL\\,Os\xcb\xff,\xd1" +
	"_\xc0P2\x94\x13x\x17@\xfa\x05\xa2\xbf\xcao\x16" +
	"M\xdc,\xa7\xd0\x06H\xbfL\xf47\xf9\xcd\xd2$n" +
	"\x967\xf8M\xf4:\xd1\xdf\xe37KF\xdc,\xef\xe0" +
	"\xb5\x00\xe9\xf7P\xc6I\x89.\x96\x06q\xb1|\xc4\x87" +
	"\xf9\x90\xba7\x13\xbd9\xdb\x81\xcd\x00J\xa3D\x17W" +
	"\x83D^0\xd1[\x1a;\xb0\x85\xbc`\x89\xf6\xd5J" +
	"\xf4\xd5D_\xa2w\xe0\x12\x00e\x85D\xcb_M\xf4" +
	"\x0dD_\xda\xd4\x81K)\x10\x95h\xf9\x1b\x88\xdeE" +
	"\xf4V\xd6\x81\xad\x14\xa8K\x0f\x02\xa4\xbb\x88~!\xd1" +
	"\xdbb\x1d\xd8\x06\xa0\\ \xfd\x08 }!\xd1w\x10" +
	"}\xd9t\x07.\x03\xe8\x1d\x96\x96\x13\xdf&\xa8\xe1R" +
	"j\x887w`\x1c@\xd9#\x9d\x01H_F\xf4\xbc" +
	"$a\xc55\x0al\\3-@\x07\x1bAB\x8a\xf0" +
	"g4[?\xa0\xd9L\x1e\xcc[\xd9}C\x86\x93\xb5" +
	"L\xd70K\x86[\x1e\xb4J\xa6\x0b\xc1\x9d0\xa39" +
	"SF\x81\xed\x96\xcc,\xb3]\xcd0\xdd2\x0d\xe6\x84" +
	"\x81\x0c\x8d\xbf\x9bT\xc6o\x8eS{ \xd93\x9a3" +
	"\xca\xb4b\x1a\x92,k\x99\xd1\xa0F+\xa6Y\xd6\x02" +
	"\xd9\xd4\xa3\xb3]T\xca\xe7\x07\xd0\xd0\x1c1M8\xcf" +
	"45\x18\x9a\x03I\xde\x12\xd9\x8bC\xe4q\x10\xf3\xfa" +
	"\xdd3\xde\x10\xb4\xed\xc8Z\xa8\xeb\xc7l\x86\xde\xfa\xf8" +
	"\xcd\x0c\xd9\xc6\xb4\x8b\xfc\xb5\x09f\xa7\xd2\xd5\xbb\xd2\xa9" +
	"u\\3\x91\xb7\xa6Y6F\xad\xb5\xaf\xcb\xbbk\x16" +
	" \xfaZ&\xd6\x8c\xb4\xdb\xccJ\xb5\x1d\xfd)kM" +
	"\x87\xbc\x98N&\xb9Rr\xef?@\xb9\x13-=!" +
	"(\x94h\xcc$\xb9 T|-\x86\x18\x8f\x17B\xc3" +
	"\xd6\xb3\x90a\x9b\xf5n\xa9\x1d\x12&\xb3\xf4>\xb6\x87" +
	"3x\xeet\xc1\x1f1\xce\"\xd8@{\x14\x17\\\xc0" +
	"M\x8d\xf8\x1e\xf4\x94f\xae\x1b\xa7{\x88[\xb9`U" +
	"\xf7\x0fx0\xc5C\x91U\x1d%\xe2}\xbe\x07\xe2\xf9" +
	"\xdf\x0f\x93\x0b\xf1\x90\x8c\xeaS\x11\xff\xfb\x89Y\x0f\xd0" +
	"xNBl\x10\x0e\xc81\xdb\xf3J^\x8f8 \xaf" +
	"\x11\xf1U\x19'\xb9\xf9\x90\xb8\xf9H|t\x08@\xfd" +
	"\xd0\x8b}\xe73Fn\xc0:x\x09\xc6@\xc2\x18\xf8" +
	"\xff\xf7\xf8\xff+\xe2\xff\xc5\x06\xc4tw\xa6\x86\xba\x83" +
	"A\xdc\xc8\xcd\xb8!\xd9:8a[\xb3\x0c\x92\xdc\x97" +
	"\xa9\xbd\xc8\xca\xa59\x0a\xfe\x17k6\xccb\xc9\x9d\xb2" +
	"5H\x99\xce\xb4e\x17\x16sKjo\xb4tJ8" +
	"\x1a\x1c>\x09\xf1f\xccTv\x9a\x8ek\x97\xb2.\xd0" +
	"%\x1f\x0d\x12:#.\x9c\xcf\xff\x13gy\x91\xc3K" +
	"A\x8c\x90xqo\xc4\xad\xf3A\xa6S#\x9e[\xf7" +
	"f\x04d\xf2C\x0c\x0e?x\xb1A\xe2\x1d\x0a\x94\xde" +
	"\x94Q\xfd\x80\xf8\xdf,\xf8\xff~F`\x12\xfcPb" +
	"\x127\xde\x89\x8fHN?\xf0b\x8e\xf8\xb4m\x15\xb0" +
	"=L\x18\x09\x91\x94]\xab\x9eX)q&L\x19 " +
	"\x17B\x878\x086!4\x88Y\xdbr\xc8$\x02\x06" +
	"\xfdR\xec\xa0\xe1\x8e[A\x17#\xca/\x8c\x87\xcc\x14" +
	"1l\xb2\xa8\xd9QU\x88.\xa5^\x15\xa6lmz" +
	"\xda\xc8r\x7f\x7fs\xbf\xe7\xdcrO\x8b\xb3\xf6<\xe1" +
	"\xd1\xad\x13\x1e\xdd\x1aq\xdb'2\x9e\xbf\x96,\x1b," +
	"\xaf\xc7\x1d\xd7*Vl\xe6\x94\x0al\x92AL\xd3\xcb" +
	"5R0\xec\xce0\xdbd\xee\x84\x96\x8d\xedc\xee\xe2" +
	"^M\xa0\xfbgE\x9c\x9a\xe2>\x17\xdb@\xc26b" +
	"\xae\xb3H\xd0\xf2\xc5\x89\xf4D^3MfO$9" +
	"NX\x13pR8\xf0\xbc\x87.\xfa\xb3\x9c\xbc6\xf4" +
	"\xfcICi\xc3\xa7{\"\xe7\xde\xe8y\x8b\x1fMz" +
	"\xca\xd8\xccUT\x00\x0dJ#\xbf\xf9\x1b\xd0\x07\xaeb" +
	"\x01p\x95\x89\x02W\x09I\x16\x1e\xc1\x0a\xec\xab\x8aM" +
	"e\xcf%X\xc3\xe9\x1dD\xef\xe2@W\xc9\x9e\xb0\x9c" +
	"\xa1a\x9c\x98\x148\x03\xc0\x02H\x83@C\xab{\x05" +
	"g\x1e\xed\xbcL\x04bFh\xfb][\xcb\xee\x1b\xd7" +
	"\xb8\x8c\xf9N\xbeSdL\x1f5\x0a \x1bn\xc0b" +
	"-\x9be\xf9)\xcd\x86X\x8e\x05\xd4\x94X_=\xb6" +
	"Q\x03\xd0V\xb7\xd7\x9b\x86\x88\xe4\xa1\x00\x8f\xc2|C" +
	"Kg$\xf3\xe8\x83GB:\xa3!@g\x08\x93\x05" +
	"\x87\xcaF\xc2\xb8 \x88\x01\x0a\xa4\xe232\xaa.\xf1" +
	"}\xbb8\xd5\xfd#^\xb4py\x08\x14\x05K\xa8\xc5" +
	"\x83\xc2\x88-\xa5\x09\xbb\x18\x0f\x97\xe8u\xe6*`\x98" +
	"9\x88\xb8\x15\xd5Q\xda\x98\xa5\xa7\xc4\xcd\xa3v \x86" +
	"\xa5\x08\x89u#a\x8e\x88\xfe\x04I\xdd\xc4:;L" +
	"\xa2SK\x08\xeb\xaf\xbb\xb6\x12\xc0\xf3\x00\x95Q\xa6\xe9" +
	"\xfe\xb3\x7f\xadA\x92\xc7W\x95 \xc4\xa6~\x96\x993" +
	"\xdc\x92\x8e\x86\xa9\xe5\x05Q\x1d\x0a\xfc\xe8c8\x00\x90" +
	"~\x8a\x84\xf1y\x94\x10c\x9c\xab\xcaq\xec\xac\xf2\x96" +
	"\x9b\x05c\x95\x138\x02\x90~\x9e\xe8/\x13\xbd\xc5\xf3" +
	"\xa2Orw\xfc%\xa2\xbfN\xf4%\"\x02W^\xe3" +
	"\xe3\x84^tk\x83\xefE\x8fTy\xd1K\x1b}/" +
	"\x9a\xe8os\xfc\x87\xbb\xadMBgZ$\x8e\xff\x90" +
	"\x17\xda\xc1\xdd\xd6\x98p\xa3\x13R\x8f\xef.o\x94\xbc" +
	"\xdb\x80\xdc\xe8s\xb9{\x1d\xba\xc5\xe4\xcd.\xe1n1" +
	"\xadg#\xd1\xb7\x10\xbd\xbdE\xb8\xd1\xdd\xbc\x7f\xe8." +
	"\x93t\xb5rw\x99\xd6\xb3\x8d\xe8CD\x97\x1a\x84\x1b" +
	"\xdd/\x91[\xbf\x9d\xe8\xa3Doh\xe4n\xb4\xb2S" +
	"\xba\x09 =J\xf4K\x88\xde\xb4Dx\xd1\xbb\xa5\x81" +
	"*\xef\x9a\xa2\x89v\xee]S\xd4p)\xd1g\xa4z" +
	"\xf8V\x04\xe6\xed\xa1\xe0\x04\xa8\xe2\xb4;\xaa\x99\\L" +
	"\xeb[m\xba\xfeG5\x93\xf4\xbd\xae5\x9eg\x9a\x8e" +
	"\xed\xa1\xf8y/Ebsl\x0f\xe5\xd1k\x9d\xb6\x19" +
	"#\xe1\xab\xc7\x09\xc9\xf3\xd6/*\xb9%\x90mV?" +
	"n\x92\x1b\x9a:\xd8\xd1(0\xc7\xd5\x0a\x10/\x0e[" +
	"\xd3~\xe8\x1d/0W\xc3\xf6P\xfe\xfd\xddz\x12\x0c" +
	"q\x12al\x0fu\"X\x9dV`\xfd9\xce\x0e?" +
	"\xd2\xe6\xb4!\xdb\x82dq\x82\xd9\xd9\xc0\xc6\x15HU" +
	"\x86\x0f2\xcc\x96H\xadEZ\xc1k\x9c\xb7\xb5\x03\x13" +
	"6\xd3\xfd\xeb\xa7\x92+\x96\x86\x0f\xb2l\x09E\xd7\x02" +
	"[4g\x14AB\x93\x1c\x0a\xe5\x16.(\xb5I\xb4" +
	"\x8cD\x92\xe3-\xb3\x95\xfe\xac\xc0IIC\xd3\xcct" +
	",;mA\xbcdg\x99zi\xa0\x9c%\x89n\x8a" +
	"\"I\xc7\xe5Rh\xf3\x94\xb2\xb4\x1e \xed\x12\xfd\x1b" +
	"R\xe8\x97*Wp\xfaA\xa2\x7fS\x8a\xa0\xa7Wr" +
	"\xfa\xe5D\xbf\x86Kk\x93\xd0\xce\xab\xb9\xf6|\x83\xe8" +
	"\xdf\x96$\xc4F\xa1\x9c\xdf\xe2J\xf2M\"\xdf\xca\x85" +
	"8&\x94\xf3\x16N\xff>\xd1\x7f\xccc\xdcf\xa1\x9c" +
	"\xb7\xf1an&\xfa\x1d<\xc6m\x11\xcay;\x17\xfa" +
	"[\x89\xfe\x13\x1e\xe3.\x11\xcay\xa7D\x17\xe6\x1dD" +
	"\xbf\x8f\xc7\xb8K\x85r\xde\xc3\x95\xfcn\xa2?\xc4c" +
	"\\\x14\xcay\x94\xcf{\x1f\xd1\x9f\xe31\xae$\x94\xf3" +
	"\x18\x9f\xf7)\xa2\xbf\xca\x8d\x85,\x94\xf3\x14W\xda\x97" +
	"\x89\xfe&7\x16(\x94\xf3\x0d\xce\xceW\x89\xfe67" +
	"\x0aMB9\xdf\xe2\xeby\x93\xe8\x1fp\xa3\xb0L(" +
	"\xe7\xfb|\xfdo\x13\xfdC\xa2'\x9a;0\x01\xa0\x9c" +
	"\xe6\xeb\xfc\x80\xe8\x0d\xb2\x84\x89\xe5\x0d\x1d\xb8\x1c@A" +
	"y\x16`R\xa6\xfb\x9e\xc8Jc\x07*t\xdf\x139" +
	"\xbd\x9a\xe8[\x88\xde\x11\xef\xc0\x0e\xb292\xe9\xfe\x16" +
	"\xa2o'\xfa\x8a\xe5\x1d\xb8\x02@\xf9\x82|\x88Bt" +
	"\xa2\xef \xfa\xca\xa6\x0e\\\x09\xa0\x0c\xcb\xb4\xad!\xa2" +
	"_&KAR\xa3\x09$l\x82\x1a,\xc82\x83g" +
	"-\x1f\\\xe5\x9e2\xfa\x19\xd3\xb9\xf1\xe1\xa1\xda\x8c\xa9" +
	"m\xe5\xf3Aw\x8e]\x07\xca\xe1\x81\xd6\x81\x02\x1c\xd0" +
	"L\x9d\xd9\xfd&\xc4r\xf9@\x85\x84\xb3\xd1o\xe6@" +
	"\x0e\x89\xf1\\\xd9\xb6jfJrg\xa3\xd60h\xa1" +
	"Z`{\xa8>\x9e\xc3\xe1X\xa4 \x18\x0fU\xc9\xbb" +
	"\x89\xa7\x8d\x83\x1c\xc8\x83(\x927\x9f+:\x173\xb6" +
	"/p\xa4\xc9\xea\xec\x9a\xbe\x98\x81\xcc\xf6\x05\xf1n\xd1" +
	"r\x8c\xc5q\xbc\xa2\xe50\xb5\xa4\xb9\xd5\xadA\x82\x90" +
	"\xf83\xa8\xe5\xd1O\xf0E\xccCY;\xc03\x7f\x90" +
	"\x12MA\x83Q(]D\xb6iAS\x1au\xd5#" +
	")7\x91q\xdb\x9cN\xf2#\xafw\xd7\x07\x84\xbb\x9e" +
	"\xe1\xee\xfa\x8a>\xcf]\x9f/j\x8ec\xcc\xb1\x8aV" +
	",\xda\x96\x96\x9d\x81\x98a\xe6R\"\xc9\\\xe3\xa9\x8c" +
	"ks~\xb6\x8e\x02\xb6\xa06&\x81\x03\xf3\xfd\xban" +
	"3\xc7\x89\xfa\xf0\xb3\x0b\xa0\xcc\x14\xc1v\xc9\xa8^(" +
	"a\xc5p\xc4\xda!N\x97J\xe0\x1deK\xb6\xcdL" +
	"\xb7\x1fRbH\xbai\xfc\x99j\x12f\xff\x01\xe8r" +
	"\xac\x94w\x0d\xba)w\x9a\xba\x91\x8dk\xaee\x13\x8b" +
	"Z9\x8b\xd6\x0a\xfcr\xc5\x08g\x11\x852>FY" +
	"\xd1\x99\xcb\xb2.\xd3\xc9\x06\x9b\x96;D\x7f!\xe62" +
	"\xbd\x16k7\xe6bl\xf7\xce\x1a<:\x13\xa6\xfd}" +
	"\x16\x18{#n\xa7\xef\x8b\xee\xdf\x1b\xba\x9dA\xb4Z" +
	"\xbe*\xcc\x83Vl\xa6\xd9_6\xd8\x01\x88\x0dj\x85" +
	"\x80WZ\x9e\xd9\xee\x14;\x08\xb2\xdb\x1d\xb8\xed\x11b" +
	"OH<\xa0\xd9\xccd\x0e:\xe2\x04\xeb\xef(\xb1\x8f" +
	"\xe1\xc1\xe1\xd4E\x13\xe4\xb4s\xf6\x04[\x19^\x0e\xa0" +
	"n\x97Q\x1d\x8d\xf8\xd5;\x97s?\x11\xd5\x89\x08\xf0" +
	"1F\xc4\x1d2\xaaS\x12\xe2A_\x87\xb0\x1c<\x1d" +
	"\xaa\xc3\x91\x1ajq\x01\x01\x0bl\xf6Q\x00C\x16H" +
	"\xff\x04\x9f\xe0\x8d\x11~Z\xafM\xf2\xd3\xa2\x98\x1e\xe5" +
	"\xc4\xc9I\x8e6\xbf8\xc2\xd1\xe6\x13wq\xb4\xf9\xc4" +
	"!\x00\x8c%\x8e\xdfDw~\xe28\x05\xac-\x89\xa7" +
	"\xe9\xdf\x92\xc4\xd3}\x00\xb84\xf1(\xb9/\xad\x89G" +
	"\xe9_[\xe2\xe8U\xa4p\x89\xfb\xe9_<q\x84~" +
	"\xda\x13\xb7\xd3\x98\x89\xc4m4\xc3\xf2\xc4-}\xbc\x9c" +
	"\xf4{=\x00\x15\xb7d\x9b\xa3l\xda\x05\xefy\xd2\xc8" +
	"\xcd\x00\xba\x95}\x8c\x15}:=\xfbt\xc7\xb55\xf2" +
	"\xbb\x88n[%S\xd72\x16\x96\xdca\x8a\xe5K\xf1" +
	"B\x86\xd9\x01\x19R\x82\x1e\xed7\xc5\xa7\x93\xa7\xdd$" +
	"I\xe7\xb6hS\x9a\x8f,\xcf\xb8)j\xea\xee\xaa}" +
	"m\xd2\x88\xe5\xfc\xc6\x9eh\xe3nZ7\x88\x86-)" +
	"\xcd\xb6I\xed\xd9A\xc3\xf5\xd7O\xcf\xde\xfaE\xafm" +
	"\xc9\x12\xbdS\x9f\x97\xf9\x12+{F\xabF\x0b\xceZ" +
	"\xa0ra}\xa4 \xc6\xd7\x02\xa3\xd3\x0b\xd3\xbe\x11\xc9" +
	"\xcaDk_dC\xf7\x0dw\xac\xb8P\xb8\x19\xd7\x89" +
	"\xbch\xb0\xa93'k\x1bE\x17b\x96\xed\x04\x0e\\" +
	"\xb5\x14\xd6\xa5\xab}\xcf\xabd\xcbY\x16\xc9k\x09)" +
	"\xec\xee\xe3Rx\xde\x00\x97\xc2u}\"\xafE\xc2\xa1" +
	"\x15\x8by\xcd4\x0e\x02@j\x1f\xcf\xe9\xcf[\xa2\x8e" +
	"&\xe5\x1a\x14\x12&\xf5R\xa1P\xae1\xe8\x17\x1b\xd3" +
	"F:\xab\x99\x9b\x07g4\xd3d\xf9\x8b\x0d]vg" +
	"\"\xd3\xf6\x89t\x9a\x98\x96gUda\xbf\x1a\x12+" +
	"f\x01R\x07z\xba\xc6f\x0e\xa5\x0el\x11?\xdb\xe8" +
	"g\xfe@\xf7_\xd2o\xe5\xc0\xb6\xae\x89|\xc9\xd9\x06" +
	"q\xfe\xd7\x9f\xba\xe9\xcf\xb7\xa3d=\x18?\xe0\x0b\xf9" +
	"z\x8e\x08\xd3y\xbb0\x9d\xb7\x096\x1c\x9e\xe5\xeb\xf9" +
	"\xde^\xae\x8c\xdf\xb5\xb92^\xb7\x97+\xe3\xb7l\xae" +
	"\x8cW\xdb\\\x19\xaf\x9c\xe5\xcax\xc5\x0d\\\x19\xaf\xb8" +
	"\x8a+c\xf9\x06\xae\x8c\xe5C\\\x19K#\x11s\x9c" +
	"\xb5t:\x9d}\x000\x9f1\xdct\xd9\xccV\x9cR" +
	"\x86;\xf2\x10\xe7\x7f]\xeb\xc0\x10\xcbZ:\xc8L\xaf" +
	"\x14\x1c\x96\xed/d\x0cH\xe6JV\xc9\xa98\xe5B" +
	"\xc6\xca\xa7\xcb \x9b\xd9J.o\xa5]\xdb0!\x99" +
	"\xe3o\xe6\xf2\xd6\x94\xa5\x0f1H\xd24z%\xa3;" +
	"C=\x03\x86\xeb\x0d\xcc\xff\xa6K\x19\xe4\xb3\xa5\xcb&" +
	"f+9-?\xdc\x9d\xc9\x0e\xca\xfe\xba8!\xdbc" +
	"\xea\x83\x82\x82\xfb\xbc>\x13\x1a\xa4rL,8\xa39" +
	"\xf4@\xeaU\xa7E\xd5\xf5?\x11\xe4y6\x04\x99}" +
	"-z\x984\xeb\x01\x19\xd5\xe7#Zt\xfc\xac\x08\x9e" +
	"\xeck\xd1k\x19\x81'\xaboGR\xdfo\x0dD\x8a" +
	"+|\xe8YA\x9e\xa4\x0a!,\xbf,\xa2\x8d\xa3\x00" +
	"\xbc\xbcb\x03J\x8b\xc5g\xf2\xc1\xda,\xa8\\\xae\xcb" +
	"\x8b.\xa8\x87\xf3V\xd6\xd5\xe6X]\x8d\x91?\x0f\x16" +
	"G5\xc7\x1d\xb6\xa6Ip<\xef\x8d\xa7P\xc3W\xe4" +
	"\xc5\xf0fq\xe7m\xee\xf7\\\x0a\xe2\xec\x86\x80\xb3o" +
	"\xf5\x84\x00\xb0\xcf\xd9w\xd6G\xf0_\x9f\xb3\xef\x13\xf1" +
	"m\x81\x0d\x06\xb7t\x158\xe8c\xca\x1f\x0dx\xa0p" +
	"C\xb4\xe0\x04\xb1\xaf\x0a3\xf4\x18\xdb\x88\x9d\xd1r\x16" +
	"\xbf\xdc\xa4\x05{\xaa\xce\xa1\xb9IDL\x91s\xe8@" +
	"\x09\x93\xae\xe1\xe6\x03\xccn\xb1lor\xc6*9A" +
	"\xafy\xcds\xad\xbc\xff)\xc7\xb5\x19s\xfd\xbf\xf1\xac" +
	"\xe1\x96\x83\x82\x0d\x0a!\xc27\xb3V\xc9t\xedr]" +
	"!\x80\xf0\x1e\x06Y>\x99\xdfiN[5p\xee\xe4" +
	"\x9f(8\x08d\x09\x8bA\xa0o\xb3\xa2]7Mm" +
	"\xae&\x00\xb8j\x8e\xb43\x82\xe9\x07g\xda\x19=S" +
	"i\xa13\xf5\xd24\xa7\xfb\xa2g\xea\xe5i\xaa\x01\xdf" +
	"F/\x0e\xae9\xbc\xa6&q\xa6-\xfc\x90\"8p" +
	"L\x1cj\x1b\xc7\xba\xc2\x1a\xa5\xe6f\x0f\xa3\xe2\xfd\x03" +
	"|8\xae\x1bN\x10\x91-Z\xce\x9a\xb2Y\xfe\xcb," +
	"\x08\xc5*\xe2o\xda\x05\x0c\xe37\x9b\xe5\xf7\x84\xd0\x05" +
	"\xcb\xefI\xbbU\x8d\xfd\xd1\xc6\xfeHc\xcd\xc9^l" +
	"L'\xf9\xc5\xc4]\xff\xb02\x1fg+\xfeM\x05q" +
	"Cwg\xd4\x0b\x03h\xe2{\\\x82\xaf\xa7M\xdd\x8c" +
	"\x11h\xe20g\xc2\x8dD\xbf\x15#\xd0\xc4-\xbcP" +
	"\xebf\xa2\xdf\x81AE\x9fr;\xc7\x0d\x7fL\xe4\xbb" +
	"1,\xeaS\x8e\xf0\xe1\xef \xfa}Q\x03V\x9b\xf6" +
	"\xf7\xf5\xec(\xc7\xe0\x1f \xfa\xe3QE{\x94\xd3\xc3" +
	"j\x80\xe6Vq&O\xf3\xe5\x04\xb0g\xa2E\x16\xd0" +
	"\xc4q^\x0d\x10\xe2\x9bK\x1a\x044Q\x8bo.}" +
	"N@\x13\xaf\xe1MU8f\xebq\x01M\xbc\xc3\xfb" +
	"s\x1c\xf3C\x8c\xa4\xdfO\xf3\x1c\xc2\x07Do\xe0\xd0" +
	"D\xb3\x80&P\x9a\x05\x98\x94<\xd83\x99q\x1cC" +
	"\x0fT6\xfa\xa7\x92\xd5\x8aZ\xc6\xc8\x1b\x14Y\xb1@" +
	"\xcb+\xd36\xdb_bf\x16\xb0\xec\xc7\xbb\xc9<\x9b" +
	"c\xf9\xaa\xe8\xd7\xd7C?\xd9\x9de\xa6\xcb\xec\x8bl" +
	"\x88\xb1\xfd]aN*B\xed\x0e\xa9U\xa2\x80\xf1P" +
	"P\xbc \xdc*2\x9bb/\xbc\xc86\x98\xa9\xe7\xcb" +
	"\xf1\xf1HqXe\x8e\x99%V\x93\x850\x9cm]" +
	"=\xdd\xdd\x05\xccN2\xa7h\x99\xba\xcc\xec \x00\xa2" +
	"\xe8\xb5h\x19&\xa0\x1b\xa6\xb1\x83z\xcd\xc1B}^" +
	"-\x9e\xd6#\xe4j\xbb\x12\xb9~\xd3\xa5BA\xb3\xcb" +
	"\xdc\xaeDJSg#U\xa8\xbe]\xb9\xfaZ\xaf\x98" +
	"\xe8F\x92\xe5faW\xbe;\x1b)C\x95[\x84]" +
	"9\xbc7,_\x0bna\x8a+\x82\xb2\xa3\x85/\xd5" +
	"\x8f\xbb\x03+\xd3b\xc5\x83\x10'\xd3\x1cdt\xf9\xd5" +
	"8h\x95@\x8e\x10\xb3V\xa1Xr\xd98\xa0\x13\xbc" +
	"___\xa5[\x05\xe6\xdae\xa8-\xbe\xb3#\xab\x0f" +
	"\xaa\xef2\xe1\xea\xfd\xdc\xeb\x9d\xcb#\x15y\xbe\x07\xf2" +
	"\xf0z\xcfWy<\x04\x17\x13\x8f\x0eD\x92\xe4~\xee" +
	"\xfb\x89\x81\xb0H\xbc\xe2\xb8\x9a\xed\x8eY&$\xad\xa9" +
	"h\x05\x163\xf5z4\x07\xa7k\xb0\x99\x18\xb3m\xff" +
	"\x0a\x9c7\xcc\xbc\xc1l\xc7?\xfb?\xcfy\x88d\xa4" +
	"R\xee\xe6\xa9rq\x81\x10@\xf8\xbe\x9b\x04\xb2r\xde" +
	"^\xee\xfb\x9e;\x09Pq\\\xab\x986r&w\xf4" +
	"(\xf0\x9b\x14@\x02\x7f\xde\xc3\xf2\x10\xcb[\x07\xc4\xbf" +
	"/\xda\x0cdf\xf2WF\xbdp\xd1_I\xe3\x9f\xeb" +
	"\x9e\xa3\xab\xb6b\xf4\x13\xc4\x84\x1d\xf94*\xd1\x13\xf9" +
	"\xac\xac\xed\xa6\x8a_\xcd\x05I\x1e\xec$\xb9k_\xf1" +
	"\x81\x12\x14H\x89\xe6\xca\x96]\x057wV\xc3\xcd\x92" +
	"\x0f7\xdbU\xb0\xb2\xe73)WJWE\xe1c\x9e" +
	"\xe0\x949~\xdc\xe3\xe3\xc7\xd7K\xa16(\xd7\xf1\xda" +
	"\xa3\xeb\x89~3O\x82x\xc9\xa0\xc3\xbc\xc4(\xc4\x89" +
	"\x9b\xbcd\xd0\x9d\x1c\x7f\xfd1\xd1\xef\xe6x\xb3\x97\x0c" +
	":\xc2\xfbs<\xf8\x11\x8e7\x8bdP\xef\xc3\xd2$" +
	"\x02\xa4\x9f\xa5\x86\x17\xa2EU'\xa4\xdf\x90\xf5&\xfa" +
	"\xeb\x1cp\xf6\xb2A\xafI\xafT\x01\xbfKE6\xa8" +
	"\xf7}\xa9\x0f=$\xb7U&\xab\xde%\xacz\x8b|" +
	"/\xdd\xe4D_M\xf4\xb6\x0ea\xd5W\xc87\xf9\x08" +
	"\xef\x06\xa2/\xeb\x16V}\x1dGx7\x10\xbd\x8b\xe8" +
	"\xf1\xa5\x02p\xde$\x13C?K\xf4mDo\xef\x11" +
	"\x80\xf3V\xf9\xaa*D8\xd1*\x00\xe7/p\x049" +
	"D\x84\x97\xf7\x0a\xc0yX\xa6}\x8d\x12\xfd\x12\x8e8" +
	"\xb7\x09\xc4y\xb7\xfc\x18@\xfa\x12\xa2\xeb\x1cq\xde\"" +
	"\x10gM\xa6\xdb\xe72\xa2\xe79\xe2\xbcL \xce\x86" +
	"L\x8c\xd6\x89^\xe4\x88s\xa7@\x9c\x0b|_E\xa2" +
	"_.K\x18w\xe6v\x86\xc5U\xd9j\x11\xc3x(" +
	"\x9b\xde\x85 \xf0\xd6i\x07\x99\xeb\xd5E\xf9\x1e\xab\xf0" +
	";\xfd\x91l\x96e\xc6\x1c\xd31=7\xc5\xab\xcbb" +
	"\xd1\x82,\xbfU\x12\xada\xadS\xaa\\U\xb95\x9f" +
	"5\xbb\x862;B\x04\xaa\xe8\xb0\x92n\xd9\x9ad\xe6" +
	"\xd8\xa4\xe6\xb21\xe62{\xa1\x92'\xbfc\x83\xd71" +
	"RN\x15\xbc\xe3\xd7S\xf9\xefh\xd9l\xa9P\xcak" +
	"\x92\xcb\xf4!\x96w\xb5I\xcd\xcc1\xf1\xc5P\xb0\xb1" +
	"\x85;\x8d17F\xb6\xaav(\xb9\xaaWd\x11)" +
	"\xb1\x8ah\xdd\xd7\xa0f\xdb\x06\xd2%M\xd7~\xd2\xcc" +
	"\x96w\x1c\x0aQVjd\xf6E\xe8\xf9\x04ey\xc7" +
	"\xa1\xb0\xf4<|y\xb0\x9c\xcd\xb3hM\x9c\xf7\xe2 " +
	"$yK\xb4&\xce\x7fgbFsX\xdd\x1b\x13\x10" +
	"'z\xdd\x0a%\xef\x85`3\xb2[\xae{W\xaa\xea" +
	"\xe1\x96!:L\xda\xb4w\x9a \x0fe\xfc\xd7\xe6\x1d" +
	"\xa2\x0ce\x82N\x85\x05\x8c\x1a\xc6Cs\xe8\x09c=" +
	"\xdc-\x00I\x9e\xa7\x0bjf\x12-}\xe1\xf7\xb0\x89" +
	"\xc6\x81\xd4(\xaf\xcb\x9d\xf7P\xcb(h:\x1b\xc1G" +
	"\xfd\x1bs\x8c\x9c\x80Q\x19\xd5K\xc2\x1bs\xf7\x08\x80" +
	":%\x0a\x14>\x06\x17\xe73\xf0\x0b\xdd\x97\x1e\xafR" +
	"\xdb\x81h\xa5G\xe4c\xdd\x05n\xb4\xc8=\x02\xc0w" +
	"\x16~Z\xde2\x1b~m\x98h\xb9!,\xce\xe3\xa5" +
	"t\x15?\xd7\x80\x969\xc6\x1cG\xcb!\xa3(\xaf\xb5" +
	"R\xa9C\xfc\xdb\xf0\xdf+^\xa0w\x03\x80\xbaEF" +
	"u\xbbTW\x9b\xd7\x1e\xce\xedA\xfbf\xfd\x14\xd8\x1e" +
	"\xfd\x04\xb2*\x01 \xfb\x98\xb5\x80\xac\x87\x86\xc3\xc2\x97" +
	"\xffG\xf0\xb5\xa7\x12X\x0e\x9e\x0e\xd5EH\xf5\xa5\xc9" +
	"aR\x86oB\xce\x89/\x04\xc3\xcf:\xb1\xcf\xcf\xa4" +
	"D\xfc\xabN\xef\x03\xca[#k\xbc\xa53\xe2t\xf9" +
	"k\x8c\xba\x8cA\xd0z\xe7l\xf8\xad\xa5_[xO" +
	"g\xe4S\xcb\xc6f\xe1_\xdd\xdf\x17\xd60\x8a\x1a\x17" +
	"\xbf\xc4\xbf\xcav\x178\xfb\xd9N\x8a&\x03q+e" +
	"8\x19\xe29\x16v\x8d\xeb\x9a\xab\xf90N\xf8\x1dU" +
	"\xb0\xdb\x05\xb5k\xd4\xd0\x93\x9a=!\x8a\xb2\"\x1e\xf6" +
	"r/\xe9qc\x84\x09\xdf\xed\x01P\xbf-\xbe/\x0c" +
	"\x98p\xfb\x80\xc7\x84\x87\xc2\x8f\xbf\x8e\xae\x8fTb\xfa" +
	"\x0ev\xd4\xf3\x0c\xbf\xc7\x89y)Fw\x86\xb9Z\x0d" +
	"q\xdef\xd3y\x96\x0d\xbe\x84j\xf2\xbcIC?\x18" +
	"\xe2\xcfa\x05\xda\x9f\xcc\xc9M\xc5<\xbf\xd1+\x97\x17" +
	"\x19\xb9\xe1C\xdco\xec\xbf\x8a\xfb\x8d_\x10\x09\x8c\x0b" +
	"\x04f\xca]\xcb\xa6D\xf7d\xf0\x15\x84f2\x0a\xb4" +
	"!\x95c\xa3l\xda\x0d\x08R\x8eM\xf2\x9cB\x81\xd9" +
	"\xbc\x09\xdd\x0a\x7f\x9c4r \xcf\xb8\x8b&)\x16\xf7" +
	".k\xa47\xc78\xea[B\xa7>c6+2f" +
	"v\x04\xa2-j\xb6\xe1\x96'4\x88;\x0e\xd3\xbd\xbf" +
	"\x93\x0c\x92\x99\x92\x91w\x17/\xd1\x8b\xe55\xb3\xa6@" +
	"\xaf',\xf6\x0cj=;#_\x89\xf9\xc0\\U\x09" +
	"\xa7\x0f\xcc\xbd\xd3\x13\x81{|`\xee\xfd\xd9\x9aR>" +
	"R\x88\x8f\xae\xf5 \x1c^\x82\xd7\xe4\x95\xe6\xd5\x94\xe0" +
	"%b\xb2\xf0,7\xf1\xf0\xfc\xb3D\xdf\x86RM\x1d" +
	"\xdd\x82_\x13/P[W\x9de\x17Eu\xcc\xe6&" +
	"?\x92\x06\xfe\x8f\xd4\xf3\xfd\xc9J\xbb\x83\xa3\x96\xb5O" +
	"\x9ba k\xfa\"&,\x82\xaby\xe54A=\x98" +
	"gN\x11\x859\xed\xf3\xcc\xe9\xa5\xde)\x10q\x0f\xc5" +
	"\x87\x97\x88\xccf\xbb\xa7\xa4\xfb'\xc3\xafoR|\xcf" +
	"\xce\x02\xe9|\xb1\xf7$\xed\xbd\x1e+\xf6\x03w\xacm" +
	"\xfa\xbf\x01\x00\x00\xff\xffK\xe6\x10\\"

func RegisterLegacySchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_80ef1ec4889c2a63,
		Nodes: []uint64{
			0x8817eeea389e9f08,
			0x88dcce08ad29dda0,
			0x8afd33dc9b35e1aa,
			0x8fdfadb254ea867a,
			0x90c8426c3eaddd3b,
			0x92e21bb7ea38793a,
			0x943dc4625473b03f,
			0x94b7baa90c5c321e,
			0x9744f25fb60f2bf8,
			0x9811e1f38f62f2d1,
			0x9917470acf94d285,
			0x9b326d4e436afec7,
			0x9eaef9187cadbb9b,
			0x9ef1f3ff0deb5ffb,
			0xa0e27b453a38f450,
			0xa20710d4f428d6cd,
			0xa26e3710efd3e914,
			0xa5b39b4fc4d7da3f,
			0xa6f6ce72165ccb49,
			0xa99a9d5b33cf5859,
			0xab54c59699f8f9f3,
			0xacfa74a094e62626,
			0xb8aad62cffef28a9,
			0xb99b2bc7a57e8128,
			0xb9aa88c75ef99a1f,
			0xbd8822120928120c,
			0xc04e7b6231d4caa8,
			0xc08240f996aefced,
			0xc25bbbd524983447,
			0xc5417a637451246f,
			0xc8233c0345e27e24,
			0xc871d3cc252af657,
			0xcb6a279f015f6b51,
			0xcbb9490adce12d72,
			0xcd60164a8a0159ef,
			0xce7cd672cacc7814,
			0xcff7566681c277ce,
			0xd1c9bef96d26fa91,
			0xd4df5a192382ba0b,
			0xd500d30c5803fa4f,
			0xd7700859ed1f5b76,
			0xd85d75253435bf4b,
			0xd949bf717d77614d,
			0xdb98be6565516acb,
			0xdfdf30d03fc485bd,
			0xe10e21168db0c7f7,
			0xe2517b083095fd4e,
			0xe3d6685d4e9d8f7a,
			0xe8db07dcf8fcea05,
			0xec1ff7996b35366f,
			0xf5ad1d90cdc1dd6b,
			0xf98f999c6a071122,
		},
		Compressed: true,
	})
}
