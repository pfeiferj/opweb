// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

type CarEvent capnp.Struct

// CarEvent_TypeID is the unique identifier for the type CarEvent.
const CarEvent_TypeID = 0x9b1657f34caf3ad3

func NewCarEvent(s *capnp.Segment) (CarEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CarEvent(st), err
}

func NewRootCarEvent(s *capnp.Segment) (CarEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CarEvent(st), err
}

func ReadRootCarEvent(msg *capnp.Message) (CarEvent, error) {
	root, err := msg.Root()
	return CarEvent(root.Struct()), err
}

func (s CarEvent) String() string {
	str, _ := text.Marshal(0x9b1657f34caf3ad3, capnp.Struct(s))
	return str
}

func (s CarEvent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarEvent) DecodeFromPtr(p capnp.Ptr) CarEvent {
	return CarEvent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarEvent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarEvent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarEvent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarEvent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarEvent) Name() CarEvent_EventName {
	return CarEvent_EventName(capnp.Struct(s).Uint16(0))
}

func (s CarEvent) SetName(v CarEvent_EventName) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CarEvent) Enable() bool {
	return capnp.Struct(s).Bit(16)
}

func (s CarEvent) SetEnable(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s CarEvent) NoEntry() bool {
	return capnp.Struct(s).Bit(17)
}

func (s CarEvent) SetNoEntry(v bool) {
	capnp.Struct(s).SetBit(17, v)
}

func (s CarEvent) Warning() bool {
	return capnp.Struct(s).Bit(18)
}

func (s CarEvent) SetWarning(v bool) {
	capnp.Struct(s).SetBit(18, v)
}

func (s CarEvent) UserDisable() bool {
	return capnp.Struct(s).Bit(19)
}

func (s CarEvent) SetUserDisable(v bool) {
	capnp.Struct(s).SetBit(19, v)
}

func (s CarEvent) SoftDisable() bool {
	return capnp.Struct(s).Bit(20)
}

func (s CarEvent) SetSoftDisable(v bool) {
	capnp.Struct(s).SetBit(20, v)
}

func (s CarEvent) ImmediateDisable() bool {
	return capnp.Struct(s).Bit(21)
}

func (s CarEvent) SetImmediateDisable(v bool) {
	capnp.Struct(s).SetBit(21, v)
}

func (s CarEvent) PreEnable() bool {
	return capnp.Struct(s).Bit(22)
}

func (s CarEvent) SetPreEnable(v bool) {
	capnp.Struct(s).SetBit(22, v)
}

func (s CarEvent) Permanent() bool {
	return capnp.Struct(s).Bit(23)
}

func (s CarEvent) SetPermanent(v bool) {
	capnp.Struct(s).SetBit(23, v)
}

func (s CarEvent) OverrideLateral() bool {
	return capnp.Struct(s).Bit(25)
}

func (s CarEvent) SetOverrideLateral(v bool) {
	capnp.Struct(s).SetBit(25, v)
}

func (s CarEvent) OverrideLongitudinal() bool {
	return capnp.Struct(s).Bit(24)
}

func (s CarEvent) SetOverrideLongitudinal(v bool) {
	capnp.Struct(s).SetBit(24, v)
}

// CarEvent_List is a list of CarEvent.
type CarEvent_List = capnp.StructList[CarEvent]

// NewCarEvent creates a new list of CarEvent.
func NewCarEvent_List(s *capnp.Segment, sz int32) (CarEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CarEvent](l), err
}

// CarEvent_Future is a wrapper for a CarEvent promised by a client call.
type CarEvent_Future struct{ *capnp.Future }

func (f CarEvent_Future) Struct() (CarEvent, error) {
	p, err := f.Future.Ptr()
	return CarEvent(p.Struct()), err
}

type CarEvent_EventName uint16

// CarEvent_EventName_TypeID is the unique identifier for the type CarEvent_EventName.
const CarEvent_EventName_TypeID = 0xbaa8c5d505f727de

// Values of CarEvent_EventName.
const (
	CarEvent_EventName_canError                             CarEvent_EventName = 0
	CarEvent_EventName_steerUnavailable                     CarEvent_EventName = 1
	CarEvent_EventName_wrongGear                            CarEvent_EventName = 4
	CarEvent_EventName_doorOpen                             CarEvent_EventName = 5
	CarEvent_EventName_seatbeltNotLatched                   CarEvent_EventName = 6
	CarEvent_EventName_espDisabled                          CarEvent_EventName = 7
	CarEvent_EventName_wrongCarMode                         CarEvent_EventName = 8
	CarEvent_EventName_steerTempUnavailable                 CarEvent_EventName = 9
	CarEvent_EventName_reverseGear                          CarEvent_EventName = 10
	CarEvent_EventName_buttonCancel                         CarEvent_EventName = 11
	CarEvent_EventName_buttonEnable                         CarEvent_EventName = 12
	CarEvent_EventName_pedalPressed                         CarEvent_EventName = 13
	CarEvent_EventName_preEnableStandstill                  CarEvent_EventName = 73
	CarEvent_EventName_gasPressedOverride                   CarEvent_EventName = 108
	CarEvent_EventName_steerOverride                        CarEvent_EventName = 114
	CarEvent_EventName_cruiseDisabled                       CarEvent_EventName = 14
	CarEvent_EventName_speedTooLow                          CarEvent_EventName = 17
	CarEvent_EventName_outOfSpace                           CarEvent_EventName = 18
	CarEvent_EventName_overheat                             CarEvent_EventName = 19
	CarEvent_EventName_calibrationIncomplete                CarEvent_EventName = 20
	CarEvent_EventName_calibrationInvalid                   CarEvent_EventName = 21
	CarEvent_EventName_calibrationRecalibrating             CarEvent_EventName = 117
	CarEvent_EventName_controlsMismatch                     CarEvent_EventName = 22
	CarEvent_EventName_pcmEnable                            CarEvent_EventName = 23
	CarEvent_EventName_pcmDisable                           CarEvent_EventName = 24
	CarEvent_EventName_radarFault                           CarEvent_EventName = 26
	CarEvent_EventName_brakeHold                            CarEvent_EventName = 28
	CarEvent_EventName_parkBrake                            CarEvent_EventName = 29
	CarEvent_EventName_manualRestart                        CarEvent_EventName = 30
	CarEvent_EventName_lowSpeedLockout                      CarEvent_EventName = 31
	CarEvent_EventName_plannerError                         CarEvent_EventName = 32
	CarEvent_EventName_joystickDebug                        CarEvent_EventName = 34
	CarEvent_EventName_steerTempUnavailableSilent           CarEvent_EventName = 35
	CarEvent_EventName_resumeRequired                       CarEvent_EventName = 36
	CarEvent_EventName_preDriverDistracted                  CarEvent_EventName = 37
	CarEvent_EventName_promptDriverDistracted               CarEvent_EventName = 38
	CarEvent_EventName_driverDistracted                     CarEvent_EventName = 39
	CarEvent_EventName_preDriverUnresponsive                CarEvent_EventName = 43
	CarEvent_EventName_promptDriverUnresponsive             CarEvent_EventName = 44
	CarEvent_EventName_driverUnresponsive                   CarEvent_EventName = 45
	CarEvent_EventName_belowSteerSpeed                      CarEvent_EventName = 46
	CarEvent_EventName_lowBattery                           CarEvent_EventName = 48
	CarEvent_EventName_accFaulted                           CarEvent_EventName = 51
	CarEvent_EventName_sensorDataInvalid                    CarEvent_EventName = 52
	CarEvent_EventName_commIssue                            CarEvent_EventName = 53
	CarEvent_EventName_commIssueAvgFreq                     CarEvent_EventName = 109
	CarEvent_EventName_tooDistracted                        CarEvent_EventName = 54
	CarEvent_EventName_posenetInvalid                       CarEvent_EventName = 55
	CarEvent_EventName_soundsUnavailable                    CarEvent_EventName = 56
	CarEvent_EventName_preLaneChangeLeft                    CarEvent_EventName = 57
	CarEvent_EventName_preLaneChangeRight                   CarEvent_EventName = 58
	CarEvent_EventName_laneChange                           CarEvent_EventName = 59
	CarEvent_EventName_lowMemory                            CarEvent_EventName = 63
	CarEvent_EventName_stockAeb                             CarEvent_EventName = 64
	CarEvent_EventName_ldw                                  CarEvent_EventName = 65
	CarEvent_EventName_carUnrecognized                      CarEvent_EventName = 66
	CarEvent_EventName_invalidLkasSetting                   CarEvent_EventName = 69
	CarEvent_EventName_speedTooHigh                         CarEvent_EventName = 70
	CarEvent_EventName_laneChangeBlocked                    CarEvent_EventName = 71
	CarEvent_EventName_relayMalfunction                     CarEvent_EventName = 72
	CarEvent_EventName_stockFcw                             CarEvent_EventName = 74
	CarEvent_EventName_startup                              CarEvent_EventName = 75
	CarEvent_EventName_startupNoCar                         CarEvent_EventName = 76
	CarEvent_EventName_startupNoControl                     CarEvent_EventName = 77
	CarEvent_EventName_startupMaster                        CarEvent_EventName = 78
	CarEvent_EventName_startupNoFw                          CarEvent_EventName = 104
	CarEvent_EventName_fcw                                  CarEvent_EventName = 79
	CarEvent_EventName_steerSaturated                       CarEvent_EventName = 80
	CarEvent_EventName_belowEngageSpeed                     CarEvent_EventName = 84
	CarEvent_EventName_noGps                                CarEvent_EventName = 85
	CarEvent_EventName_wrongCruiseMode                      CarEvent_EventName = 87
	CarEvent_EventName_modeldLagging                        CarEvent_EventName = 89
	CarEvent_EventName_deviceFalling                        CarEvent_EventName = 90
	CarEvent_EventName_fanMalfunction                       CarEvent_EventName = 91
	CarEvent_EventName_cameraMalfunction                    CarEvent_EventName = 92
	CarEvent_EventName_cameraFrameRate                      CarEvent_EventName = 110
	CarEvent_EventName_gpsMalfunction                       CarEvent_EventName = 94
	CarEvent_EventName_processNotRunning                    CarEvent_EventName = 95
	CarEvent_EventName_dashcamMode                          CarEvent_EventName = 96
	CarEvent_EventName_controlsInitializing                 CarEvent_EventName = 98
	CarEvent_EventName_usbError                             CarEvent_EventName = 99
	CarEvent_EventName_roadCameraError                      CarEvent_EventName = 100
	CarEvent_EventName_driverCameraError                    CarEvent_EventName = 101
	CarEvent_EventName_wideRoadCameraError                  CarEvent_EventName = 102
	CarEvent_EventName_highCpuUsage                         CarEvent_EventName = 105
	CarEvent_EventName_cruiseMismatch                       CarEvent_EventName = 106
	CarEvent_EventName_lkasDisabled                         CarEvent_EventName = 107
	CarEvent_EventName_canBusMissing                        CarEvent_EventName = 111
	CarEvent_EventName_controlsdLagging                     CarEvent_EventName = 112
	CarEvent_EventName_resumeBlocked                        CarEvent_EventName = 113
	CarEvent_EventName_steerTimeLimit                       CarEvent_EventName = 115
	CarEvent_EventName_vehicleSensorsInvalid                CarEvent_EventName = 116
	CarEvent_EventName_locationdTemporaryError              CarEvent_EventName = 103
	CarEvent_EventName_locationdPermanentError              CarEvent_EventName = 118
	CarEvent_EventName_paramsdTemporaryError                CarEvent_EventName = 50
	CarEvent_EventName_paramsdPermanentError                CarEvent_EventName = 119
	CarEvent_EventName_radarCanErrorDEPRECATED              CarEvent_EventName = 15
	CarEvent_EventName_communityFeatureDisallowedDEPRECATED CarEvent_EventName = 62
	CarEvent_EventName_radarCommIssueDEPRECATED             CarEvent_EventName = 67
	CarEvent_EventName_driverMonitorLowAccDEPRECATED        CarEvent_EventName = 68
	CarEvent_EventName_gasUnavailableDEPRECATED             CarEvent_EventName = 3
	CarEvent_EventName_dataNeededDEPRECATED                 CarEvent_EventName = 16
	CarEvent_EventName_modelCommIssueDEPRECATED             CarEvent_EventName = 27
	CarEvent_EventName_ipasOverrideDEPRECATED               CarEvent_EventName = 33
	CarEvent_EventName_geofenceDEPRECATED                   CarEvent_EventName = 40
	CarEvent_EventName_driverMonitorOnDEPRECATED            CarEvent_EventName = 41
	CarEvent_EventName_driverMonitorOffDEPRECATED           CarEvent_EventName = 42
	CarEvent_EventName_calibrationProgressDEPRECATED        CarEvent_EventName = 47
	CarEvent_EventName_invalidGiraffeHondaDEPRECATED        CarEvent_EventName = 49
	CarEvent_EventName_invalidGiraffeToyotaDEPRECATED       CarEvent_EventName = 60
	CarEvent_EventName_internetConnectivityNeededDEPRECATED CarEvent_EventName = 61
	CarEvent_EventName_whitePandaUnsupportedDEPRECATED      CarEvent_EventName = 81
	CarEvent_EventName_commIssueWarningDEPRECATED           CarEvent_EventName = 83
	CarEvent_EventName_focusRecoverActiveDEPRECATED         CarEvent_EventName = 86
	CarEvent_EventName_neosUpdateRequiredDEPRECATED         CarEvent_EventName = 88
	CarEvent_EventName_modelLagWarningDEPRECATED            CarEvent_EventName = 93
	CarEvent_EventName_startupOneplusDEPRECATED             CarEvent_EventName = 82
	CarEvent_EventName_startupFuzzyFingerprintDEPRECATED    CarEvent_EventName = 97
	CarEvent_EventName_noTargetDEPRECATED                   CarEvent_EventName = 25
	CarEvent_EventName_brakeUnavailableDEPRECATED           CarEvent_EventName = 2
)

// String returns the enum's constant name.
func (c CarEvent_EventName) String() string {
	switch c {
	case CarEvent_EventName_canError:
		return "canError"
	case CarEvent_EventName_steerUnavailable:
		return "steerUnavailable"
	case CarEvent_EventName_wrongGear:
		return "wrongGear"
	case CarEvent_EventName_doorOpen:
		return "doorOpen"
	case CarEvent_EventName_seatbeltNotLatched:
		return "seatbeltNotLatched"
	case CarEvent_EventName_espDisabled:
		return "espDisabled"
	case CarEvent_EventName_wrongCarMode:
		return "wrongCarMode"
	case CarEvent_EventName_steerTempUnavailable:
		return "steerTempUnavailable"
	case CarEvent_EventName_reverseGear:
		return "reverseGear"
	case CarEvent_EventName_buttonCancel:
		return "buttonCancel"
	case CarEvent_EventName_buttonEnable:
		return "buttonEnable"
	case CarEvent_EventName_pedalPressed:
		return "pedalPressed"
	case CarEvent_EventName_preEnableStandstill:
		return "preEnableStandstill"
	case CarEvent_EventName_gasPressedOverride:
		return "gasPressedOverride"
	case CarEvent_EventName_steerOverride:
		return "steerOverride"
	case CarEvent_EventName_cruiseDisabled:
		return "cruiseDisabled"
	case CarEvent_EventName_speedTooLow:
		return "speedTooLow"
	case CarEvent_EventName_outOfSpace:
		return "outOfSpace"
	case CarEvent_EventName_overheat:
		return "overheat"
	case CarEvent_EventName_calibrationIncomplete:
		return "calibrationIncomplete"
	case CarEvent_EventName_calibrationInvalid:
		return "calibrationInvalid"
	case CarEvent_EventName_calibrationRecalibrating:
		return "calibrationRecalibrating"
	case CarEvent_EventName_controlsMismatch:
		return "controlsMismatch"
	case CarEvent_EventName_pcmEnable:
		return "pcmEnable"
	case CarEvent_EventName_pcmDisable:
		return "pcmDisable"
	case CarEvent_EventName_radarFault:
		return "radarFault"
	case CarEvent_EventName_brakeHold:
		return "brakeHold"
	case CarEvent_EventName_parkBrake:
		return "parkBrake"
	case CarEvent_EventName_manualRestart:
		return "manualRestart"
	case CarEvent_EventName_lowSpeedLockout:
		return "lowSpeedLockout"
	case CarEvent_EventName_plannerError:
		return "plannerError"
	case CarEvent_EventName_joystickDebug:
		return "joystickDebug"
	case CarEvent_EventName_steerTempUnavailableSilent:
		return "steerTempUnavailableSilent"
	case CarEvent_EventName_resumeRequired:
		return "resumeRequired"
	case CarEvent_EventName_preDriverDistracted:
		return "preDriverDistracted"
	case CarEvent_EventName_promptDriverDistracted:
		return "promptDriverDistracted"
	case CarEvent_EventName_driverDistracted:
		return "driverDistracted"
	case CarEvent_EventName_preDriverUnresponsive:
		return "preDriverUnresponsive"
	case CarEvent_EventName_promptDriverUnresponsive:
		return "promptDriverUnresponsive"
	case CarEvent_EventName_driverUnresponsive:
		return "driverUnresponsive"
	case CarEvent_EventName_belowSteerSpeed:
		return "belowSteerSpeed"
	case CarEvent_EventName_lowBattery:
		return "lowBattery"
	case CarEvent_EventName_accFaulted:
		return "accFaulted"
	case CarEvent_EventName_sensorDataInvalid:
		return "sensorDataInvalid"
	case CarEvent_EventName_commIssue:
		return "commIssue"
	case CarEvent_EventName_commIssueAvgFreq:
		return "commIssueAvgFreq"
	case CarEvent_EventName_tooDistracted:
		return "tooDistracted"
	case CarEvent_EventName_posenetInvalid:
		return "posenetInvalid"
	case CarEvent_EventName_soundsUnavailable:
		return "soundsUnavailable"
	case CarEvent_EventName_preLaneChangeLeft:
		return "preLaneChangeLeft"
	case CarEvent_EventName_preLaneChangeRight:
		return "preLaneChangeRight"
	case CarEvent_EventName_laneChange:
		return "laneChange"
	case CarEvent_EventName_lowMemory:
		return "lowMemory"
	case CarEvent_EventName_stockAeb:
		return "stockAeb"
	case CarEvent_EventName_ldw:
		return "ldw"
	case CarEvent_EventName_carUnrecognized:
		return "carUnrecognized"
	case CarEvent_EventName_invalidLkasSetting:
		return "invalidLkasSetting"
	case CarEvent_EventName_speedTooHigh:
		return "speedTooHigh"
	case CarEvent_EventName_laneChangeBlocked:
		return "laneChangeBlocked"
	case CarEvent_EventName_relayMalfunction:
		return "relayMalfunction"
	case CarEvent_EventName_stockFcw:
		return "stockFcw"
	case CarEvent_EventName_startup:
		return "startup"
	case CarEvent_EventName_startupNoCar:
		return "startupNoCar"
	case CarEvent_EventName_startupNoControl:
		return "startupNoControl"
	case CarEvent_EventName_startupMaster:
		return "startupMaster"
	case CarEvent_EventName_startupNoFw:
		return "startupNoFw"
	case CarEvent_EventName_fcw:
		return "fcw"
	case CarEvent_EventName_steerSaturated:
		return "steerSaturated"
	case CarEvent_EventName_belowEngageSpeed:
		return "belowEngageSpeed"
	case CarEvent_EventName_noGps:
		return "noGps"
	case CarEvent_EventName_wrongCruiseMode:
		return "wrongCruiseMode"
	case CarEvent_EventName_modeldLagging:
		return "modeldLagging"
	case CarEvent_EventName_deviceFalling:
		return "deviceFalling"
	case CarEvent_EventName_fanMalfunction:
		return "fanMalfunction"
	case CarEvent_EventName_cameraMalfunction:
		return "cameraMalfunction"
	case CarEvent_EventName_cameraFrameRate:
		return "cameraFrameRate"
	case CarEvent_EventName_gpsMalfunction:
		return "gpsMalfunction"
	case CarEvent_EventName_processNotRunning:
		return "processNotRunning"
	case CarEvent_EventName_dashcamMode:
		return "dashcamMode"
	case CarEvent_EventName_controlsInitializing:
		return "controlsInitializing"
	case CarEvent_EventName_usbError:
		return "usbError"
	case CarEvent_EventName_roadCameraError:
		return "roadCameraError"
	case CarEvent_EventName_driverCameraError:
		return "driverCameraError"
	case CarEvent_EventName_wideRoadCameraError:
		return "wideRoadCameraError"
	case CarEvent_EventName_highCpuUsage:
		return "highCpuUsage"
	case CarEvent_EventName_cruiseMismatch:
		return "cruiseMismatch"
	case CarEvent_EventName_lkasDisabled:
		return "lkasDisabled"
	case CarEvent_EventName_canBusMissing:
		return "canBusMissing"
	case CarEvent_EventName_controlsdLagging:
		return "controlsdLagging"
	case CarEvent_EventName_resumeBlocked:
		return "resumeBlocked"
	case CarEvent_EventName_steerTimeLimit:
		return "steerTimeLimit"
	case CarEvent_EventName_vehicleSensorsInvalid:
		return "vehicleSensorsInvalid"
	case CarEvent_EventName_locationdTemporaryError:
		return "locationdTemporaryError"
	case CarEvent_EventName_locationdPermanentError:
		return "locationdPermanentError"
	case CarEvent_EventName_paramsdTemporaryError:
		return "paramsdTemporaryError"
	case CarEvent_EventName_paramsdPermanentError:
		return "paramsdPermanentError"
	case CarEvent_EventName_radarCanErrorDEPRECATED:
		return "radarCanErrorDEPRECATED"
	case CarEvent_EventName_communityFeatureDisallowedDEPRECATED:
		return "communityFeatureDisallowedDEPRECATED"
	case CarEvent_EventName_radarCommIssueDEPRECATED:
		return "radarCommIssueDEPRECATED"
	case CarEvent_EventName_driverMonitorLowAccDEPRECATED:
		return "driverMonitorLowAccDEPRECATED"
	case CarEvent_EventName_gasUnavailableDEPRECATED:
		return "gasUnavailableDEPRECATED"
	case CarEvent_EventName_dataNeededDEPRECATED:
		return "dataNeededDEPRECATED"
	case CarEvent_EventName_modelCommIssueDEPRECATED:
		return "modelCommIssueDEPRECATED"
	case CarEvent_EventName_ipasOverrideDEPRECATED:
		return "ipasOverrideDEPRECATED"
	case CarEvent_EventName_geofenceDEPRECATED:
		return "geofenceDEPRECATED"
	case CarEvent_EventName_driverMonitorOnDEPRECATED:
		return "driverMonitorOnDEPRECATED"
	case CarEvent_EventName_driverMonitorOffDEPRECATED:
		return "driverMonitorOffDEPRECATED"
	case CarEvent_EventName_calibrationProgressDEPRECATED:
		return "calibrationProgressDEPRECATED"
	case CarEvent_EventName_invalidGiraffeHondaDEPRECATED:
		return "invalidGiraffeHondaDEPRECATED"
	case CarEvent_EventName_invalidGiraffeToyotaDEPRECATED:
		return "invalidGiraffeToyotaDEPRECATED"
	case CarEvent_EventName_internetConnectivityNeededDEPRECATED:
		return "internetConnectivityNeededDEPRECATED"
	case CarEvent_EventName_whitePandaUnsupportedDEPRECATED:
		return "whitePandaUnsupportedDEPRECATED"
	case CarEvent_EventName_commIssueWarningDEPRECATED:
		return "commIssueWarningDEPRECATED"
	case CarEvent_EventName_focusRecoverActiveDEPRECATED:
		return "focusRecoverActiveDEPRECATED"
	case CarEvent_EventName_neosUpdateRequiredDEPRECATED:
		return "neosUpdateRequiredDEPRECATED"
	case CarEvent_EventName_modelLagWarningDEPRECATED:
		return "modelLagWarningDEPRECATED"
	case CarEvent_EventName_startupOneplusDEPRECATED:
		return "startupOneplusDEPRECATED"
	case CarEvent_EventName_startupFuzzyFingerprintDEPRECATED:
		return "startupFuzzyFingerprintDEPRECATED"
	case CarEvent_EventName_noTargetDEPRECATED:
		return "noTargetDEPRECATED"
	case CarEvent_EventName_brakeUnavailableDEPRECATED:
		return "brakeUnavailableDEPRECATED"

	default:
		return ""
	}
}

// CarEvent_EventNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarEvent_EventNameFromString(c string) CarEvent_EventName {
	switch c {
	case "canError":
		return CarEvent_EventName_canError
	case "steerUnavailable":
		return CarEvent_EventName_steerUnavailable
	case "wrongGear":
		return CarEvent_EventName_wrongGear
	case "doorOpen":
		return CarEvent_EventName_doorOpen
	case "seatbeltNotLatched":
		return CarEvent_EventName_seatbeltNotLatched
	case "espDisabled":
		return CarEvent_EventName_espDisabled
	case "wrongCarMode":
		return CarEvent_EventName_wrongCarMode
	case "steerTempUnavailable":
		return CarEvent_EventName_steerTempUnavailable
	case "reverseGear":
		return CarEvent_EventName_reverseGear
	case "buttonCancel":
		return CarEvent_EventName_buttonCancel
	case "buttonEnable":
		return CarEvent_EventName_buttonEnable
	case "pedalPressed":
		return CarEvent_EventName_pedalPressed
	case "preEnableStandstill":
		return CarEvent_EventName_preEnableStandstill
	case "gasPressedOverride":
		return CarEvent_EventName_gasPressedOverride
	case "steerOverride":
		return CarEvent_EventName_steerOverride
	case "cruiseDisabled":
		return CarEvent_EventName_cruiseDisabled
	case "speedTooLow":
		return CarEvent_EventName_speedTooLow
	case "outOfSpace":
		return CarEvent_EventName_outOfSpace
	case "overheat":
		return CarEvent_EventName_overheat
	case "calibrationIncomplete":
		return CarEvent_EventName_calibrationIncomplete
	case "calibrationInvalid":
		return CarEvent_EventName_calibrationInvalid
	case "calibrationRecalibrating":
		return CarEvent_EventName_calibrationRecalibrating
	case "controlsMismatch":
		return CarEvent_EventName_controlsMismatch
	case "pcmEnable":
		return CarEvent_EventName_pcmEnable
	case "pcmDisable":
		return CarEvent_EventName_pcmDisable
	case "radarFault":
		return CarEvent_EventName_radarFault
	case "brakeHold":
		return CarEvent_EventName_brakeHold
	case "parkBrake":
		return CarEvent_EventName_parkBrake
	case "manualRestart":
		return CarEvent_EventName_manualRestart
	case "lowSpeedLockout":
		return CarEvent_EventName_lowSpeedLockout
	case "plannerError":
		return CarEvent_EventName_plannerError
	case "joystickDebug":
		return CarEvent_EventName_joystickDebug
	case "steerTempUnavailableSilent":
		return CarEvent_EventName_steerTempUnavailableSilent
	case "resumeRequired":
		return CarEvent_EventName_resumeRequired
	case "preDriverDistracted":
		return CarEvent_EventName_preDriverDistracted
	case "promptDriverDistracted":
		return CarEvent_EventName_promptDriverDistracted
	case "driverDistracted":
		return CarEvent_EventName_driverDistracted
	case "preDriverUnresponsive":
		return CarEvent_EventName_preDriverUnresponsive
	case "promptDriverUnresponsive":
		return CarEvent_EventName_promptDriverUnresponsive
	case "driverUnresponsive":
		return CarEvent_EventName_driverUnresponsive
	case "belowSteerSpeed":
		return CarEvent_EventName_belowSteerSpeed
	case "lowBattery":
		return CarEvent_EventName_lowBattery
	case "accFaulted":
		return CarEvent_EventName_accFaulted
	case "sensorDataInvalid":
		return CarEvent_EventName_sensorDataInvalid
	case "commIssue":
		return CarEvent_EventName_commIssue
	case "commIssueAvgFreq":
		return CarEvent_EventName_commIssueAvgFreq
	case "tooDistracted":
		return CarEvent_EventName_tooDistracted
	case "posenetInvalid":
		return CarEvent_EventName_posenetInvalid
	case "soundsUnavailable":
		return CarEvent_EventName_soundsUnavailable
	case "preLaneChangeLeft":
		return CarEvent_EventName_preLaneChangeLeft
	case "preLaneChangeRight":
		return CarEvent_EventName_preLaneChangeRight
	case "laneChange":
		return CarEvent_EventName_laneChange
	case "lowMemory":
		return CarEvent_EventName_lowMemory
	case "stockAeb":
		return CarEvent_EventName_stockAeb
	case "ldw":
		return CarEvent_EventName_ldw
	case "carUnrecognized":
		return CarEvent_EventName_carUnrecognized
	case "invalidLkasSetting":
		return CarEvent_EventName_invalidLkasSetting
	case "speedTooHigh":
		return CarEvent_EventName_speedTooHigh
	case "laneChangeBlocked":
		return CarEvent_EventName_laneChangeBlocked
	case "relayMalfunction":
		return CarEvent_EventName_relayMalfunction
	case "stockFcw":
		return CarEvent_EventName_stockFcw
	case "startup":
		return CarEvent_EventName_startup
	case "startupNoCar":
		return CarEvent_EventName_startupNoCar
	case "startupNoControl":
		return CarEvent_EventName_startupNoControl
	case "startupMaster":
		return CarEvent_EventName_startupMaster
	case "startupNoFw":
		return CarEvent_EventName_startupNoFw
	case "fcw":
		return CarEvent_EventName_fcw
	case "steerSaturated":
		return CarEvent_EventName_steerSaturated
	case "belowEngageSpeed":
		return CarEvent_EventName_belowEngageSpeed
	case "noGps":
		return CarEvent_EventName_noGps
	case "wrongCruiseMode":
		return CarEvent_EventName_wrongCruiseMode
	case "modeldLagging":
		return CarEvent_EventName_modeldLagging
	case "deviceFalling":
		return CarEvent_EventName_deviceFalling
	case "fanMalfunction":
		return CarEvent_EventName_fanMalfunction
	case "cameraMalfunction":
		return CarEvent_EventName_cameraMalfunction
	case "cameraFrameRate":
		return CarEvent_EventName_cameraFrameRate
	case "gpsMalfunction":
		return CarEvent_EventName_gpsMalfunction
	case "processNotRunning":
		return CarEvent_EventName_processNotRunning
	case "dashcamMode":
		return CarEvent_EventName_dashcamMode
	case "controlsInitializing":
		return CarEvent_EventName_controlsInitializing
	case "usbError":
		return CarEvent_EventName_usbError
	case "roadCameraError":
		return CarEvent_EventName_roadCameraError
	case "driverCameraError":
		return CarEvent_EventName_driverCameraError
	case "wideRoadCameraError":
		return CarEvent_EventName_wideRoadCameraError
	case "highCpuUsage":
		return CarEvent_EventName_highCpuUsage
	case "cruiseMismatch":
		return CarEvent_EventName_cruiseMismatch
	case "lkasDisabled":
		return CarEvent_EventName_lkasDisabled
	case "canBusMissing":
		return CarEvent_EventName_canBusMissing
	case "controlsdLagging":
		return CarEvent_EventName_controlsdLagging
	case "resumeBlocked":
		return CarEvent_EventName_resumeBlocked
	case "steerTimeLimit":
		return CarEvent_EventName_steerTimeLimit
	case "vehicleSensorsInvalid":
		return CarEvent_EventName_vehicleSensorsInvalid
	case "locationdTemporaryError":
		return CarEvent_EventName_locationdTemporaryError
	case "locationdPermanentError":
		return CarEvent_EventName_locationdPermanentError
	case "paramsdTemporaryError":
		return CarEvent_EventName_paramsdTemporaryError
	case "paramsdPermanentError":
		return CarEvent_EventName_paramsdPermanentError
	case "radarCanErrorDEPRECATED":
		return CarEvent_EventName_radarCanErrorDEPRECATED
	case "communityFeatureDisallowedDEPRECATED":
		return CarEvent_EventName_communityFeatureDisallowedDEPRECATED
	case "radarCommIssueDEPRECATED":
		return CarEvent_EventName_radarCommIssueDEPRECATED
	case "driverMonitorLowAccDEPRECATED":
		return CarEvent_EventName_driverMonitorLowAccDEPRECATED
	case "gasUnavailableDEPRECATED":
		return CarEvent_EventName_gasUnavailableDEPRECATED
	case "dataNeededDEPRECATED":
		return CarEvent_EventName_dataNeededDEPRECATED
	case "modelCommIssueDEPRECATED":
		return CarEvent_EventName_modelCommIssueDEPRECATED
	case "ipasOverrideDEPRECATED":
		return CarEvent_EventName_ipasOverrideDEPRECATED
	case "geofenceDEPRECATED":
		return CarEvent_EventName_geofenceDEPRECATED
	case "driverMonitorOnDEPRECATED":
		return CarEvent_EventName_driverMonitorOnDEPRECATED
	case "driverMonitorOffDEPRECATED":
		return CarEvent_EventName_driverMonitorOffDEPRECATED
	case "calibrationProgressDEPRECATED":
		return CarEvent_EventName_calibrationProgressDEPRECATED
	case "invalidGiraffeHondaDEPRECATED":
		return CarEvent_EventName_invalidGiraffeHondaDEPRECATED
	case "invalidGiraffeToyotaDEPRECATED":
		return CarEvent_EventName_invalidGiraffeToyotaDEPRECATED
	case "internetConnectivityNeededDEPRECATED":
		return CarEvent_EventName_internetConnectivityNeededDEPRECATED
	case "whitePandaUnsupportedDEPRECATED":
		return CarEvent_EventName_whitePandaUnsupportedDEPRECATED
	case "commIssueWarningDEPRECATED":
		return CarEvent_EventName_commIssueWarningDEPRECATED
	case "focusRecoverActiveDEPRECATED":
		return CarEvent_EventName_focusRecoverActiveDEPRECATED
	case "neosUpdateRequiredDEPRECATED":
		return CarEvent_EventName_neosUpdateRequiredDEPRECATED
	case "modelLagWarningDEPRECATED":
		return CarEvent_EventName_modelLagWarningDEPRECATED
	case "startupOneplusDEPRECATED":
		return CarEvent_EventName_startupOneplusDEPRECATED
	case "startupFuzzyFingerprintDEPRECATED":
		return CarEvent_EventName_startupFuzzyFingerprintDEPRECATED
	case "noTargetDEPRECATED":
		return CarEvent_EventName_noTargetDEPRECATED
	case "brakeUnavailableDEPRECATED":
		return CarEvent_EventName_brakeUnavailableDEPRECATED

	default:
		return 0
	}
}

type CarEvent_EventName_List = capnp.EnumList[CarEvent_EventName]

func NewCarEvent_EventName_List(s *capnp.Segment, sz int32) (CarEvent_EventName_List, error) {
	return capnp.NewEnumList[CarEvent_EventName](s, sz)
}

type CarState capnp.Struct

// CarState_TypeID is the unique identifier for the type CarState.
const CarState_TypeID = 0x9da4fa09e052903c

func NewCarState(s *capnp.Segment) (CarState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 6})
	return CarState(st), err
}

func NewRootCarState(s *capnp.Segment) (CarState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 6})
	return CarState(st), err
}

func ReadRootCarState(msg *capnp.Message) (CarState, error) {
	root, err := msg.Root()
	return CarState(root.Struct()), err
}

func (s CarState) String() string {
	str, _ := text.Marshal(0x9da4fa09e052903c, capnp.Struct(s))
	return str
}

func (s CarState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarState) DecodeFromPtr(p capnp.Ptr) CarState {
	return CarState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarState) Events() (CarEvent_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return CarEvent_List(p.List()), err
}

func (s CarState) HasEvents() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CarState) SetEvents(v CarEvent_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewEvents sets the events field to a newly
// allocated CarEvent_List, preferring placement in s's segment.
func (s CarState) NewEvents(n int32) (CarEvent_List, error) {
	l, err := NewCarEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CarState) CanValid() bool {
	return capnp.Struct(s).Bit(74)
}

func (s CarState) SetCanValid(v bool) {
	capnp.Struct(s).SetBit(74, v)
}

func (s CarState) CanTimeout() bool {
	return capnp.Struct(s).Bit(358)
}

func (s CarState) SetCanTimeout(v bool) {
	capnp.Struct(s).SetBit(358, v)
}

func (s CarState) VEgo() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarState) SetVEgo(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarState) AEgo() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CarState) SetAEgo(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s CarState) VEgoRaw() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s CarState) SetVEgoRaw(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s CarState) VEgoCluster() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s CarState) SetVEgoCluster(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s CarState) YawRate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s CarState) SetYawRate(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s CarState) Standstill() bool {
	return capnp.Struct(s).Bit(67)
}

func (s CarState) SetStandstill(v bool) {
	capnp.Struct(s).SetBit(67, v)
}

func (s CarState) WheelSpeeds() (CarState_WheelSpeeds, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CarState_WheelSpeeds(p.Struct()), err
}

func (s CarState) HasWheelSpeeds() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarState) SetWheelSpeeds(v CarState_WheelSpeeds) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewWheelSpeeds sets the wheelSpeeds field to a newly
// allocated CarState_WheelSpeeds struct, preferring placement in s's segment.
func (s CarState) NewWheelSpeeds() (CarState_WheelSpeeds, error) {
	ss, err := NewCarState_WheelSpeeds(capnp.Struct(s).Segment())
	if err != nil {
		return CarState_WheelSpeeds{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarState) Gas() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarState) SetGas(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarState) GasPressed() bool {
	return capnp.Struct(s).Bit(64)
}

func (s CarState) SetGasPressed(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s CarState) EngineRpm() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(60))
}

func (s CarState) SetEngineRpm(v float32) {
	capnp.Struct(s).SetUint32(60, math.Float32bits(v))
}

func (s CarState) Brake() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarState) SetBrake(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s CarState) BrakePressed() bool {
	return capnp.Struct(s).Bit(65)
}

func (s CarState) SetBrakePressed(v bool) {
	capnp.Struct(s).SetBit(65, v)
}

func (s CarState) RegenBraking() bool {
	return capnp.Struct(s).Bit(361)
}

func (s CarState) SetRegenBraking(v bool) {
	capnp.Struct(s).SetBit(361, v)
}

func (s CarState) ParkingBrake() bool {
	return capnp.Struct(s).Bit(357)
}

func (s CarState) SetParkingBrake(v bool) {
	capnp.Struct(s).SetBit(357, v)
}

func (s CarState) BrakeHoldActive() bool {
	return capnp.Struct(s).Bit(356)
}

func (s CarState) SetBrakeHoldActive(v bool) {
	capnp.Struct(s).SetBit(356, v)
}

func (s CarState) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s CarState) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s CarState) SteeringAngleOffsetDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s CarState) SetSteeringAngleOffsetDeg(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s CarState) SteeringRateDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CarState) SetSteeringRateDeg(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CarState) SteeringTorque() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CarState) SetSteeringTorque(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CarState) SteeringTorqueEps() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s CarState) SetSteeringTorqueEps(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s CarState) SteeringPressed() bool {
	return capnp.Struct(s).Bit(66)
}

func (s CarState) SetSteeringPressed(v bool) {
	capnp.Struct(s).SetBit(66, v)
}

func (s CarState) SteerFaultTemporary() bool {
	return capnp.Struct(s).Bit(354)
}

func (s CarState) SetSteerFaultTemporary(v bool) {
	capnp.Struct(s).SetBit(354, v)
}

func (s CarState) SteerFaultPermanent() bool {
	return capnp.Struct(s).Bit(355)
}

func (s CarState) SetSteerFaultPermanent(v bool) {
	capnp.Struct(s).SetBit(355, v)
}

func (s CarState) StockAeb() bool {
	return capnp.Struct(s).Bit(77)
}

func (s CarState) SetStockAeb(v bool) {
	capnp.Struct(s).SetBit(77, v)
}

func (s CarState) StockFcw() bool {
	return capnp.Struct(s).Bit(78)
}

func (s CarState) SetStockFcw(v bool) {
	capnp.Struct(s).SetBit(78, v)
}

func (s CarState) EspDisabled() bool {
	return capnp.Struct(s).Bit(79)
}

func (s CarState) SetEspDisabled(v bool) {
	capnp.Struct(s).SetBit(79, v)
}

func (s CarState) AccFaulted() bool {
	return capnp.Struct(s).Bit(359)
}

func (s CarState) SetAccFaulted(v bool) {
	capnp.Struct(s).SetBit(359, v)
}

func (s CarState) CarFaultedNonCritical() bool {
	return capnp.Struct(s).Bit(362)
}

func (s CarState) SetCarFaultedNonCritical(v bool) {
	capnp.Struct(s).SetBit(362, v)
}

func (s CarState) CruiseState() (CarState_CruiseState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CarState_CruiseState(p.Struct()), err
}

func (s CarState) HasCruiseState() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarState) SetCruiseState(v CarState_CruiseState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCruiseState sets the cruiseState field to a newly
// allocated CarState_CruiseState struct, preferring placement in s's segment.
func (s CarState) NewCruiseState() (CarState_CruiseState, error) {
	ss, err := NewCarState_CruiseState(capnp.Struct(s).Segment())
	if err != nil {
		return CarState_CruiseState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarState) GearShifter() CarState_GearShifter {
	return CarState_GearShifter(capnp.Struct(s).Uint16(10))
}

func (s CarState) SetGearShifter(v CarState_GearShifter) {
	capnp.Struct(s).SetUint16(10, uint16(v))
}

func (s CarState) ButtonEvents() (CarState_ButtonEvent_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return CarState_ButtonEvent_List(p.List()), err
}

func (s CarState) HasButtonEvents() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarState) SetButtonEvents(v CarState_ButtonEvent_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewButtonEvents sets the buttonEvents field to a newly
// allocated CarState_ButtonEvent_List, preferring placement in s's segment.
func (s CarState) NewButtonEvents(n int32) (CarState_ButtonEvent_List, error) {
	l, err := NewCarState_ButtonEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarState_ButtonEvent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarState) LeftBlinker() bool {
	return capnp.Struct(s).Bit(69)
}

func (s CarState) SetLeftBlinker(v bool) {
	capnp.Struct(s).SetBit(69, v)
}

func (s CarState) RightBlinker() bool {
	return capnp.Struct(s).Bit(70)
}

func (s CarState) SetRightBlinker(v bool) {
	capnp.Struct(s).SetBit(70, v)
}

func (s CarState) GenericToggle() bool {
	return capnp.Struct(s).Bit(71)
}

func (s CarState) SetGenericToggle(v bool) {
	capnp.Struct(s).SetBit(71, v)
}

func (s CarState) DoorOpen() bool {
	return capnp.Struct(s).Bit(72)
}

func (s CarState) SetDoorOpen(v bool) {
	capnp.Struct(s).SetBit(72, v)
}

func (s CarState) SeatbeltUnlatched() bool {
	return capnp.Struct(s).Bit(73)
}

func (s CarState) SetSeatbeltUnlatched(v bool) {
	capnp.Struct(s).SetBit(73, v)
}

func (s CarState) ClutchPressed() bool {
	return capnp.Struct(s).Bit(75)
}

func (s CarState) SetClutchPressed(v bool) {
	capnp.Struct(s).SetBit(75, v)
}

func (s CarState) LeftBlindspot() bool {
	return capnp.Struct(s).Bit(352)
}

func (s CarState) SetLeftBlindspot(v bool) {
	capnp.Struct(s).SetBit(352, v)
}

func (s CarState) RightBlindspot() bool {
	return capnp.Struct(s).Bit(353)
}

func (s CarState) SetRightBlindspot(v bool) {
	capnp.Struct(s).SetBit(353, v)
}

func (s CarState) FuelGauge() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s CarState) SetFuelGauge(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s CarState) Charging() bool {
	return capnp.Struct(s).Bit(360)
}

func (s CarState) SetCharging(v bool) {
	capnp.Struct(s).SetBit(360, v)
}

func (s CarState) ErrorsDEPRECATED() (CarEvent_EventName_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CarEvent_EventName_List(p.List()), err
}

func (s CarState) HasErrorsDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarState) SetErrorsDEPRECATED(v CarEvent_EventName_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewErrorsDEPRECATED sets the errorsDEPRECATED field to a newly
// allocated CarEvent_EventName_List, preferring placement in s's segment.
func (s CarState) NewErrorsDEPRECATED(n int32) (CarEvent_EventName_List, error) {
	l, err := NewCarEvent_EventName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarEvent_EventName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarState) BrakeLightsDEPRECATED() bool {
	return capnp.Struct(s).Bit(68)
}

func (s CarState) SetBrakeLightsDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(68, v)
}

func (s CarState) SteeringRateLimitedDEPRECATED() bool {
	return capnp.Struct(s).Bit(76)
}

func (s CarState) SetSteeringRateLimitedDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(76, v)
}

func (s CarState) CanMonoTimesDEPRECATED() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.UInt64List(p.List()), err
}

func (s CarState) HasCanMonoTimesDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarState) SetCanMonoTimesDEPRECATED(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCanMonoTimesDEPRECATED sets the canMonoTimesDEPRECATED field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s CarState) NewCanMonoTimesDEPRECATED(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// CarState_List is a list of CarState.
type CarState_List = capnp.StructList[CarState]

// NewCarState creates a new list of CarState.
func NewCarState_List(s *capnp.Segment, sz int32) (CarState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 6}, sz)
	return capnp.StructList[CarState](l), err
}

// CarState_Future is a wrapper for a CarState promised by a client call.
type CarState_Future struct{ *capnp.Future }

func (f CarState_Future) Struct() (CarState, error) {
	p, err := f.Future.Ptr()
	return CarState(p.Struct()), err
}
func (p CarState_Future) WheelSpeeds() CarState_WheelSpeeds_Future {
	return CarState_WheelSpeeds_Future{Future: p.Future.Field(1, nil)}
}
func (p CarState_Future) CruiseState() CarState_CruiseState_Future {
	return CarState_CruiseState_Future{Future: p.Future.Field(2, nil)}
}

type CarState_WheelSpeeds capnp.Struct

// CarState_WheelSpeeds_TypeID is the unique identifier for the type CarState_WheelSpeeds.
const CarState_WheelSpeeds_TypeID = 0x991a37a6155935a3

func NewCarState_WheelSpeeds(s *capnp.Segment) (CarState_WheelSpeeds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarState_WheelSpeeds(st), err
}

func NewRootCarState_WheelSpeeds(s *capnp.Segment) (CarState_WheelSpeeds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarState_WheelSpeeds(st), err
}

func ReadRootCarState_WheelSpeeds(msg *capnp.Message) (CarState_WheelSpeeds, error) {
	root, err := msg.Root()
	return CarState_WheelSpeeds(root.Struct()), err
}

func (s CarState_WheelSpeeds) String() string {
	str, _ := text.Marshal(0x991a37a6155935a3, capnp.Struct(s))
	return str
}

func (s CarState_WheelSpeeds) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarState_WheelSpeeds) DecodeFromPtr(p capnp.Ptr) CarState_WheelSpeeds {
	return CarState_WheelSpeeds(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarState_WheelSpeeds) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarState_WheelSpeeds) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarState_WheelSpeeds) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarState_WheelSpeeds) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarState_WheelSpeeds) Fl() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarState_WheelSpeeds) SetFl(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarState_WheelSpeeds) Fr() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarState_WheelSpeeds) SetFr(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarState_WheelSpeeds) Rl() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarState_WheelSpeeds) SetRl(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarState_WheelSpeeds) Rr() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarState_WheelSpeeds) SetRr(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// CarState_WheelSpeeds_List is a list of CarState_WheelSpeeds.
type CarState_WheelSpeeds_List = capnp.StructList[CarState_WheelSpeeds]

// NewCarState_WheelSpeeds creates a new list of CarState_WheelSpeeds.
func NewCarState_WheelSpeeds_List(s *capnp.Segment, sz int32) (CarState_WheelSpeeds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CarState_WheelSpeeds](l), err
}

// CarState_WheelSpeeds_Future is a wrapper for a CarState_WheelSpeeds promised by a client call.
type CarState_WheelSpeeds_Future struct{ *capnp.Future }

func (f CarState_WheelSpeeds_Future) Struct() (CarState_WheelSpeeds, error) {
	p, err := f.Future.Ptr()
	return CarState_WheelSpeeds(p.Struct()), err
}

type CarState_CruiseState capnp.Struct

// CarState_CruiseState_TypeID is the unique identifier for the type CarState_CruiseState.
const CarState_CruiseState_TypeID = 0xe64e81478e6e60af

func NewCarState_CruiseState(s *capnp.Segment) (CarState_CruiseState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarState_CruiseState(st), err
}

func NewRootCarState_CruiseState(s *capnp.Segment) (CarState_CruiseState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarState_CruiseState(st), err
}

func ReadRootCarState_CruiseState(msg *capnp.Message) (CarState_CruiseState, error) {
	root, err := msg.Root()
	return CarState_CruiseState(root.Struct()), err
}

func (s CarState_CruiseState) String() string {
	str, _ := text.Marshal(0xe64e81478e6e60af, capnp.Struct(s))
	return str
}

func (s CarState_CruiseState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarState_CruiseState) DecodeFromPtr(p capnp.Ptr) CarState_CruiseState {
	return CarState_CruiseState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarState_CruiseState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarState_CruiseState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarState_CruiseState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarState_CruiseState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarState_CruiseState) Enabled() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarState_CruiseState) SetEnabled(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarState_CruiseState) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarState_CruiseState) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarState_CruiseState) SpeedCluster() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarState_CruiseState) SetSpeedCluster(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s CarState_CruiseState) Available() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CarState_CruiseState) SetAvailable(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CarState_CruiseState) SpeedOffset() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarState_CruiseState) SetSpeedOffset(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarState_CruiseState) Standstill() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CarState_CruiseState) SetStandstill(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CarState_CruiseState) NonAdaptive() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CarState_CruiseState) SetNonAdaptive(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

// CarState_CruiseState_List is a list of CarState_CruiseState.
type CarState_CruiseState_List = capnp.StructList[CarState_CruiseState]

// NewCarState_CruiseState creates a new list of CarState_CruiseState.
func NewCarState_CruiseState_List(s *capnp.Segment, sz int32) (CarState_CruiseState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CarState_CruiseState](l), err
}

// CarState_CruiseState_Future is a wrapper for a CarState_CruiseState promised by a client call.
type CarState_CruiseState_Future struct{ *capnp.Future }

func (f CarState_CruiseState_Future) Struct() (CarState_CruiseState, error) {
	p, err := f.Future.Ptr()
	return CarState_CruiseState(p.Struct()), err
}

type CarState_GearShifter uint16

// CarState_GearShifter_TypeID is the unique identifier for the type CarState_GearShifter.
const CarState_GearShifter_TypeID = 0xe004ca45136f6a89

// Values of CarState_GearShifter.
const (
	CarState_GearShifter_unknown   CarState_GearShifter = 0
	CarState_GearShifter_park      CarState_GearShifter = 1
	CarState_GearShifter_drive     CarState_GearShifter = 2
	CarState_GearShifter_neutral   CarState_GearShifter = 3
	CarState_GearShifter_reverse   CarState_GearShifter = 4
	CarState_GearShifter_sport     CarState_GearShifter = 5
	CarState_GearShifter_low       CarState_GearShifter = 6
	CarState_GearShifter_brake     CarState_GearShifter = 7
	CarState_GearShifter_eco       CarState_GearShifter = 8
	CarState_GearShifter_manumatic CarState_GearShifter = 9
)

// String returns the enum's constant name.
func (c CarState_GearShifter) String() string {
	switch c {
	case CarState_GearShifter_unknown:
		return "unknown"
	case CarState_GearShifter_park:
		return "park"
	case CarState_GearShifter_drive:
		return "drive"
	case CarState_GearShifter_neutral:
		return "neutral"
	case CarState_GearShifter_reverse:
		return "reverse"
	case CarState_GearShifter_sport:
		return "sport"
	case CarState_GearShifter_low:
		return "low"
	case CarState_GearShifter_brake:
		return "brake"
	case CarState_GearShifter_eco:
		return "eco"
	case CarState_GearShifter_manumatic:
		return "manumatic"

	default:
		return ""
	}
}

// CarState_GearShifterFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarState_GearShifterFromString(c string) CarState_GearShifter {
	switch c {
	case "unknown":
		return CarState_GearShifter_unknown
	case "park":
		return CarState_GearShifter_park
	case "drive":
		return CarState_GearShifter_drive
	case "neutral":
		return CarState_GearShifter_neutral
	case "reverse":
		return CarState_GearShifter_reverse
	case "sport":
		return CarState_GearShifter_sport
	case "low":
		return CarState_GearShifter_low
	case "brake":
		return CarState_GearShifter_brake
	case "eco":
		return CarState_GearShifter_eco
	case "manumatic":
		return CarState_GearShifter_manumatic

	default:
		return 0
	}
}

type CarState_GearShifter_List = capnp.EnumList[CarState_GearShifter]

func NewCarState_GearShifter_List(s *capnp.Segment, sz int32) (CarState_GearShifter_List, error) {
	return capnp.NewEnumList[CarState_GearShifter](s, sz)
}

type CarState_ButtonEvent capnp.Struct

// CarState_ButtonEvent_TypeID is the unique identifier for the type CarState_ButtonEvent.
const CarState_ButtonEvent_TypeID = 0xff5ca6835b4acef6

func NewCarState_ButtonEvent(s *capnp.Segment) (CarState_ButtonEvent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CarState_ButtonEvent(st), err
}

func NewRootCarState_ButtonEvent(s *capnp.Segment) (CarState_ButtonEvent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CarState_ButtonEvent(st), err
}

func ReadRootCarState_ButtonEvent(msg *capnp.Message) (CarState_ButtonEvent, error) {
	root, err := msg.Root()
	return CarState_ButtonEvent(root.Struct()), err
}

func (s CarState_ButtonEvent) String() string {
	str, _ := text.Marshal(0xff5ca6835b4acef6, capnp.Struct(s))
	return str
}

func (s CarState_ButtonEvent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarState_ButtonEvent) DecodeFromPtr(p capnp.Ptr) CarState_ButtonEvent {
	return CarState_ButtonEvent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarState_ButtonEvent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarState_ButtonEvent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarState_ButtonEvent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarState_ButtonEvent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarState_ButtonEvent) Pressed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarState_ButtonEvent) SetPressed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarState_ButtonEvent) Type() CarState_ButtonEvent_Type {
	return CarState_ButtonEvent_Type(capnp.Struct(s).Uint16(2))
}

func (s CarState_ButtonEvent) SetType(v CarState_ButtonEvent_Type) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// CarState_ButtonEvent_List is a list of CarState_ButtonEvent.
type CarState_ButtonEvent_List = capnp.StructList[CarState_ButtonEvent]

// NewCarState_ButtonEvent creates a new list of CarState_ButtonEvent.
func NewCarState_ButtonEvent_List(s *capnp.Segment, sz int32) (CarState_ButtonEvent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[CarState_ButtonEvent](l), err
}

// CarState_ButtonEvent_Future is a wrapper for a CarState_ButtonEvent promised by a client call.
type CarState_ButtonEvent_Future struct{ *capnp.Future }

func (f CarState_ButtonEvent_Future) Struct() (CarState_ButtonEvent, error) {
	p, err := f.Future.Ptr()
	return CarState_ButtonEvent(p.Struct()), err
}

type CarState_ButtonEvent_Type uint16

// CarState_ButtonEvent_Type_TypeID is the unique identifier for the type CarState_ButtonEvent_Type.
const CarState_ButtonEvent_Type_TypeID = 0xe16100205414717c

// Values of CarState_ButtonEvent_Type.
const (
	CarState_ButtonEvent_Type_unknown         CarState_ButtonEvent_Type = 0
	CarState_ButtonEvent_Type_leftBlinker     CarState_ButtonEvent_Type = 1
	CarState_ButtonEvent_Type_rightBlinker    CarState_ButtonEvent_Type = 2
	CarState_ButtonEvent_Type_accelCruise     CarState_ButtonEvent_Type = 3
	CarState_ButtonEvent_Type_decelCruise     CarState_ButtonEvent_Type = 4
	CarState_ButtonEvent_Type_cancel          CarState_ButtonEvent_Type = 5
	CarState_ButtonEvent_Type_altButton1      CarState_ButtonEvent_Type = 6
	CarState_ButtonEvent_Type_altButton2      CarState_ButtonEvent_Type = 7
	CarState_ButtonEvent_Type_altButton3      CarState_ButtonEvent_Type = 8
	CarState_ButtonEvent_Type_setCruise       CarState_ButtonEvent_Type = 9
	CarState_ButtonEvent_Type_resumeCruise    CarState_ButtonEvent_Type = 10
	CarState_ButtonEvent_Type_gapAdjustCruise CarState_ButtonEvent_Type = 11
)

// String returns the enum's constant name.
func (c CarState_ButtonEvent_Type) String() string {
	switch c {
	case CarState_ButtonEvent_Type_unknown:
		return "unknown"
	case CarState_ButtonEvent_Type_leftBlinker:
		return "leftBlinker"
	case CarState_ButtonEvent_Type_rightBlinker:
		return "rightBlinker"
	case CarState_ButtonEvent_Type_accelCruise:
		return "accelCruise"
	case CarState_ButtonEvent_Type_decelCruise:
		return "decelCruise"
	case CarState_ButtonEvent_Type_cancel:
		return "cancel"
	case CarState_ButtonEvent_Type_altButton1:
		return "altButton1"
	case CarState_ButtonEvent_Type_altButton2:
		return "altButton2"
	case CarState_ButtonEvent_Type_altButton3:
		return "altButton3"
	case CarState_ButtonEvent_Type_setCruise:
		return "setCruise"
	case CarState_ButtonEvent_Type_resumeCruise:
		return "resumeCruise"
	case CarState_ButtonEvent_Type_gapAdjustCruise:
		return "gapAdjustCruise"

	default:
		return ""
	}
}

// CarState_ButtonEvent_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarState_ButtonEvent_TypeFromString(c string) CarState_ButtonEvent_Type {
	switch c {
	case "unknown":
		return CarState_ButtonEvent_Type_unknown
	case "leftBlinker":
		return CarState_ButtonEvent_Type_leftBlinker
	case "rightBlinker":
		return CarState_ButtonEvent_Type_rightBlinker
	case "accelCruise":
		return CarState_ButtonEvent_Type_accelCruise
	case "decelCruise":
		return CarState_ButtonEvent_Type_decelCruise
	case "cancel":
		return CarState_ButtonEvent_Type_cancel
	case "altButton1":
		return CarState_ButtonEvent_Type_altButton1
	case "altButton2":
		return CarState_ButtonEvent_Type_altButton2
	case "altButton3":
		return CarState_ButtonEvent_Type_altButton3
	case "setCruise":
		return CarState_ButtonEvent_Type_setCruise
	case "resumeCruise":
		return CarState_ButtonEvent_Type_resumeCruise
	case "gapAdjustCruise":
		return CarState_ButtonEvent_Type_gapAdjustCruise

	default:
		return 0
	}
}

type CarState_ButtonEvent_Type_List = capnp.EnumList[CarState_ButtonEvent_Type]

func NewCarState_ButtonEvent_Type_List(s *capnp.Segment, sz int32) (CarState_ButtonEvent_Type_List, error) {
	return capnp.NewEnumList[CarState_ButtonEvent_Type](s, sz)
}

type RadarData capnp.Struct

// RadarData_TypeID is the unique identifier for the type RadarData.
const RadarData_TypeID = 0x888ad6581cf0aacb

func NewRadarData(s *capnp.Segment) (RadarData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RadarData(st), err
}

func NewRootRadarData(s *capnp.Segment) (RadarData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return RadarData(st), err
}

func ReadRootRadarData(msg *capnp.Message) (RadarData, error) {
	root, err := msg.Root()
	return RadarData(root.Struct()), err
}

func (s RadarData) String() string {
	str, _ := text.Marshal(0x888ad6581cf0aacb, capnp.Struct(s))
	return str
}

func (s RadarData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadarData) DecodeFromPtr(p capnp.Ptr) RadarData {
	return RadarData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadarData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadarData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadarData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadarData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadarData) Errors() (RadarData_Error_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RadarData_Error_List(p.List()), err
}

func (s RadarData) HasErrors() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RadarData) SetErrors(v RadarData_Error_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewErrors sets the errors field to a newly
// allocated RadarData_Error_List, preferring placement in s's segment.
func (s RadarData) NewErrors(n int32) (RadarData_Error_List, error) {
	l, err := NewRadarData_Error_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RadarData_Error_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s RadarData) Points() (RadarData_RadarPoint_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RadarData_RadarPoint_List(p.List()), err
}

func (s RadarData) HasPoints() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RadarData) SetPoints(v RadarData_RadarPoint_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPoints sets the points field to a newly
// allocated RadarData_RadarPoint_List, preferring placement in s's segment.
func (s RadarData) NewPoints(n int32) (RadarData_RadarPoint_List, error) {
	l, err := NewRadarData_RadarPoint_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RadarData_RadarPoint_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s RadarData) CanMonoTimesDEPRECATED() (capnp.UInt64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.UInt64List(p.List()), err
}

func (s RadarData) HasCanMonoTimesDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s RadarData) SetCanMonoTimesDEPRECATED(v capnp.UInt64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewCanMonoTimesDEPRECATED sets the canMonoTimesDEPRECATED field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s RadarData) NewCanMonoTimesDEPRECATED(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// RadarData_List is a list of RadarData.
type RadarData_List = capnp.StructList[RadarData]

// NewRadarData creates a new list of RadarData.
func NewRadarData_List(s *capnp.Segment, sz int32) (RadarData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[RadarData](l), err
}

// RadarData_Future is a wrapper for a RadarData promised by a client call.
type RadarData_Future struct{ *capnp.Future }

func (f RadarData_Future) Struct() (RadarData, error) {
	p, err := f.Future.Ptr()
	return RadarData(p.Struct()), err
}

type RadarData_Error uint16

// RadarData_Error_TypeID is the unique identifier for the type RadarData_Error.
const RadarData_Error_TypeID = 0xe8a86679ebba76ad

// Values of RadarData_Error.
const (
	RadarData_Error_canError    RadarData_Error = 0
	RadarData_Error_fault       RadarData_Error = 1
	RadarData_Error_wrongConfig RadarData_Error = 2
)

// String returns the enum's constant name.
func (c RadarData_Error) String() string {
	switch c {
	case RadarData_Error_canError:
		return "canError"
	case RadarData_Error_fault:
		return "fault"
	case RadarData_Error_wrongConfig:
		return "wrongConfig"

	default:
		return ""
	}
}

// RadarData_ErrorFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RadarData_ErrorFromString(c string) RadarData_Error {
	switch c {
	case "canError":
		return RadarData_Error_canError
	case "fault":
		return RadarData_Error_fault
	case "wrongConfig":
		return RadarData_Error_wrongConfig

	default:
		return 0
	}
}

type RadarData_Error_List = capnp.EnumList[RadarData_Error]

func NewRadarData_Error_List(s *capnp.Segment, sz int32) (RadarData_Error_List, error) {
	return capnp.NewEnumList[RadarData_Error](s, sz)
}

type RadarData_RadarPoint capnp.Struct

// RadarData_RadarPoint_TypeID is the unique identifier for the type RadarData_RadarPoint.
const RadarData_RadarPoint_TypeID = 0x8ff333ebac1fdf36

func NewRadarData_RadarPoint(s *capnp.Segment) (RadarData_RadarPoint, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RadarData_RadarPoint(st), err
}

func NewRootRadarData_RadarPoint(s *capnp.Segment) (RadarData_RadarPoint, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return RadarData_RadarPoint(st), err
}

func ReadRootRadarData_RadarPoint(msg *capnp.Message) (RadarData_RadarPoint, error) {
	root, err := msg.Root()
	return RadarData_RadarPoint(root.Struct()), err
}

func (s RadarData_RadarPoint) String() string {
	str, _ := text.Marshal(0x8ff333ebac1fdf36, capnp.Struct(s))
	return str
}

func (s RadarData_RadarPoint) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RadarData_RadarPoint) DecodeFromPtr(p capnp.Ptr) RadarData_RadarPoint {
	return RadarData_RadarPoint(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RadarData_RadarPoint) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RadarData_RadarPoint) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RadarData_RadarPoint) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RadarData_RadarPoint) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RadarData_RadarPoint) TrackId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RadarData_RadarPoint) SetTrackId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RadarData_RadarPoint) DRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s RadarData_RadarPoint) SetDRel(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s RadarData_RadarPoint) YRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s RadarData_RadarPoint) SetYRel(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s RadarData_RadarPoint) VRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s RadarData_RadarPoint) SetVRel(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s RadarData_RadarPoint) ARel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s RadarData_RadarPoint) SetARel(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s RadarData_RadarPoint) YvRel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s RadarData_RadarPoint) SetYvRel(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s RadarData_RadarPoint) Measured() bool {
	return capnp.Struct(s).Bit(224)
}

func (s RadarData_RadarPoint) SetMeasured(v bool) {
	capnp.Struct(s).SetBit(224, v)
}

// RadarData_RadarPoint_List is a list of RadarData_RadarPoint.
type RadarData_RadarPoint_List = capnp.StructList[RadarData_RadarPoint]

// NewRadarData_RadarPoint creates a new list of RadarData_RadarPoint.
func NewRadarData_RadarPoint_List(s *capnp.Segment, sz int32) (RadarData_RadarPoint_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[RadarData_RadarPoint](l), err
}

// RadarData_RadarPoint_Future is a wrapper for a RadarData_RadarPoint promised by a client call.
type RadarData_RadarPoint_Future struct{ *capnp.Future }

func (f RadarData_RadarPoint_Future) Struct() (RadarData_RadarPoint, error) {
	p, err := f.Future.Ptr()
	return RadarData_RadarPoint(p.Struct()), err
}

type CarControl capnp.Struct

// CarControl_TypeID is the unique identifier for the type CarControl.
const CarControl_TypeID = 0xf78829049ab814af

func NewCarControl(s *capnp.Segment) (CarControl, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return CarControl(st), err
}

func NewRootCarControl(s *capnp.Segment) (CarControl, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6})
	return CarControl(st), err
}

func ReadRootCarControl(msg *capnp.Message) (CarControl, error) {
	root, err := msg.Root()
	return CarControl(root.Struct()), err
}

func (s CarControl) String() string {
	str, _ := text.Marshal(0xf78829049ab814af, capnp.Struct(s))
	return str
}

func (s CarControl) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarControl) DecodeFromPtr(p capnp.Ptr) CarControl {
	return CarControl(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarControl) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarControl) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarControl) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarControl) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarControl) Enabled() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarControl) SetEnabled(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarControl) LatActive() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CarControl) SetLatActive(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CarControl) LongActive() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CarControl) SetLongActive(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CarControl) Actuators() (CarControl_Actuators, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CarControl_Actuators(p.Struct()), err
}

func (s CarControl) HasActuators() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarControl) SetActuators(v CarControl_Actuators) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewActuators sets the actuators field to a newly
// allocated CarControl_Actuators struct, preferring placement in s's segment.
func (s CarControl) NewActuators() (CarControl_Actuators, error) {
	ss, err := NewCarControl_Actuators(capnp.Struct(s).Segment())
	if err != nil {
		return CarControl_Actuators{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarControl) LeftBlinker() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CarControl) SetLeftBlinker(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CarControl) RightBlinker() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CarControl) SetRightBlinker(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CarControl) ActuatorsOutput() (CarControl_Actuators, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return CarControl_Actuators(p.Struct()), err
}

func (s CarControl) HasActuatorsOutput() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarControl) SetActuatorsOutput(v CarControl_Actuators) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewActuatorsOutput sets the actuatorsOutput field to a newly
// allocated CarControl_Actuators struct, preferring placement in s's segment.
func (s CarControl) NewActuatorsOutput() (CarControl_Actuators, error) {
	ss, err := NewCarControl_Actuators(capnp.Struct(s).Segment())
	if err != nil {
		return CarControl_Actuators{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarControl) OrientationNED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CarControl) HasOrientationNED() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarControl) SetOrientationNED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewOrientationNED sets the orientationNED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarControl) NewOrientationNED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CarControl) AngularVelocity() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s CarControl) HasAngularVelocity() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CarControl) SetAngularVelocity(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAngularVelocity sets the angularVelocity field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarControl) NewAngularVelocity(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CarControl) CruiseControl() (CarControl_CruiseControl, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CarControl_CruiseControl(p.Struct()), err
}

func (s CarControl) HasCruiseControl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarControl) SetCruiseControl(v CarControl_CruiseControl) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCruiseControl sets the cruiseControl field to a newly
// allocated CarControl_CruiseControl struct, preferring placement in s's segment.
func (s CarControl) NewCruiseControl() (CarControl_CruiseControl, error) {
	ss, err := NewCarControl_CruiseControl(capnp.Struct(s).Segment())
	if err != nil {
		return CarControl_CruiseControl{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarControl) HudControl() (CarControl_HUDControl, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CarControl_HUDControl(p.Struct()), err
}

func (s CarControl) HasHudControl() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarControl) SetHudControl(v CarControl_HUDControl) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewHudControl sets the hudControl field to a newly
// allocated CarControl_HUDControl struct, preferring placement in s's segment.
func (s CarControl) NewHudControl() (CarControl_HUDControl, error) {
	ss, err := NewCarControl_HUDControl(capnp.Struct(s).Segment())
	if err != nil {
		return CarControl_HUDControl{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarControl) GasDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarControl) SetGasDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarControl) BrakeDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarControl) SetBrakeDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarControl) SteeringTorqueDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarControl) SetSteeringTorqueDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s CarControl) ActiveDEPRECATED() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CarControl) SetActiveDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CarControl) RollDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s CarControl) SetRollDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s CarControl) PitchDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CarControl) SetPitchDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

// CarControl_List is a list of CarControl.
type CarControl_List = capnp.StructList[CarControl]

// NewCarControl creates a new list of CarControl.
func NewCarControl_List(s *capnp.Segment, sz int32) (CarControl_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 6}, sz)
	return capnp.StructList[CarControl](l), err
}

// CarControl_Future is a wrapper for a CarControl promised by a client call.
type CarControl_Future struct{ *capnp.Future }

func (f CarControl_Future) Struct() (CarControl, error) {
	p, err := f.Future.Ptr()
	return CarControl(p.Struct()), err
}
func (p CarControl_Future) Actuators() CarControl_Actuators_Future {
	return CarControl_Actuators_Future{Future: p.Future.Field(2, nil)}
}
func (p CarControl_Future) ActuatorsOutput() CarControl_Actuators_Future {
	return CarControl_Actuators_Future{Future: p.Future.Field(3, nil)}
}
func (p CarControl_Future) CruiseControl() CarControl_CruiseControl_Future {
	return CarControl_CruiseControl_Future{Future: p.Future.Field(0, nil)}
}
func (p CarControl_Future) HudControl() CarControl_HUDControl_Future {
	return CarControl_HUDControl_Future{Future: p.Future.Field(1, nil)}
}

type CarControl_Actuators capnp.Struct

// CarControl_Actuators_TypeID is the unique identifier for the type CarControl_Actuators.
const CarControl_Actuators_TypeID = 0xe97275a919432828

func NewCarControl_Actuators(s *capnp.Segment) (CarControl_Actuators, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return CarControl_Actuators(st), err
}

func NewRootCarControl_Actuators(s *capnp.Segment) (CarControl_Actuators, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return CarControl_Actuators(st), err
}

func ReadRootCarControl_Actuators(msg *capnp.Message) (CarControl_Actuators, error) {
	root, err := msg.Root()
	return CarControl_Actuators(root.Struct()), err
}

func (s CarControl_Actuators) String() string {
	str, _ := text.Marshal(0xe97275a919432828, capnp.Struct(s))
	return str
}

func (s CarControl_Actuators) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarControl_Actuators) DecodeFromPtr(p capnp.Ptr) CarControl_Actuators {
	return CarControl_Actuators(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarControl_Actuators) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarControl_Actuators) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarControl_Actuators) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarControl_Actuators) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarControl_Actuators) Gas() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarControl_Actuators) SetGas(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarControl_Actuators) Brake() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarControl_Actuators) SetBrake(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarControl_Actuators) Steer() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarControl_Actuators) SetSteer(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarControl_Actuators) SteerOutputCan() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s CarControl_Actuators) SetSteerOutputCan(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s CarControl_Actuators) SteeringAngleDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarControl_Actuators) SetSteeringAngleDeg(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s CarControl_Actuators) Curvature() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CarControl_Actuators) SetCurvature(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s CarControl_Actuators) Speed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CarControl_Actuators) SetSpeed(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CarControl_Actuators) Accel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s CarControl_Actuators) SetAccel(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s CarControl_Actuators) LongControlState() CarControl_Actuators_LongControlState {
	return CarControl_Actuators_LongControlState(capnp.Struct(s).Uint16(20))
}

func (s CarControl_Actuators) SetLongControlState(v CarControl_Actuators_LongControlState) {
	capnp.Struct(s).SetUint16(20, uint16(v))
}

// CarControl_Actuators_List is a list of CarControl_Actuators.
type CarControl_Actuators_List = capnp.StructList[CarControl_Actuators]

// NewCarControl_Actuators creates a new list of CarControl_Actuators.
func NewCarControl_Actuators_List(s *capnp.Segment, sz int32) (CarControl_Actuators_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[CarControl_Actuators](l), err
}

// CarControl_Actuators_Future is a wrapper for a CarControl_Actuators promised by a client call.
type CarControl_Actuators_Future struct{ *capnp.Future }

func (f CarControl_Actuators_Future) Struct() (CarControl_Actuators, error) {
	p, err := f.Future.Ptr()
	return CarControl_Actuators(p.Struct()), err
}

type CarControl_Actuators_LongControlState uint16

// CarControl_Actuators_LongControlState_TypeID is the unique identifier for the type CarControl_Actuators_LongControlState.
const CarControl_Actuators_LongControlState_TypeID = 0xe40f3a917d908282

// Values of CarControl_Actuators_LongControlState.
const (
	CarControl_Actuators_LongControlState_off      CarControl_Actuators_LongControlState = 0
	CarControl_Actuators_LongControlState_pid      CarControl_Actuators_LongControlState = 1
	CarControl_Actuators_LongControlState_stopping CarControl_Actuators_LongControlState = 2
	CarControl_Actuators_LongControlState_starting CarControl_Actuators_LongControlState = 3
)

// String returns the enum's constant name.
func (c CarControl_Actuators_LongControlState) String() string {
	switch c {
	case CarControl_Actuators_LongControlState_off:
		return "off"
	case CarControl_Actuators_LongControlState_pid:
		return "pid"
	case CarControl_Actuators_LongControlState_stopping:
		return "stopping"
	case CarControl_Actuators_LongControlState_starting:
		return "starting"

	default:
		return ""
	}
}

// CarControl_Actuators_LongControlStateFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarControl_Actuators_LongControlStateFromString(c string) CarControl_Actuators_LongControlState {
	switch c {
	case "off":
		return CarControl_Actuators_LongControlState_off
	case "pid":
		return CarControl_Actuators_LongControlState_pid
	case "stopping":
		return CarControl_Actuators_LongControlState_stopping
	case "starting":
		return CarControl_Actuators_LongControlState_starting

	default:
		return 0
	}
}

type CarControl_Actuators_LongControlState_List = capnp.EnumList[CarControl_Actuators_LongControlState]

func NewCarControl_Actuators_LongControlState_List(s *capnp.Segment, sz int32) (CarControl_Actuators_LongControlState_List, error) {
	return capnp.NewEnumList[CarControl_Actuators_LongControlState](s, sz)
}

type CarControl_CruiseControl capnp.Struct

// CarControl_CruiseControl_TypeID is the unique identifier for the type CarControl_CruiseControl.
const CarControl_CruiseControl_TypeID = 0xb20e386e0e0ba8d3

func NewCarControl_CruiseControl(s *capnp.Segment) (CarControl_CruiseControl, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarControl_CruiseControl(st), err
}

func NewRootCarControl_CruiseControl(s *capnp.Segment) (CarControl_CruiseControl, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarControl_CruiseControl(st), err
}

func ReadRootCarControl_CruiseControl(msg *capnp.Message) (CarControl_CruiseControl, error) {
	root, err := msg.Root()
	return CarControl_CruiseControl(root.Struct()), err
}

func (s CarControl_CruiseControl) String() string {
	str, _ := text.Marshal(0xb20e386e0e0ba8d3, capnp.Struct(s))
	return str
}

func (s CarControl_CruiseControl) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarControl_CruiseControl) DecodeFromPtr(p capnp.Ptr) CarControl_CruiseControl {
	return CarControl_CruiseControl(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarControl_CruiseControl) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarControl_CruiseControl) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarControl_CruiseControl) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarControl_CruiseControl) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarControl_CruiseControl) Cancel() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarControl_CruiseControl) SetCancel(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarControl_CruiseControl) Resume() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CarControl_CruiseControl) SetResume(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CarControl_CruiseControl) Override() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CarControl_CruiseControl) SetOverride(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CarControl_CruiseControl) SpeedOverrideDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarControl_CruiseControl) SetSpeedOverrideDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarControl_CruiseControl) AccelOverrideDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarControl_CruiseControl) SetAccelOverrideDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

// CarControl_CruiseControl_List is a list of CarControl_CruiseControl.
type CarControl_CruiseControl_List = capnp.StructList[CarControl_CruiseControl]

// NewCarControl_CruiseControl creates a new list of CarControl_CruiseControl.
func NewCarControl_CruiseControl_List(s *capnp.Segment, sz int32) (CarControl_CruiseControl_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CarControl_CruiseControl](l), err
}

// CarControl_CruiseControl_Future is a wrapper for a CarControl_CruiseControl promised by a client call.
type CarControl_CruiseControl_Future struct{ *capnp.Future }

func (f CarControl_CruiseControl_Future) Struct() (CarControl_CruiseControl, error) {
	p, err := f.Future.Ptr()
	return CarControl_CruiseControl(p.Struct()), err
}

type CarControl_HUDControl capnp.Struct

// CarControl_HUDControl_TypeID is the unique identifier for the type CarControl_HUDControl.
const CarControl_HUDControl_TypeID = 0xd895c87c4eb03a38

func NewCarControl_HUDControl(s *capnp.Segment) (CarControl_HUDControl, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarControl_HUDControl(st), err
}

func NewRootCarControl_HUDControl(s *capnp.Segment) (CarControl_HUDControl, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarControl_HUDControl(st), err
}

func ReadRootCarControl_HUDControl(msg *capnp.Message) (CarControl_HUDControl, error) {
	root, err := msg.Root()
	return CarControl_HUDControl(root.Struct()), err
}

func (s CarControl_HUDControl) String() string {
	str, _ := text.Marshal(0xd895c87c4eb03a38, capnp.Struct(s))
	return str
}

func (s CarControl_HUDControl) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarControl_HUDControl) DecodeFromPtr(p capnp.Ptr) CarControl_HUDControl {
	return CarControl_HUDControl(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarControl_HUDControl) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarControl_HUDControl) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarControl_HUDControl) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarControl_HUDControl) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarControl_HUDControl) SpeedVisible() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarControl_HUDControl) SetSpeedVisible(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarControl_HUDControl) SetSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarControl_HUDControl) SetSetSpeed(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarControl_HUDControl) LanesVisible() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CarControl_HUDControl) SetLanesVisible(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CarControl_HUDControl) LeadVisible() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CarControl_HUDControl) SetLeadVisible(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CarControl_HUDControl) VisualAlert() CarControl_HUDControl_VisualAlert {
	return CarControl_HUDControl_VisualAlert(capnp.Struct(s).Uint16(2))
}

func (s CarControl_HUDControl) SetVisualAlert(v CarControl_HUDControl_VisualAlert) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s CarControl_HUDControl) AudibleAlert() CarControl_HUDControl_AudibleAlert {
	return CarControl_HUDControl_AudibleAlert(capnp.Struct(s).Uint16(8))
}

func (s CarControl_HUDControl) SetAudibleAlert(v CarControl_HUDControl_AudibleAlert) {
	capnp.Struct(s).SetUint16(8, uint16(v))
}

func (s CarControl_HUDControl) RightLaneVisible() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CarControl_HUDControl) SetRightLaneVisible(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CarControl_HUDControl) LeftLaneVisible() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CarControl_HUDControl) SetLeftLaneVisible(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CarControl_HUDControl) RightLaneDepart() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CarControl_HUDControl) SetRightLaneDepart(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CarControl_HUDControl) LeftLaneDepart() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CarControl_HUDControl) SetLeftLaneDepart(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

// CarControl_HUDControl_List is a list of CarControl_HUDControl.
type CarControl_HUDControl_List = capnp.StructList[CarControl_HUDControl]

// NewCarControl_HUDControl creates a new list of CarControl_HUDControl.
func NewCarControl_HUDControl_List(s *capnp.Segment, sz int32) (CarControl_HUDControl_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CarControl_HUDControl](l), err
}

// CarControl_HUDControl_Future is a wrapper for a CarControl_HUDControl promised by a client call.
type CarControl_HUDControl_Future struct{ *capnp.Future }

func (f CarControl_HUDControl_Future) Struct() (CarControl_HUDControl, error) {
	p, err := f.Future.Ptr()
	return CarControl_HUDControl(p.Struct()), err
}

type CarControl_HUDControl_VisualAlert uint16

// CarControl_HUDControl_VisualAlert_TypeID is the unique identifier for the type CarControl_HUDControl_VisualAlert.
const CarControl_HUDControl_VisualAlert_TypeID = 0x90d78e84616e17d4

// Values of CarControl_HUDControl_VisualAlert.
const (
	CarControl_HUDControl_VisualAlert_none              CarControl_HUDControl_VisualAlert = 0
	CarControl_HUDControl_VisualAlert_fcw               CarControl_HUDControl_VisualAlert = 1
	CarControl_HUDControl_VisualAlert_steerRequired     CarControl_HUDControl_VisualAlert = 2
	CarControl_HUDControl_VisualAlert_brakePressed      CarControl_HUDControl_VisualAlert = 3
	CarControl_HUDControl_VisualAlert_wrongGear         CarControl_HUDControl_VisualAlert = 4
	CarControl_HUDControl_VisualAlert_seatbeltUnbuckled CarControl_HUDControl_VisualAlert = 5
	CarControl_HUDControl_VisualAlert_speedTooHigh      CarControl_HUDControl_VisualAlert = 6
	CarControl_HUDControl_VisualAlert_ldw               CarControl_HUDControl_VisualAlert = 7
)

// String returns the enum's constant name.
func (c CarControl_HUDControl_VisualAlert) String() string {
	switch c {
	case CarControl_HUDControl_VisualAlert_none:
		return "none"
	case CarControl_HUDControl_VisualAlert_fcw:
		return "fcw"
	case CarControl_HUDControl_VisualAlert_steerRequired:
		return "steerRequired"
	case CarControl_HUDControl_VisualAlert_brakePressed:
		return "brakePressed"
	case CarControl_HUDControl_VisualAlert_wrongGear:
		return "wrongGear"
	case CarControl_HUDControl_VisualAlert_seatbeltUnbuckled:
		return "seatbeltUnbuckled"
	case CarControl_HUDControl_VisualAlert_speedTooHigh:
		return "speedTooHigh"
	case CarControl_HUDControl_VisualAlert_ldw:
		return "ldw"

	default:
		return ""
	}
}

// CarControl_HUDControl_VisualAlertFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarControl_HUDControl_VisualAlertFromString(c string) CarControl_HUDControl_VisualAlert {
	switch c {
	case "none":
		return CarControl_HUDControl_VisualAlert_none
	case "fcw":
		return CarControl_HUDControl_VisualAlert_fcw
	case "steerRequired":
		return CarControl_HUDControl_VisualAlert_steerRequired
	case "brakePressed":
		return CarControl_HUDControl_VisualAlert_brakePressed
	case "wrongGear":
		return CarControl_HUDControl_VisualAlert_wrongGear
	case "seatbeltUnbuckled":
		return CarControl_HUDControl_VisualAlert_seatbeltUnbuckled
	case "speedTooHigh":
		return CarControl_HUDControl_VisualAlert_speedTooHigh
	case "ldw":
		return CarControl_HUDControl_VisualAlert_ldw

	default:
		return 0
	}
}

type CarControl_HUDControl_VisualAlert_List = capnp.EnumList[CarControl_HUDControl_VisualAlert]

func NewCarControl_HUDControl_VisualAlert_List(s *capnp.Segment, sz int32) (CarControl_HUDControl_VisualAlert_List, error) {
	return capnp.NewEnumList[CarControl_HUDControl_VisualAlert](s, sz)
}

type CarControl_HUDControl_AudibleAlert uint16

// CarControl_HUDControl_AudibleAlert_TypeID is the unique identifier for the type CarControl_HUDControl_AudibleAlert.
const CarControl_HUDControl_AudibleAlert_TypeID = 0xf5a5e26c954e339e

// Values of CarControl_HUDControl_AudibleAlert.
const (
	CarControl_HUDControl_AudibleAlert_none             CarControl_HUDControl_AudibleAlert = 0
	CarControl_HUDControl_AudibleAlert_engage           CarControl_HUDControl_AudibleAlert = 1
	CarControl_HUDControl_AudibleAlert_disengage        CarControl_HUDControl_AudibleAlert = 2
	CarControl_HUDControl_AudibleAlert_refuse           CarControl_HUDControl_AudibleAlert = 3
	CarControl_HUDControl_AudibleAlert_warningSoft      CarControl_HUDControl_AudibleAlert = 4
	CarControl_HUDControl_AudibleAlert_warningImmediate CarControl_HUDControl_AudibleAlert = 5
	CarControl_HUDControl_AudibleAlert_prompt           CarControl_HUDControl_AudibleAlert = 6
	CarControl_HUDControl_AudibleAlert_promptRepeat     CarControl_HUDControl_AudibleAlert = 7
	CarControl_HUDControl_AudibleAlert_promptDistracted CarControl_HUDControl_AudibleAlert = 8
)

// String returns the enum's constant name.
func (c CarControl_HUDControl_AudibleAlert) String() string {
	switch c {
	case CarControl_HUDControl_AudibleAlert_none:
		return "none"
	case CarControl_HUDControl_AudibleAlert_engage:
		return "engage"
	case CarControl_HUDControl_AudibleAlert_disengage:
		return "disengage"
	case CarControl_HUDControl_AudibleAlert_refuse:
		return "refuse"
	case CarControl_HUDControl_AudibleAlert_warningSoft:
		return "warningSoft"
	case CarControl_HUDControl_AudibleAlert_warningImmediate:
		return "warningImmediate"
	case CarControl_HUDControl_AudibleAlert_prompt:
		return "prompt"
	case CarControl_HUDControl_AudibleAlert_promptRepeat:
		return "promptRepeat"
	case CarControl_HUDControl_AudibleAlert_promptDistracted:
		return "promptDistracted"

	default:
		return ""
	}
}

// CarControl_HUDControl_AudibleAlertFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarControl_HUDControl_AudibleAlertFromString(c string) CarControl_HUDControl_AudibleAlert {
	switch c {
	case "none":
		return CarControl_HUDControl_AudibleAlert_none
	case "engage":
		return CarControl_HUDControl_AudibleAlert_engage
	case "disengage":
		return CarControl_HUDControl_AudibleAlert_disengage
	case "refuse":
		return CarControl_HUDControl_AudibleAlert_refuse
	case "warningSoft":
		return CarControl_HUDControl_AudibleAlert_warningSoft
	case "warningImmediate":
		return CarControl_HUDControl_AudibleAlert_warningImmediate
	case "prompt":
		return CarControl_HUDControl_AudibleAlert_prompt
	case "promptRepeat":
		return CarControl_HUDControl_AudibleAlert_promptRepeat
	case "promptDistracted":
		return CarControl_HUDControl_AudibleAlert_promptDistracted

	default:
		return 0
	}
}

type CarControl_HUDControl_AudibleAlert_List = capnp.EnumList[CarControl_HUDControl_AudibleAlert]

func NewCarControl_HUDControl_AudibleAlert_List(s *capnp.Segment, sz int32) (CarControl_HUDControl_AudibleAlert_List, error) {
	return capnp.NewEnumList[CarControl_HUDControl_AudibleAlert](s, sz)
}

type CarParams capnp.Struct
type CarParams_lateralTuning CarParams
type CarParams_lateralTuning_Which uint16

const (
	CarParams_lateralTuning_Which_pid            CarParams_lateralTuning_Which = 0
	CarParams_lateralTuning_Which_indiDEPRECATED CarParams_lateralTuning_Which = 1
	CarParams_lateralTuning_Which_lqrDEPRECATED  CarParams_lateralTuning_Which = 2
	CarParams_lateralTuning_Which_torque         CarParams_lateralTuning_Which = 3
)

func (w CarParams_lateralTuning_Which) String() string {
	const s = "pidindiDEPRECATEDlqrDEPRECATEDtorque"
	switch w {
	case CarParams_lateralTuning_Which_pid:
		return s[0:3]
	case CarParams_lateralTuning_Which_indiDEPRECATED:
		return s[3:17]
	case CarParams_lateralTuning_Which_lqrDEPRECATED:
		return s[17:30]
	case CarParams_lateralTuning_Which_torque:
		return s[30:36]

	}
	return "CarParams_lateralTuning_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// CarParams_TypeID is the unique identifier for the type CarParams.
const CarParams_TypeID = 0x8c69372490aaa9da

func NewCarParams(s *capnp.Segment) (CarParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 136, PointerCount: 14})
	return CarParams(st), err
}

func NewRootCarParams(s *capnp.Segment) (CarParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 136, PointerCount: 14})
	return CarParams(st), err
}

func ReadRootCarParams(msg *capnp.Message) (CarParams, error) {
	root, err := msg.Root()
	return CarParams(root.Struct()), err
}

func (s CarParams) String() string {
	str, _ := text.Marshal(0x8c69372490aaa9da, capnp.Struct(s))
	return str
}

func (s CarParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams) DecodeFromPtr(p capnp.Ptr) CarParams {
	return CarParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams) CarName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CarParams) HasCarName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams) CarNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CarParams) SetCarName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CarParams) CarFingerprint() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CarParams) HasCarFingerprint() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams) CarFingerprintBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CarParams) SetCarFingerprint(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CarParams) FuzzyFingerprint() bool {
	return capnp.Struct(s).Bit(13)
}

func (s CarParams) SetFuzzyFingerprint(v bool) {
	capnp.Struct(s).SetBit(13, v)
}

func (s CarParams) NotCar() bool {
	return capnp.Struct(s).Bit(992)
}

func (s CarParams) SetNotCar(v bool) {
	capnp.Struct(s).SetBit(992, v)
}

func (s CarParams) EnableGasInterceptor() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarParams) SetEnableGasInterceptor(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarParams) PcmCruise() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CarParams) SetPcmCruise(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CarParams) EnableDsu() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CarParams) SetEnableDsu(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CarParams) EnableBsm() bool {
	return capnp.Struct(s).Bit(14)
}

func (s CarParams) SetEnableBsm(v bool) {
	capnp.Struct(s).SetBit(14, v)
}

func (s CarParams) Flags() uint32 {
	return capnp.Struct(s).Uint32(120)
}

func (s CarParams) SetFlags(v uint32) {
	capnp.Struct(s).SetUint32(120, v)
}

func (s CarParams) ExperimentalLongitudinalAvailable() bool {
	return capnp.Struct(s).Bit(995)
}

func (s CarParams) SetExperimentalLongitudinalAvailable(v bool) {
	capnp.Struct(s).SetBit(995, v)
}

func (s CarParams) MinEnableSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarParams) SetMinEnableSpeed(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarParams) MinSteerSpeed() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarParams) SetMinSteerSpeed(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarParams) SafetyConfigs() (CarParams_SafetyConfig_List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return CarParams_SafetyConfig_List(p.List()), err
}

func (s CarParams) HasSafetyConfigs() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CarParams) SetSafetyConfigs(v CarParams_SafetyConfig_List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewSafetyConfigs sets the safetyConfigs field to a newly
// allocated CarParams_SafetyConfig_List, preferring placement in s's segment.
func (s CarParams) NewSafetyConfigs(n int32) (CarParams_SafetyConfig_List, error) {
	l, err := NewCarParams_SafetyConfig_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarParams_SafetyConfig_List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CarParams) AlternativeExperience() int16 {
	return int16(capnp.Struct(s).Uint16(82))
}

func (s CarParams) SetAlternativeExperience(v int16) {
	capnp.Struct(s).SetUint16(82, uint16(v))
}

func (s CarParams) MaxLateralAccel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(128))
}

func (s CarParams) SetMaxLateralAccel(v float32) {
	capnp.Struct(s).SetUint32(128, math.Float32bits(v))
}

func (s CarParams) AutoResumeSng() bool {
	return capnp.Struct(s).Bit(993)
}

func (s CarParams) SetAutoResumeSng(v bool) {
	capnp.Struct(s).SetBit(993, v)
}

func (s CarParams) Mass() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s CarParams) SetMass(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s CarParams) Wheelbase() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CarParams) SetWheelbase(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CarParams) CenterToFront() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CarParams) SetCenterToFront(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CarParams) SteerRatio() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CarParams) SetSteerRatio(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

func (s CarParams) SteerRatioRear() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(32))
}

func (s CarParams) SetSteerRatioRear(v float32) {
	capnp.Struct(s).SetUint32(32, math.Float32bits(v))
}

func (s CarParams) RotationalInertia() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(36))
}

func (s CarParams) SetRotationalInertia(v float32) {
	capnp.Struct(s).SetUint32(36, math.Float32bits(v))
}

func (s CarParams) TireStiffnessFactor() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(132))
}

func (s CarParams) SetTireStiffnessFactor(v float32) {
	capnp.Struct(s).SetUint32(132, math.Float32bits(v))
}

func (s CarParams) TireStiffnessFront() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(40))
}

func (s CarParams) SetTireStiffnessFront(v float32) {
	capnp.Struct(s).SetUint32(40, math.Float32bits(v))
}

func (s CarParams) TireStiffnessRear() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(44))
}

func (s CarParams) SetTireStiffnessRear(v float32) {
	capnp.Struct(s).SetUint32(44, math.Float32bits(v))
}

func (s CarParams) LongitudinalTuning() (CarParams_LongitudinalPIDTuning, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return CarParams_LongitudinalPIDTuning(p.Struct()), err
}

func (s CarParams) HasLongitudinalTuning() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CarParams) SetLongitudinalTuning(v CarParams_LongitudinalPIDTuning) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewLongitudinalTuning sets the longitudinalTuning field to a newly
// allocated CarParams_LongitudinalPIDTuning struct, preferring placement in s's segment.
func (s CarParams) NewLongitudinalTuning() (CarParams_LongitudinalPIDTuning, error) {
	ss, err := NewCarParams_LongitudinalPIDTuning(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LongitudinalPIDTuning{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams) LateralParams() (CarParams_LateralParams, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return CarParams_LateralParams(p.Struct()), err
}

func (s CarParams) HasLateralParams() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CarParams) SetLateralParams(v CarParams_LateralParams) error {
	return capnp.Struct(s).SetPtr(12, capnp.Struct(v).ToPtr())
}

// NewLateralParams sets the lateralParams field to a newly
// allocated CarParams_LateralParams struct, preferring placement in s's segment.
func (s CarParams) NewLateralParams() (CarParams_LateralParams, error) {
	ss, err := NewCarParams_LateralParams(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LateralParams{}, err
	}
	err = capnp.Struct(s).SetPtr(12, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams) LateralTuning() CarParams_lateralTuning { return CarParams_lateralTuning(s) }

func (s CarParams_lateralTuning) Which() CarParams_lateralTuning_Which {
	return CarParams_lateralTuning_Which(capnp.Struct(s).Uint16(14))
}
func (s CarParams_lateralTuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_lateralTuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_lateralTuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_lateralTuning) Pid() (CarParams_LateralPIDTuning, error) {
	if capnp.Struct(s).Uint16(14) != 0 {
		panic("Which() != pid")
	}
	p, err := capnp.Struct(s).Ptr(9)
	return CarParams_LateralPIDTuning(p.Struct()), err
}

func (s CarParams_lateralTuning) HasPid() bool {
	if capnp.Struct(s).Uint16(14) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(9)
}

func (s CarParams_lateralTuning) SetPid(v CarParams_LateralPIDTuning) error {
	capnp.Struct(s).SetUint16(14, 0)
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewPid sets the pid field to a newly
// allocated CarParams_LateralPIDTuning struct, preferring placement in s's segment.
func (s CarParams_lateralTuning) NewPid() (CarParams_LateralPIDTuning, error) {
	capnp.Struct(s).SetUint16(14, 0)
	ss, err := NewCarParams_LateralPIDTuning(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LateralPIDTuning{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams_lateralTuning) IndiDEPRECATED() (CarParams_LateralINDITuning, error) {
	if capnp.Struct(s).Uint16(14) != 1 {
		panic("Which() != indiDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(9)
	return CarParams_LateralINDITuning(p.Struct()), err
}

func (s CarParams_lateralTuning) HasIndiDEPRECATED() bool {
	if capnp.Struct(s).Uint16(14) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(9)
}

func (s CarParams_lateralTuning) SetIndiDEPRECATED(v CarParams_LateralINDITuning) error {
	capnp.Struct(s).SetUint16(14, 1)
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewIndiDEPRECATED sets the indiDEPRECATED field to a newly
// allocated CarParams_LateralINDITuning struct, preferring placement in s's segment.
func (s CarParams_lateralTuning) NewIndiDEPRECATED() (CarParams_LateralINDITuning, error) {
	capnp.Struct(s).SetUint16(14, 1)
	ss, err := NewCarParams_LateralINDITuning(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LateralINDITuning{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams_lateralTuning) LqrDEPRECATED() (CarParams_LateralLQRTuning, error) {
	if capnp.Struct(s).Uint16(14) != 2 {
		panic("Which() != lqrDEPRECATED")
	}
	p, err := capnp.Struct(s).Ptr(9)
	return CarParams_LateralLQRTuning(p.Struct()), err
}

func (s CarParams_lateralTuning) HasLqrDEPRECATED() bool {
	if capnp.Struct(s).Uint16(14) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(9)
}

func (s CarParams_lateralTuning) SetLqrDEPRECATED(v CarParams_LateralLQRTuning) error {
	capnp.Struct(s).SetUint16(14, 2)
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewLqrDEPRECATED sets the lqrDEPRECATED field to a newly
// allocated CarParams_LateralLQRTuning struct, preferring placement in s's segment.
func (s CarParams_lateralTuning) NewLqrDEPRECATED() (CarParams_LateralLQRTuning, error) {
	capnp.Struct(s).SetUint16(14, 2)
	ss, err := NewCarParams_LateralLQRTuning(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LateralLQRTuning{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams_lateralTuning) Torque() (CarParams_LateralTorqueTuning, error) {
	if capnp.Struct(s).Uint16(14) != 3 {
		panic("Which() != torque")
	}
	p, err := capnp.Struct(s).Ptr(9)
	return CarParams_LateralTorqueTuning(p.Struct()), err
}

func (s CarParams_lateralTuning) HasTorque() bool {
	if capnp.Struct(s).Uint16(14) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(9)
}

func (s CarParams_lateralTuning) SetTorque(v CarParams_LateralTorqueTuning) error {
	capnp.Struct(s).SetUint16(14, 3)
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewTorque sets the torque field to a newly
// allocated CarParams_LateralTorqueTuning struct, preferring placement in s's segment.
func (s CarParams_lateralTuning) NewTorque() (CarParams_LateralTorqueTuning, error) {
	capnp.Struct(s).SetUint16(14, 3)
	ss, err := NewCarParams_LateralTorqueTuning(capnp.Struct(s).Segment())
	if err != nil {
		return CarParams_LateralTorqueTuning{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CarParams) SteerLimitAlert() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CarParams) SetSteerLimitAlert(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CarParams) SteerLimitTimer() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(76))
}

func (s CarParams) SetSteerLimitTimer(v float32) {
	capnp.Struct(s).SetUint32(76, math.Float32bits(v))
}

func (s CarParams) VEgoStopping() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(48))
}

func (s CarParams) SetVEgoStopping(v float32) {
	capnp.Struct(s).SetUint32(48, math.Float32bits(v))
}

func (s CarParams) VEgoStarting() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(104))
}

func (s CarParams) SetVEgoStarting(v float32) {
	capnp.Struct(s).SetUint32(104, math.Float32bits(v))
}

func (s CarParams) StoppingControl() bool {
	return capnp.Struct(s).Bit(7)
}

func (s CarParams) SetStoppingControl(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s CarParams) SteerControlType() CarParams_SteerControlType {
	return CarParams_SteerControlType(capnp.Struct(s).Uint16(60))
}

func (s CarParams) SetSteerControlType(v CarParams_SteerControlType) {
	capnp.Struct(s).SetUint16(60, uint16(v))
}

func (s CarParams) RadarUnavailable() bool {
	return capnp.Struct(s).Bit(8)
}

func (s CarParams) SetRadarUnavailable(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s CarParams) StopAccel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(108))
}

func (s CarParams) SetStopAccel(v float32) {
	capnp.Struct(s).SetUint32(108, math.Float32bits(v))
}

func (s CarParams) StoppingDecelRate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(88))
}

func (s CarParams) SetStoppingDecelRate(v float32) {
	capnp.Struct(s).SetUint32(88, math.Float32bits(v))
}

func (s CarParams) StartAccel() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(52))
}

func (s CarParams) SetStartAccel(v float32) {
	capnp.Struct(s).SetUint32(52, math.Float32bits(v))
}

func (s CarParams) StartingState() bool {
	return capnp.Struct(s).Bit(994)
}

func (s CarParams) SetStartingState(v bool) {
	capnp.Struct(s).SetBit(994, v)
}

func (s CarParams) SteerActuatorDelay() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(64))
}

func (s CarParams) SetSteerActuatorDelay(v float32) {
	capnp.Struct(s).SetUint32(64, math.Float32bits(v))
}

func (s CarParams) LongitudinalActuatorDelayLowerBound() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(112))
}

func (s CarParams) SetLongitudinalActuatorDelayLowerBound(v float32) {
	capnp.Struct(s).SetUint32(112, math.Float32bits(v))
}

func (s CarParams) LongitudinalActuatorDelayUpperBound() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(100))
}

func (s CarParams) SetLongitudinalActuatorDelayUpperBound(v float32) {
	capnp.Struct(s).SetUint32(100, math.Float32bits(v))
}

func (s CarParams) OpenpilotLongitudinalControl() bool {
	return capnp.Struct(s).Bit(9)
}

func (s CarParams) SetOpenpilotLongitudinalControl(v bool) {
	capnp.Struct(s).SetBit(9, v)
}

func (s CarParams) CarVin() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s CarParams) HasCarVin() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CarParams) CarVinBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s CarParams) SetCarVin(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s CarParams) DashcamOnly() bool {
	return capnp.Struct(s).Bit(11)
}

func (s CarParams) SetDashcamOnly(v bool) {
	capnp.Struct(s).SetBit(11, v)
}

func (s CarParams) TransmissionType() CarParams_TransmissionType {
	return CarParams_TransmissionType(capnp.Struct(s).Uint16(68))
}

func (s CarParams) SetTransmissionType(v CarParams_TransmissionType) {
	capnp.Struct(s).SetUint16(68, uint16(v))
}

func (s CarParams) CarFw() (CarParams_CarFw_List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return CarParams_CarFw_List(p.List()), err
}

func (s CarParams) HasCarFw() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CarParams) SetCarFw(v CarParams_CarFw_List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewCarFw sets the carFw field to a newly
// allocated CarParams_CarFw_List, preferring placement in s's segment.
func (s CarParams) NewCarFw(n int32) (CarParams_CarFw_List, error) {
	l, err := NewCarParams_CarFw_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CarParams_CarFw_List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CarParams) RadarTimeStep() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(72) ^ 0x3d4ccccd)
}

func (s CarParams) SetRadarTimeStep(v float32) {
	capnp.Struct(s).SetUint32(72, math.Float32bits(v)^0x3d4ccccd)
}

func (s CarParams) FingerprintSource() CarParams_FingerprintSource {
	return CarParams_FingerprintSource(capnp.Struct(s).Uint16(70))
}

func (s CarParams) SetFingerprintSource(v CarParams_FingerprintSource) {
	capnp.Struct(s).SetUint16(70, uint16(v))
}

func (s CarParams) NetworkLocation() CarParams_NetworkLocation {
	return CarParams_NetworkLocation(capnp.Struct(s).Uint16(80))
}

func (s CarParams) SetNetworkLocation(v CarParams_NetworkLocation) {
	capnp.Struct(s).SetUint16(80, uint16(v))
}

func (s CarParams) WheelSpeedFactor() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(116))
}

func (s CarParams) SetWheelSpeedFactor(v float32) {
	capnp.Struct(s).SetUint32(116, math.Float32bits(v))
}

func (s CarParams) EnableCameraDEPRECATED() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CarParams) SetEnableCameraDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CarParams) EnableApgsDEPRECATED() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CarParams) SetEnableApgsDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CarParams) SteerRateCostDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(56))
}

func (s CarParams) SetSteerRateCostDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(56, math.Float32bits(v))
}

func (s CarParams) IsPandaBlackDEPRECATED() bool {
	return capnp.Struct(s).Bit(10)
}

func (s CarParams) SetIsPandaBlackDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(10, v)
}

func (s CarParams) HasStockCameraDEPRECATED() bool {
	return capnp.Struct(s).Bit(15)
}

func (s CarParams) SetHasStockCameraDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(15, v)
}

func (s CarParams) SafetyParamDEPRECATED() int16 {
	return int16(capnp.Struct(s).Uint16(12))
}

func (s CarParams) SetSafetyParamDEPRECATED(v int16) {
	capnp.Struct(s).SetUint16(12, uint16(v))
}

func (s CarParams) SafetyModelDEPRECATED() CarParams_SafetyModel {
	return CarParams_SafetyModel(capnp.Struct(s).Uint16(2))
}

func (s CarParams) SetSafetyModelDEPRECATED(v CarParams_SafetyModel) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s CarParams) SafetyModelPassiveDEPRECATED() CarParams_SafetyModel {
	return CarParams_SafetyModel(capnp.Struct(s).Uint16(62))
}

func (s CarParams) SetSafetyModelPassiveDEPRECATED(v CarParams_SafetyModel) {
	capnp.Struct(s).SetUint16(62, uint16(v))
}

func (s CarParams) MinSpeedCanDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(84))
}

func (s CarParams) SetMinSpeedCanDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(84, math.Float32bits(v))
}

func (s CarParams) CommunityFeatureDEPRECATED() bool {
	return capnp.Struct(s).Bit(12)
}

func (s CarParams) SetCommunityFeatureDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(12, v)
}

func (s CarParams) StartingAccelRateDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(92))
}

func (s CarParams) SetStartingAccelRateDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(92, math.Float32bits(v))
}

func (s CarParams) SteerMaxBPDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasSteerMaxBPDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams) SetSteerMaxBPDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewSteerMaxBPDEPRECATED sets the steerMaxBPDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewSteerMaxBPDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CarParams) SteerMaxVDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasSteerMaxVDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarParams) SetSteerMaxVDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewSteerMaxVDEPRECATED sets the steerMaxVDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewSteerMaxVDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarParams) GasMaxBPDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasGasMaxBPDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarParams) SetGasMaxBPDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewGasMaxBPDEPRECATED sets the gasMaxBPDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewGasMaxBPDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CarParams) GasMaxVDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasGasMaxVDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CarParams) SetGasMaxVDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewGasMaxVDEPRECATED sets the gasMaxVDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewGasMaxVDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CarParams) BrakeMaxBPDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasBrakeMaxBPDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CarParams) SetBrakeMaxBPDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewBrakeMaxBPDEPRECATED sets the brakeMaxBPDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewBrakeMaxBPDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CarParams) BrakeMaxVDEPRECATED() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s CarParams) HasBrakeMaxVDEPRECATED() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CarParams) SetBrakeMaxVDEPRECATED(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewBrakeMaxVDEPRECATED sets the brakeMaxVDEPRECATED field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams) NewBrakeMaxVDEPRECATED(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CarParams) DirectAccelControlDEPRECATED() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CarParams) SetDirectAccelControlDEPRECATED(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s CarParams) MaxSteeringAngleDegDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(96))
}

func (s CarParams) SetMaxSteeringAngleDegDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(96, math.Float32bits(v))
}

// CarParams_List is a list of CarParams.
type CarParams_List = capnp.StructList[CarParams]

// NewCarParams creates a new list of CarParams.
func NewCarParams_List(s *capnp.Segment, sz int32) (CarParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 136, PointerCount: 14}, sz)
	return capnp.StructList[CarParams](l), err
}

// CarParams_Future is a wrapper for a CarParams promised by a client call.
type CarParams_Future struct{ *capnp.Future }

func (f CarParams_Future) Struct() (CarParams, error) {
	p, err := f.Future.Ptr()
	return CarParams(p.Struct()), err
}
func (p CarParams_Future) LongitudinalTuning() CarParams_LongitudinalPIDTuning_Future {
	return CarParams_LongitudinalPIDTuning_Future{Future: p.Future.Field(8, nil)}
}
func (p CarParams_Future) LateralParams() CarParams_LateralParams_Future {
	return CarParams_LateralParams_Future{Future: p.Future.Field(12, nil)}
}
func (p CarParams_Future) LateralTuning() CarParams_lateralTuning_Future {
	return CarParams_lateralTuning_Future{p.Future}
}

// CarParams_lateralTuning_Future is a wrapper for a CarParams_lateralTuning promised by a client call.
type CarParams_lateralTuning_Future struct{ *capnp.Future }

func (f CarParams_lateralTuning_Future) Struct() (CarParams_lateralTuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_lateralTuning(p.Struct()), err
}
func (p CarParams_lateralTuning_Future) Pid() CarParams_LateralPIDTuning_Future {
	return CarParams_LateralPIDTuning_Future{Future: p.Future.Field(9, nil)}
}
func (p CarParams_lateralTuning_Future) IndiDEPRECATED() CarParams_LateralINDITuning_Future {
	return CarParams_LateralINDITuning_Future{Future: p.Future.Field(9, nil)}
}
func (p CarParams_lateralTuning_Future) LqrDEPRECATED() CarParams_LateralLQRTuning_Future {
	return CarParams_LateralLQRTuning_Future{Future: p.Future.Field(9, nil)}
}
func (p CarParams_lateralTuning_Future) Torque() CarParams_LateralTorqueTuning_Future {
	return CarParams_LateralTorqueTuning_Future{Future: p.Future.Field(9, nil)}
}

type CarParams_SafetyConfig capnp.Struct

// CarParams_SafetyConfig_TypeID is the unique identifier for the type CarParams_SafetyConfig.
const CarParams_SafetyConfig_TypeID = 0xe836349c6056b0c9

func NewCarParams_SafetyConfig(s *capnp.Segment) (CarParams_SafetyConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarParams_SafetyConfig(st), err
}

func NewRootCarParams_SafetyConfig(s *capnp.Segment) (CarParams_SafetyConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return CarParams_SafetyConfig(st), err
}

func ReadRootCarParams_SafetyConfig(msg *capnp.Message) (CarParams_SafetyConfig, error) {
	root, err := msg.Root()
	return CarParams_SafetyConfig(root.Struct()), err
}

func (s CarParams_SafetyConfig) String() string {
	str, _ := text.Marshal(0xe836349c6056b0c9, capnp.Struct(s))
	return str
}

func (s CarParams_SafetyConfig) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_SafetyConfig) DecodeFromPtr(p capnp.Ptr) CarParams_SafetyConfig {
	return CarParams_SafetyConfig(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_SafetyConfig) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_SafetyConfig) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_SafetyConfig) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_SafetyConfig) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_SafetyConfig) SafetyModel() CarParams_SafetyModel {
	return CarParams_SafetyModel(capnp.Struct(s).Uint16(0))
}

func (s CarParams_SafetyConfig) SetSafetyModel(v CarParams_SafetyModel) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CarParams_SafetyConfig) SafetyParam() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s CarParams_SafetyConfig) SetSafetyParam(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s CarParams_SafetyConfig) SafetyParamDEPRECATED() int16 {
	return int16(capnp.Struct(s).Uint16(2))
}

func (s CarParams_SafetyConfig) SetSafetyParamDEPRECATED(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s CarParams_SafetyConfig) SafetyParam2DEPRECATED() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s CarParams_SafetyConfig) SetSafetyParam2DEPRECATED(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

// CarParams_SafetyConfig_List is a list of CarParams_SafetyConfig.
type CarParams_SafetyConfig_List = capnp.StructList[CarParams_SafetyConfig]

// NewCarParams_SafetyConfig creates a new list of CarParams_SafetyConfig.
func NewCarParams_SafetyConfig_List(s *capnp.Segment, sz int32) (CarParams_SafetyConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[CarParams_SafetyConfig](l), err
}

// CarParams_SafetyConfig_Future is a wrapper for a CarParams_SafetyConfig promised by a client call.
type CarParams_SafetyConfig_Future struct{ *capnp.Future }

func (f CarParams_SafetyConfig_Future) Struct() (CarParams_SafetyConfig, error) {
	p, err := f.Future.Ptr()
	return CarParams_SafetyConfig(p.Struct()), err
}

type CarParams_LateralParams capnp.Struct

// CarParams_LateralParams_TypeID is the unique identifier for the type CarParams_LateralParams.
const CarParams_LateralParams_TypeID = 0xb581b23b1c89dda3

func NewCarParams_LateralParams(s *capnp.Segment) (CarParams_LateralParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CarParams_LateralParams(st), err
}

func NewRootCarParams_LateralParams(s *capnp.Segment) (CarParams_LateralParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CarParams_LateralParams(st), err
}

func ReadRootCarParams_LateralParams(msg *capnp.Message) (CarParams_LateralParams, error) {
	root, err := msg.Root()
	return CarParams_LateralParams(root.Struct()), err
}

func (s CarParams_LateralParams) String() string {
	str, _ := text.Marshal(0xb581b23b1c89dda3, capnp.Struct(s))
	return str
}

func (s CarParams_LateralParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LateralParams) DecodeFromPtr(p capnp.Ptr) CarParams_LateralParams {
	return CarParams_LateralParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LateralParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LateralParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LateralParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LateralParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LateralParams) TorqueBP() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s CarParams_LateralParams) HasTorqueBP() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_LateralParams) SetTorqueBP(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTorqueBP sets the torqueBP field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s CarParams_LateralParams) NewTorqueBP(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarParams_LateralParams) TorqueV() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Int32List(p.List()), err
}

func (s CarParams_LateralParams) HasTorqueV() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_LateralParams) SetTorqueV(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTorqueV sets the torqueV field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s CarParams_LateralParams) NewTorqueV(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// CarParams_LateralParams_List is a list of CarParams_LateralParams.
type CarParams_LateralParams_List = capnp.StructList[CarParams_LateralParams]

// NewCarParams_LateralParams creates a new list of CarParams_LateralParams.
func NewCarParams_LateralParams_List(s *capnp.Segment, sz int32) (CarParams_LateralParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CarParams_LateralParams](l), err
}

// CarParams_LateralParams_Future is a wrapper for a CarParams_LateralParams promised by a client call.
type CarParams_LateralParams_Future struct{ *capnp.Future }

func (f CarParams_LateralParams_Future) Struct() (CarParams_LateralParams, error) {
	p, err := f.Future.Ptr()
	return CarParams_LateralParams(p.Struct()), err
}

type CarParams_LateralPIDTuning capnp.Struct

// CarParams_LateralPIDTuning_TypeID is the unique identifier for the type CarParams_LateralPIDTuning.
const CarParams_LateralPIDTuning_TypeID = 0x9622723fcbd14c2e

func NewCarParams_LateralPIDTuning(s *capnp.Segment) (CarParams_LateralPIDTuning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return CarParams_LateralPIDTuning(st), err
}

func NewRootCarParams_LateralPIDTuning(s *capnp.Segment) (CarParams_LateralPIDTuning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return CarParams_LateralPIDTuning(st), err
}

func ReadRootCarParams_LateralPIDTuning(msg *capnp.Message) (CarParams_LateralPIDTuning, error) {
	root, err := msg.Root()
	return CarParams_LateralPIDTuning(root.Struct()), err
}

func (s CarParams_LateralPIDTuning) String() string {
	str, _ := text.Marshal(0x9622723fcbd14c2e, capnp.Struct(s))
	return str
}

func (s CarParams_LateralPIDTuning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LateralPIDTuning) DecodeFromPtr(p capnp.Ptr) CarParams_LateralPIDTuning {
	return CarParams_LateralPIDTuning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LateralPIDTuning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LateralPIDTuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LateralPIDTuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LateralPIDTuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LateralPIDTuning) KpBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralPIDTuning) HasKpBP() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_LateralPIDTuning) SetKpBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewKpBP sets the kpBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralPIDTuning) NewKpBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarParams_LateralPIDTuning) KpV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralPIDTuning) HasKpV() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_LateralPIDTuning) SetKpV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewKpV sets the kpV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralPIDTuning) NewKpV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CarParams_LateralPIDTuning) KiBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralPIDTuning) HasKiBP() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams_LateralPIDTuning) SetKiBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewKiBP sets the kiBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralPIDTuning) NewKiBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CarParams_LateralPIDTuning) KiV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralPIDTuning) HasKiV() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarParams_LateralPIDTuning) SetKiV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewKiV sets the kiV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralPIDTuning) NewKiV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarParams_LateralPIDTuning) Kf() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarParams_LateralPIDTuning) SetKf(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

// CarParams_LateralPIDTuning_List is a list of CarParams_LateralPIDTuning.
type CarParams_LateralPIDTuning_List = capnp.StructList[CarParams_LateralPIDTuning]

// NewCarParams_LateralPIDTuning creates a new list of CarParams_LateralPIDTuning.
func NewCarParams_LateralPIDTuning_List(s *capnp.Segment, sz int32) (CarParams_LateralPIDTuning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[CarParams_LateralPIDTuning](l), err
}

// CarParams_LateralPIDTuning_Future is a wrapper for a CarParams_LateralPIDTuning promised by a client call.
type CarParams_LateralPIDTuning_Future struct{ *capnp.Future }

func (f CarParams_LateralPIDTuning_Future) Struct() (CarParams_LateralPIDTuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_LateralPIDTuning(p.Struct()), err
}

type CarParams_LateralTorqueTuning capnp.Struct

// CarParams_LateralTorqueTuning_TypeID is the unique identifier for the type CarParams_LateralTorqueTuning.
const CarParams_LateralTorqueTuning_TypeID = 0x80366e0e804ecc1d

func NewCarParams_LateralTorqueTuning(s *capnp.Segment) (CarParams_LateralTorqueTuning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CarParams_LateralTorqueTuning(st), err
}

func NewRootCarParams_LateralTorqueTuning(s *capnp.Segment) (CarParams_LateralTorqueTuning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return CarParams_LateralTorqueTuning(st), err
}

func ReadRootCarParams_LateralTorqueTuning(msg *capnp.Message) (CarParams_LateralTorqueTuning, error) {
	root, err := msg.Root()
	return CarParams_LateralTorqueTuning(root.Struct()), err
}

func (s CarParams_LateralTorqueTuning) String() string {
	str, _ := text.Marshal(0x80366e0e804ecc1d, capnp.Struct(s))
	return str
}

func (s CarParams_LateralTorqueTuning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LateralTorqueTuning) DecodeFromPtr(p capnp.Ptr) CarParams_LateralTorqueTuning {
	return CarParams_LateralTorqueTuning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LateralTorqueTuning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LateralTorqueTuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LateralTorqueTuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LateralTorqueTuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LateralTorqueTuning) UseSteeringAngle() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CarParams_LateralTorqueTuning) SetUseSteeringAngle(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CarParams_LateralTorqueTuning) Kp() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarParams_LateralTorqueTuning) SetKp(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) Ki() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarParams_LateralTorqueTuning) SetKi(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) Friction() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarParams_LateralTorqueTuning) SetFriction(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) Kf() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(16))
}

func (s CarParams_LateralTorqueTuning) SetKf(v float32) {
	capnp.Struct(s).SetUint32(16, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) SteeringAngleDeadzoneDeg() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(20))
}

func (s CarParams_LateralTorqueTuning) SetSteeringAngleDeadzoneDeg(v float32) {
	capnp.Struct(s).SetUint32(20, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) LatAccelFactor() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(24))
}

func (s CarParams_LateralTorqueTuning) SetLatAccelFactor(v float32) {
	capnp.Struct(s).SetUint32(24, math.Float32bits(v))
}

func (s CarParams_LateralTorqueTuning) LatAccelOffset() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(28))
}

func (s CarParams_LateralTorqueTuning) SetLatAccelOffset(v float32) {
	capnp.Struct(s).SetUint32(28, math.Float32bits(v))
}

// CarParams_LateralTorqueTuning_List is a list of CarParams_LateralTorqueTuning.
type CarParams_LateralTorqueTuning_List = capnp.StructList[CarParams_LateralTorqueTuning]

// NewCarParams_LateralTorqueTuning creates a new list of CarParams_LateralTorqueTuning.
func NewCarParams_LateralTorqueTuning_List(s *capnp.Segment, sz int32) (CarParams_LateralTorqueTuning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[CarParams_LateralTorqueTuning](l), err
}

// CarParams_LateralTorqueTuning_Future is a wrapper for a CarParams_LateralTorqueTuning promised by a client call.
type CarParams_LateralTorqueTuning_Future struct{ *capnp.Future }

func (f CarParams_LateralTorqueTuning_Future) Struct() (CarParams_LateralTorqueTuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_LateralTorqueTuning(p.Struct()), err
}

type CarParams_LongitudinalPIDTuning capnp.Struct

// CarParams_LongitudinalPIDTuning_TypeID is the unique identifier for the type CarParams_LongitudinalPIDTuning.
const CarParams_LongitudinalPIDTuning_TypeID = 0xc342cefc303e9b8e

func NewCarParams_LongitudinalPIDTuning(s *capnp.Segment) (CarParams_LongitudinalPIDTuning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return CarParams_LongitudinalPIDTuning(st), err
}

func NewRootCarParams_LongitudinalPIDTuning(s *capnp.Segment) (CarParams_LongitudinalPIDTuning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return CarParams_LongitudinalPIDTuning(st), err
}

func ReadRootCarParams_LongitudinalPIDTuning(msg *capnp.Message) (CarParams_LongitudinalPIDTuning, error) {
	root, err := msg.Root()
	return CarParams_LongitudinalPIDTuning(root.Struct()), err
}

func (s CarParams_LongitudinalPIDTuning) String() string {
	str, _ := text.Marshal(0xc342cefc303e9b8e, capnp.Struct(s))
	return str
}

func (s CarParams_LongitudinalPIDTuning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LongitudinalPIDTuning) DecodeFromPtr(p capnp.Ptr) CarParams_LongitudinalPIDTuning {
	return CarParams_LongitudinalPIDTuning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LongitudinalPIDTuning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LongitudinalPIDTuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LongitudinalPIDTuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LongitudinalPIDTuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LongitudinalPIDTuning) KpBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasKpBP() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_LongitudinalPIDTuning) SetKpBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewKpBP sets the kpBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewKpBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarParams_LongitudinalPIDTuning) KpV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasKpV() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_LongitudinalPIDTuning) SetKpV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewKpV sets the kpV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewKpV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CarParams_LongitudinalPIDTuning) KiBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasKiBP() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams_LongitudinalPIDTuning) SetKiBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewKiBP sets the kiBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewKiBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CarParams_LongitudinalPIDTuning) KiV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasKiV() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarParams_LongitudinalPIDTuning) SetKiV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewKiV sets the kiV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewKiV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarParams_LongitudinalPIDTuning) Kf() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarParams_LongitudinalPIDTuning) SetKf(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarParams_LongitudinalPIDTuning) DeadzoneBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasDeadzoneBP() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarParams_LongitudinalPIDTuning) SetDeadzoneBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDeadzoneBP sets the deadzoneBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewDeadzoneBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CarParams_LongitudinalPIDTuning) DeadzoneV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LongitudinalPIDTuning) HasDeadzoneV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CarParams_LongitudinalPIDTuning) SetDeadzoneV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewDeadzoneV sets the deadzoneV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LongitudinalPIDTuning) NewDeadzoneV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// CarParams_LongitudinalPIDTuning_List is a list of CarParams_LongitudinalPIDTuning.
type CarParams_LongitudinalPIDTuning_List = capnp.StructList[CarParams_LongitudinalPIDTuning]

// NewCarParams_LongitudinalPIDTuning creates a new list of CarParams_LongitudinalPIDTuning.
func NewCarParams_LongitudinalPIDTuning_List(s *capnp.Segment, sz int32) (CarParams_LongitudinalPIDTuning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[CarParams_LongitudinalPIDTuning](l), err
}

// CarParams_LongitudinalPIDTuning_Future is a wrapper for a CarParams_LongitudinalPIDTuning promised by a client call.
type CarParams_LongitudinalPIDTuning_Future struct{ *capnp.Future }

func (f CarParams_LongitudinalPIDTuning_Future) Struct() (CarParams_LongitudinalPIDTuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_LongitudinalPIDTuning(p.Struct()), err
}

type CarParams_LateralINDITuning capnp.Struct

// CarParams_LateralINDITuning_TypeID is the unique identifier for the type CarParams_LateralINDITuning.
const CarParams_LateralINDITuning_TypeID = 0xa334472e045533b3

func NewCarParams_LateralINDITuning(s *capnp.Segment) (CarParams_LateralINDITuning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return CarParams_LateralINDITuning(st), err
}

func NewRootCarParams_LateralINDITuning(s *capnp.Segment) (CarParams_LateralINDITuning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8})
	return CarParams_LateralINDITuning(st), err
}

func ReadRootCarParams_LateralINDITuning(msg *capnp.Message) (CarParams_LateralINDITuning, error) {
	root, err := msg.Root()
	return CarParams_LateralINDITuning(root.Struct()), err
}

func (s CarParams_LateralINDITuning) String() string {
	str, _ := text.Marshal(0xa334472e045533b3, capnp.Struct(s))
	return str
}

func (s CarParams_LateralINDITuning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LateralINDITuning) DecodeFromPtr(p capnp.Ptr) CarParams_LateralINDITuning {
	return CarParams_LateralINDITuning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LateralINDITuning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LateralINDITuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LateralINDITuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LateralINDITuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LateralINDITuning) OuterLoopGainBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasOuterLoopGainBP() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_LateralINDITuning) SetOuterLoopGainBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewOuterLoopGainBP sets the outerLoopGainBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewOuterLoopGainBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) OuterLoopGainV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasOuterLoopGainV() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_LateralINDITuning) SetOuterLoopGainV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOuterLoopGainV sets the outerLoopGainV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewOuterLoopGainV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) InnerLoopGainBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasInnerLoopGainBP() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams_LateralINDITuning) SetInnerLoopGainBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewInnerLoopGainBP sets the innerLoopGainBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewInnerLoopGainBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) InnerLoopGainV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasInnerLoopGainV() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarParams_LateralINDITuning) SetInnerLoopGainV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewInnerLoopGainV sets the innerLoopGainV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewInnerLoopGainV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) TimeConstantBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasTimeConstantBP() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarParams_LateralINDITuning) SetTimeConstantBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewTimeConstantBP sets the timeConstantBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewTimeConstantBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) TimeConstantV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasTimeConstantV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CarParams_LateralINDITuning) SetTimeConstantV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewTimeConstantV sets the timeConstantV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewTimeConstantV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) ActuatorEffectivenessBP() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasActuatorEffectivenessBP() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CarParams_LateralINDITuning) SetActuatorEffectivenessBP(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewActuatorEffectivenessBP sets the actuatorEffectivenessBP field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewActuatorEffectivenessBP(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) ActuatorEffectivenessV() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralINDITuning) HasActuatorEffectivenessV() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CarParams_LateralINDITuning) SetActuatorEffectivenessV(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewActuatorEffectivenessV sets the actuatorEffectivenessV field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralINDITuning) NewActuatorEffectivenessV(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CarParams_LateralINDITuning) OuterLoopGainDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarParams_LateralINDITuning) SetOuterLoopGainDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarParams_LateralINDITuning) InnerLoopGainDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarParams_LateralINDITuning) SetInnerLoopGainDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarParams_LateralINDITuning) TimeConstantDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarParams_LateralINDITuning) SetTimeConstantDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarParams_LateralINDITuning) ActuatorEffectivenessDEPRECATED() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(12))
}

func (s CarParams_LateralINDITuning) SetActuatorEffectivenessDEPRECATED(v float32) {
	capnp.Struct(s).SetUint32(12, math.Float32bits(v))
}

// CarParams_LateralINDITuning_List is a list of CarParams_LateralINDITuning.
type CarParams_LateralINDITuning_List = capnp.StructList[CarParams_LateralINDITuning]

// NewCarParams_LateralINDITuning creates a new list of CarParams_LateralINDITuning.
func NewCarParams_LateralINDITuning_List(s *capnp.Segment, sz int32) (CarParams_LateralINDITuning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 8}, sz)
	return capnp.StructList[CarParams_LateralINDITuning](l), err
}

// CarParams_LateralINDITuning_Future is a wrapper for a CarParams_LateralINDITuning promised by a client call.
type CarParams_LateralINDITuning_Future struct{ *capnp.Future }

func (f CarParams_LateralINDITuning_Future) Struct() (CarParams_LateralINDITuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_LateralINDITuning(p.Struct()), err
}

type CarParams_LateralLQRTuning capnp.Struct

// CarParams_LateralLQRTuning_TypeID is the unique identifier for the type CarParams_LateralLQRTuning.
const CarParams_LateralLQRTuning_TypeID = 0x9d151e3f28616a12

func NewCarParams_LateralLQRTuning(s *capnp.Segment) (CarParams_LateralLQRTuning, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return CarParams_LateralLQRTuning(st), err
}

func NewRootCarParams_LateralLQRTuning(s *capnp.Segment) (CarParams_LateralLQRTuning, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return CarParams_LateralLQRTuning(st), err
}

func ReadRootCarParams_LateralLQRTuning(msg *capnp.Message) (CarParams_LateralLQRTuning, error) {
	root, err := msg.Root()
	return CarParams_LateralLQRTuning(root.Struct()), err
}

func (s CarParams_LateralLQRTuning) String() string {
	str, _ := text.Marshal(0x9d151e3f28616a12, capnp.Struct(s))
	return str
}

func (s CarParams_LateralLQRTuning) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_LateralLQRTuning) DecodeFromPtr(p capnp.Ptr) CarParams_LateralLQRTuning {
	return CarParams_LateralLQRTuning(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_LateralLQRTuning) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_LateralLQRTuning) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_LateralLQRTuning) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_LateralLQRTuning) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_LateralLQRTuning) Scale() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s CarParams_LateralLQRTuning) SetScale(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s CarParams_LateralLQRTuning) Ki() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CarParams_LateralLQRTuning) SetKi(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s CarParams_LateralLQRTuning) DcGain() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(8))
}

func (s CarParams_LateralLQRTuning) SetDcGain(v float32) {
	capnp.Struct(s).SetUint32(8, math.Float32bits(v))
}

func (s CarParams_LateralLQRTuning) A() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralLQRTuning) HasA() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_LateralLQRTuning) SetA(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewA sets the a field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralLQRTuning) NewA(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CarParams_LateralLQRTuning) B() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralLQRTuning) HasB() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_LateralLQRTuning) SetB(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralLQRTuning) NewB(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CarParams_LateralLQRTuning) C() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralLQRTuning) HasC() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams_LateralLQRTuning) SetC(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewC sets the c field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralLQRTuning) NewC(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CarParams_LateralLQRTuning) K() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralLQRTuning) HasK() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CarParams_LateralLQRTuning) SetK(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewK sets the k field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralLQRTuning) NewK(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CarParams_LateralLQRTuning) L() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float32List(p.List()), err
}

func (s CarParams_LateralLQRTuning) HasL() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CarParams_LateralLQRTuning) SetL(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewL sets the l field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s CarParams_LateralLQRTuning) NewL(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// CarParams_LateralLQRTuning_List is a list of CarParams_LateralLQRTuning.
type CarParams_LateralLQRTuning_List = capnp.StructList[CarParams_LateralLQRTuning]

// NewCarParams_LateralLQRTuning creates a new list of CarParams_LateralLQRTuning.
func NewCarParams_LateralLQRTuning_List(s *capnp.Segment, sz int32) (CarParams_LateralLQRTuning_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[CarParams_LateralLQRTuning](l), err
}

// CarParams_LateralLQRTuning_Future is a wrapper for a CarParams_LateralLQRTuning promised by a client call.
type CarParams_LateralLQRTuning_Future struct{ *capnp.Future }

func (f CarParams_LateralLQRTuning_Future) Struct() (CarParams_LateralLQRTuning, error) {
	p, err := f.Future.Ptr()
	return CarParams_LateralLQRTuning(p.Struct()), err
}

type CarParams_SafetyModel uint16

// CarParams_SafetyModel_TypeID is the unique identifier for the type CarParams_SafetyModel.
const CarParams_SafetyModel_TypeID = 0x95551e5b1edaf451

// Values of CarParams_SafetyModel.
const (
	CarParams_SafetyModel_silent            CarParams_SafetyModel = 0
	CarParams_SafetyModel_hondaNidec        CarParams_SafetyModel = 1
	CarParams_SafetyModel_toyota            CarParams_SafetyModel = 2
	CarParams_SafetyModel_elm327            CarParams_SafetyModel = 3
	CarParams_SafetyModel_gm                CarParams_SafetyModel = 4
	CarParams_SafetyModel_hondaBoschGiraffe CarParams_SafetyModel = 5
	CarParams_SafetyModel_ford              CarParams_SafetyModel = 6
	CarParams_SafetyModel_cadillac          CarParams_SafetyModel = 7
	CarParams_SafetyModel_hyundai           CarParams_SafetyModel = 8
	CarParams_SafetyModel_chrysler          CarParams_SafetyModel = 9
	CarParams_SafetyModel_tesla             CarParams_SafetyModel = 10
	CarParams_SafetyModel_subaru            CarParams_SafetyModel = 11
	CarParams_SafetyModel_gmPassive         CarParams_SafetyModel = 12
	CarParams_SafetyModel_mazda             CarParams_SafetyModel = 13
	CarParams_SafetyModel_nissan            CarParams_SafetyModel = 14
	CarParams_SafetyModel_volkswagen        CarParams_SafetyModel = 15
	CarParams_SafetyModel_toyotaIpas        CarParams_SafetyModel = 16
	CarParams_SafetyModel_allOutput         CarParams_SafetyModel = 17
	CarParams_SafetyModel_gmAscm            CarParams_SafetyModel = 18
	CarParams_SafetyModel_noOutput          CarParams_SafetyModel = 19
	CarParams_SafetyModel_hondaBosch        CarParams_SafetyModel = 20
	CarParams_SafetyModel_volkswagenPq      CarParams_SafetyModel = 21
	CarParams_SafetyModel_subaruPreglobal   CarParams_SafetyModel = 22
	CarParams_SafetyModel_hyundaiLegacy     CarParams_SafetyModel = 23
	CarParams_SafetyModel_hyundaiCommunity  CarParams_SafetyModel = 24
	CarParams_SafetyModel_volkswagenMlb     CarParams_SafetyModel = 25
	CarParams_SafetyModel_hongqi            CarParams_SafetyModel = 26
	CarParams_SafetyModel_body              CarParams_SafetyModel = 27
	CarParams_SafetyModel_hyundaiCanfd      CarParams_SafetyModel = 28
	CarParams_SafetyModel_volkswagenMqbEvo  CarParams_SafetyModel = 29
)

// String returns the enum's constant name.
func (c CarParams_SafetyModel) String() string {
	switch c {
	case CarParams_SafetyModel_silent:
		return "silent"
	case CarParams_SafetyModel_hondaNidec:
		return "hondaNidec"
	case CarParams_SafetyModel_toyota:
		return "toyota"
	case CarParams_SafetyModel_elm327:
		return "elm327"
	case CarParams_SafetyModel_gm:
		return "gm"
	case CarParams_SafetyModel_hondaBoschGiraffe:
		return "hondaBoschGiraffe"
	case CarParams_SafetyModel_ford:
		return "ford"
	case CarParams_SafetyModel_cadillac:
		return "cadillac"
	case CarParams_SafetyModel_hyundai:
		return "hyundai"
	case CarParams_SafetyModel_chrysler:
		return "chrysler"
	case CarParams_SafetyModel_tesla:
		return "tesla"
	case CarParams_SafetyModel_subaru:
		return "subaru"
	case CarParams_SafetyModel_gmPassive:
		return "gmPassive"
	case CarParams_SafetyModel_mazda:
		return "mazda"
	case CarParams_SafetyModel_nissan:
		return "nissan"
	case CarParams_SafetyModel_volkswagen:
		return "volkswagen"
	case CarParams_SafetyModel_toyotaIpas:
		return "toyotaIpas"
	case CarParams_SafetyModel_allOutput:
		return "allOutput"
	case CarParams_SafetyModel_gmAscm:
		return "gmAscm"
	case CarParams_SafetyModel_noOutput:
		return "noOutput"
	case CarParams_SafetyModel_hondaBosch:
		return "hondaBosch"
	case CarParams_SafetyModel_volkswagenPq:
		return "volkswagenPq"
	case CarParams_SafetyModel_subaruPreglobal:
		return "subaruPreglobal"
	case CarParams_SafetyModel_hyundaiLegacy:
		return "hyundaiLegacy"
	case CarParams_SafetyModel_hyundaiCommunity:
		return "hyundaiCommunity"
	case CarParams_SafetyModel_volkswagenMlb:
		return "volkswagenMlb"
	case CarParams_SafetyModel_hongqi:
		return "hongqi"
	case CarParams_SafetyModel_body:
		return "body"
	case CarParams_SafetyModel_hyundaiCanfd:
		return "hyundaiCanfd"
	case CarParams_SafetyModel_volkswagenMqbEvo:
		return "volkswagenMqbEvo"

	default:
		return ""
	}
}

// CarParams_SafetyModelFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_SafetyModelFromString(c string) CarParams_SafetyModel {
	switch c {
	case "silent":
		return CarParams_SafetyModel_silent
	case "hondaNidec":
		return CarParams_SafetyModel_hondaNidec
	case "toyota":
		return CarParams_SafetyModel_toyota
	case "elm327":
		return CarParams_SafetyModel_elm327
	case "gm":
		return CarParams_SafetyModel_gm
	case "hondaBoschGiraffe":
		return CarParams_SafetyModel_hondaBoschGiraffe
	case "ford":
		return CarParams_SafetyModel_ford
	case "cadillac":
		return CarParams_SafetyModel_cadillac
	case "hyundai":
		return CarParams_SafetyModel_hyundai
	case "chrysler":
		return CarParams_SafetyModel_chrysler
	case "tesla":
		return CarParams_SafetyModel_tesla
	case "subaru":
		return CarParams_SafetyModel_subaru
	case "gmPassive":
		return CarParams_SafetyModel_gmPassive
	case "mazda":
		return CarParams_SafetyModel_mazda
	case "nissan":
		return CarParams_SafetyModel_nissan
	case "volkswagen":
		return CarParams_SafetyModel_volkswagen
	case "toyotaIpas":
		return CarParams_SafetyModel_toyotaIpas
	case "allOutput":
		return CarParams_SafetyModel_allOutput
	case "gmAscm":
		return CarParams_SafetyModel_gmAscm
	case "noOutput":
		return CarParams_SafetyModel_noOutput
	case "hondaBosch":
		return CarParams_SafetyModel_hondaBosch
	case "volkswagenPq":
		return CarParams_SafetyModel_volkswagenPq
	case "subaruPreglobal":
		return CarParams_SafetyModel_subaruPreglobal
	case "hyundaiLegacy":
		return CarParams_SafetyModel_hyundaiLegacy
	case "hyundaiCommunity":
		return CarParams_SafetyModel_hyundaiCommunity
	case "volkswagenMlb":
		return CarParams_SafetyModel_volkswagenMlb
	case "hongqi":
		return CarParams_SafetyModel_hongqi
	case "body":
		return CarParams_SafetyModel_body
	case "hyundaiCanfd":
		return CarParams_SafetyModel_hyundaiCanfd
	case "volkswagenMqbEvo":
		return CarParams_SafetyModel_volkswagenMqbEvo

	default:
		return 0
	}
}

type CarParams_SafetyModel_List = capnp.EnumList[CarParams_SafetyModel]

func NewCarParams_SafetyModel_List(s *capnp.Segment, sz int32) (CarParams_SafetyModel_List, error) {
	return capnp.NewEnumList[CarParams_SafetyModel](s, sz)
}

type CarParams_SteerControlType uint16

// CarParams_SteerControlType_TypeID is the unique identifier for the type CarParams_SteerControlType.
const CarParams_SteerControlType_TypeID = 0xd661512be2def77f

// Values of CarParams_SteerControlType.
const (
	CarParams_SteerControlType_torque    CarParams_SteerControlType = 0
	CarParams_SteerControlType_angle     CarParams_SteerControlType = 1
	CarParams_SteerControlType_curvature CarParams_SteerControlType = 2
)

// String returns the enum's constant name.
func (c CarParams_SteerControlType) String() string {
	switch c {
	case CarParams_SteerControlType_torque:
		return "torque"
	case CarParams_SteerControlType_angle:
		return "angle"
	case CarParams_SteerControlType_curvature:
		return "curvature"

	default:
		return ""
	}
}

// CarParams_SteerControlTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_SteerControlTypeFromString(c string) CarParams_SteerControlType {
	switch c {
	case "torque":
		return CarParams_SteerControlType_torque
	case "angle":
		return CarParams_SteerControlType_angle
	case "curvature":
		return CarParams_SteerControlType_curvature

	default:
		return 0
	}
}

type CarParams_SteerControlType_List = capnp.EnumList[CarParams_SteerControlType]

func NewCarParams_SteerControlType_List(s *capnp.Segment, sz int32) (CarParams_SteerControlType_List, error) {
	return capnp.NewEnumList[CarParams_SteerControlType](s, sz)
}

type CarParams_TransmissionType uint16

// CarParams_TransmissionType_TypeID is the unique identifier for the type CarParams_TransmissionType.
const CarParams_TransmissionType_TypeID = 0x8f162eeb14bfc0ec

// Values of CarParams_TransmissionType.
const (
	CarParams_TransmissionType_unknown   CarParams_TransmissionType = 0
	CarParams_TransmissionType_automatic CarParams_TransmissionType = 1
	CarParams_TransmissionType_manual    CarParams_TransmissionType = 2
	CarParams_TransmissionType_direct    CarParams_TransmissionType = 3
	CarParams_TransmissionType_cvt       CarParams_TransmissionType = 4
)

// String returns the enum's constant name.
func (c CarParams_TransmissionType) String() string {
	switch c {
	case CarParams_TransmissionType_unknown:
		return "unknown"
	case CarParams_TransmissionType_automatic:
		return "automatic"
	case CarParams_TransmissionType_manual:
		return "manual"
	case CarParams_TransmissionType_direct:
		return "direct"
	case CarParams_TransmissionType_cvt:
		return "cvt"

	default:
		return ""
	}
}

// CarParams_TransmissionTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_TransmissionTypeFromString(c string) CarParams_TransmissionType {
	switch c {
	case "unknown":
		return CarParams_TransmissionType_unknown
	case "automatic":
		return CarParams_TransmissionType_automatic
	case "manual":
		return CarParams_TransmissionType_manual
	case "direct":
		return CarParams_TransmissionType_direct
	case "cvt":
		return CarParams_TransmissionType_cvt

	default:
		return 0
	}
}

type CarParams_TransmissionType_List = capnp.EnumList[CarParams_TransmissionType]

func NewCarParams_TransmissionType_List(s *capnp.Segment, sz int32) (CarParams_TransmissionType_List, error) {
	return capnp.NewEnumList[CarParams_TransmissionType](s, sz)
}

type CarParams_CarFw capnp.Struct

// CarParams_CarFw_TypeID is the unique identifier for the type CarParams_CarFw.
const CarParams_CarFw_TypeID = 0x962b56180c9359ce

func NewCarParams_CarFw(s *capnp.Segment) (CarParams_CarFw, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return CarParams_CarFw(st), err
}

func NewRootCarParams_CarFw(s *capnp.Segment) (CarParams_CarFw, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return CarParams_CarFw(st), err
}

func ReadRootCarParams_CarFw(msg *capnp.Message) (CarParams_CarFw, error) {
	root, err := msg.Root()
	return CarParams_CarFw(root.Struct()), err
}

func (s CarParams_CarFw) String() string {
	str, _ := text.Marshal(0x962b56180c9359ce, capnp.Struct(s))
	return str
}

func (s CarParams_CarFw) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CarParams_CarFw) DecodeFromPtr(p capnp.Ptr) CarParams_CarFw {
	return CarParams_CarFw(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CarParams_CarFw) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CarParams_CarFw) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CarParams_CarFw) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CarParams_CarFw) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CarParams_CarFw) Ecu() CarParams_Ecu {
	return CarParams_Ecu(capnp.Struct(s).Uint16(0))
}

func (s CarParams_CarFw) SetEcu(v CarParams_Ecu) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CarParams_CarFw) FwVersion() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s CarParams_CarFw) HasFwVersion() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CarParams_CarFw) SetFwVersion(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s CarParams_CarFw) Address() uint32 {
	return capnp.Struct(s).Uint32(4)
}

func (s CarParams_CarFw) SetAddress(v uint32) {
	capnp.Struct(s).SetUint32(4, v)
}

func (s CarParams_CarFw) SubAddress() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s CarParams_CarFw) SetSubAddress(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s CarParams_CarFw) ResponseAddress() uint32 {
	return capnp.Struct(s).Uint32(8)
}

func (s CarParams_CarFw) SetResponseAddress(v uint32) {
	capnp.Struct(s).SetUint32(8, v)
}

func (s CarParams_CarFw) Request() (capnp.DataList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.DataList(p.List()), err
}

func (s CarParams_CarFw) HasRequest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CarParams_CarFw) SetRequest(v capnp.DataList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s CarParams_CarFw) NewRequest(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CarParams_CarFw) Brand() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CarParams_CarFw) HasBrand() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CarParams_CarFw) BrandBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CarParams_CarFw) SetBrand(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CarParams_CarFw) Bus() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s CarParams_CarFw) SetBus(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s CarParams_CarFw) Logging() bool {
	return capnp.Struct(s).Bit(96)
}

func (s CarParams_CarFw) SetLogging(v bool) {
	capnp.Struct(s).SetBit(96, v)
}

func (s CarParams_CarFw) ObdMultiplexing() bool {
	return capnp.Struct(s).Bit(97)
}

func (s CarParams_CarFw) SetObdMultiplexing(v bool) {
	capnp.Struct(s).SetBit(97, v)
}

// CarParams_CarFw_List is a list of CarParams_CarFw.
type CarParams_CarFw_List = capnp.StructList[CarParams_CarFw]

// NewCarParams_CarFw creates a new list of CarParams_CarFw.
func NewCarParams_CarFw_List(s *capnp.Segment, sz int32) (CarParams_CarFw_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return capnp.StructList[CarParams_CarFw](l), err
}

// CarParams_CarFw_Future is a wrapper for a CarParams_CarFw promised by a client call.
type CarParams_CarFw_Future struct{ *capnp.Future }

func (f CarParams_CarFw_Future) Struct() (CarParams_CarFw, error) {
	p, err := f.Future.Ptr()
	return CarParams_CarFw(p.Struct()), err
}

type CarParams_Ecu uint16

// CarParams_Ecu_TypeID is the unique identifier for the type CarParams_Ecu.
const CarParams_Ecu_TypeID = 0xf7119bb759d1d691

// Values of CarParams_Ecu.
const (
	CarParams_Ecu_eps                     CarParams_Ecu = 0
	CarParams_Ecu_abs                     CarParams_Ecu = 1
	CarParams_Ecu_fwdRadar                CarParams_Ecu = 2
	CarParams_Ecu_fwdCamera               CarParams_Ecu = 3
	CarParams_Ecu_engine                  CarParams_Ecu = 4
	CarParams_Ecu_unknown                 CarParams_Ecu = 5
	CarParams_Ecu_transmission            CarParams_Ecu = 8
	CarParams_Ecu_hybrid                  CarParams_Ecu = 18
	CarParams_Ecu_srs                     CarParams_Ecu = 9
	CarParams_Ecu_gateway                 CarParams_Ecu = 10
	CarParams_Ecu_hud                     CarParams_Ecu = 11
	CarParams_Ecu_combinationMeter        CarParams_Ecu = 12
	CarParams_Ecu_electricBrakeBooster    CarParams_Ecu = 15
	CarParams_Ecu_shiftByWire             CarParams_Ecu = 16
	CarParams_Ecu_adas                    CarParams_Ecu = 19
	CarParams_Ecu_cornerRadar             CarParams_Ecu = 21
	CarParams_Ecu_hvac                    CarParams_Ecu = 20
	CarParams_Ecu_parkingAdas             CarParams_Ecu = 7
	CarParams_Ecu_epb                     CarParams_Ecu = 22
	CarParams_Ecu_telematics              CarParams_Ecu = 23
	CarParams_Ecu_body                    CarParams_Ecu = 24
	CarParams_Ecu_dsu                     CarParams_Ecu = 6
	CarParams_Ecu_vsa                     CarParams_Ecu = 13
	CarParams_Ecu_programmedFuelInjection CarParams_Ecu = 14
	CarParams_Ecu_debug                   CarParams_Ecu = 17
)

// String returns the enum's constant name.
func (c CarParams_Ecu) String() string {
	switch c {
	case CarParams_Ecu_eps:
		return "eps"
	case CarParams_Ecu_abs:
		return "abs"
	case CarParams_Ecu_fwdRadar:
		return "fwdRadar"
	case CarParams_Ecu_fwdCamera:
		return "fwdCamera"
	case CarParams_Ecu_engine:
		return "engine"
	case CarParams_Ecu_unknown:
		return "unknown"
	case CarParams_Ecu_transmission:
		return "transmission"
	case CarParams_Ecu_hybrid:
		return "hybrid"
	case CarParams_Ecu_srs:
		return "srs"
	case CarParams_Ecu_gateway:
		return "gateway"
	case CarParams_Ecu_hud:
		return "hud"
	case CarParams_Ecu_combinationMeter:
		return "combinationMeter"
	case CarParams_Ecu_electricBrakeBooster:
		return "electricBrakeBooster"
	case CarParams_Ecu_shiftByWire:
		return "shiftByWire"
	case CarParams_Ecu_adas:
		return "adas"
	case CarParams_Ecu_cornerRadar:
		return "cornerRadar"
	case CarParams_Ecu_hvac:
		return "hvac"
	case CarParams_Ecu_parkingAdas:
		return "parkingAdas"
	case CarParams_Ecu_epb:
		return "epb"
	case CarParams_Ecu_telematics:
		return "telematics"
	case CarParams_Ecu_body:
		return "body"
	case CarParams_Ecu_dsu:
		return "dsu"
	case CarParams_Ecu_vsa:
		return "vsa"
	case CarParams_Ecu_programmedFuelInjection:
		return "programmedFuelInjection"
	case CarParams_Ecu_debug:
		return "debug"

	default:
		return ""
	}
}

// CarParams_EcuFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_EcuFromString(c string) CarParams_Ecu {
	switch c {
	case "eps":
		return CarParams_Ecu_eps
	case "abs":
		return CarParams_Ecu_abs
	case "fwdRadar":
		return CarParams_Ecu_fwdRadar
	case "fwdCamera":
		return CarParams_Ecu_fwdCamera
	case "engine":
		return CarParams_Ecu_engine
	case "unknown":
		return CarParams_Ecu_unknown
	case "transmission":
		return CarParams_Ecu_transmission
	case "hybrid":
		return CarParams_Ecu_hybrid
	case "srs":
		return CarParams_Ecu_srs
	case "gateway":
		return CarParams_Ecu_gateway
	case "hud":
		return CarParams_Ecu_hud
	case "combinationMeter":
		return CarParams_Ecu_combinationMeter
	case "electricBrakeBooster":
		return CarParams_Ecu_electricBrakeBooster
	case "shiftByWire":
		return CarParams_Ecu_shiftByWire
	case "adas":
		return CarParams_Ecu_adas
	case "cornerRadar":
		return CarParams_Ecu_cornerRadar
	case "hvac":
		return CarParams_Ecu_hvac
	case "parkingAdas":
		return CarParams_Ecu_parkingAdas
	case "epb":
		return CarParams_Ecu_epb
	case "telematics":
		return CarParams_Ecu_telematics
	case "body":
		return CarParams_Ecu_body
	case "dsu":
		return CarParams_Ecu_dsu
	case "vsa":
		return CarParams_Ecu_vsa
	case "programmedFuelInjection":
		return CarParams_Ecu_programmedFuelInjection
	case "debug":
		return CarParams_Ecu_debug

	default:
		return 0
	}
}

type CarParams_Ecu_List = capnp.EnumList[CarParams_Ecu]

func NewCarParams_Ecu_List(s *capnp.Segment, sz int32) (CarParams_Ecu_List, error) {
	return capnp.NewEnumList[CarParams_Ecu](s, sz)
}

type CarParams_FingerprintSource uint16

// CarParams_FingerprintSource_TypeID is the unique identifier for the type CarParams_FingerprintSource.
const CarParams_FingerprintSource_TypeID = 0x9fd95523d8dc40ce

// Values of CarParams_FingerprintSource.
const (
	CarParams_FingerprintSource_can   CarParams_FingerprintSource = 0
	CarParams_FingerprintSource_fw    CarParams_FingerprintSource = 1
	CarParams_FingerprintSource_fixed CarParams_FingerprintSource = 2
)

// String returns the enum's constant name.
func (c CarParams_FingerprintSource) String() string {
	switch c {
	case CarParams_FingerprintSource_can:
		return "can"
	case CarParams_FingerprintSource_fw:
		return "fw"
	case CarParams_FingerprintSource_fixed:
		return "fixed"

	default:
		return ""
	}
}

// CarParams_FingerprintSourceFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_FingerprintSourceFromString(c string) CarParams_FingerprintSource {
	switch c {
	case "can":
		return CarParams_FingerprintSource_can
	case "fw":
		return CarParams_FingerprintSource_fw
	case "fixed":
		return CarParams_FingerprintSource_fixed

	default:
		return 0
	}
}

type CarParams_FingerprintSource_List = capnp.EnumList[CarParams_FingerprintSource]

func NewCarParams_FingerprintSource_List(s *capnp.Segment, sz int32) (CarParams_FingerprintSource_List, error) {
	return capnp.NewEnumList[CarParams_FingerprintSource](s, sz)
}

type CarParams_NetworkLocation uint16

// CarParams_NetworkLocation_TypeID is the unique identifier for the type CarParams_NetworkLocation.
const CarParams_NetworkLocation_TypeID = 0xff99e3682a833c51

// Values of CarParams_NetworkLocation.
const (
	CarParams_NetworkLocation_fwdCamera CarParams_NetworkLocation = 0
	CarParams_NetworkLocation_gateway   CarParams_NetworkLocation = 1
)

// String returns the enum's constant name.
func (c CarParams_NetworkLocation) String() string {
	switch c {
	case CarParams_NetworkLocation_fwdCamera:
		return "fwdCamera"
	case CarParams_NetworkLocation_gateway:
		return "gateway"

	default:
		return ""
	}
}

// CarParams_NetworkLocationFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CarParams_NetworkLocationFromString(c string) CarParams_NetworkLocation {
	switch c {
	case "fwdCamera":
		return CarParams_NetworkLocation_fwdCamera
	case "gateway":
		return CarParams_NetworkLocation_gateway

	default:
		return 0
	}
}

type CarParams_NetworkLocation_List = capnp.EnumList[CarParams_NetworkLocation]

func NewCarParams_NetworkLocation_List(s *capnp.Segment, sz int32) (CarParams_NetworkLocation_List, error) {
	return capnp.NewEnumList[CarParams_NetworkLocation](s, sz)
}

const schema_8e2af1e708af8b8d = "x\xda\xac\xbc\x0d\x90\x1c\xd5u/~N\xf7\xce\xce\xee" +
	"\"i\xb6uG \xc9\x12#\xad\x91\x91d$\xeb\x03" +
	"\x19\x90%\x0f\xfb%i\xc9\xae\xb4\xb3\xb3+\x10\x01\x87" +
	"\xbb\xddwf[\xdb\xd3=\xea\xee\xd9\xd5\x12(\x011" +
	"\xf5\xc7\xfa\x83\x03\x8ey\x15\x1cx\xcfqL\x1e\xa6\xec" +
	"2\xe69\x15\xdb\x85+\xe0\x87+\xe0@\x0a\x12H\xc0" +
	"\x05\x098\xf8\x05;P\x05\x09<\x03\x05\xaf_\x9d{" +
	"\xbbgzv\xd7\xce\xcb\xabW\xaa\xd2N\xff\xee\xed\xfb" +
	"q\xee\xb9\xe7\x9e\xaf\xdb\xbb\xfe|\xf3\xe5\x1d\xbbWV" +
	"O\x80V\xee\xed\xc8tF\x1b\x9f:z\xd3*\xf7\xd3" +
	"7A)\x8f\x1d\xd1O\xbf\xf1\xe0\x9d\x17\\b\xdf\x0e" +
	"\x1dY\x80\xbd\xf7\\4\x80\xec\x1b\x17\xd1\xcf\xfb/\xfa" +
	"K\x04\x8c\xfe\xea\xc1\xb76\\\xf5wgo\x03\xa3\x07" +
	"\xa3;\xfe\xffow\xfd\xf3\xdb\xdb\xbf\x08\x19=\x0b\xc0" +
	"\xbe\xb0\xf3k\xec\xae\x9d\x17\x02\xb0o\xec\xfc6`\xab" +
	"\xadR\x0f\x1a\xa9\xca\xab\xa8\xf2\xc2\xa7\xbe\xc6n\xfe\xd4" +
	"?\x03\xecm\xec\xba2\x07\x18\xbd\xf1\xe8_\xe4\xffe" +
	"\xe7\xb9\xbf\x0fF^k\xbd\x0a\xb8\xf7\xed\x81\xed\xc8p" +
	"\x90^\xfah\xe0\x0c`\xf4\xe9\x7f,|\xf3_\xf6\xfe" +
	"\xdb\xef\xab\x117GD#f\xfb\x06?`\xfdTw" +
	"\xef\xc1\xc1\xdf\xa7\x01?w\x9e\xcb?\xff\xc5\xbf\xbf\x13" +
	"\x8cMZt\xe9\xfe\x87\x8e\xde\xf0\xc4\xdd/P\xb3O" +
	"\x0eM#{y\x88^zq\xe8/\x01\xa3\x99\xbb\xf7" +
	"\xee\xeb\xb9\xea\xc3?\xa0f\x8d\xd6\x08\xa6Ve\xb1\x03" +
	"\xb3{\xa7\x86W# \xbbv\xf8\x9f\x01\xa3\xd2;?" +
	"=\xff\xb7\xcf\x9f\xba{\xc9`/;\xa4!\x1b>D" +
	"\x03\xe8?\xf4\xf7\x1a`\xb4s\xf4\xd9\xbf*\xfa}\xff" +
	"\x89\x9aM\xd1$#\x09<ud;2q\x84~\xf2" +
	"#\x05\x1a\xef_\x9f\xf8\x83\x15k\x8f\x7fRVO5" +
	"\xad(\xfc\x9d\x91\xbfa?\x1c\xa1\xda\xdf\x1f\xb9\x84\x1a" +
	"\xff\x93}'\xd6\xfc\xe9%\xeb\xef\x81\x12C-:p" +
	"\xe7\xc4+\xdd\x1f|\xfd>E\x8a5\xa3\x1f\xb0\xcd\xa3" +
	"\xf4k\xe3(\x8d\xf9o\xf7\x7f{\xf4\xdf\xae<\xf7\x8f" +
	"h9Rk'\xeb\xbe=\xfa\x15\xf6\xfe\xe8y\x00{" +
	"3c\x1e5\xbc\xfa$\xdfZ<\x7f\xcd}\x8b\x87\x91" +
	"\xa1\xce\xff\xf8\xd8vd\xdf9F?\xbfuL\xb2E" +
	"\xb3\xe7R\x0fv\xa5\x96\xba\x93\x1a\x7f\xac\xf4\x15\xf6d" +
	"\xe905>\xf1\xff\xf5\xd0\x1c/\x7f\xe9\x85\x8fO\xbd" +
	"\xf8_\x96P\xef\xe0\xe7\xf6 \x1b\xfb\x1c\xbd4\xf2\xb9" +
	"c\x80\xd1\x7f\xdb;\xd5\xb1\xf3\xf0\xc5\x7f\xb2x\x18]" +
	"\xd4\xf7\xb5T\xbbF\xb5\xf7\xda\x9f\xfb\xaf4\xea\xbf}" +
	"\xe0\x9cU\xee\xa5\xab\x1e\x86\xd2\x1a\xd4\xa2o\xe7\xbf\xf7" +
	"\x95\x8em\xb7\xfdJ\xf1\xf2/\xf8zd\xefs\xfa\xf9" +
	".\x97\xa4\xfe\x93\x97\xbf\xb0\xe13\x0f\xdf\xfcg`\xe4" +
	"\xd3\x0b\xa3Q\x95u\xe6jd\xdbL\x1a\xc9\x16s\x1e" +
	"0\xfa\x87\x0b\x7f\x95y\xfe\xc7\x0f\xfc\x00\x0c\xa6\xb5H" +
	"\x09\xc8\xee7\x7f\xc9\xbecJZ\x98\x87\xcf\x01\x8c\xbe" +
	"\xf8G\x9f\xdd\xf5\xe1_\x0f\xfc\xf7\xc5\x0bN\xb4\xd8{" +
	"\x99;\x81l\xcc\xa5\x9f#\xaed\xd03\xbf\xfa\x87\x9f" +
	"}\xb2\xc4\xffn)+\xd5\xb7#\x1b\xa9\xd3\x10\x86\xeb" +
	"D\x8c&\xf7.3\xbbk\xeb\x1a2\xbb~!\xc0\xde" +
	"[\xeb\x925\xbep\xd2c\xc3?\xe9xE\x0e\xb8\xb9" +
	">\x80\xecM\xff\x03\xf6\xbeO\xcd\xbe\xeb\xff\x0a\xf0\x1f" +
	"o8\x95\x9f\xdc\xc4_5\x0aZ\xf4?\xff\xfa\x8a\xdf" +
	"\xfe\xbd?\xbd&\xa2\xeeo\x0c\xfa\x90\xdd\x11P\xe3_" +
	"\x08.\xa4\x91\xder\xcb\x9d7\xde\xb5?\xf7\x1aP\xd5" +
	"\xad[\x07\xd7}\xa3\xe1\xff\x82\xaaN\x85\xb7 \xb3C" +
	"jR\x84U\xc0\xe8\xdb\xd7\xb9_<|\xf3\xd1\xff\xb1" +
	"\x1c[\xde\x15~\xc0\xee\x0b\xa5t\x09%\x01\x9e|\xe8" +
	"\xf8u\xf7^\xfc\xe9\xd7\x17\xad\xb1\x9c\xd6\xbe\xb9\x1ed" +
	"\xc3s\xf4^\xff\x1c1\xf1\xb7\xe6~\xf0/\x0b\x95\x07" +
	"^\x97\xd4jn}@\xb6c\xfeo\xd8e\xf3R\x04" +
	"\xcc\x13\xb1\x9a\xe3+\xad\xc1L;\xb1Xi\xfe\x03v" +
	"\xed<q{m>\xa2!\xfc\xe7\xbdG\xefv~v" +
	"\xff\xbbK\x84\xc4\xad\x0b'\x91\xdd\xb3@/\xdd\xbd\xf0" +
	"\x8f\x80\xd1]\x7f\xf7\xec\x89?\xff#\xe3W\x8bW\x8b" +
	"m\xb9\xfeGl\xc7\xf54\xe6m\xd7\xff\x0e\xd1\xbf\xd9" +
	"e\xa9\x07\xf5\xc5[\xe2\xd9\xdf}\x90\xbd\xf8\xbb\x97\xd0" +
	"\x96\xb8\xe1/t\xc0\x16\xe5K\x0cq\x11\xc5J7}" +
	"\xc0\xae\xbd\xe9<\xa2\xeeM\xc4\x8a\xa5\x03\xbf\xb7}\xe6" +
	"\x9f\xee\x89\x96p\xccc7\xf5!{\xf6&z\xe7\xe9" +
	"\x9b.\x81h\xc9\xbf?\x8fL\xee\xef4y\xdd\xed\xa8" +
	"\xef\x1f\xe4\xfe8\xf7y-\xd89\xcaC\xe1sg\xd2" +
	"\xf3O5\xc4d\xc3\xb5\xdd*\x8c#\x966\xe9\x1d\x00" +
	"\x1d\x08`<{\x16\xa0\xf4\x9c\x8e\xa5W44\x10\xf3" +
	"H\xe0\xcb\xeb\x01J/\xe8XzMCC\xd3\xf2\xa8" +
	"\x01\x18\xaf\x12\xf8\x92\x8e\xa5\xd754t=\x8f:\x80" +
	"\xf1\xf3+\x00J\xaf\xe9XzKC\xa3\xa3#\x8f\x1d" +
	"\x00\xc6\x9bT\xf3u\x1dK\xefhhd2y\xcc\x00" +
	"\x18o\xff\x04\xa0\xf4\x9e\x8e\xe5\x0e\xd4\xd0\xe8\xec\xccc" +
	"'\x00C\xbc\x1e`\x02u,\xaf 8\x9b\xcd#M" +
	"\xb2\x9b\xe0r\x17\xe1y\xd40j\x04\xa2\x1c\x0a\xe1\xa3" +
	"\xedV\xfb\xdd\xaa#\x00\x10AC\x04\xd4g\xeb\xd8\x03" +
	"\x1a\xf6\xd0O;\xf9\x19U|\xdb\x0cm\xcf\x05\x80V" +
	"q\xa5Y\x1cPk\xb6[\xd5dkC\x82[\xd7{" +
	"\xae\x18\x12\xd5V\xf5\xc8\xe1a\xbfi\x0a\x07\x8a\x87\xb8" +
	"\x19z\xfe2\x05\xc7*\x95@\x84\xcd\x82d\x0d\xb0\xbe" +
	"\x7f\x82[\xdc\x1f\xca\xf2\x90\x97\xba0\xcd\xdd\xdd{Z" +
	"\xc7\x9c\x91\xb9\xba0\xec\xfb\x9e\x1f\xc9\xea\xe3\x9e\x0d\xba" +
	"\x1b\x96V4Wgx?@\xe9r\x1dK\xd7\xa4V" +
	"\xe7\x04\x81\x93:\x96\xea\xa9\xd5\xa9\xfd\x00\xa0T\xd7\xb1" +
	"t\xbb\x86EAm\x06\xb8\x0ap\\G\xcc\xb5z\x07" +
	"$\xb0X\xf7l7l\x96\xf7\xb6\x06\xa4\xca#\x93\xbb" +
	"c\x9e\xebM\xa2]\x13\xc1\xd0\xf0\xf8Dqx\xb0\x7f" +
	"rx(y\xa3\x1b\xb4\xb8^s\xbe\x8a\xe7\xb2\xbc\x16" +
	"\x94.\xc5\xd4\xd67\xec\x93)ql\xfb\xadS\xd3\xb0" +
	"\xcf\xb6T\x14\xa3\xf6\xb5\x96x5N=\xdc:\x1f\x8c" +
	"\xc6\x97Zg\x96\xb1p6uB\xdf8\x9d\x92\xb17" +
	"\x9eM)\x1a7\x9fm\x1d\xb7\xc6\xad{R\x9b\xfb\xe6" +
	"\xbe\xd4!u\xe3\x97R[\xee\xe6[\xa22\xaf\x88p" +
	"a\xd0\x83\x9c[\xb1\xabQ\xbc{\xc6\xa1 wS\xf3" +
	"\x19G\x86\xe2\xbd\x04\x096\x89\xc9\x16\xcb\xdan5\x1a" +
	"\xf5\xdc\xaa\x1d6,\xb4]\xee\x8c\x8f\x0cM\x16d\xfd" +
	"\xa4\xf6\x08\x1e\x1d\x1a\x91M`\x13\x1b\xc5\xd2D\xb3U" +
	"5\x901\x0f\xb2\x96p\"\xc9\xfa\x83\x9e\x8b\xa1\xef9" +
	"\x93\x0bu\x01\x10M\xfa\xdc\x0djv\x80\x81\xed\xb9\x0a" +
	"+\x0cr\xff\xd0|v\xd8lD\x87l\xb7*\xfc:" +
	"\xed\x97\xb0\xec5|\x13EtT\x84\xf3\x9e?;\x8a" +
	"\x9e\xc9\xe5\xce(\xaf\xc5\x84\xd1\xd8=\xd9\x01\x80\xf2\x97" +
	"\xb3:\x96\xbf\x9am\xf1\x1a\xbb/K\x1b\xf1^\xc2\x1f" +
	"\xc8j\x88\x1d\x92\xdb\xd8\xfd\xd9\x07\x01\xca\x0f\x10\xfc]" +
	"\xaa\x9eA)\x0e\xd8w\xb2\x13\x00\xe5\x87\x08\x7f\x84\xf0" +
	"\xbd\x9a\x94\x08\xec\xfb\xd9\x1f\x00\x94\x1f!\xfc\x09\xc2;" +
	"u)\x14\xd8\x8fe\xfd\xc7\x09\x7f\x86\xf0\x8b;\x94X" +
	"xZ\xb6\xff\x0c\xe1/\x11\xde\x83J.\xbc(\x87\xf3" +
	"\x02\xe1\xaf\x11~\x8e\x96\xc7.\x00\xf6j\xd6\x07(\xbf" +
	"B\xf8\x1b\x84_\x86y\xec\x06`\xbf\xc8>\x0cP~" +
	"\x83\xf0\xf7\x08\xbf\xb43\x8f=t>J\xfc=\xc2;" +
	"\xba44>\xab\xe5\xf1\x1c\x12G]\xd4oG\x97\x8e" +
	"\xe5M\x84\x17\xf5<\xae =\xab\xebk\x00\xe5M\x84" +
	"\x1f \xfc\xf2\x8e<\xae\x04`\x97u}\x05\xa0|\x80" +
	"\xf0\xab\x08\xef\xcf\xe4q\x15\x00\x9b\xea\xfa\x12@\xf9*" +
	"\xc2C\xc2\x07:\xf3\x98\x03`\xa7d\xfb!\xe1w\x12" +
	">\x98\xcdc/\x00\xbbC\xb6\x7f'\xe1\xdf$\xbc\xb7" +
	"#\x8f\x06\xa9\xdb]\xdb\x01\xca_'\xfc!\xc2\x8dL" +
	"\x1eW\x03\xb0ou\x11\xdd\xbeI\xf8\xf7\x08_\xdd\x99" +
	"G\x06\xc0\xfe\xac\x8b\xe8\xf0]\xc2\x1f%\x9ce\xf3\x98" +
	"\x07`?\xec\xba\x9a\xe8O\xf8\x13\x84\xe7\xbb\xf2\xb8\x86" +
	"\xe8\xdfE\xf4|\x9c\xf0g\x08_\xd3\x9d\xc7s\x89\xfe" +
	"r\xfc\xcf\x10\xfe\x12\xe1\xe7\xf5\xe4\x91\x8e\xa9\x17\xe5|" +
	"_\"\xfcu\xc2\xd7\x9e\x93\xc7\xb5\x00\xec\xe7\xb2\xfe\xeb" +
	"\x84\xbfC\xf8\xba\xae<\xae#\xedS\xd6\x7f\xa7K\xc7" +
	"\x89n\x0d\xf1c\x98R\xc6\xd9G]>h\xc6\x86L" +
	"\x1e7\xd0Ru\xdd\xd2\xd6\xc4\xf9+\xf2\xb8Q6q" +
	"\x12\xa0\xfc\x16\xe1\x1f\x12>\xd4\x99\xc7\xf3\x01\xd8\xfb]" +
	"\xbf\x04\x98\xe8\xa6\x93\xa3[CcS6\x8f\x05:9" +
	"\xba\xa9\x99.\xc2\xf3\x84oY\x99\xc7M\x00\xcc\xe8&" +
	"\x0a\xf4\x12\xbe\x81\xf0}\xab\xf2\xb8\x19\x80\xad\xeb\xfe\x11" +
	"@y\x03\xe1[\x09\xdf|~\x1e\xfbH7\xec>\x0b" +
	"P\xdeJ\xf8\xc5\x84\xf7u\xe5\xf1\xe3\x00l\xb7\xc4/" +
	"&\xfcr\xc2/\xec\xcd\xe3\x05\x00\xec`7\xcd\xf4r" +
	"\xc2G\x09\xdf\xde\x9d\xc7-\xa4\xedv\xff\x12\xa0<N" +
	"\xf85\x84\x7f\xb2'\x8f\x9f\x00`'\xba\xf7\x03\x94'" +
	"\x09\xbf\x8e\xf0O\xf7\xe4\x91\x0c\xack\xbbi\xa7\\G" +
	"\xb8C\xf8E\xe7\xe4q\x1b\x00\xb3\xbb\xa7\x01\xca3\x84" +
	"\x87\x84\xef/\xe4q;\";%\xdb?M\xf8\xe7\x09" +
	"\xdf\xd1\x97\xc7O\x02\xb0\x9b\xe58?O\xf8\x9d\x84\xef" +
	"<'\x8f\x17\x11\xa7u\xef\x01(\xdfF\xf8\xd7\x09\xff" +
	"\xd4\xea<\xee@d\x7f\xdcM\x9c\xf3U\xc2\xbfI\xf8" +
	"\x81\x15y\xdcI\x1c\xd8\xfdS\xda\xd1\x84?B\xf8F" +
	"\x96\xc7O\xd1\x8e\x96t\xfe\x1e\xe1\x8f\x13\xbe~E\x1e" +
	"w\x91I \xdby\x94\xf0\xa7\x08\xdf\xf5\xf1<\xee\x06" +
	"`Ov\x13\x87<E\xf8\x0b\x84\xef\xde\x9a\xc7=\x00" +
	"\xecy\xd9\xces\x84\xbfB\xf8g\xd6\xe4q/\x00{" +
	"\xb9\x9bv\xe8+\x84\xbfA\xf8\x05\xe7\xe6\xf1bb\x13" +
	"\xd9\xce\x1b\x84\xbfG\xf8\xc1\xf3\xf2\xb8\x8fvt\xf7\xcf" +
	"\x00\xca\x1f\x12\xde\xd5\xa3\xa11\xbc6\x8f\x9f\x06`\x99" +
	"\x9e\x7f\x05(\xaf\xe8\xd1\xb1\xbc\x96pme\x1e/!" +
	"\x1b\xaa\x87\xe8\xb3\x96\xf0\x0b\x08\xcf\xae\xca\xe3\xa5\x00l" +
	"s\x0f\xed\xacM\x84_D\xf8%\xb9<^\x06\xc0\xb6" +
	"\xf5\xfc\x04\xa0\xbc\x8b\xf0\x03\x84o[\x97\xc7\xfd\xa4\xf6" +
	"\xf7\xf4!@y\x88\x0a\xc6\xa9\xa0\xb0>\x8f\x9f\x01`" +
	"c=\xc4\xb7\xa3\x84_E\xf8\xc7?\x96\xc7\x03$\x1a" +
	"d\x07\x93\x84_G\xf8\xd6\x0dy<Hz\xbejh" +
	"\x86\x0aB*X\xb12\x8f\x9f%\x99\xd1C\x14\xad\x13" +
	"~;\xe1{6\xe6\xb1HF\xb9\x9c\xc1\xed\x84\xff!" +
	"\xe1]\xe7\xe7\xf1rRg{h\x85\xef$\xfc^\xc2" +
	"Wn\xcbc?\x89\xf8\x1e\xa2\xe8\xbd\x84?\xd0\xa3\xe1" +
	"n\xfd\x15=\x8f\x03$\xcc{\x88\x15\xbfJ\x05\xdf\xa4" +
	"\x17Vm\xca\xe3\x10-}\x0f-\xcd\x03\x84\x7f\x97^" +
	"\xc8\xbd\xaa\xe7q\x98\xa4\xbc\x1c\xd1CT\xf0\x08\x15|" +
	"\xe2gz\x1e\x0f\x11S\xc8\x82\xefQ\xc1\xe3T\xd0\xfd" +
	"Oz\x1e\xc9<|\xacg5M\xee)*y\x81\xfa" +
	"8ws\x1e\x8f\xd0\xf2\xf7\x90\xe0{\x81\xf0\xd7z4" +
	"<cr\xff(\xaf\x09\\\x01\x1a\xaeP\x1a\x86<\xcb" +
	"\xa0\xe8\xd7}\xdb\x0d\x9b\x05\xc2\xe5\xd3\x8e8\xcc1\x18" +
	"qC\xe1\x9b\"W'\x15-V\x0a\xa3\xbaY\x1b\xf4" +
	"\x1bv\x00(\x9a\x98ze\x90cM\xf8<\xad\xd5\xb4" +
	"W\x18\x0a\x00\x1b\x8b\xb0\xfe:V\xa5\"4<\x98k" +
	"{\xa5f\xbb\xc3T\x03\x8a\xa2\\\x17\xc2j\xaa\x825" +
	"\xdb\x95\xc76\x14\xda\xf1 >\xd9\xd1\x12\x8el\xb0\xa0" +
	"\xc6\x90k\xe95\x80\x98k\xd6\x1c\xe7\xe8\xf3Z\xba\xa6" +
	"\x0e\x1a\xea\x89\x0a;\xc6O\xe3\xc0xzd\xb1\x8a\xd6" +
	"\x13\xabh\xcdZ\xc7U\xa5\xfe\xec2\x95\xaa<\x18\xe3" +
	"\xa7\x07\xc61\xae3\xa9\xff\xba:\xc7\x870\xae2\x8c" +
	"K\xaaL\xfb|V\xfc\xbb#j\xd6\xfa\x0d#\xca\xd5" +
	"x\x104i6?#\x843\xcd\xe5b6UmA" +
	"\xcb>\xe9A\xe1\x90\xef\xb9a\xbbb?\xc1C\xd0m" +
	"o)X\xb4\xbd\x09\xc1[\x9a\xbc\xef\x85R\x17B\xee" +
	"\x8c\xb8\xc2\x0fm\xe4\xcd\xb2\xd0\xf6E9\xb4+Xq" +
	"E\x10\x1c\xf2==\xd5M{\xe1\x84\xe0\x982\x0f\xd2" +
	"\xca\x1f\xa9t\xba[\xc5\xde\x96z\x0b\x88\xbd\xca\x8a\x90" +
	"\x9a#\xc4\xba\xa1\x1c\xe4\xa8]C;\xecw\x84\x1f6" +
	"-\x9chn\xb8\xea\x95C\xaf\x0e\xb9\xba\xedV\x9b\xfd" +
	"X\xb6/\xcc\xb0\xdf\xd4L\xe1\x0cz.)\x87\xcb\xb1" +
	"h\x10zu\xf9^\\\x07R%\xdc'K\x06t\xe1" +
	",\xa1\x95&\x06\xbd L\x18bx\x08\xdak\xb4\xab" +
	"\xa3\x98ki\xe21\xfb\xfad\xd1L\xb9\x1c\xe7\xb8\xed" +
	"\xd0\x1e\x82t\xc7B\xf8\xfdf\x88\x0d\x1ez\xfe\x90p" +
	"t\xbe\xd0l\xde\xab\x0b\xb7n;\x9e\x16&Z4\xd1" +
	"q\xd0ss\xd4_\xd2F\xd1\xe4\xfeq\xdbm\xca\x03" +
	";\x18\xe7\xae\xc5\x07\xd0\xe1\xe6\xecr\x9b\xdb\xe2\xc1\x8c" +
	"\xc9k\xc7 \xeb:\x0b\xad\x91\xc4\xdbQ\xb3\x843\xce" +
	"\x83\xc0\x9e\x13i\x1a.\xdd\x95\xe1R\xbd\x1bs-\xcb" +
	"C\xd5*\x90\xd8\x9ao\xd9WM[$\xb6\xaf$m" +
	"&\xed\x1a\x14\xc8\xac\x95\xf6\xeb\xdb=O?5z\x90" +
	"\x18\xdb\xab\xd5\x1a\xae\x1dj\x0b\x87\x04\x0f\x1b\xbeH\xef" +
	"\xc96\x02*^\x99\xb4k\xc2o3Z\xd36\x0b\xf6" +
	"\xb6\xac\xaf\x98\xef*Km\x03\xcc\xb5\x8c\xa2x\x9e\xee" +
	"bk\x81h\x91\xd8Jq\x1d\x92qR\xb8\x0dr7" +
	"-\xa1Z\x8c\x12s\xde\x900\x853\xc1\xc3\xd4\xfe\x95" +
	"\xbc'\x0dpS\x95\x89\xb44hJQ~ZJQ" +
	"-\xb1\xfb\x87Du\xb9\x9e*\x8d\xeb\xaf_8D\xe6" +
	"\x94P\xe7D\x8a\xd9\x94\x04\x1f\x08\x00kMl\x86\x07" +
	"\xe5\xd03g\xb5A\x9e\x1c\x061\x97\xb7\xdeK\xb6\xb1" +
	"N\xec\xd7o\x86\x09\xaf\xf2\x85\xa9z]\xf8\x03^\xb6" +
	"\xe1\xb6\xe4\xba\xda\xa3\xdc\x87\\\x98\xde\xa3D\x02\x9a!" +
	"\xa0\xb3D>,mx\xd4\x9b_\xd2p\x90\xd8\xa4\x05" +
	"\xb2ISF{\xd3\xc4\x8e\x99JJ\xc9r]\xa0\xb0" +
	"\x94\xbf\xa2\xe5\xca(T\x1c^\x0d\xb0\x0b4\xec\x02\x8c" +
	"\xb8\x13\x0a\xdf\xe5!\xdasb\xf8t]\xf8\x05[\xb8" +
	"\xa6HN\x96\xa2\xeb\x85\x83\xbcu\x96\xd6\xf8ii\xa3" +
	"\"\x8d\xd6\x14N\x8b\xd9x#\xf4&D\xd0\x80BM" +
	"\x94\xddj\xbb`!K\xb6P\x0ey\x98:\x81\xa93" +
	"\xbb&t7\xe4Nzw\xf7\xc7B\"uZ/\x12" +
	"\xbf\xdc\xcc\xa6]0\x89\xe7AO{\xbb\x12\x9b\x98\xb6" +
	"f\x8e\xf6\xe68bI\xb9G\xf6\x0d\x10\x99\x8c\x1d\x13" +
	"\x00\xa8\x19\xdb\xf6\x03\xa0nl\xa6?\x1d\xc6\xba>\x80" +
	"3\x0dw\xd6\xf5\xe6]9\xa5\x1a\x0fm@\xb3X\xe3" +
	"n\x83;E%g\xb3\xe6\\\xd8\xecVK\x1c<<" +
	"\xe4;\xe9W\xd1\x1f\xf7l7\xa4\x0e74\xbd7\x7f" +
	"6\x00PzH\xc7\xd2#dQk\xca{\xf3\xfd\xed" +
	"\x00\xa5\xef\xeaXz\x94\xb4Q]\x0d\xef\x87\x04~O" +
	"\xc7\xd2\xe3\x1a\x1az\x87\xf2\xad=F\xe0#:\x96\x9e" +
	"\xd0\xd0\xe8\xc8(\xdf\xda\x8f\x09|T\xc7\xd2Sdv" +
	"w*\xdf\xda\x93{\x00J\x8f\xebXz\x86l\xebW" +
	"\xa4\x0dm<}\x05@\xe9)\x1dK/hx&\xf4" +
	"\xb99;bI\xcfM7`\xce\x9ah\x89\xfc\xdcB" +
	"\xfaa.\xfd\xc0S\x0f\x85\x85tQT\x13<h\xf8" +
	"\xc2\x82\xd4\x96i\xf7A\xc6\xe7\xcd\xce#SC\xc9\xcf" +
	"\xe3v\xd0\xe0N\xbf\x93\x15\xbe\xa4\xd5&9\xfb\x13\xdb" +
	"\xe5\xe2\x94\xfa\xe4\xe2\x8c\xf8rq\x86O\xca\xc5\xe9\xa7" +
	"\x15\xcb\x18\x07\xbf\x04\x80\x9d\xc6A\x02\xb3\xc6e}\x00" +
	"9\xd7sE\xb6b\xce\xc7'\x968\x05\x85\x86\xed\x0b" +
	"K)\x18\xe3\xbe\x80\\\x10\x08+\x9a\xf7=\xb7zX" +
	"p@?\x0a\x04\x0f\xa7\x85\x13\xe2\x94;\xdd0g\x1d" +
	"\x81V\x14\x90\x08\x9b\xf4<\xc8\x1d\xb1\xab3Y\xc7\x9a" +
	"_\x9e\xbb\x92\xf3Z\xb9mJ\xbdz\xc7\x86(\xea\xce" +
	"\xe3z\x00\x83\xf7\x01\x94\xae\xd1\xb14\xa3\xe1F\xfc_" +
	"\x04\x7f\x0c\xc0\x10\xd7\x03\x94,\xe5\xa9\xdb\xa8}D\xf0" +
	"V\x00\xa3\xe6\x03\x94\x1c\x1dK\xa75\xdc\xa8\x7fH\xf0" +
	" \x80\xd1\xd8\x1f\xbb\xf0n\xd00[\xb7-\xecm9" +
	"\xcbb\xd9m\xbb\x96M\xc2\x0a\x92\xd3\xad\xb7\xe5(K" +
	"\xd4\x8aS\xbe\x14gPHj4\xbdg\xaaF1\x94" +
	"\xae*\xecmy\xdf\xe2W\x97\x9dv\xe2\x8a\xb2\x84#" +
	"]\xc7\xa7\xa5\x03\x88\x93\xf1\x83\xc8N\xe0\xd5\xb4hl" +
	"J>\xeblL\xfe\xed`\xc3D\x16\xcc\xb0\x83(\x17" +
	"\x8e\x1dDZ\xe3,\xdb\x87W\x00`\x17\xdbM\x96\x07" +
	"v\xb3m\xf2\xb9\x87m!c\x10\xcfa\x1b\xe5\xfb+" +
	"\xd8\x1a\xa4u_\xc9\x0c\x89\xafb\xdd\x12\xcf1\x94\xfd" +
	"\xf5\x1a\x1f\xd1\x1f\xc3x\x9fj\xad6\xde\xa5Bf\xbc" +
	"Im\xe5\x8d_P\xd9\x1a\xe3\xe7\xc4+\xe7\x1a\xaf\xde" +
	"\x02\x80\xe7\x19/\x13W\xad5^<\x0b\x80\xeb\x8c\x17" +
	"\xe9i\xbd\xf1<\xbd\xf71\xe3i\x1a\xdb\x06\xe3\xc7\xf4" +
	"\xc2F\xe3\xb1\xb3\x00\xc5\xc0v\x84\x1bF3\x9ek\xf1" +
	"\xa3\xb6\x05\xba0\x8b\xa1\xb7\xe0\x85\xbc(\x9c\xda\xde=" +
	"\x97\xe8\xd5\x9a*\x1d\xf0\x024g\x0e\xdb>\xafTP" +
	"\xe4*\x9eoE&\xb7l\xc7\xe1&\x00\x9c\x99Yh" +
	"\xb8\x16\xb7#s\xc6_\x08\x1c\xe1\x03@!\x14\x81\xc3" +
	"\x8bAc\x9a\xfb\x8d\xa8ZS\x8a\x07\xa0(\xd4\xf8\xf5" +
	"\x16/\xbav\x10p7\x9a\xf3\x9c\xd9`\x9eWA\x17" +
	"n\xa4:\x1f\xa9\x83\xce\x83\x88;\xce\xb1FXo\x00" +
	"\x86\xc5j\xad?0k\x91\xebI$\x04\x80\xe6\xb8@" +
	"7gZ\xad\xe4\x84;~*R\x9d\x8e\xfb\x9a\xa8:" +
	"\xde4w \x1e\xdfhAT\xb9\xb9\x10\xc5\x8f\x83\x18" +
	"\xab!\x0b\x00\xad&\x0a\xc2\x1ds\xa6\x8b3\x9e[=" +
	"e\xe7\xa6=\xabU\x1fr\xdc\xadX\xcd\xaa(\xdc\xb1" +
	"S\xd3\xc3s\x1e\xc0\xf2l\x95\xf8RG\x86&\x1b9" +
	"\xd2\x7f\xa5\xacn\x8a\xce\x1bI\xcc\x9d\xd6\xb1\xf4\xe5\x94" +
	"\xe3\xfb.\xdae\xb7\xebXz \xe5\xf8\xbe\x9fj~" +
	"5\x16\xb2IX\xe2\xfb}\xb1\x90}F\xf9,Ir" +
	">\xbd\x1e\xa0\xf4\x84\x8e\xa5\xe74\xcc\xcd\xd6\x07\xc6\x17" +
	"\xd9\x1c\xd9\xd9\xfa\xf1\xc5f\xc8\xac\xbdL5{q\xb5" +
	"t`!uB\xb4&;\xc8\xfdC8O3\xdc\xda" +
	"\xf4\xb8vc\x1f@\xb9\x03u,\xf7\xa2\x86\x89\xc3u" +
	"%1~y\x05\xc1k\x91\xa6\x89\xca\xe3\xba\x866L" +
	"\xb9\x97\xf0\x0d\x84\xeb\x9a\xf2\xb8\xae\xa3\x0dQ^K\xf8" +
	"\x05\x84w\xc4\x1e\xd7\xcdH\xc6\xfb&\xc2/\xc2\xd8C" +
	"\x9b\x01`\xdbd;\x17\x10~\xb9\x0c\xc4h\xca\xe3z" +
	"\x906Z\xf9R\xc2\x87d$FW\x1e\xd7~9\xcc" +
	"\x03\x84\x1f!\xbc\xeb:\xe5q\x1d\x96\xed\\N\xf8(" +
	"\xe1\xdd\\y\\Gd\xbfG\x08\x9fD\x0d\xb3\xc2l" +
	"`\xae\xe5\x7f\x8f5\xc7\xca\xfcq\xe1\x07\xb6\x07\xe8\xe2" +
	"J\xd0p%\xe0\x19nY\xbe\x08ZZJ\xd0\x98\xee" +
	"'\x08\xf4 \xc0N\xd0\xb0\x934g\x11\xd4=7\x10" +
	"\xd8\xafjCR\xfd\x8c/N5D\x10&K\xb3R" +
	"-Ma\xda\xe7\xae\x95X\x09\xd9\xe9F\xb3\xa93\x8e" +
	"W\xad\xda)\xa5\xc5\x9b\xb6\xc6\x1aNhc\xdd\x11\xa7" +
	"IyYr\xac\xa95\x95*\xcd\xce+I\xdb*J" +
	"\xf57\xa0\x85\xedm\xb2._\xdf:\x0b\x9a\xac+\x08" +
	"\xbcN\xc7\x92\x93b]{}\xebxh\xb2n\x8d\xc0" +
	"\x19\x1dK\xa1\x86z\xa5y\xde\xea\x95\xa6\xf2\xa3\xfb-" +
	"\xd4\xf7\x97\x0b>\x0dr\x7fx\x8e\xb4\xacR\x07\xa6\x03" +
	"\xdc8\x11\x0d\xcf\x097<\xcak\x80\xa2tQ\x93\x19" +
	"\xb7\x90xNq\x0b\xf6*n\xdcFbWq\xcb." +
	"\xc9\x8d\x86\xe2\xc6\x1dr\xf5\xb7\x12~\xb1\xe4\xc6\xd5\x8a" +
	"\x1b\xa5X/_D\xf8\xa5\x92\x1b\x99\xe2\xc6}8\x0d" +
	"P\xbe\xb8\xc9u\x99\xbc\xe2\xc6\x83\x12oqW\xe7\x1a" +
	"\xc5\x8d\xc3x6\xcdEF\xf6\\\xc5\x8d%\xb9;\xc6" +
	"\x09\xbfFr\xe3y\x8a\x1bOH\xfc*\xc2-\xc2{" +
	"\xd6*n\xe4\xf8 @\xd9\"\xbc.\xb9t\x9d\xf2\xff" +
	"\xd7$\x97:\x84\x9fF\x0ds.\xaf\x91\x11\xd4\xa4\x94" +
	"b\xd3\xa22\x1d\x12>8\xe3z\xc3n\xe87\x8d\xc7" +
	"3\xf3\xdcw\xd3\x1c\xd4\x08\x84?d\x07\x1c\xb2\xa9\xb7" +
	"\xa2\xc0\xab\x84KQ\xbbV\x13\x96M&\x11\x95\xb5\x9b" +
	"\xc7u_(\xa7RJ\x1d\xae\x0b\xbf\xc6]\xe1\x02\x86" +
	"-\x8e\x9d\x13\xbeo[\x02\x13U:G\xba\xf42\xc5" +
	"J\xd6.e\xe8\xe5$\xf2hi\"%\x91S\x81\xe2" +
	"=-u\xb2\xc9\xd6\xcf\x13\xb3>\xa3c\xe9\xa5\x14[" +
	"\xbf\xb8\xbf\x15R\xc6\x98\xab_^\x1dG\x94\xdf!\xae" +
	"@%\x91\xdf&\xf0\x0d\x1d\xcb]\x92'4\xc5\x13\x19" +
	"\\\x1d\x87\x84\xa5\xa0\xeb\xd4\x15K\xac#\xb8\x9co\xb2" +
	"b\xb6C\xb1\xc4\x0e\x89oM\x04W!0\xb9#\x96" +
	"\x89\x08\x17-\xf30\xb7\xdd\xe4\x11\xf9\"!\x8e\xd3\x8b" +
	"\x01s10\xbb\x18p\x16\xfb\xb6\xda\xf7`9\xe4z" +
	"(J\xbd\x98J\xe71\xd6M\xb7\x92(\xe8\xa1\x95\xcd" +
	"\xb1n\xba\x95,@\x0fW\xc6\x06\x1dd\x85\x15D\xd2" +
	"\x9d)\xca!dy(\xa2\xc3\x82\xfb\xe5\x19\xbb\x02\xd9" +
	"P\xf8\xd1@#\x0c=wx\x0e\xb2\xc2\x0dK\x8f\xea" +
	"\x1dx\x91\xdc\xd6\xbb32X\x91\xd1\xb1<\x9eQ\x8b" +
	"A\xf0X\x86v\xfb\x11\x82'3\xb4+\xe23\xa6\x94" +
	"\xa1\xdd8N\xf85\x998\xeaF\xbb\xfaD\x86\xce\x80" +
	"I\xc2\xaf#\xfc\x9c\xcb\xd5\xae\xbe6Cg\xcf5\x84" +
	"\xcf\x10\xbe2\x8e\xea\x89\x0c\x9d%\xd7\x11\xee\x10\xbe\xaa" +
	"_-\xa1\x9d9\x09P\x9e!<$|u\xbc\x84\xa7" +
	"\xe40C\xc2o\"|MF\xed\xea\x1b3\xd7\x03\x94" +
	"o \xfc6\xc2\xcf\x1bP\xbb\xfa\xd6\x0c\xed\xde\xcf\x13" +
	"~'\xe1\x05M\xed\xea;\xe4\xf8o'\xfc\x0f\x09\xdf" +
	"\xac\xab\xa8\xde\xdd\xb2\xdf/\x13\xfe\x10\xe1\x9f\xeaPQ" +
	"\xbdoe~\x00P~\x88\xf0\xa72\x1a\xf6fTP" +
	"\xef\xc9\x0c\x09\xbd\xc7\x09~\x85\xaao\x8a\x83z/\xcb" +
	"\xe6_\"\xfcu\xc2\xf3qP\xef\xe7r8\xaf\x11\xfe" +
	"\x16\xe1\x1dqP\xefMI\xe6\xd7\x09\x7f\x87\xf0L\x97" +
	"\x0a\xea\xbd\x9d!!\xf9\x06\xe1\xef\x11\xde5\xa8\x82z" +
	"\xefJr\xbe\x93\xd1q\xa2SCc\xc7\x90\x8a\xe9}" +
	"\x94y\x18`\xa2S\xc7\xf2\x0a\x82\xfb\x86UH\xaf\xbb" +
	"\x93F\xd3Ex\x9e\xf0\x8f\x1fR!=\xa3\x93&\xdb" +
	"K\xf8\x06\xc2\xb3qHo]'\xf5\x9a'|\x13\xe1" +
	"\x17\x1cV!\xbd\x8d\x9d>@y\x03\xe1[\x09\xdfr" +
	"D\x85\xf4\xb6t^A\xa2\x9f\xf0]\x84\x7fbD\x85" +
	"\xf4vt~\x09\xa0\xbc\x8b\xf0\x03\x84\xe3\x15\xd2\x04b" +
	"\x97\xc9\xfa\x97\x12>D\xf8\xb9=\xd2\x06b\xfd\xb2\xfe" +
	"\x10\xe1\xe3\x84_\xf8[*\xde7&\xfb\x1d%\xfc*" +
	"\xc2w\x8e\xaax\xdfT\xe7\xbf\x12S\x11>C\xf8\xfa" +
	"1\x15\xef\x13\xb2}\x8b\xf0:\xe1\x1f;\xaa\x02~5" +
	"\x89;\x84\x9f&|\xc31\x15\xf0kH\xfa\x84\x84\xdf" +
	"\xd4\xa9\xe1\xee\xad\xd7\xa1\x8a\xf8\xdd(;\xbe\x81\x0an" +
	"\xa3\x82m\x1cU\xc8\xef\xd6Nb\xb7\xcfS\xc1\x9dT" +
	"\xb0v\x1aU\xcc\xef\x8eN\x19\x9d\xa5\x82{\xa9`\x9d" +
	"\x89*\xe8w\x8f,\xb8\x97\x0a\x1e\xa0\xbe\xd9\x0a\x15\xf4" +
	"\xbb\xbf\x93\x18\xeb\x01\xc2\xbfK/\x18\x16\xaa\xa8\xdfw" +
	":\x89U\x1e\xa2\x82G\xa8\xa0W\xa0\x0a\xfb}_\xae" +
	"\xda\xf7\xa8\xe0q*\xd0*(mE\xf6X'1\xc5" +
	"\xa3T\xf0\x14u\xb1}\xa5\x8a\x07>\xd9I'\xde\x13" +
	"\x84?G/l\xacb\x9e\x0eq\xf6\xac|\xe1\x19*" +
	"x\x89\x0a>9\x83*\"\xf8\xa2$\xd4\x0bT\xf0\x1a" +
	"\xb5\xd4\xb9JE\x04_\x95\x84z\x85\xf07\xe8\x85\x9c" +
	"\x8dy\xdc\x01\xc0~!\xc7\xf4:\x15\xbcC/\xac\xc8" +
	"\xa9\x90\xe0\xdb\xb2\xeb\xb7\x08\xff\x90^8\xff$\xaa\x98" +
	"\xe0\xfb\x9d\x0f\x03\x94?\xa4\x82\xae\xac\x86\x91JC\x19" +
	"\x1a\xc6\x94w\xad\x99\x93\x92>kI\xd5\x9e\x1b\xaez" +
	"\xed\x1e\xffD\xf4aoK|*K5[\xe5\xad\xe8" +
	"@\x95\x07\xe3R\x15\xd4\x85\x95\x9cp\x05\xe9\x03hV" +
	"i\xf7\x08\xb4{Q\xe9\x00O\\\x8b\x00K\x12\x84\xa0" +
	"\xa8\x92\xa7\x96\x14\xa0\xecTX\xa9S5-\xa1\xb1\xb7" +
	"%\xe6c\xf3z:\x91\xd29\xd1\x96}\x93\xca\xcd\xfb" +
	"\x8fd\xdf\x14\xc5\\{;\xa9\xdcE\x15\xb1I\x9f\x11" +
	"\x98k\x9d4I\x80)\x99\x89\xf4\xbe\x8a*\xb4\xdc>" +
	"\xa9\xb58C\x0b3\xc1\xe7\xd3\x9e[\xd7\x0aB\x1bt" +
	"\xa7\xa5kH\x0a\x8f\xdaU\x9c\x09\x83\xb4\x83\xb6\xe9L" +
	"\x15\x95p\xc0\xb1]\xc8\xce\x8a\x96g\xd1\xb7\xab3\x04" +
	"C\xceM\xc1g\x16\xf8<\x0d\xa9\xb5\xc2\xc2\x15\xbem" +
	"NB\xc1\xabVS:\x94\xe5y\xfe\xb1\xbap\xd3." +
	"\xa8\x94\x87\xc7\xe1\xa19#\xd0J\xa9=\xeeq\xee\xd8" +
	"m.\xab&\x11\xd42\x0f\xd7\xb1\xc5Y\xa6\xd3\x08\xcd" +
	"\x99q\x1f\x0abY\xbe\xd1h\x94\xa3v\xcd\x0e\x85\xb5" +
	"\xdc\xa4\x83\xd03g\xfb\xc5t{\x7f\x9e9{\xc8\x9c" +
	"Oc\"\xa8K%\x10\xb2N\xaa\x97&\xc9\x0aVP" +
	"\xf7\xc2\xa5D+\xba\xed\x05rX\x87x\x03\x9dpR" +
	"\xd4\xea\x9e\x9f\xe5\xfe\xc2r\xa5\xe3R\x97$]\xe1\xd7" +
	"l\x85c\x95J1\x10\xe1\x90\xa8\xb6o\xa1#\x9e\x83" +
	"V\xbf\x19\xdas\"\xa5\xadr\x7f\xd6v\xab\x03\x90\x93" +
	"{.E\xecI\xbb&<\xd0\x1b\xadn*\x0d\xe1\x1c" +
	"\xe6\x8dj:\x92\xc7M\xf3\x10o8az\xffF\xe6" +
	"\x0c\xf7\xab2\x17\xaa=\x0c6\xe84\x02\xc5\xcf\xcd\x10" +
	"\x9e\xa8\x0aw\xc0\xe7\x90\x9bM\xeb\xe2\xc2\xad\xda\xae\x98" +
	"\xa8\x03\xd6\xd2\x16\x92\xec\x09\x85u\xd4s\x07}\xbb\x10" +
	"\xdafJa^V-NR\xa9l7,\x17\xbc\x86" +
	"oJ\xaf\xf2\x0a\xa9\xe9n\xec\x93\x8e\xcb5\xeb\xa5\xe3" +
	"r\xe5\x1e\x80\xac\xc9]\xbd2_\xa8\xd8\xa7\x85\xf5\x1b" +
	"\xf5\xec\x91\xa3C#qZ\x185\xb8K\xef\xc0.\xa9" +
	"\xb4\xf5\xe3\x8f\xe8\xc0$\x85v\x1cc\xedLjm\x12" +
	"o\xd9>=J\xddf'\x90\x0e\x9bk\x08\x9f!\xfc" +
	"\x1c\xa5r\xef\x15\xa8a\xda\xc8\x01PZ[C\xda>" +
	"!\xc1wb\xac\xcb\x93\xd6v\x87\xcc\xb9\xbc\x9d\xf0\x07" +
	"0V\xe7Ik\xbb_\xd6\xff:\xe1\x8fbl\xa8\x92" +
	"\xd6\xf6CY\xff\x11\xc2_\xc08\xfb\x93\xb4\xb6\xe7%" +
	"\xfe\x1c\xe1oa\x9c\x00JZ\xdb\x9bH\xe7\xee\x1b\x84" +
	"wiq\x0a(im\x19\x8d\xe6\xd5\xa5\xe9X\xbe@" +
	"\x8bs@Ik\xdb\xac\xd1\xbc. \xfcrM\xc3\xc8" +
	"k\x84\xc2\x1f\xf5<\xadNz\xfcr\x81I\xdbu\xff" +
	"\x9d\x1a\xa1]\x13\x83\x9e\x1b`\xc8\xdd0-Z[\xcc" +
	"\xa8\xc21\xfap\xa5\"$\xa3\xbb\"\x08\x96k*\x19" +
	"\x0e\xca\xce\x06\xc6a\xb1-\x90T\x80\xa2\xac\xb1\xd8i" +
	"\xd4\x1c\xed\xafm \xa9\xf0\xeb\x1aH&\x03E\x9a\xcd" +
	"\x12GU\xab\xbc@\xe5K^O\xa6\xaa\xb5Mu\x99" +
	"q$\x151\xa9X\x945\x8f\xff:\xe3Go\xf3\xfe" +
	"+\xbbE>\xe9\x9e\xb3\xc8\xcb\xb7?\xf6\xf2}>e" +
	"S\xdeL\xe0\x0d:\x96n#fS\xa6\x89q\xeb\x8f" +
	"\x00J\xb7\xc5\xfe\xc0\x0e\xe5\xfb2\xee\"\xf0\xcb:\x96" +
	"\xbe\x1a\xb3+\x19\x95\xf7]\x01P\xbaW9\x09\x8b&" +
	"wM\xd1\x8a\x19\xfb\"h\xd4R\x96y]\x08\xeb\xd8" +
	"\x9c\xd0\xa4\x99\xbc\xdc\"s\xd3\x14\xceo\xac\x91\x18\xd9" +
	"\xcb\x85A\x96ux\xd2\x13J\x97QW\x93\x0e\xdbh" +
	"\xcc[u,\x0d\xa5\xe8\xd0?\x00P:\xa0c\xe9*" +
	"\x0d#\xe5\xb3\x1f\x18\x87\x96\x0a\xd5\xa1\xc8~F\x15\x1d" +
	"_\x04/rZI\xb7\xcfN\xf9\x7f\xee(\xaf\x91\x0c" +
	"+\xbf\x82R~\xdc\x93\xb9B\xba\xf2\xef&+\x0c\xe7" +
	"\xd9\xdd\x99\x9f\x02\xa0\xc5\xee\xc9\xfcD\xba\xf6\xef\xcbL" +
	"H\xd7\xbe\xaa\xd7\xc1\xee\xce|E\xba\xf6\xef&s\x08" +
	";\xd9]\x19\x19\x94awd\x1e\x94\xae}i\x85a" +
	"7\xfb\x82\xc4{\xd8\xad\xf2\xef9\xecf\xf97\xa7\xac" +
	":\xbc\x8e-d~\x04\x80\x82-\xc8\xf7z\xd9\x82|" +
	"\xcf`\x0d2\x83p5;%\xfbc\xacF\xf6\x0f\xe6" +
	"YM\xf6{.\xab\xc9q\x9e\xc7jr\\k\x99-" +
	"\xeb\xcf1!\xcb\xd71!\x9f+\x8c\xcb\xf1\xafgB" +
	"\xd6\xfb\x18\xe3\xf2\xef\x06vm\xc6\x07\xc0\x8d\xec\x04\x99" +
	"mx>\x9b\x92\xe3\xaa\xb2\x12Y\x83X`%Y\xbe" +
	"\x89\x8dI:lf%9\xde>6\x96\xf9\x1a\x00~" +
	"\x9c\x8d\xc9z\x17\xb019\x8e\x196&\xfb\xb5\xd9X" +
	"\xe6o\x00\xf0$+\xc9\xf7\xb6\xb0)9\xeeO\xb0)" +
	"9\x8e\x0b\xd9\x09Yok\xdc\xef,\x9b\xca\xfc+\x00" +
	"nc'\xe4x\x9d\xf8\xf9s\xec\x84|o{\x8c\x7f" +
	"\x92Me\xbe\x04\x80\x17\xb1)9\xfe\x9d\xf1\xf8>\xc5" +
	"\xc6\xe4\xb8v\xb1\x11Y\xbe;\xfe\xbb\x87\x8d\xc8~\xf6" +
	"\xb2\x11\xf9~\x8d\x0dg>\x00@w\xefHf;\x02" +
	" \xdf[R?.f'd\x8b\xfb\xd8\x94\xa4\xf4\xa7" +
	"Y\x89\xec|\xbc\x84\x8d\xc8\x11N\xb3a9r\x93\x8d" +
	"\xc8\x91]\x1a\xcf\xf426&)\xb6?\xee\xf13l" +
	"DRb\x05\x1b\x91\x14:\xc0Fd{\x07\xd90\x19" +
	"\xba\xf8YvP\xd6/\xb2\xcbd\xbd\xcb\xd9er\x06" +
	"\x03l\x9f\xeco\x90\xed\x903\xf1\xf6n\xcb\xd0)\x85" +
	"!\xdb!;\xae\xb3\xdd\x92\x94Cl\x9f|q\x98\xed" +
	"\xcb\xec\x01\xc0SlG\xe6\x97\x00x\x88\xed\x96\x03\xf5" +
	"\xe3\xe7\xc3l\xb7l\xf8\x08\xdb!\xff\x8e\xb0m\xb2\xe1" +
	"+\xd8\x169\xd0\x80m\x91K4\x1a\xe3c1~\x94" +
	"m\x91\xac\xd7\xd8\xbb9\xb3\x9a\x06p\x8cm\x93<9" +
	"\xce\xb6\xc9\x99\x94\xd8\x16\xd9\xd1\x04\xdb,_(\xb3\xcd" +
	"r\xa6\xd7\xb0\xcd\x92\x87\xfb\xd9f\xd9\xc0$\xdb(g" +
	":\xc5\xd6\xc9\x0e\x8e\xb35\xf2y%3$\xe5v0" +
	"CN\xe4\xb7\x98!\xdb\xbb\x92\xad\x94\x03\xbd\x8auK" +
	"\xfc\x04\xeb\x96\xcf\xabXF\xfe\xbd\x9a\xa1l\xe7\xb7\xd9" +
	"G\x1d\xc4\x13k\xd8G\x1dD\x98k\x19\xca~\x7f\x87" +
	"!\xf1\x0a\xa9Z\xf2\x16\x01\x00(E\xae=\xedF\xe9" +
	"nS.\xd7\x12,\x95RB\xe6\xd3\x94\xcb\xe7\xb8\xd6" +
	"^D\xc6Z[\xe84\xa5l\xb7\x94\xec\xa3^8J" +
	"Z\xb6.\xacv-V\xbd:\xc8}\xc8\x8dy\x96P" +
	"\xc3\x9a\x145\xac\xcb\xcel'G\x9dE\xbe\x98\x13~" +
	" \x0eCVp?6\x90\x069\xe4Hj'\xf6\x92" +
	"\x0b\xaan]X\xdci\x85u\x95\xb55dCQ\xba" +
	"O-\x95T3\xc8\xdd\x0eI\x8b\xd4<,\x1e\xf2\xa3" +
	"BX\xb1\x92\xaeR{Za\xdf\xec\xa87O\x87\xf5" +
	"\xb1J\xb9\xceA7\x85\x94\xe93\x82\xcbX\x9a\xc9\x1d" +
	"{\xda\xe7!\xda\x9e;\xe2\x9a^\xadPwD(\x16" +
	"\xe1s\xdc\xd1m+2\xd5\x99\x17\xe0\x98\x1d\xd4\x88." +
	"\x00Q\xdd\xac%\xce\\\xfa\xadH\xa4;\"r\xbdI" +
	"\xeeWE\x98N\xbaS\x938\xc4\x1b\xa0;aT\xf3" +
	",\xe1\x0cz5\xad6\x12\x04\x8d\xf6\xa5I\xf4q@" +
	"Kj\xe0\x03>\x9f\xa5.T\xce\xc2\x84\x80\x82L\xc2" +
	"\x88\x1co^\x06)\xb4Q\xcf\x9c\xf5\x1a!\xd4\x1dN" +
	"z\xc5pN\xde;\xb1\xeb<86'|L\xce\xb7" +
	"X!\x8aNz\x0bAh\x9b\xb3P\x18\x12\xd3\x8dj" +
	"s\x01\xb5d\x01\x89\xe8e\xdb\x11\xba\x1bF\xea\\\x9d" +
	"\x10P<\xa5B\xf0u_\x0c\xf9\xf6\x9c@\x7f\xc8\x0e" +
	"B\x9f\x9b\xd9P\xa2^\xad\x1e\x0e\xf9h\xcfIGy" +
	"X\xf4\xb9I\x05\x96\xaf\x10\x94uCa\x01DU\xe1" +
	"UdVJ\x9a<\xaa\xe2\x98\xa7\xb9v\xe8\xf9\xc7Z" +
	":\x1e.)\xabT\xd2/\xb6\x064\xe5\xca\x18R\xc1" +
	"\x0d\xec9\xd1\x1c\x92F\xef\xc6E\xb2\x04 np\xca" +
	"\xc5\x04\xd5\xe7D4-\x88\xa2\xa1\xe8\x10\xbe\xa4+$" +
	"\x8c`{\xee\xb8\xefU\xfdD]T\xb6 \xd1\x7f\x80" +
	"\x87\xa1\x00\xdd_\x88lb\x14\xdb:\xac\xc9h\xb18" +
	"\xe2\xb9\x16OW\xaeKU\xc1\x9aDi\xbeq\x7f!" +
	"\xbe\x1d\x946\x91\xa2@\xb8\x81\xe7\x0fq\x0c\xb9d<" +
	"\x1b-\x994F<B\x1c\x10z\x9e$:\x14\x14q" +
	"\xeb^ \\\x11\x8e@Q\xf5\x1e\x05^\xc3\xb5\x82)" +
	"\x17y3\xeb\x86\xe83\xca]1\x883\xdc\xad\x8aQ" +
	"Q\xc1p\x116aW\xf5\x990r\x08\x99\xe1.\xe8" +
	"U\xb1x>\x932F\x9d\xe6\"\xdb\x0d\x85\xef\x8aP" +
	"\x1f\xf4\\W\xea\x8ev\xb8\xb0t/&9oz3" +
	"\xe7\xcd\x0e\xb8\xe3x\xf3\xed\xd5\x1co~L\xd4<\x1f" +
	"p!m[')\x1b\xb4|f\x87Wu\xed\xeb\x85" +
	"\x05J\x1c\xc4ti\xdf;\xed\x9c2\xea\xcd\xf7\x9bf" +
	"z\x19\xe2i\x8d\xe2,\x0f\xca\"\x0cm\xdd\xad.J" +
	"\x13i\xd2\x01\xabb\xc0\xf1\xccY\x81V\xe4\x0b\x87/" +
	"\x8cq\x07+\x0d7\xbe|\xd6\x8c\xe5\xa0(+\xbfI" +
	"\xd6v\x9c\xb4\x17\xe0\x8c\xdc\xa7\x8dz\x14\xff=\x0a9" +
	"o\x90\xfb\xcdG\xf4\x92\xbcMH\xb01(\xf0 \x14" +
	"~+\xfb\xa5\xccC(6|N\xeb=?c\x87b" +
	"\x9c\xbb\x9d\x16\x9fr\x83F\xbd\xee\xf9\x89\x7fB\x11 " +
	"n\xe5\x98+\xeaN#h\xa3L\xc2G\x9a\xb8R\xc5" +
	"\xb6\xd2{H\xb2\xfe\xb0[E^U\xc9\xce\x00\x05\xd7" +
	";\\\x0f\xa2\x8ag6\x82\x09aj$9\x95\x7f " +
	"\xbdn\xea,\xf0\x1b\x1dv \xe84\x00Wx\xc1T" +
	"\xdd\xe2\xa1\x98\x10Jb\xa4\xabK\xb1g\x8dr(\xc8" +
	"\x00md\x899\xdb\x14\x878\x14\x1c\x87\x9e+\xdc\x1d" +
	"\xe3N\xa5\x01EE\xe5\xc8\x94I|c\x1c\x9d\x98\xf0" +
	"\xe8\xaaFFyU[4\x11\x92\x14\xd5z\xd0\xde@" +
	"\xdd\xf7L\x11\x04G\xd1\x0b'\x1a\xae\xba\x96\x15\xe7\x8b" +
	"\x8eAV\x9d_\x92f\x87\xf48\xd10q\x09\xa4\x9b" +
	"mJ\xff\x11\xd7\x0em\xee\xd8\xb9\xebi\xb8\x8d`\xba" +
	"y:\xfb\x1e\xb7\x06yM\xe8>W\x98bE\x95\x85" +
	"H\x08\xfa\xd1\xbcm\x89\x09\x8f[\x98\xa0Y\x12\x01N" +
	"\x9c\x87\xa9[\x93\x89pP-$|\x92\xf5\x0e\xcdG" +
	"3vuf\xb0\xde\x98\x82\\\xc0\xab\">#\xc7\xe8" +
	"\x8c\x94\xc7Q\xe4\xcc\xf2@\xc6\"s\xf2\xc8L\\\xa7" +
	"(\xcd \xdf\xb7uK4y\x00E\xff\\\xf5\x90/" +
	"N\xc9S\x90\x86r\xc8\xd7xML\xf0P\x80\xc9\xdd" +
	"\x81F0f\x17\x82\x80\xe6\xd8\x9c\xba5\xca\xab\xcao" +
	"\x13\x1f\x0a\x03\x0e\x14h{X\x8aQ\x8f\xcd\x09(H" +
	"\x83)>Q\xec\x1a\x14\x95\x0f-\x9a\x133\xb6\xe9\x88" +
	"2J\x01\x17\x8c\xb8\x05%\xaf\x12\x09\xab\xd9\x9e;!" +
	"\x9a\xf2Vv\x92\x90\xa5\xc3\x1a\x8f\x03\xa4\xa1\"K," +
	"J\x9bh,I\x97\xbf%\x9b\xcaD\x1c\x8f\xef\xf6a" +
	"uQ.\xdf\xf68\x97\xef\xa9\x94\x89\xf6d_\x9cw" +
	"\xf7J*\xfc\xf9\xf2\xf6T\xa83\x89\xea\xbf\xdd\xd7\x16" +
	"\xeaT)),#\x937d\x0e\xc8&\x19\xebTw" +
	"e\xd9F\x19\xce\xde\x90\x84\xd11\xbe\x15\xb7\x0f\xd7\x03" +
	"\x94w\x11|\x00\xff_'\xb1DV|\x09\x16\xf4\xa5" +
	"\xae\x84f\x19\xfe\x9f\xe4\xbe\xb4\xe7\x8f\xc5\xd9\xe2\xc4\x1f" +
	"\xcd\xa4\xcc\xd8}\xb6_\xb9\xcf\xf6(\xf7\xd9\x04@\x9c" +
	"\x9bV\xe0n\xd5\x11\x91\xd9\xf0\xe7\xe88\xa0Smy" +
	"\xe7B+\xb5\x10\xe45\xdb\xd67!\xba\xa7Sw\xbf" +
	"\xbbOFI\xe6!d\x85\x1fF\xfd\x0d\xcb\x9evD" +
	"?\xe4\x1c\xe1\x87mY9'\xd3\x17\x8f\x9b\xf7 \x0d" +
	"\xbc\xa2-\xfd&I\xcbY'\xeb\xb7\xd2o\x92\xb4\x9c" +
	"\xcd2\xb1\xa1\x95P\x11\x87\xbc\xd96\x89\xb7\x12'\x88" +
	"\x1322q\xe2dzi\x9bQ\xef\xcbd\"D+" +
	"A\"\x89z\x0fK\xa7\\\xcbI\xd8\x15\x87L\xc7$" +
	">J\xf8U\xd2y\xd8\xa9\x9coS\xd2)7I\xf8" +
	"u\xa8\xc5\xae\x8f\xe3v\x009\xbb-WA\x84\xb1d" +
	"Og\x94\xbb\"XZ\xd5\x11\x9c\x1a\xb0\xdb\xd3\x1a\xe6" +
	"\xd2d\xc6\\kA\xe2\x98\x03o#<\xe6Z\x8b\x94" +
	"\\\x1b\xb0\xab3\xe1(wQP\xe3\xedy\x11\x8e\xa8" +
	"P\x91\xc0\xa4\xa8\xdd'.\xdf\x1a\x12u\x9e\xbe;\x91" +
	"\xbc\x03EU\xf2\x1b\x93zdT\xbd8cWB\xe1" +
	"\xcbl-\xc9\xa6\xa7T\xee\xb0\xbd]\xb2)\xdf#\xd3" +
	"SO\x0c\xc8\xf4\xd4\xd2\x80LO\x1d\xd9#\xd3S\xfb" +
	"\xfbTz*=u\x19\xbb\xe9\xa9\xdb\xd86\xd1J/" +
	"\xce\x91\xaa^\x90B\xff\x8c+\x1a\xa1\xcf\x9d3\xb1\x0d" +
	"T\x08\xe8\xa0\xce:\xde\xbc\x0a^e\x85\xe9Im>" +
	"\xceF^\xb4\x03\xd4\x80\x93\xc0\xbfp\xc3\x9d\x93\xd9x" +
	"s\xed\x92\xa3\xfe\x82\x1a\xf5\xcd\xd3r\xd47\x9e\x94\xa3" +
	"^\x98\x96\xa3nL\xcbQ\x9f\xda/Gm_-G" +
	"-\xae\x96\xa3\xe6W\xcbQ_;A,`\x9c\x90\xbe" +
	"\x1bc\xea\x96T\x8at[,gQ\x0cGy\xcc\x06" +
	"\xfd\x06d\xed@D\x96H=\xc5\xde\xb8\x88;\xa1\x1c" +
	"7\xe8\xee\xee\xf4\xc3\x9e\xf4\xc3^\xe2\xc5\xe4\x0aW|" +
	"\x96\x0c\xfa\x90\xa3\x03-\xaa\xf2z\xbfu\xb2\x11dU" +
	"\x0d:\x8e\x14m\xda\x84C\x92Z\xaf\x04|\x8cJ\xba" +
	"\xc9D\xd6^I\xa6m\xca\x85\xbfY\xe5\x1e\xaf\xbbB" +
	"\x92i\xcd\x15\x00Y\xafR\xc9\xd6I]\x8eo1@" +
	"\xa2\x80\xc5\xbf\x97c 9\x9c\xa2\x90\x0f\xbf)\x17<" +
	">?\xbe\xbf'\x95\x0b\x9e\xb8:\x7f8\x91N\xfb\x8e" +
	"]\x9d?\x9eNexgbW\xe7\xd3W\xa7Rr" +
	"\xe2+\xd5\xc6\xf3\xd3\xa9\x0f:hJ\x8c\x18/\x9fl" +
	"}\xbb\xe1\x8c\xcajj\xc5J\x83\xb6\x0bj\x89Q\x90" +
	"N>R\x8e\xd2J\x05\xb2\xe9\xaf\x1d,\x1b\x08t=" +
	"\xb7\xdf\xe2\xf5\x10\xb2dm\xb550\xe84 \x17\xa4" +
	"c7\xbf!\xe1x\xd0s+v\x15`Qn\xddt" +
	":\x8d.\xa6\xa2\xfdp+\x9d\xbaI\xc5\xc6\x0f\xd2\xae" +
	"\xe58\xa3\x9e6C\xe9&\xf5\x91\x84\xe6\xd5\x1fy\xc7" +
	"\xfe\xff\xe6\xfe]\xaa|O:\x96\xd0L`\x8c+@" +
	"\xd6\xe75\xcc\x82\x86\xd9v\xb9\xd3\xbaB\xa0T\xbf\xd4" +
	"\xc9(]\xb2\xc6:u2\x1a\xd3\xedN\x9eB\x85\x8c" +
	"\xc1X\xad\xf6\\\xc8V\xec\xea\"vL\xed\x81\xa2\xda" +
	"\x042\x15\xb0\xf5\xa1\x17<\x1b%\xbb\x02\x9b\xdb\x02J" +
	"\x174I\xfdf_\xea#\x1e\x09\xc3\xbe\xbdG\xa91" +
	"\xa5\xf7R\x0a\xcf\xbb\x04\xbe\xa5c\xe9Cb\xd8X\xe1" +
	"y\xff,@\xe9\xc3D\xe1\xc96\x15\x9e=\xe9\xcf}" +
	"t\xf5\xa8\xd3\xaf[\x9er\xad\xa4\xd7\xe4\xeb kd" +
	"Rj\xeb\xd4\xcd\xc4\x9f\x07Y'\xf5\xa3\xd4\xa9\xdb\xa5" +
	"N\xbf\xcd\xf2\x94k\x9e\xba\xe94\x81\xf6\x8c\x80\x82T" +
	">\x97\xc6\xf4\x97&\x02\x14\xa4@k\xbb\xbb\xb3\x88f" +
	"\x98k\x915\xbe\xfe\xd5\xbe\xa3RjL{\x8f\xc7\x1a" +
	"!\x14\xeb\x8dp\x90\xbbK\xb6\xc4\xaf\xbdB\x91\xa8." +
	"\xf2\x00%\x8e\xb9@.\x82Pw(\xae\xdd/9f" +
	"J\xba\xec\x8d\x92\xba\xe02\xa2\xc4\xfd\xf0Y)\xee\x87" +
	"\xf7Kq/\xafRt\x19\x97\x9d\x8d\xafR\x14\x85[" +
	"%\x9b\xc1\xb2\x03\xf9\x0bP\x14}Qi\x04\"\x8a\xf3" +
	"\x1c\xcb$\x13\xc3\xe4i\x04\xe3\x0cF\x01PTn\x94" +
	"\xd8\x9b2! W\x17<ylw\xeb,\x9b\x1f=" +
	"l6\xe4F\xb7\xa4N\xb5\x05\xa5Lf\x1b\xe5_\x8d" +
	"\xad\x91w\x04tf\xc8;\x01\x1dl\xa5\xbc\x0b\x90a" +
	"\x19y\x87`\x8d\xf1Q\x9f\xbc\x0b\xf0\xae\x0cG\x18o" +
	"\xaby\xbd\xa9\x0e\xdf\x9f\x0f\xc8c\xec\xe5>y\x8c=" +
	"\x7fV^\x09x\xbeO^\x09x\xfaG\x00\xb8\xc2x" +
	"\xfaA\x00\\i<=-/\x08<\xb9GR\xe71" +
	"\xeab\x95\xbc\xac\x83\xbd\xc6w\xe8O\xce\xf8\xc6\xb4\xbc" +
	"mp\x7f\x9f\xbcmp\xdf\xd5\xf2\xb6\xc1=\xdb\x01\xb2" +
	"\xa2\x1ed\xf9t\x10U\xe6-\xb9\xa9\xe9|\xa8\xccK" +
	"S\xcf\x07\xe4E\x15\x8dNN\xd0\xac\x154\x92\xb0y" +
	"?d-\x1e4\xaf\x15B.\xb0=7\x1b\xf8\xc1\x99" +
	"*\x0f\xc5<_\xc8\xce4\xa4\x7fg\xdav\x95\xb7q" +
	"L\x84\xc2\x07\xc8\xce\x05\x9c(\\\xf5y\xad\xd6!\xac" +
	"C\x0d\xe1\x8c\xb8'\x85r<\x08G\x98\xa1o\x9b\x03" +
	"\xc4\xf5\x03\x9e'\xe5n\x14\x90j3\xb0p%dm" +
	"_\x14,1\xdd\xa8\x16g\x16\xa6}\xdb\xcaq\x8b\x07" +
	"\xb9\x999nF\xa6\xe7\xbb\xc2\x9f\xe040?+\xea" +
	"\xd3Q(\x1c!\xb5\x10\xdd\x0cT\xd6\x7f{\x9ecr" +
	"7\xb3\xb4\x02S\x9fg2\x8c\x89\xd6g\xbb\x0c\xc3o" +
	"}~\xc90\xae\x8e\x92\xc3\x190Im\x94W\xdc\xa8" +
	"\x99(\xe1v\xd0=\xa74\xd4\xd4\xcd\x9f\x96\xc9\xc5O" +
	"\xd0\xee~N\x06\xbac\xdd\xfcY\x19X~\x86\xf0\x97" +
	"\x08_\x11\x07\xc6_\x94\xba\xf0\x0b\x84\xbf\x86qz\"" +
	"\xe9\xe6\xaf\xe2O\x00\xca\xaf\x13\xfe\x0eYW\xddJ6" +
	"\xbd-\x9by\x8b\xe0\x0f1\xce~$\xe1\xf4\xbe4\xd2" +
	"\xde#\xbcC\x8bU|\xf9\xe9\"m\x02`B#Y" +
	"F\xf0\xaa\xf8\x13%\xdd\x9a\x94e\x84\xaf%<\x17\x87" +
	"\xc5\xd7h$\x9b\xf2\x84o\"\xbc7\x0e\x8bo\xd4h" +
	"\x94\x1b\x08\xdf\xaa\xc5\xe7x\x0f\xed\x02\x89\xcb\xf0\xf7." +
	"-\xbe?v\x0e\x00\xdbA\xdd\x96/\"\xfcR->" +
	"\xe2W\x90q\xa8\xd10/N\xc2\xe5R\xe4\xae\x04`" +
	"\x07e\xbf\x07\x08\xbfJ\x8b-\x05\xf9\x89\x12\xd9\xfe$" +
	"\xe1u-\x0e\xdf\xe7\x00XM#\x0b\xc5!\xfc\xb4\x16" +
	"\x87\xef{\x01XC#\x0b%$\xfc&m\xa9\x16\x11" +
	"Uy\xd0v\xef\xa8-qdhx\x1c\x97\xbfGl" +
	"\xbbUM\xa5\xde\xb4]\xc2l\x8a\xc3v\xd6\xc0\xde\x16" +
	"K\xc5YU3\x0d\xab\xc9,\xd8\x9b\xfe\xc6\x97,\xe6" +
	"->\xc3\xde\xf4\xb7\xcd\x92R\xe9\xab\xc2e\xee\x7f\xfa" +
	"\x9e\xe3\xb4\xdd\xb5J\xc6T\xb7Csf\xd9\x195#" +
	"\xe5A|\x19g\x99.\xe5\xc7\xa3By\xdd\xa7\xed\xaa" +
	")\x81\xa0\xa7t&\xcf\xb7\x85\x1b\xaaK\xeb\xee\xd1\xa5" +
	"\xf7\xe8\xb9[m8\xdc?\x8e\xc2\xf1L;\\X\x12" +
	"\xb7\xff\x8f\xe4\\-\xab\xcdJ]\xbc\xa8\xcc\x0bR\x1f" +
	"\x9a\x1f\x94\xc3\xed\xd2\x92OG\xb0\x07\xa4\xf2\x80\xa5]" +
	")ma\xc7\xf68\xac}\xb1\x86g\xea~[\x12U" +
	".\\\xa8\x0b\xcc%M\xc6:\xd7\xb2\x0aa\xf2\xe1\"" +
	"\xcf\xe4a\xd6\xf6\\\x19;\x97\x87\x9e1!\x0f\xbd\x95" +
	"\x03\xed\xe26\x11\x9d\xff;\x00\x00\xff\xff~\xf9\x83\x19"

func RegisterCarSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_8e2af1e708af8b8d,
		Nodes: []uint64{
			0x80366e0e804ecc1d,
			0x888ad6581cf0aacb,
			0x8c69372490aaa9da,
			0x8f162eeb14bfc0ec,
			0x8ff333ebac1fdf36,
			0x90d78e84616e17d4,
			0x93fc580a35339568,
			0x95551e5b1edaf451,
			0x9622723fcbd14c2e,
			0x962b56180c9359ce,
			0x991a37a6155935a3,
			0x9b1657f34caf3ad3,
			0x9d151e3f28616a12,
			0x9da4fa09e052903c,
			0x9fd95523d8dc40ce,
			0xa334472e045533b3,
			0xb20e386e0e0ba8d3,
			0xb581b23b1c89dda3,
			0xbaa8c5d505f727de,
			0xc342cefc303e9b8e,
			0xd661512be2def77f,
			0xd895c87c4eb03a38,
			0xe004ca45136f6a89,
			0xe16100205414717c,
			0xe40f3a917d908282,
			0xe64e81478e6e60af,
			0xe836349c6056b0c9,
			0xe8a86679ebba76ad,
			0xe97275a919432828,
			0xf5a5e26c954e339e,
			0xf7119bb759d1d691,
			0xf78829049ab814af,
			0xff5ca6835b4acef6,
			0xff99e3682a833c51,
		},
		Compressed: true,
	})
}
